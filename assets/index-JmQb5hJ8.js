(function polyfill() {
  const relList = document.createElement("link").relList;
  if (relList && relList.supports && relList.supports("modulepreload")) {
    return;
  }
  for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
    processPreload(link);
  }
  new MutationObserver((mutations) => {
    for (const mutation of mutations) {
      if (mutation.type !== "childList") {
        continue;
      }
      for (const node of mutation.addedNodes) {
        if (node.tagName === "LINK" && node.rel === "modulepreload")
          processPreload(node);
      }
    }
  }).observe(document, { childList: true, subtree: true });
  function getFetchOpts(link) {
    const fetchOpts = {};
    if (link.integrity) fetchOpts.integrity = link.integrity;
    if (link.referrerPolicy) fetchOpts.referrerPolicy = link.referrerPolicy;
    if (link.crossOrigin === "use-credentials")
      fetchOpts.credentials = "include";
    else if (link.crossOrigin === "anonymous") fetchOpts.credentials = "omit";
    else fetchOpts.credentials = "same-origin";
    return fetchOpts;
  }
  function processPreload(link) {
    if (link.ep)
      return;
    link.ep = true;
    const fetchOpts = getFetchOpts(link);
    fetch(link.href, fetchOpts);
  }
})();
function getDefaultExportFromCjs(x2) {
  return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
}
var jsxRuntime = { exports: {} };
var reactJsxRuntime_production_min = {};
var react = { exports: {} };
var react_production_min = {};
/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var l$1 = Symbol.for("react.element"), n$1 = Symbol.for("react.portal"), p$2 = Symbol.for("react.fragment"), q$1 = Symbol.for("react.strict_mode"), r = Symbol.for("react.profiler"), t = Symbol.for("react.provider"), u = Symbol.for("react.context"), v$1 = Symbol.for("react.forward_ref"), w = Symbol.for("react.suspense"), x = Symbol.for("react.memo"), y = Symbol.for("react.lazy"), z$1 = Symbol.iterator;
function A$1(a) {
  if (null === a || "object" !== typeof a) return null;
  a = z$1 && a[z$1] || a["@@iterator"];
  return "function" === typeof a ? a : null;
}
var B$1 = { isMounted: function() {
  return false;
}, enqueueForceUpdate: function() {
}, enqueueReplaceState: function() {
}, enqueueSetState: function() {
} }, C$1 = Object.assign, D$1 = {};
function E$1(a, b, e) {
  this.props = a;
  this.context = b;
  this.refs = D$1;
  this.updater = e || B$1;
}
E$1.prototype.isReactComponent = {};
E$1.prototype.setState = function(a, b) {
  if ("object" !== typeof a && "function" !== typeof a && null != a) throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
  this.updater.enqueueSetState(this, a, b, "setState");
};
E$1.prototype.forceUpdate = function(a) {
  this.updater.enqueueForceUpdate(this, a, "forceUpdate");
};
function F() {
}
F.prototype = E$1.prototype;
function G$1(a, b, e) {
  this.props = a;
  this.context = b;
  this.refs = D$1;
  this.updater = e || B$1;
}
var H$1 = G$1.prototype = new F();
H$1.constructor = G$1;
C$1(H$1, E$1.prototype);
H$1.isPureReactComponent = true;
var I$1 = Array.isArray, J = Object.prototype.hasOwnProperty, K$1 = { current: null }, L$1 = { key: true, ref: true, __self: true, __source: true };
function M$1(a, b, e) {
  var d, c = {}, k2 = null, h = null;
  if (null != b) for (d in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (k2 = "" + b.key), b) J.call(b, d) && !L$1.hasOwnProperty(d) && (c[d] = b[d]);
  var g = arguments.length - 2;
  if (1 === g) c.children = e;
  else if (1 < g) {
    for (var f2 = Array(g), m2 = 0; m2 < g; m2++) f2[m2] = arguments[m2 + 2];
    c.children = f2;
  }
  if (a && a.defaultProps) for (d in g = a.defaultProps, g) void 0 === c[d] && (c[d] = g[d]);
  return { $$typeof: l$1, type: a, key: k2, ref: h, props: c, _owner: K$1.current };
}
function N$1(a, b) {
  return { $$typeof: l$1, type: a.type, key: b, ref: a.ref, props: a.props, _owner: a._owner };
}
function O$1(a) {
  return "object" === typeof a && null !== a && a.$$typeof === l$1;
}
function escape(a) {
  var b = { "=": "=0", ":": "=2" };
  return "$" + a.replace(/[=:]/g, function(a2) {
    return b[a2];
  });
}
var P$1 = /\/+/g;
function Q$1(a, b) {
  return "object" === typeof a && null !== a && null != a.key ? escape("" + a.key) : b.toString(36);
}
function R$1(a, b, e, d, c) {
  var k2 = typeof a;
  if ("undefined" === k2 || "boolean" === k2) a = null;
  var h = false;
  if (null === a) h = true;
  else switch (k2) {
    case "string":
    case "number":
      h = true;
      break;
    case "object":
      switch (a.$$typeof) {
        case l$1:
        case n$1:
          h = true;
      }
  }
  if (h) return h = a, c = c(h), a = "" === d ? "." + Q$1(h, 0) : d, I$1(c) ? (e = "", null != a && (e = a.replace(P$1, "$&/") + "/"), R$1(c, b, e, "", function(a2) {
    return a2;
  })) : null != c && (O$1(c) && (c = N$1(c, e + (!c.key || h && h.key === c.key ? "" : ("" + c.key).replace(P$1, "$&/") + "/") + a)), b.push(c)), 1;
  h = 0;
  d = "" === d ? "." : d + ":";
  if (I$1(a)) for (var g = 0; g < a.length; g++) {
    k2 = a[g];
    var f2 = d + Q$1(k2, g);
    h += R$1(k2, b, e, f2, c);
  }
  else if (f2 = A$1(a), "function" === typeof f2) for (a = f2.call(a), g = 0; !(k2 = a.next()).done; ) k2 = k2.value, f2 = d + Q$1(k2, g++), h += R$1(k2, b, e, f2, c);
  else if ("object" === k2) throw b = String(a), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b ? "object with keys {" + Object.keys(a).join(", ") + "}" : b) + "). If you meant to render a collection of children, use an array instead.");
  return h;
}
function S$1(a, b, e) {
  if (null == a) return a;
  var d = [], c = 0;
  R$1(a, d, "", "", function(a2) {
    return b.call(e, a2, c++);
  });
  return d;
}
function T$1(a) {
  if (-1 === a._status) {
    var b = a._result;
    b = b();
    b.then(function(b2) {
      if (0 === a._status || -1 === a._status) a._status = 1, a._result = b2;
    }, function(b2) {
      if (0 === a._status || -1 === a._status) a._status = 2, a._result = b2;
    });
    -1 === a._status && (a._status = 0, a._result = b);
  }
  if (1 === a._status) return a._result.default;
  throw a._result;
}
var U$1 = { current: null }, V$1 = { transition: null }, W$1 = { ReactCurrentDispatcher: U$1, ReactCurrentBatchConfig: V$1, ReactCurrentOwner: K$1 };
function X$1() {
  throw Error("act(...) is not supported in production builds of React.");
}
react_production_min.Children = { map: S$1, forEach: function(a, b, e) {
  S$1(a, function() {
    b.apply(this, arguments);
  }, e);
}, count: function(a) {
  var b = 0;
  S$1(a, function() {
    b++;
  });
  return b;
}, toArray: function(a) {
  return S$1(a, function(a2) {
    return a2;
  }) || [];
}, only: function(a) {
  if (!O$1(a)) throw Error("React.Children.only expected to receive a single React element child.");
  return a;
} };
react_production_min.Component = E$1;
react_production_min.Fragment = p$2;
react_production_min.Profiler = r;
react_production_min.PureComponent = G$1;
react_production_min.StrictMode = q$1;
react_production_min.Suspense = w;
react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W$1;
react_production_min.act = X$1;
react_production_min.cloneElement = function(a, b, e) {
  if (null === a || void 0 === a) throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a + ".");
  var d = C$1({}, a.props), c = a.key, k2 = a.ref, h = a._owner;
  if (null != b) {
    void 0 !== b.ref && (k2 = b.ref, h = K$1.current);
    void 0 !== b.key && (c = "" + b.key);
    if (a.type && a.type.defaultProps) var g = a.type.defaultProps;
    for (f2 in b) J.call(b, f2) && !L$1.hasOwnProperty(f2) && (d[f2] = void 0 === b[f2] && void 0 !== g ? g[f2] : b[f2]);
  }
  var f2 = arguments.length - 2;
  if (1 === f2) d.children = e;
  else if (1 < f2) {
    g = Array(f2);
    for (var m2 = 0; m2 < f2; m2++) g[m2] = arguments[m2 + 2];
    d.children = g;
  }
  return { $$typeof: l$1, type: a.type, key: c, ref: k2, props: d, _owner: h };
};
react_production_min.createContext = function(a) {
  a = { $$typeof: u, _currentValue: a, _currentValue2: a, _threadCount: 0, Provider: null, Consumer: null, _defaultValue: null, _globalName: null };
  a.Provider = { $$typeof: t, _context: a };
  return a.Consumer = a;
};
react_production_min.createElement = M$1;
react_production_min.createFactory = function(a) {
  var b = M$1.bind(null, a);
  b.type = a;
  return b;
};
react_production_min.createRef = function() {
  return { current: null };
};
react_production_min.forwardRef = function(a) {
  return { $$typeof: v$1, render: a };
};
react_production_min.isValidElement = O$1;
react_production_min.lazy = function(a) {
  return { $$typeof: y, _payload: { _status: -1, _result: a }, _init: T$1 };
};
react_production_min.memo = function(a, b) {
  return { $$typeof: x, type: a, compare: void 0 === b ? null : b };
};
react_production_min.startTransition = function(a) {
  var b = V$1.transition;
  V$1.transition = {};
  try {
    a();
  } finally {
    V$1.transition = b;
  }
};
react_production_min.unstable_act = X$1;
react_production_min.useCallback = function(a, b) {
  return U$1.current.useCallback(a, b);
};
react_production_min.useContext = function(a) {
  return U$1.current.useContext(a);
};
react_production_min.useDebugValue = function() {
};
react_production_min.useDeferredValue = function(a) {
  return U$1.current.useDeferredValue(a);
};
react_production_min.useEffect = function(a, b) {
  return U$1.current.useEffect(a, b);
};
react_production_min.useId = function() {
  return U$1.current.useId();
};
react_production_min.useImperativeHandle = function(a, b, e) {
  return U$1.current.useImperativeHandle(a, b, e);
};
react_production_min.useInsertionEffect = function(a, b) {
  return U$1.current.useInsertionEffect(a, b);
};
react_production_min.useLayoutEffect = function(a, b) {
  return U$1.current.useLayoutEffect(a, b);
};
react_production_min.useMemo = function(a, b) {
  return U$1.current.useMemo(a, b);
};
react_production_min.useReducer = function(a, b, e) {
  return U$1.current.useReducer(a, b, e);
};
react_production_min.useRef = function(a) {
  return U$1.current.useRef(a);
};
react_production_min.useState = function(a) {
  return U$1.current.useState(a);
};
react_production_min.useSyncExternalStore = function(a, b, e) {
  return U$1.current.useSyncExternalStore(a, b, e);
};
react_production_min.useTransition = function() {
  return U$1.current.useTransition();
};
react_production_min.version = "18.3.1";
{
  react.exports = react_production_min;
}
var reactExports = react.exports;
const React = /* @__PURE__ */ getDefaultExportFromCjs(reactExports);
/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var f = reactExports, k = Symbol.for("react.element"), l = Symbol.for("react.fragment"), m$1 = Object.prototype.hasOwnProperty, n = f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, p$1 = { key: true, ref: true, __self: true, __source: true };
function q(c, a, g) {
  var b, d = {}, e = null, h = null;
  void 0 !== g && (e = "" + g);
  void 0 !== a.key && (e = "" + a.key);
  void 0 !== a.ref && (h = a.ref);
  for (b in a) m$1.call(a, b) && !p$1.hasOwnProperty(b) && (d[b] = a[b]);
  if (c && c.defaultProps) for (b in a = c.defaultProps, a) void 0 === d[b] && (d[b] = a[b]);
  return { $$typeof: k, type: c, key: e, ref: h, props: d, _owner: n.current };
}
reactJsxRuntime_production_min.Fragment = l;
reactJsxRuntime_production_min.jsx = q;
reactJsxRuntime_production_min.jsxs = q;
{
  jsxRuntime.exports = reactJsxRuntime_production_min;
}
var jsxRuntimeExports = jsxRuntime.exports;
var reactDom = { exports: {} };
var reactDom_production_min = {};
var scheduler = { exports: {} };
var scheduler_production_min = {};
/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
(function(exports) {
  function f2(a, b) {
    var c = a.length;
    a.push(b);
    a: for (; 0 < c; ) {
      var d = c - 1 >>> 1, e = a[d];
      if (0 < g(e, b)) a[d] = b, a[c] = e, c = d;
      else break a;
    }
  }
  function h(a) {
    return 0 === a.length ? null : a[0];
  }
  function k2(a) {
    if (0 === a.length) return null;
    var b = a[0], c = a.pop();
    if (c !== b) {
      a[0] = c;
      a: for (var d = 0, e = a.length, w2 = e >>> 1; d < w2; ) {
        var m2 = 2 * (d + 1) - 1, C2 = a[m2], n2 = m2 + 1, x2 = a[n2];
        if (0 > g(C2, c)) n2 < e && 0 > g(x2, C2) ? (a[d] = x2, a[n2] = c, d = n2) : (a[d] = C2, a[m2] = c, d = m2);
        else if (n2 < e && 0 > g(x2, c)) a[d] = x2, a[n2] = c, d = n2;
        else break a;
      }
    }
    return b;
  }
  function g(a, b) {
    var c = a.sortIndex - b.sortIndex;
    return 0 !== c ? c : a.id - b.id;
  }
  if ("object" === typeof performance && "function" === typeof performance.now) {
    var l2 = performance;
    exports.unstable_now = function() {
      return l2.now();
    };
  } else {
    var p2 = Date, q2 = p2.now();
    exports.unstable_now = function() {
      return p2.now() - q2;
    };
  }
  var r2 = [], t2 = [], u2 = 1, v2 = null, y2 = 3, z2 = false, A2 = false, B2 = false, D2 = "function" === typeof setTimeout ? setTimeout : null, E2 = "function" === typeof clearTimeout ? clearTimeout : null, F2 = "undefined" !== typeof setImmediate ? setImmediate : null;
  "undefined" !== typeof navigator && void 0 !== navigator.scheduling && void 0 !== navigator.scheduling.isInputPending && navigator.scheduling.isInputPending.bind(navigator.scheduling);
  function G2(a) {
    for (var b = h(t2); null !== b; ) {
      if (null === b.callback) k2(t2);
      else if (b.startTime <= a) k2(t2), b.sortIndex = b.expirationTime, f2(r2, b);
      else break;
      b = h(t2);
    }
  }
  function H2(a) {
    B2 = false;
    G2(a);
    if (!A2) if (null !== h(r2)) A2 = true, I2(J2);
    else {
      var b = h(t2);
      null !== b && K2(H2, b.startTime - a);
    }
  }
  function J2(a, b) {
    A2 = false;
    B2 && (B2 = false, E2(L2), L2 = -1);
    z2 = true;
    var c = y2;
    try {
      G2(b);
      for (v2 = h(r2); null !== v2 && (!(v2.expirationTime > b) || a && !M2()); ) {
        var d = v2.callback;
        if ("function" === typeof d) {
          v2.callback = null;
          y2 = v2.priorityLevel;
          var e = d(v2.expirationTime <= b);
          b = exports.unstable_now();
          "function" === typeof e ? v2.callback = e : v2 === h(r2) && k2(r2);
          G2(b);
        } else k2(r2);
        v2 = h(r2);
      }
      if (null !== v2) var w2 = true;
      else {
        var m2 = h(t2);
        null !== m2 && K2(H2, m2.startTime - b);
        w2 = false;
      }
      return w2;
    } finally {
      v2 = null, y2 = c, z2 = false;
    }
  }
  var N2 = false, O2 = null, L2 = -1, P2 = 5, Q2 = -1;
  function M2() {
    return exports.unstable_now() - Q2 < P2 ? false : true;
  }
  function R2() {
    if (null !== O2) {
      var a = exports.unstable_now();
      Q2 = a;
      var b = true;
      try {
        b = O2(true, a);
      } finally {
        b ? S2() : (N2 = false, O2 = null);
      }
    } else N2 = false;
  }
  var S2;
  if ("function" === typeof F2) S2 = function() {
    F2(R2);
  };
  else if ("undefined" !== typeof MessageChannel) {
    var T2 = new MessageChannel(), U2 = T2.port2;
    T2.port1.onmessage = R2;
    S2 = function() {
      U2.postMessage(null);
    };
  } else S2 = function() {
    D2(R2, 0);
  };
  function I2(a) {
    O2 = a;
    N2 || (N2 = true, S2());
  }
  function K2(a, b) {
    L2 = D2(function() {
      a(exports.unstable_now());
    }, b);
  }
  exports.unstable_IdlePriority = 5;
  exports.unstable_ImmediatePriority = 1;
  exports.unstable_LowPriority = 4;
  exports.unstable_NormalPriority = 3;
  exports.unstable_Profiling = null;
  exports.unstable_UserBlockingPriority = 2;
  exports.unstable_cancelCallback = function(a) {
    a.callback = null;
  };
  exports.unstable_continueExecution = function() {
    A2 || z2 || (A2 = true, I2(J2));
  };
  exports.unstable_forceFrameRate = function(a) {
    0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : P2 = 0 < a ? Math.floor(1e3 / a) : 5;
  };
  exports.unstable_getCurrentPriorityLevel = function() {
    return y2;
  };
  exports.unstable_getFirstCallbackNode = function() {
    return h(r2);
  };
  exports.unstable_next = function(a) {
    switch (y2) {
      case 1:
      case 2:
      case 3:
        var b = 3;
        break;
      default:
        b = y2;
    }
    var c = y2;
    y2 = b;
    try {
      return a();
    } finally {
      y2 = c;
    }
  };
  exports.unstable_pauseExecution = function() {
  };
  exports.unstable_requestPaint = function() {
  };
  exports.unstable_runWithPriority = function(a, b) {
    switch (a) {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        break;
      default:
        a = 3;
    }
    var c = y2;
    y2 = a;
    try {
      return b();
    } finally {
      y2 = c;
    }
  };
  exports.unstable_scheduleCallback = function(a, b, c) {
    var d = exports.unstable_now();
    "object" === typeof c && null !== c ? (c = c.delay, c = "number" === typeof c && 0 < c ? d + c : d) : c = d;
    switch (a) {
      case 1:
        var e = -1;
        break;
      case 2:
        e = 250;
        break;
      case 5:
        e = 1073741823;
        break;
      case 4:
        e = 1e4;
        break;
      default:
        e = 5e3;
    }
    e = c + e;
    a = { id: u2++, callback: b, priorityLevel: a, startTime: c, expirationTime: e, sortIndex: -1 };
    c > d ? (a.sortIndex = c, f2(t2, a), null === h(r2) && a === h(t2) && (B2 ? (E2(L2), L2 = -1) : B2 = true, K2(H2, c - d))) : (a.sortIndex = e, f2(r2, a), A2 || z2 || (A2 = true, I2(J2)));
    return a;
  };
  exports.unstable_shouldYield = M2;
  exports.unstable_wrapCallback = function(a) {
    var b = y2;
    return function() {
      var c = y2;
      y2 = b;
      try {
        return a.apply(this, arguments);
      } finally {
        y2 = c;
      }
    };
  };
})(scheduler_production_min);
{
  scheduler.exports = scheduler_production_min;
}
var schedulerExports = scheduler.exports;
/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var aa = reactExports, ca = schedulerExports;
function p(a) {
  for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++) b += "&args[]=" + encodeURIComponent(arguments[c]);
  return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
}
var da = /* @__PURE__ */ new Set(), ea = {};
function fa(a, b) {
  ha(a, b);
  ha(a + "Capture", b);
}
function ha(a, b) {
  ea[a] = b;
  for (a = 0; a < b.length; a++) da.add(b[a]);
}
var ia = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement), ja = Object.prototype.hasOwnProperty, ka = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/, la = {}, ma = {};
function oa(a) {
  if (ja.call(ma, a)) return true;
  if (ja.call(la, a)) return false;
  if (ka.test(a)) return ma[a] = true;
  la[a] = true;
  return false;
}
function pa(a, b, c, d) {
  if (null !== c && 0 === c.type) return false;
  switch (typeof b) {
    case "function":
    case "symbol":
      return true;
    case "boolean":
      if (d) return false;
      if (null !== c) return !c.acceptsBooleans;
      a = a.toLowerCase().slice(0, 5);
      return "data-" !== a && "aria-" !== a;
    default:
      return false;
  }
}
function qa(a, b, c, d) {
  if (null === b || "undefined" === typeof b || pa(a, b, c, d)) return true;
  if (d) return false;
  if (null !== c) switch (c.type) {
    case 3:
      return !b;
    case 4:
      return false === b;
    case 5:
      return isNaN(b);
    case 6:
      return isNaN(b) || 1 > b;
  }
  return false;
}
function v(a, b, c, d, e, f2, g) {
  this.acceptsBooleans = 2 === b || 3 === b || 4 === b;
  this.attributeName = d;
  this.attributeNamespace = e;
  this.mustUseProperty = c;
  this.propertyName = a;
  this.type = b;
  this.sanitizeURL = f2;
  this.removeEmptyString = g;
}
var z = {};
"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a) {
  z[a] = new v(a, 0, false, a, null, false, false);
});
[["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(a) {
  var b = a[0];
  z[b] = new v(b, 1, false, a[1], null, false, false);
});
["contentEditable", "draggable", "spellCheck", "value"].forEach(function(a) {
  z[a] = new v(a, 2, false, a.toLowerCase(), null, false, false);
});
["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(a) {
  z[a] = new v(a, 2, false, a, null, false, false);
});
"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a) {
  z[a] = new v(a, 3, false, a.toLowerCase(), null, false, false);
});
["checked", "multiple", "muted", "selected"].forEach(function(a) {
  z[a] = new v(a, 3, true, a, null, false, false);
});
["capture", "download"].forEach(function(a) {
  z[a] = new v(a, 4, false, a, null, false, false);
});
["cols", "rows", "size", "span"].forEach(function(a) {
  z[a] = new v(a, 6, false, a, null, false, false);
});
["rowSpan", "start"].forEach(function(a) {
  z[a] = new v(a, 5, false, a.toLowerCase(), null, false, false);
});
var ra = /[\-:]([a-z])/g;
function sa(a) {
  return a[1].toUpperCase();
}
"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a) {
  var b = a.replace(
    ra,
    sa
  );
  z[b] = new v(b, 1, false, a, null, false, false);
});
"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a) {
  var b = a.replace(ra, sa);
  z[b] = new v(b, 1, false, a, "http://www.w3.org/1999/xlink", false, false);
});
["xml:base", "xml:lang", "xml:space"].forEach(function(a) {
  var b = a.replace(ra, sa);
  z[b] = new v(b, 1, false, a, "http://www.w3.org/XML/1998/namespace", false, false);
});
["tabIndex", "crossOrigin"].forEach(function(a) {
  z[a] = new v(a, 1, false, a.toLowerCase(), null, false, false);
});
z.xlinkHref = new v("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
["src", "href", "action", "formAction"].forEach(function(a) {
  z[a] = new v(a, 1, false, a.toLowerCase(), null, true, true);
});
function ta(a, b, c, d) {
  var e = z.hasOwnProperty(b) ? z[b] : null;
  if (null !== e ? 0 !== e.type : d || !(2 < b.length) || "o" !== b[0] && "O" !== b[0] || "n" !== b[1] && "N" !== b[1]) qa(b, c, e, d) && (c = null), d || null === e ? oa(b) && (null === c ? a.removeAttribute(b) : a.setAttribute(b, "" + c)) : e.mustUseProperty ? a[e.propertyName] = null === c ? 3 === e.type ? false : "" : c : (b = e.attributeName, d = e.attributeNamespace, null === c ? a.removeAttribute(b) : (e = e.type, c = 3 === e || 4 === e && true === c ? "" : "" + c, d ? a.setAttributeNS(d, b, c) : a.setAttribute(b, c)));
}
var ua = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, va = Symbol.for("react.element"), wa = Symbol.for("react.portal"), ya = Symbol.for("react.fragment"), za = Symbol.for("react.strict_mode"), Aa = Symbol.for("react.profiler"), Ba = Symbol.for("react.provider"), Ca = Symbol.for("react.context"), Da = Symbol.for("react.forward_ref"), Ea = Symbol.for("react.suspense"), Fa = Symbol.for("react.suspense_list"), Ga = Symbol.for("react.memo"), Ha = Symbol.for("react.lazy");
var Ia = Symbol.for("react.offscreen");
var Ja = Symbol.iterator;
function Ka(a) {
  if (null === a || "object" !== typeof a) return null;
  a = Ja && a[Ja] || a["@@iterator"];
  return "function" === typeof a ? a : null;
}
var A = Object.assign, La;
function Ma(a) {
  if (void 0 === La) try {
    throw Error();
  } catch (c) {
    var b = c.stack.trim().match(/\n( *(at )?)/);
    La = b && b[1] || "";
  }
  return "\n" + La + a;
}
var Na = false;
function Oa(a, b) {
  if (!a || Na) return "";
  Na = true;
  var c = Error.prepareStackTrace;
  Error.prepareStackTrace = void 0;
  try {
    if (b) if (b = function() {
      throw Error();
    }, Object.defineProperty(b.prototype, "props", { set: function() {
      throw Error();
    } }), "object" === typeof Reflect && Reflect.construct) {
      try {
        Reflect.construct(b, []);
      } catch (l2) {
        var d = l2;
      }
      Reflect.construct(a, [], b);
    } else {
      try {
        b.call();
      } catch (l2) {
        d = l2;
      }
      a.call(b.prototype);
    }
    else {
      try {
        throw Error();
      } catch (l2) {
        d = l2;
      }
      a();
    }
  } catch (l2) {
    if (l2 && d && "string" === typeof l2.stack) {
      for (var e = l2.stack.split("\n"), f2 = d.stack.split("\n"), g = e.length - 1, h = f2.length - 1; 1 <= g && 0 <= h && e[g] !== f2[h]; ) h--;
      for (; 1 <= g && 0 <= h; g--, h--) if (e[g] !== f2[h]) {
        if (1 !== g || 1 !== h) {
          do
            if (g--, h--, 0 > h || e[g] !== f2[h]) {
              var k2 = "\n" + e[g].replace(" at new ", " at ");
              a.displayName && k2.includes("<anonymous>") && (k2 = k2.replace("<anonymous>", a.displayName));
              return k2;
            }
          while (1 <= g && 0 <= h);
        }
        break;
      }
    }
  } finally {
    Na = false, Error.prepareStackTrace = c;
  }
  return (a = a ? a.displayName || a.name : "") ? Ma(a) : "";
}
function Pa(a) {
  switch (a.tag) {
    case 5:
      return Ma(a.type);
    case 16:
      return Ma("Lazy");
    case 13:
      return Ma("Suspense");
    case 19:
      return Ma("SuspenseList");
    case 0:
    case 2:
    case 15:
      return a = Oa(a.type, false), a;
    case 11:
      return a = Oa(a.type.render, false), a;
    case 1:
      return a = Oa(a.type, true), a;
    default:
      return "";
  }
}
function Qa(a) {
  if (null == a) return null;
  if ("function" === typeof a) return a.displayName || a.name || null;
  if ("string" === typeof a) return a;
  switch (a) {
    case ya:
      return "Fragment";
    case wa:
      return "Portal";
    case Aa:
      return "Profiler";
    case za:
      return "StrictMode";
    case Ea:
      return "Suspense";
    case Fa:
      return "SuspenseList";
  }
  if ("object" === typeof a) switch (a.$$typeof) {
    case Ca:
      return (a.displayName || "Context") + ".Consumer";
    case Ba:
      return (a._context.displayName || "Context") + ".Provider";
    case Da:
      var b = a.render;
      a = a.displayName;
      a || (a = b.displayName || b.name || "", a = "" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
      return a;
    case Ga:
      return b = a.displayName || null, null !== b ? b : Qa(a.type) || "Memo";
    case Ha:
      b = a._payload;
      a = a._init;
      try {
        return Qa(a(b));
      } catch (c) {
      }
  }
  return null;
}
function Ra(a) {
  var b = a.type;
  switch (a.tag) {
    case 24:
      return "Cache";
    case 9:
      return (b.displayName || "Context") + ".Consumer";
    case 10:
      return (b._context.displayName || "Context") + ".Provider";
    case 18:
      return "DehydratedFragment";
    case 11:
      return a = b.render, a = a.displayName || a.name || "", b.displayName || ("" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
    case 7:
      return "Fragment";
    case 5:
      return b;
    case 4:
      return "Portal";
    case 3:
      return "Root";
    case 6:
      return "Text";
    case 16:
      return Qa(b);
    case 8:
      return b === za ? "StrictMode" : "Mode";
    case 22:
      return "Offscreen";
    case 12:
      return "Profiler";
    case 21:
      return "Scope";
    case 13:
      return "Suspense";
    case 19:
      return "SuspenseList";
    case 25:
      return "TracingMarker";
    case 1:
    case 0:
    case 17:
    case 2:
    case 14:
    case 15:
      if ("function" === typeof b) return b.displayName || b.name || null;
      if ("string" === typeof b) return b;
  }
  return null;
}
function Sa(a) {
  switch (typeof a) {
    case "boolean":
    case "number":
    case "string":
    case "undefined":
      return a;
    case "object":
      return a;
    default:
      return "";
  }
}
function Ta(a) {
  var b = a.type;
  return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b || "radio" === b);
}
function Ua(a) {
  var b = Ta(a) ? "checked" : "value", c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b), d = "" + a[b];
  if (!a.hasOwnProperty(b) && "undefined" !== typeof c && "function" === typeof c.get && "function" === typeof c.set) {
    var e = c.get, f2 = c.set;
    Object.defineProperty(a, b, { configurable: true, get: function() {
      return e.call(this);
    }, set: function(a2) {
      d = "" + a2;
      f2.call(this, a2);
    } });
    Object.defineProperty(a, b, { enumerable: c.enumerable });
    return { getValue: function() {
      return d;
    }, setValue: function(a2) {
      d = "" + a2;
    }, stopTracking: function() {
      a._valueTracker = null;
      delete a[b];
    } };
  }
}
function Va(a) {
  a._valueTracker || (a._valueTracker = Ua(a));
}
function Wa(a) {
  if (!a) return false;
  var b = a._valueTracker;
  if (!b) return true;
  var c = b.getValue();
  var d = "";
  a && (d = Ta(a) ? a.checked ? "true" : "false" : a.value);
  a = d;
  return a !== c ? (b.setValue(a), true) : false;
}
function Xa(a) {
  a = a || ("undefined" !== typeof document ? document : void 0);
  if ("undefined" === typeof a) return null;
  try {
    return a.activeElement || a.body;
  } catch (b) {
    return a.body;
  }
}
function Ya(a, b) {
  var c = b.checked;
  return A({}, b, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: null != c ? c : a._wrapperState.initialChecked });
}
function Za(a, b) {
  var c = null == b.defaultValue ? "" : b.defaultValue, d = null != b.checked ? b.checked : b.defaultChecked;
  c = Sa(null != b.value ? b.value : c);
  a._wrapperState = { initialChecked: d, initialValue: c, controlled: "checkbox" === b.type || "radio" === b.type ? null != b.checked : null != b.value };
}
function ab(a, b) {
  b = b.checked;
  null != b && ta(a, "checked", b, false);
}
function bb(a, b) {
  ab(a, b);
  var c = Sa(b.value), d = b.type;
  if (null != c) if ("number" === d) {
    if (0 === c && "" === a.value || a.value != c) a.value = "" + c;
  } else a.value !== "" + c && (a.value = "" + c);
  else if ("submit" === d || "reset" === d) {
    a.removeAttribute("value");
    return;
  }
  b.hasOwnProperty("value") ? cb(a, b.type, c) : b.hasOwnProperty("defaultValue") && cb(a, b.type, Sa(b.defaultValue));
  null == b.checked && null != b.defaultChecked && (a.defaultChecked = !!b.defaultChecked);
}
function db(a, b, c) {
  if (b.hasOwnProperty("value") || b.hasOwnProperty("defaultValue")) {
    var d = b.type;
    if (!("submit" !== d && "reset" !== d || void 0 !== b.value && null !== b.value)) return;
    b = "" + a._wrapperState.initialValue;
    c || b === a.value || (a.value = b);
    a.defaultValue = b;
  }
  c = a.name;
  "" !== c && (a.name = "");
  a.defaultChecked = !!a._wrapperState.initialChecked;
  "" !== c && (a.name = c);
}
function cb(a, b, c) {
  if ("number" !== b || Xa(a.ownerDocument) !== a) null == c ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c && (a.defaultValue = "" + c);
}
var eb = Array.isArray;
function fb(a, b, c, d) {
  a = a.options;
  if (b) {
    b = {};
    for (var e = 0; e < c.length; e++) b["$" + c[e]] = true;
    for (c = 0; c < a.length; c++) e = b.hasOwnProperty("$" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = true);
  } else {
    c = "" + Sa(c);
    b = null;
    for (e = 0; e < a.length; e++) {
      if (a[e].value === c) {
        a[e].selected = true;
        d && (a[e].defaultSelected = true);
        return;
      }
      null !== b || a[e].disabled || (b = a[e]);
    }
    null !== b && (b.selected = true);
  }
}
function gb(a, b) {
  if (null != b.dangerouslySetInnerHTML) throw Error(p(91));
  return A({}, b, { value: void 0, defaultValue: void 0, children: "" + a._wrapperState.initialValue });
}
function hb(a, b) {
  var c = b.value;
  if (null == c) {
    c = b.children;
    b = b.defaultValue;
    if (null != c) {
      if (null != b) throw Error(p(92));
      if (eb(c)) {
        if (1 < c.length) throw Error(p(93));
        c = c[0];
      }
      b = c;
    }
    null == b && (b = "");
    c = b;
  }
  a._wrapperState = { initialValue: Sa(c) };
}
function ib(a, b) {
  var c = Sa(b.value), d = Sa(b.defaultValue);
  null != c && (c = "" + c, c !== a.value && (a.value = c), null == b.defaultValue && a.defaultValue !== c && (a.defaultValue = c));
  null != d && (a.defaultValue = "" + d);
}
function jb(a) {
  var b = a.textContent;
  b === a._wrapperState.initialValue && "" !== b && null !== b && (a.value = b);
}
function kb(a) {
  switch (a) {
    case "svg":
      return "http://www.w3.org/2000/svg";
    case "math":
      return "http://www.w3.org/1998/Math/MathML";
    default:
      return "http://www.w3.org/1999/xhtml";
  }
}
function lb(a, b) {
  return null == a || "http://www.w3.org/1999/xhtml" === a ? kb(b) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b ? "http://www.w3.org/1999/xhtml" : a;
}
var mb, nb = function(a) {
  return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function(b, c, d, e) {
    MSApp.execUnsafeLocalFunction(function() {
      return a(b, c, d, e);
    });
  } : a;
}(function(a, b) {
  if ("http://www.w3.org/2000/svg" !== a.namespaceURI || "innerHTML" in a) a.innerHTML = b;
  else {
    mb = mb || document.createElement("div");
    mb.innerHTML = "<svg>" + b.valueOf().toString() + "</svg>";
    for (b = mb.firstChild; a.firstChild; ) a.removeChild(a.firstChild);
    for (; b.firstChild; ) a.appendChild(b.firstChild);
  }
});
function ob(a, b) {
  if (b) {
    var c = a.firstChild;
    if (c && c === a.lastChild && 3 === c.nodeType) {
      c.nodeValue = b;
      return;
    }
  }
  a.textContent = b;
}
var pb = {
  animationIterationCount: true,
  aspectRatio: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridArea: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
}, qb = ["Webkit", "ms", "Moz", "O"];
Object.keys(pb).forEach(function(a) {
  qb.forEach(function(b) {
    b = b + a.charAt(0).toUpperCase() + a.substring(1);
    pb[b] = pb[a];
  });
});
function rb(a, b, c) {
  return null == b || "boolean" === typeof b || "" === b ? "" : c || "number" !== typeof b || 0 === b || pb.hasOwnProperty(a) && pb[a] ? ("" + b).trim() : b + "px";
}
function sb(a, b) {
  a = a.style;
  for (var c in b) if (b.hasOwnProperty(c)) {
    var d = 0 === c.indexOf("--"), e = rb(c, b[c], d);
    "float" === c && (c = "cssFloat");
    d ? a.setProperty(c, e) : a[c] = e;
  }
}
var tb = A({ menuitem: true }, { area: true, base: true, br: true, col: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, meta: true, param: true, source: true, track: true, wbr: true });
function ub(a, b) {
  if (b) {
    if (tb[a] && (null != b.children || null != b.dangerouslySetInnerHTML)) throw Error(p(137, a));
    if (null != b.dangerouslySetInnerHTML) {
      if (null != b.children) throw Error(p(60));
      if ("object" !== typeof b.dangerouslySetInnerHTML || !("__html" in b.dangerouslySetInnerHTML)) throw Error(p(61));
    }
    if (null != b.style && "object" !== typeof b.style) throw Error(p(62));
  }
}
function vb(a, b) {
  if (-1 === a.indexOf("-")) return "string" === typeof b.is;
  switch (a) {
    case "annotation-xml":
    case "color-profile":
    case "font-face":
    case "font-face-src":
    case "font-face-uri":
    case "font-face-format":
    case "font-face-name":
    case "missing-glyph":
      return false;
    default:
      return true;
  }
}
var wb = null;
function xb(a) {
  a = a.target || a.srcElement || window;
  a.correspondingUseElement && (a = a.correspondingUseElement);
  return 3 === a.nodeType ? a.parentNode : a;
}
var yb = null, zb = null, Ab = null;
function Bb(a) {
  if (a = Cb(a)) {
    if ("function" !== typeof yb) throw Error(p(280));
    var b = a.stateNode;
    b && (b = Db(b), yb(a.stateNode, a.type, b));
  }
}
function Eb(a) {
  zb ? Ab ? Ab.push(a) : Ab = [a] : zb = a;
}
function Fb() {
  if (zb) {
    var a = zb, b = Ab;
    Ab = zb = null;
    Bb(a);
    if (b) for (a = 0; a < b.length; a++) Bb(b[a]);
  }
}
function Gb(a, b) {
  return a(b);
}
function Hb() {
}
var Ib = false;
function Jb(a, b, c) {
  if (Ib) return a(b, c);
  Ib = true;
  try {
    return Gb(a, b, c);
  } finally {
    if (Ib = false, null !== zb || null !== Ab) Hb(), Fb();
  }
}
function Kb(a, b) {
  var c = a.stateNode;
  if (null === c) return null;
  var d = Db(c);
  if (null === d) return null;
  c = d[b];
  a: switch (b) {
    case "onClick":
    case "onClickCapture":
    case "onDoubleClick":
    case "onDoubleClickCapture":
    case "onMouseDown":
    case "onMouseDownCapture":
    case "onMouseMove":
    case "onMouseMoveCapture":
    case "onMouseUp":
    case "onMouseUpCapture":
    case "onMouseEnter":
      (d = !d.disabled) || (a = a.type, d = !("button" === a || "input" === a || "select" === a || "textarea" === a));
      a = !d;
      break a;
    default:
      a = false;
  }
  if (a) return null;
  if (c && "function" !== typeof c) throw Error(p(231, b, typeof c));
  return c;
}
var Lb = false;
if (ia) try {
  var Mb = {};
  Object.defineProperty(Mb, "passive", { get: function() {
    Lb = true;
  } });
  window.addEventListener("test", Mb, Mb);
  window.removeEventListener("test", Mb, Mb);
} catch (a) {
  Lb = false;
}
function Nb(a, b, c, d, e, f2, g, h, k2) {
  var l2 = Array.prototype.slice.call(arguments, 3);
  try {
    b.apply(c, l2);
  } catch (m2) {
    this.onError(m2);
  }
}
var Ob = false, Pb = null, Qb = false, Rb = null, Sb = { onError: function(a) {
  Ob = true;
  Pb = a;
} };
function Tb(a, b, c, d, e, f2, g, h, k2) {
  Ob = false;
  Pb = null;
  Nb.apply(Sb, arguments);
}
function Ub(a, b, c, d, e, f2, g, h, k2) {
  Tb.apply(this, arguments);
  if (Ob) {
    if (Ob) {
      var l2 = Pb;
      Ob = false;
      Pb = null;
    } else throw Error(p(198));
    Qb || (Qb = true, Rb = l2);
  }
}
function Vb(a) {
  var b = a, c = a;
  if (a.alternate) for (; b.return; ) b = b.return;
  else {
    a = b;
    do
      b = a, 0 !== (b.flags & 4098) && (c = b.return), a = b.return;
    while (a);
  }
  return 3 === b.tag ? c : null;
}
function Wb(a) {
  if (13 === a.tag) {
    var b = a.memoizedState;
    null === b && (a = a.alternate, null !== a && (b = a.memoizedState));
    if (null !== b) return b.dehydrated;
  }
  return null;
}
function Xb(a) {
  if (Vb(a) !== a) throw Error(p(188));
}
function Yb(a) {
  var b = a.alternate;
  if (!b) {
    b = Vb(a);
    if (null === b) throw Error(p(188));
    return b !== a ? null : a;
  }
  for (var c = a, d = b; ; ) {
    var e = c.return;
    if (null === e) break;
    var f2 = e.alternate;
    if (null === f2) {
      d = e.return;
      if (null !== d) {
        c = d;
        continue;
      }
      break;
    }
    if (e.child === f2.child) {
      for (f2 = e.child; f2; ) {
        if (f2 === c) return Xb(e), a;
        if (f2 === d) return Xb(e), b;
        f2 = f2.sibling;
      }
      throw Error(p(188));
    }
    if (c.return !== d.return) c = e, d = f2;
    else {
      for (var g = false, h = e.child; h; ) {
        if (h === c) {
          g = true;
          c = e;
          d = f2;
          break;
        }
        if (h === d) {
          g = true;
          d = e;
          c = f2;
          break;
        }
        h = h.sibling;
      }
      if (!g) {
        for (h = f2.child; h; ) {
          if (h === c) {
            g = true;
            c = f2;
            d = e;
            break;
          }
          if (h === d) {
            g = true;
            d = f2;
            c = e;
            break;
          }
          h = h.sibling;
        }
        if (!g) throw Error(p(189));
      }
    }
    if (c.alternate !== d) throw Error(p(190));
  }
  if (3 !== c.tag) throw Error(p(188));
  return c.stateNode.current === c ? a : b;
}
function Zb(a) {
  a = Yb(a);
  return null !== a ? $b(a) : null;
}
function $b(a) {
  if (5 === a.tag || 6 === a.tag) return a;
  for (a = a.child; null !== a; ) {
    var b = $b(a);
    if (null !== b) return b;
    a = a.sibling;
  }
  return null;
}
var ac = ca.unstable_scheduleCallback, bc = ca.unstable_cancelCallback, cc = ca.unstable_shouldYield, dc = ca.unstable_requestPaint, B = ca.unstable_now, ec = ca.unstable_getCurrentPriorityLevel, fc = ca.unstable_ImmediatePriority, gc = ca.unstable_UserBlockingPriority, hc = ca.unstable_NormalPriority, ic = ca.unstable_LowPriority, jc = ca.unstable_IdlePriority, kc = null, lc = null;
function mc(a) {
  if (lc && "function" === typeof lc.onCommitFiberRoot) try {
    lc.onCommitFiberRoot(kc, a, void 0, 128 === (a.current.flags & 128));
  } catch (b) {
  }
}
var oc = Math.clz32 ? Math.clz32 : nc, pc = Math.log, qc = Math.LN2;
function nc(a) {
  a >>>= 0;
  return 0 === a ? 32 : 31 - (pc(a) / qc | 0) | 0;
}
var rc = 64, sc = 4194304;
function tc(a) {
  switch (a & -a) {
    case 1:
      return 1;
    case 2:
      return 2;
    case 4:
      return 4;
    case 8:
      return 8;
    case 16:
      return 16;
    case 32:
      return 32;
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
      return a & 4194240;
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
    case 67108864:
      return a & 130023424;
    case 134217728:
      return 134217728;
    case 268435456:
      return 268435456;
    case 536870912:
      return 536870912;
    case 1073741824:
      return 1073741824;
    default:
      return a;
  }
}
function uc(a, b) {
  var c = a.pendingLanes;
  if (0 === c) return 0;
  var d = 0, e = a.suspendedLanes, f2 = a.pingedLanes, g = c & 268435455;
  if (0 !== g) {
    var h = g & ~e;
    0 !== h ? d = tc(h) : (f2 &= g, 0 !== f2 && (d = tc(f2)));
  } else g = c & ~e, 0 !== g ? d = tc(g) : 0 !== f2 && (d = tc(f2));
  if (0 === d) return 0;
  if (0 !== b && b !== d && 0 === (b & e) && (e = d & -d, f2 = b & -b, e >= f2 || 16 === e && 0 !== (f2 & 4194240))) return b;
  0 !== (d & 4) && (d |= c & 16);
  b = a.entangledLanes;
  if (0 !== b) for (a = a.entanglements, b &= d; 0 < b; ) c = 31 - oc(b), e = 1 << c, d |= a[c], b &= ~e;
  return d;
}
function vc(a, b) {
  switch (a) {
    case 1:
    case 2:
    case 4:
      return b + 250;
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
      return b + 5e3;
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
    case 67108864:
      return -1;
    case 134217728:
    case 268435456:
    case 536870912:
    case 1073741824:
      return -1;
    default:
      return -1;
  }
}
function wc(a, b) {
  for (var c = a.suspendedLanes, d = a.pingedLanes, e = a.expirationTimes, f2 = a.pendingLanes; 0 < f2; ) {
    var g = 31 - oc(f2), h = 1 << g, k2 = e[g];
    if (-1 === k2) {
      if (0 === (h & c) || 0 !== (h & d)) e[g] = vc(h, b);
    } else k2 <= b && (a.expiredLanes |= h);
    f2 &= ~h;
  }
}
function xc(a) {
  a = a.pendingLanes & -1073741825;
  return 0 !== a ? a : a & 1073741824 ? 1073741824 : 0;
}
function yc() {
  var a = rc;
  rc <<= 1;
  0 === (rc & 4194240) && (rc = 64);
  return a;
}
function zc(a) {
  for (var b = [], c = 0; 31 > c; c++) b.push(a);
  return b;
}
function Ac(a, b, c) {
  a.pendingLanes |= b;
  536870912 !== b && (a.suspendedLanes = 0, a.pingedLanes = 0);
  a = a.eventTimes;
  b = 31 - oc(b);
  a[b] = c;
}
function Bc(a, b) {
  var c = a.pendingLanes & ~b;
  a.pendingLanes = b;
  a.suspendedLanes = 0;
  a.pingedLanes = 0;
  a.expiredLanes &= b;
  a.mutableReadLanes &= b;
  a.entangledLanes &= b;
  b = a.entanglements;
  var d = a.eventTimes;
  for (a = a.expirationTimes; 0 < c; ) {
    var e = 31 - oc(c), f2 = 1 << e;
    b[e] = 0;
    d[e] = -1;
    a[e] = -1;
    c &= ~f2;
  }
}
function Cc(a, b) {
  var c = a.entangledLanes |= b;
  for (a = a.entanglements; c; ) {
    var d = 31 - oc(c), e = 1 << d;
    e & b | a[d] & b && (a[d] |= b);
    c &= ~e;
  }
}
var C = 0;
function Dc(a) {
  a &= -a;
  return 1 < a ? 4 < a ? 0 !== (a & 268435455) ? 16 : 536870912 : 4 : 1;
}
var Ec, Fc, Gc, Hc, Ic, Jc = false, Kc = [], Lc = null, Mc = null, Nc = null, Oc = /* @__PURE__ */ new Map(), Pc = /* @__PURE__ */ new Map(), Qc = [], Rc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
function Sc(a, b) {
  switch (a) {
    case "focusin":
    case "focusout":
      Lc = null;
      break;
    case "dragenter":
    case "dragleave":
      Mc = null;
      break;
    case "mouseover":
    case "mouseout":
      Nc = null;
      break;
    case "pointerover":
    case "pointerout":
      Oc.delete(b.pointerId);
      break;
    case "gotpointercapture":
    case "lostpointercapture":
      Pc.delete(b.pointerId);
  }
}
function Tc(a, b, c, d, e, f2) {
  if (null === a || a.nativeEvent !== f2) return a = { blockedOn: b, domEventName: c, eventSystemFlags: d, nativeEvent: f2, targetContainers: [e] }, null !== b && (b = Cb(b), null !== b && Fc(b)), a;
  a.eventSystemFlags |= d;
  b = a.targetContainers;
  null !== e && -1 === b.indexOf(e) && b.push(e);
  return a;
}
function Uc(a, b, c, d, e) {
  switch (b) {
    case "focusin":
      return Lc = Tc(Lc, a, b, c, d, e), true;
    case "dragenter":
      return Mc = Tc(Mc, a, b, c, d, e), true;
    case "mouseover":
      return Nc = Tc(Nc, a, b, c, d, e), true;
    case "pointerover":
      var f2 = e.pointerId;
      Oc.set(f2, Tc(Oc.get(f2) || null, a, b, c, d, e));
      return true;
    case "gotpointercapture":
      return f2 = e.pointerId, Pc.set(f2, Tc(Pc.get(f2) || null, a, b, c, d, e)), true;
  }
  return false;
}
function Vc(a) {
  var b = Wc(a.target);
  if (null !== b) {
    var c = Vb(b);
    if (null !== c) {
      if (b = c.tag, 13 === b) {
        if (b = Wb(c), null !== b) {
          a.blockedOn = b;
          Ic(a.priority, function() {
            Gc(c);
          });
          return;
        }
      } else if (3 === b && c.stateNode.current.memoizedState.isDehydrated) {
        a.blockedOn = 3 === c.tag ? c.stateNode.containerInfo : null;
        return;
      }
    }
  }
  a.blockedOn = null;
}
function Xc(a) {
  if (null !== a.blockedOn) return false;
  for (var b = a.targetContainers; 0 < b.length; ) {
    var c = Yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);
    if (null === c) {
      c = a.nativeEvent;
      var d = new c.constructor(c.type, c);
      wb = d;
      c.target.dispatchEvent(d);
      wb = null;
    } else return b = Cb(c), null !== b && Fc(b), a.blockedOn = c, false;
    b.shift();
  }
  return true;
}
function Zc(a, b, c) {
  Xc(a) && c.delete(b);
}
function $c() {
  Jc = false;
  null !== Lc && Xc(Lc) && (Lc = null);
  null !== Mc && Xc(Mc) && (Mc = null);
  null !== Nc && Xc(Nc) && (Nc = null);
  Oc.forEach(Zc);
  Pc.forEach(Zc);
}
function ad(a, b) {
  a.blockedOn === b && (a.blockedOn = null, Jc || (Jc = true, ca.unstable_scheduleCallback(ca.unstable_NormalPriority, $c)));
}
function bd(a) {
  function b(b2) {
    return ad(b2, a);
  }
  if (0 < Kc.length) {
    ad(Kc[0], a);
    for (var c = 1; c < Kc.length; c++) {
      var d = Kc[c];
      d.blockedOn === a && (d.blockedOn = null);
    }
  }
  null !== Lc && ad(Lc, a);
  null !== Mc && ad(Mc, a);
  null !== Nc && ad(Nc, a);
  Oc.forEach(b);
  Pc.forEach(b);
  for (c = 0; c < Qc.length; c++) d = Qc[c], d.blockedOn === a && (d.blockedOn = null);
  for (; 0 < Qc.length && (c = Qc[0], null === c.blockedOn); ) Vc(c), null === c.blockedOn && Qc.shift();
}
var cd = ua.ReactCurrentBatchConfig, dd = true;
function ed(a, b, c, d) {
  var e = C, f2 = cd.transition;
  cd.transition = null;
  try {
    C = 1, fd(a, b, c, d);
  } finally {
    C = e, cd.transition = f2;
  }
}
function gd(a, b, c, d) {
  var e = C, f2 = cd.transition;
  cd.transition = null;
  try {
    C = 4, fd(a, b, c, d);
  } finally {
    C = e, cd.transition = f2;
  }
}
function fd(a, b, c, d) {
  if (dd) {
    var e = Yc(a, b, c, d);
    if (null === e) hd(a, b, d, id, c), Sc(a, d);
    else if (Uc(e, a, b, c, d)) d.stopPropagation();
    else if (Sc(a, d), b & 4 && -1 < Rc.indexOf(a)) {
      for (; null !== e; ) {
        var f2 = Cb(e);
        null !== f2 && Ec(f2);
        f2 = Yc(a, b, c, d);
        null === f2 && hd(a, b, d, id, c);
        if (f2 === e) break;
        e = f2;
      }
      null !== e && d.stopPropagation();
    } else hd(a, b, d, null, c);
  }
}
var id = null;
function Yc(a, b, c, d) {
  id = null;
  a = xb(d);
  a = Wc(a);
  if (null !== a) if (b = Vb(a), null === b) a = null;
  else if (c = b.tag, 13 === c) {
    a = Wb(b);
    if (null !== a) return a;
    a = null;
  } else if (3 === c) {
    if (b.stateNode.current.memoizedState.isDehydrated) return 3 === b.tag ? b.stateNode.containerInfo : null;
    a = null;
  } else b !== a && (a = null);
  id = a;
  return null;
}
function jd(a) {
  switch (a) {
    case "cancel":
    case "click":
    case "close":
    case "contextmenu":
    case "copy":
    case "cut":
    case "auxclick":
    case "dblclick":
    case "dragend":
    case "dragstart":
    case "drop":
    case "focusin":
    case "focusout":
    case "input":
    case "invalid":
    case "keydown":
    case "keypress":
    case "keyup":
    case "mousedown":
    case "mouseup":
    case "paste":
    case "pause":
    case "play":
    case "pointercancel":
    case "pointerdown":
    case "pointerup":
    case "ratechange":
    case "reset":
    case "resize":
    case "seeked":
    case "submit":
    case "touchcancel":
    case "touchend":
    case "touchstart":
    case "volumechange":
    case "change":
    case "selectionchange":
    case "textInput":
    case "compositionstart":
    case "compositionend":
    case "compositionupdate":
    case "beforeblur":
    case "afterblur":
    case "beforeinput":
    case "blur":
    case "fullscreenchange":
    case "focus":
    case "hashchange":
    case "popstate":
    case "select":
    case "selectstart":
      return 1;
    case "drag":
    case "dragenter":
    case "dragexit":
    case "dragleave":
    case "dragover":
    case "mousemove":
    case "mouseout":
    case "mouseover":
    case "pointermove":
    case "pointerout":
    case "pointerover":
    case "scroll":
    case "toggle":
    case "touchmove":
    case "wheel":
    case "mouseenter":
    case "mouseleave":
    case "pointerenter":
    case "pointerleave":
      return 4;
    case "message":
      switch (ec()) {
        case fc:
          return 1;
        case gc:
          return 4;
        case hc:
        case ic:
          return 16;
        case jc:
          return 536870912;
        default:
          return 16;
      }
    default:
      return 16;
  }
}
var kd = null, ld = null, md = null;
function nd() {
  if (md) return md;
  var a, b = ld, c = b.length, d, e = "value" in kd ? kd.value : kd.textContent, f2 = e.length;
  for (a = 0; a < c && b[a] === e[a]; a++) ;
  var g = c - a;
  for (d = 1; d <= g && b[c - d] === e[f2 - d]; d++) ;
  return md = e.slice(a, 1 < d ? 1 - d : void 0);
}
function od(a) {
  var b = a.keyCode;
  "charCode" in a ? (a = a.charCode, 0 === a && 13 === b && (a = 13)) : a = b;
  10 === a && (a = 13);
  return 32 <= a || 13 === a ? a : 0;
}
function pd() {
  return true;
}
function qd() {
  return false;
}
function rd(a) {
  function b(b2, d, e, f2, g) {
    this._reactName = b2;
    this._targetInst = e;
    this.type = d;
    this.nativeEvent = f2;
    this.target = g;
    this.currentTarget = null;
    for (var c in a) a.hasOwnProperty(c) && (b2 = a[c], this[c] = b2 ? b2(f2) : f2[c]);
    this.isDefaultPrevented = (null != f2.defaultPrevented ? f2.defaultPrevented : false === f2.returnValue) ? pd : qd;
    this.isPropagationStopped = qd;
    return this;
  }
  A(b.prototype, { preventDefault: function() {
    this.defaultPrevented = true;
    var a2 = this.nativeEvent;
    a2 && (a2.preventDefault ? a2.preventDefault() : "unknown" !== typeof a2.returnValue && (a2.returnValue = false), this.isDefaultPrevented = pd);
  }, stopPropagation: function() {
    var a2 = this.nativeEvent;
    a2 && (a2.stopPropagation ? a2.stopPropagation() : "unknown" !== typeof a2.cancelBubble && (a2.cancelBubble = true), this.isPropagationStopped = pd);
  }, persist: function() {
  }, isPersistent: pd });
  return b;
}
var sd = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function(a) {
  return a.timeStamp || Date.now();
}, defaultPrevented: 0, isTrusted: 0 }, td = rd(sd), ud = A({}, sd, { view: 0, detail: 0 }), vd = rd(ud), wd, xd, yd, Ad = A({}, ud, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: zd, button: 0, buttons: 0, relatedTarget: function(a) {
  return void 0 === a.relatedTarget ? a.fromElement === a.srcElement ? a.toElement : a.fromElement : a.relatedTarget;
}, movementX: function(a) {
  if ("movementX" in a) return a.movementX;
  a !== yd && (yd && "mousemove" === a.type ? (wd = a.screenX - yd.screenX, xd = a.screenY - yd.screenY) : xd = wd = 0, yd = a);
  return wd;
}, movementY: function(a) {
  return "movementY" in a ? a.movementY : xd;
} }), Bd = rd(Ad), Cd = A({}, Ad, { dataTransfer: 0 }), Dd = rd(Cd), Ed = A({}, ud, { relatedTarget: 0 }), Fd = rd(Ed), Gd = A({}, sd, { animationName: 0, elapsedTime: 0, pseudoElement: 0 }), Hd = rd(Gd), Id = A({}, sd, { clipboardData: function(a) {
  return "clipboardData" in a ? a.clipboardData : window.clipboardData;
} }), Jd = rd(Id), Kd = A({}, sd, { data: 0 }), Ld = rd(Kd), Md = {
  Esc: "Escape",
  Spacebar: " ",
  Left: "ArrowLeft",
  Up: "ArrowUp",
  Right: "ArrowRight",
  Down: "ArrowDown",
  Del: "Delete",
  Win: "OS",
  Menu: "ContextMenu",
  Apps: "ContextMenu",
  Scroll: "ScrollLock",
  MozPrintableKey: "Unidentified"
}, Nd = {
  8: "Backspace",
  9: "Tab",
  12: "Clear",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  19: "Pause",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  45: "Insert",
  46: "Delete",
  112: "F1",
  113: "F2",
  114: "F3",
  115: "F4",
  116: "F5",
  117: "F6",
  118: "F7",
  119: "F8",
  120: "F9",
  121: "F10",
  122: "F11",
  123: "F12",
  144: "NumLock",
  145: "ScrollLock",
  224: "Meta"
}, Od = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
function Pd(a) {
  var b = this.nativeEvent;
  return b.getModifierState ? b.getModifierState(a) : (a = Od[a]) ? !!b[a] : false;
}
function zd() {
  return Pd;
}
var Qd = A({}, ud, { key: function(a) {
  if (a.key) {
    var b = Md[a.key] || a.key;
    if ("Unidentified" !== b) return b;
  }
  return "keypress" === a.type ? (a = od(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? Nd[a.keyCode] || "Unidentified" : "";
}, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: zd, charCode: function(a) {
  return "keypress" === a.type ? od(a) : 0;
}, keyCode: function(a) {
  return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
}, which: function(a) {
  return "keypress" === a.type ? od(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
} }), Rd = rd(Qd), Sd = A({}, Ad, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 }), Td = rd(Sd), Ud = A({}, ud, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: zd }), Vd = rd(Ud), Wd = A({}, sd, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 }), Xd = rd(Wd), Yd = A({}, Ad, {
  deltaX: function(a) {
    return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
  },
  deltaY: function(a) {
    return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
  },
  deltaZ: 0,
  deltaMode: 0
}), Zd = rd(Yd), $d = [9, 13, 27, 32], ae = ia && "CompositionEvent" in window, be = null;
ia && "documentMode" in document && (be = document.documentMode);
var ce = ia && "TextEvent" in window && !be, de = ia && (!ae || be && 8 < be && 11 >= be), ee = String.fromCharCode(32), fe = false;
function ge(a, b) {
  switch (a) {
    case "keyup":
      return -1 !== $d.indexOf(b.keyCode);
    case "keydown":
      return 229 !== b.keyCode;
    case "keypress":
    case "mousedown":
    case "focusout":
      return true;
    default:
      return false;
  }
}
function he(a) {
  a = a.detail;
  return "object" === typeof a && "data" in a ? a.data : null;
}
var ie = false;
function je(a, b) {
  switch (a) {
    case "compositionend":
      return he(b);
    case "keypress":
      if (32 !== b.which) return null;
      fe = true;
      return ee;
    case "textInput":
      return a = b.data, a === ee && fe ? null : a;
    default:
      return null;
  }
}
function ke(a, b) {
  if (ie) return "compositionend" === a || !ae && ge(a, b) ? (a = nd(), md = ld = kd = null, ie = false, a) : null;
  switch (a) {
    case "paste":
      return null;
    case "keypress":
      if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {
        if (b.char && 1 < b.char.length) return b.char;
        if (b.which) return String.fromCharCode(b.which);
      }
      return null;
    case "compositionend":
      return de && "ko" !== b.locale ? null : b.data;
    default:
      return null;
  }
}
var le = { color: true, date: true, datetime: true, "datetime-local": true, email: true, month: true, number: true, password: true, range: true, search: true, tel: true, text: true, time: true, url: true, week: true };
function me(a) {
  var b = a && a.nodeName && a.nodeName.toLowerCase();
  return "input" === b ? !!le[a.type] : "textarea" === b ? true : false;
}
function ne(a, b, c, d) {
  Eb(d);
  b = oe(b, "onChange");
  0 < b.length && (c = new td("onChange", "change", null, c, d), a.push({ event: c, listeners: b }));
}
var pe = null, qe = null;
function re(a) {
  se(a, 0);
}
function te(a) {
  var b = ue(a);
  if (Wa(b)) return a;
}
function ve(a, b) {
  if ("change" === a) return b;
}
var we = false;
if (ia) {
  var xe;
  if (ia) {
    var ye = "oninput" in document;
    if (!ye) {
      var ze = document.createElement("div");
      ze.setAttribute("oninput", "return;");
      ye = "function" === typeof ze.oninput;
    }
    xe = ye;
  } else xe = false;
  we = xe && (!document.documentMode || 9 < document.documentMode);
}
function Ae() {
  pe && (pe.detachEvent("onpropertychange", Be), qe = pe = null);
}
function Be(a) {
  if ("value" === a.propertyName && te(qe)) {
    var b = [];
    ne(b, qe, a, xb(a));
    Jb(re, b);
  }
}
function Ce(a, b, c) {
  "focusin" === a ? (Ae(), pe = b, qe = c, pe.attachEvent("onpropertychange", Be)) : "focusout" === a && Ae();
}
function De(a) {
  if ("selectionchange" === a || "keyup" === a || "keydown" === a) return te(qe);
}
function Ee(a, b) {
  if ("click" === a) return te(b);
}
function Fe(a, b) {
  if ("input" === a || "change" === a) return te(b);
}
function Ge(a, b) {
  return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;
}
var He = "function" === typeof Object.is ? Object.is : Ge;
function Ie(a, b) {
  if (He(a, b)) return true;
  if ("object" !== typeof a || null === a || "object" !== typeof b || null === b) return false;
  var c = Object.keys(a), d = Object.keys(b);
  if (c.length !== d.length) return false;
  for (d = 0; d < c.length; d++) {
    var e = c[d];
    if (!ja.call(b, e) || !He(a[e], b[e])) return false;
  }
  return true;
}
function Je(a) {
  for (; a && a.firstChild; ) a = a.firstChild;
  return a;
}
function Ke(a, b) {
  var c = Je(a);
  a = 0;
  for (var d; c; ) {
    if (3 === c.nodeType) {
      d = a + c.textContent.length;
      if (a <= b && d >= b) return { node: c, offset: b - a };
      a = d;
    }
    a: {
      for (; c; ) {
        if (c.nextSibling) {
          c = c.nextSibling;
          break a;
        }
        c = c.parentNode;
      }
      c = void 0;
    }
    c = Je(c);
  }
}
function Le(a, b) {
  return a && b ? a === b ? true : a && 3 === a.nodeType ? false : b && 3 === b.nodeType ? Le(a, b.parentNode) : "contains" in a ? a.contains(b) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b) & 16) : false : false;
}
function Me() {
  for (var a = window, b = Xa(); b instanceof a.HTMLIFrameElement; ) {
    try {
      var c = "string" === typeof b.contentWindow.location.href;
    } catch (d) {
      c = false;
    }
    if (c) a = b.contentWindow;
    else break;
    b = Xa(a.document);
  }
  return b;
}
function Ne(a) {
  var b = a && a.nodeName && a.nodeName.toLowerCase();
  return b && ("input" === b && ("text" === a.type || "search" === a.type || "tel" === a.type || "url" === a.type || "password" === a.type) || "textarea" === b || "true" === a.contentEditable);
}
function Oe(a) {
  var b = Me(), c = a.focusedElem, d = a.selectionRange;
  if (b !== c && c && c.ownerDocument && Le(c.ownerDocument.documentElement, c)) {
    if (null !== d && Ne(c)) {
      if (b = d.start, a = d.end, void 0 === a && (a = b), "selectionStart" in c) c.selectionStart = b, c.selectionEnd = Math.min(a, c.value.length);
      else if (a = (b = c.ownerDocument || document) && b.defaultView || window, a.getSelection) {
        a = a.getSelection();
        var e = c.textContent.length, f2 = Math.min(d.start, e);
        d = void 0 === d.end ? f2 : Math.min(d.end, e);
        !a.extend && f2 > d && (e = d, d = f2, f2 = e);
        e = Ke(c, f2);
        var g = Ke(
          c,
          d
        );
        e && g && (1 !== a.rangeCount || a.anchorNode !== e.node || a.anchorOffset !== e.offset || a.focusNode !== g.node || a.focusOffset !== g.offset) && (b = b.createRange(), b.setStart(e.node, e.offset), a.removeAllRanges(), f2 > d ? (a.addRange(b), a.extend(g.node, g.offset)) : (b.setEnd(g.node, g.offset), a.addRange(b)));
      }
    }
    b = [];
    for (a = c; a = a.parentNode; ) 1 === a.nodeType && b.push({ element: a, left: a.scrollLeft, top: a.scrollTop });
    "function" === typeof c.focus && c.focus();
    for (c = 0; c < b.length; c++) a = b[c], a.element.scrollLeft = a.left, a.element.scrollTop = a.top;
  }
}
var Pe = ia && "documentMode" in document && 11 >= document.documentMode, Qe = null, Re = null, Se = null, Te = false;
function Ue(a, b, c) {
  var d = c.window === c ? c.document : 9 === c.nodeType ? c : c.ownerDocument;
  Te || null == Qe || Qe !== Xa(d) || (d = Qe, "selectionStart" in d && Ne(d) ? d = { start: d.selectionStart, end: d.selectionEnd } : (d = (d.ownerDocument && d.ownerDocument.defaultView || window).getSelection(), d = { anchorNode: d.anchorNode, anchorOffset: d.anchorOffset, focusNode: d.focusNode, focusOffset: d.focusOffset }), Se && Ie(Se, d) || (Se = d, d = oe(Re, "onSelect"), 0 < d.length && (b = new td("onSelect", "select", null, b, c), a.push({ event: b, listeners: d }), b.target = Qe)));
}
function Ve(a, b) {
  var c = {};
  c[a.toLowerCase()] = b.toLowerCase();
  c["Webkit" + a] = "webkit" + b;
  c["Moz" + a] = "moz" + b;
  return c;
}
var We = { animationend: Ve("Animation", "AnimationEnd"), animationiteration: Ve("Animation", "AnimationIteration"), animationstart: Ve("Animation", "AnimationStart"), transitionend: Ve("Transition", "TransitionEnd") }, Xe = {}, Ye = {};
ia && (Ye = document.createElement("div").style, "AnimationEvent" in window || (delete We.animationend.animation, delete We.animationiteration.animation, delete We.animationstart.animation), "TransitionEvent" in window || delete We.transitionend.transition);
function Ze(a) {
  if (Xe[a]) return Xe[a];
  if (!We[a]) return a;
  var b = We[a], c;
  for (c in b) if (b.hasOwnProperty(c) && c in Ye) return Xe[a] = b[c];
  return a;
}
var $e = Ze("animationend"), af = Ze("animationiteration"), bf = Ze("animationstart"), cf = Ze("transitionend"), df = /* @__PURE__ */ new Map(), ef = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
function ff(a, b) {
  df.set(a, b);
  fa(b, [a]);
}
for (var gf = 0; gf < ef.length; gf++) {
  var hf = ef[gf], jf = hf.toLowerCase(), kf = hf[0].toUpperCase() + hf.slice(1);
  ff(jf, "on" + kf);
}
ff($e, "onAnimationEnd");
ff(af, "onAnimationIteration");
ff(bf, "onAnimationStart");
ff("dblclick", "onDoubleClick");
ff("focusin", "onFocus");
ff("focusout", "onBlur");
ff(cf, "onTransitionEnd");
ha("onMouseEnter", ["mouseout", "mouseover"]);
ha("onMouseLeave", ["mouseout", "mouseover"]);
ha("onPointerEnter", ["pointerout", "pointerover"]);
ha("onPointerLeave", ["pointerout", "pointerover"]);
fa("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
fa("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
fa("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
fa("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
fa("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
fa("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
var lf = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "), mf = new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));
function nf(a, b, c) {
  var d = a.type || "unknown-event";
  a.currentTarget = c;
  Ub(d, b, void 0, a);
  a.currentTarget = null;
}
function se(a, b) {
  b = 0 !== (b & 4);
  for (var c = 0; c < a.length; c++) {
    var d = a[c], e = d.event;
    d = d.listeners;
    a: {
      var f2 = void 0;
      if (b) for (var g = d.length - 1; 0 <= g; g--) {
        var h = d[g], k2 = h.instance, l2 = h.currentTarget;
        h = h.listener;
        if (k2 !== f2 && e.isPropagationStopped()) break a;
        nf(e, h, l2);
        f2 = k2;
      }
      else for (g = 0; g < d.length; g++) {
        h = d[g];
        k2 = h.instance;
        l2 = h.currentTarget;
        h = h.listener;
        if (k2 !== f2 && e.isPropagationStopped()) break a;
        nf(e, h, l2);
        f2 = k2;
      }
    }
  }
  if (Qb) throw a = Rb, Qb = false, Rb = null, a;
}
function D(a, b) {
  var c = b[of];
  void 0 === c && (c = b[of] = /* @__PURE__ */ new Set());
  var d = a + "__bubble";
  c.has(d) || (pf(b, a, 2, false), c.add(d));
}
function qf(a, b, c) {
  var d = 0;
  b && (d |= 4);
  pf(c, a, d, b);
}
var rf = "_reactListening" + Math.random().toString(36).slice(2);
function sf(a) {
  if (!a[rf]) {
    a[rf] = true;
    da.forEach(function(b2) {
      "selectionchange" !== b2 && (mf.has(b2) || qf(b2, false, a), qf(b2, true, a));
    });
    var b = 9 === a.nodeType ? a : a.ownerDocument;
    null === b || b[rf] || (b[rf] = true, qf("selectionchange", false, b));
  }
}
function pf(a, b, c, d) {
  switch (jd(b)) {
    case 1:
      var e = ed;
      break;
    case 4:
      e = gd;
      break;
    default:
      e = fd;
  }
  c = e.bind(null, b, c, a);
  e = void 0;
  !Lb || "touchstart" !== b && "touchmove" !== b && "wheel" !== b || (e = true);
  d ? void 0 !== e ? a.addEventListener(b, c, { capture: true, passive: e }) : a.addEventListener(b, c, true) : void 0 !== e ? a.addEventListener(b, c, { passive: e }) : a.addEventListener(b, c, false);
}
function hd(a, b, c, d, e) {
  var f2 = d;
  if (0 === (b & 1) && 0 === (b & 2) && null !== d) a: for (; ; ) {
    if (null === d) return;
    var g = d.tag;
    if (3 === g || 4 === g) {
      var h = d.stateNode.containerInfo;
      if (h === e || 8 === h.nodeType && h.parentNode === e) break;
      if (4 === g) for (g = d.return; null !== g; ) {
        var k2 = g.tag;
        if (3 === k2 || 4 === k2) {
          if (k2 = g.stateNode.containerInfo, k2 === e || 8 === k2.nodeType && k2.parentNode === e) return;
        }
        g = g.return;
      }
      for (; null !== h; ) {
        g = Wc(h);
        if (null === g) return;
        k2 = g.tag;
        if (5 === k2 || 6 === k2) {
          d = f2 = g;
          continue a;
        }
        h = h.parentNode;
      }
    }
    d = d.return;
  }
  Jb(function() {
    var d2 = f2, e2 = xb(c), g2 = [];
    a: {
      var h2 = df.get(a);
      if (void 0 !== h2) {
        var k3 = td, n2 = a;
        switch (a) {
          case "keypress":
            if (0 === od(c)) break a;
          case "keydown":
          case "keyup":
            k3 = Rd;
            break;
          case "focusin":
            n2 = "focus";
            k3 = Fd;
            break;
          case "focusout":
            n2 = "blur";
            k3 = Fd;
            break;
          case "beforeblur":
          case "afterblur":
            k3 = Fd;
            break;
          case "click":
            if (2 === c.button) break a;
          case "auxclick":
          case "dblclick":
          case "mousedown":
          case "mousemove":
          case "mouseup":
          case "mouseout":
          case "mouseover":
          case "contextmenu":
            k3 = Bd;
            break;
          case "drag":
          case "dragend":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "dragstart":
          case "drop":
            k3 = Dd;
            break;
          case "touchcancel":
          case "touchend":
          case "touchmove":
          case "touchstart":
            k3 = Vd;
            break;
          case $e:
          case af:
          case bf:
            k3 = Hd;
            break;
          case cf:
            k3 = Xd;
            break;
          case "scroll":
            k3 = vd;
            break;
          case "wheel":
            k3 = Zd;
            break;
          case "copy":
          case "cut":
          case "paste":
            k3 = Jd;
            break;
          case "gotpointercapture":
          case "lostpointercapture":
          case "pointercancel":
          case "pointerdown":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "pointerup":
            k3 = Td;
        }
        var t2 = 0 !== (b & 4), J2 = !t2 && "scroll" === a, x2 = t2 ? null !== h2 ? h2 + "Capture" : null : h2;
        t2 = [];
        for (var w2 = d2, u2; null !== w2; ) {
          u2 = w2;
          var F2 = u2.stateNode;
          5 === u2.tag && null !== F2 && (u2 = F2, null !== x2 && (F2 = Kb(w2, x2), null != F2 && t2.push(tf(w2, F2, u2))));
          if (J2) break;
          w2 = w2.return;
        }
        0 < t2.length && (h2 = new k3(h2, n2, null, c, e2), g2.push({ event: h2, listeners: t2 }));
      }
    }
    if (0 === (b & 7)) {
      a: {
        h2 = "mouseover" === a || "pointerover" === a;
        k3 = "mouseout" === a || "pointerout" === a;
        if (h2 && c !== wb && (n2 = c.relatedTarget || c.fromElement) && (Wc(n2) || n2[uf])) break a;
        if (k3 || h2) {
          h2 = e2.window === e2 ? e2 : (h2 = e2.ownerDocument) ? h2.defaultView || h2.parentWindow : window;
          if (k3) {
            if (n2 = c.relatedTarget || c.toElement, k3 = d2, n2 = n2 ? Wc(n2) : null, null !== n2 && (J2 = Vb(n2), n2 !== J2 || 5 !== n2.tag && 6 !== n2.tag)) n2 = null;
          } else k3 = null, n2 = d2;
          if (k3 !== n2) {
            t2 = Bd;
            F2 = "onMouseLeave";
            x2 = "onMouseEnter";
            w2 = "mouse";
            if ("pointerout" === a || "pointerover" === a) t2 = Td, F2 = "onPointerLeave", x2 = "onPointerEnter", w2 = "pointer";
            J2 = null == k3 ? h2 : ue(k3);
            u2 = null == n2 ? h2 : ue(n2);
            h2 = new t2(F2, w2 + "leave", k3, c, e2);
            h2.target = J2;
            h2.relatedTarget = u2;
            F2 = null;
            Wc(e2) === d2 && (t2 = new t2(x2, w2 + "enter", n2, c, e2), t2.target = u2, t2.relatedTarget = J2, F2 = t2);
            J2 = F2;
            if (k3 && n2) b: {
              t2 = k3;
              x2 = n2;
              w2 = 0;
              for (u2 = t2; u2; u2 = vf(u2)) w2++;
              u2 = 0;
              for (F2 = x2; F2; F2 = vf(F2)) u2++;
              for (; 0 < w2 - u2; ) t2 = vf(t2), w2--;
              for (; 0 < u2 - w2; ) x2 = vf(x2), u2--;
              for (; w2--; ) {
                if (t2 === x2 || null !== x2 && t2 === x2.alternate) break b;
                t2 = vf(t2);
                x2 = vf(x2);
              }
              t2 = null;
            }
            else t2 = null;
            null !== k3 && wf(g2, h2, k3, t2, false);
            null !== n2 && null !== J2 && wf(g2, J2, n2, t2, true);
          }
        }
      }
      a: {
        h2 = d2 ? ue(d2) : window;
        k3 = h2.nodeName && h2.nodeName.toLowerCase();
        if ("select" === k3 || "input" === k3 && "file" === h2.type) var na = ve;
        else if (me(h2)) if (we) na = Fe;
        else {
          na = De;
          var xa = Ce;
        }
        else (k3 = h2.nodeName) && "input" === k3.toLowerCase() && ("checkbox" === h2.type || "radio" === h2.type) && (na = Ee);
        if (na && (na = na(a, d2))) {
          ne(g2, na, c, e2);
          break a;
        }
        xa && xa(a, h2, d2);
        "focusout" === a && (xa = h2._wrapperState) && xa.controlled && "number" === h2.type && cb(h2, "number", h2.value);
      }
      xa = d2 ? ue(d2) : window;
      switch (a) {
        case "focusin":
          if (me(xa) || "true" === xa.contentEditable) Qe = xa, Re = d2, Se = null;
          break;
        case "focusout":
          Se = Re = Qe = null;
          break;
        case "mousedown":
          Te = true;
          break;
        case "contextmenu":
        case "mouseup":
        case "dragend":
          Te = false;
          Ue(g2, c, e2);
          break;
        case "selectionchange":
          if (Pe) break;
        case "keydown":
        case "keyup":
          Ue(g2, c, e2);
      }
      var $a;
      if (ae) b: {
        switch (a) {
          case "compositionstart":
            var ba = "onCompositionStart";
            break b;
          case "compositionend":
            ba = "onCompositionEnd";
            break b;
          case "compositionupdate":
            ba = "onCompositionUpdate";
            break b;
        }
        ba = void 0;
      }
      else ie ? ge(a, c) && (ba = "onCompositionEnd") : "keydown" === a && 229 === c.keyCode && (ba = "onCompositionStart");
      ba && (de && "ko" !== c.locale && (ie || "onCompositionStart" !== ba ? "onCompositionEnd" === ba && ie && ($a = nd()) : (kd = e2, ld = "value" in kd ? kd.value : kd.textContent, ie = true)), xa = oe(d2, ba), 0 < xa.length && (ba = new Ld(ba, a, null, c, e2), g2.push({ event: ba, listeners: xa }), $a ? ba.data = $a : ($a = he(c), null !== $a && (ba.data = $a))));
      if ($a = ce ? je(a, c) : ke(a, c)) d2 = oe(d2, "onBeforeInput"), 0 < d2.length && (e2 = new Ld("onBeforeInput", "beforeinput", null, c, e2), g2.push({ event: e2, listeners: d2 }), e2.data = $a);
    }
    se(g2, b);
  });
}
function tf(a, b, c) {
  return { instance: a, listener: b, currentTarget: c };
}
function oe(a, b) {
  for (var c = b + "Capture", d = []; null !== a; ) {
    var e = a, f2 = e.stateNode;
    5 === e.tag && null !== f2 && (e = f2, f2 = Kb(a, c), null != f2 && d.unshift(tf(a, f2, e)), f2 = Kb(a, b), null != f2 && d.push(tf(a, f2, e)));
    a = a.return;
  }
  return d;
}
function vf(a) {
  if (null === a) return null;
  do
    a = a.return;
  while (a && 5 !== a.tag);
  return a ? a : null;
}
function wf(a, b, c, d, e) {
  for (var f2 = b._reactName, g = []; null !== c && c !== d; ) {
    var h = c, k2 = h.alternate, l2 = h.stateNode;
    if (null !== k2 && k2 === d) break;
    5 === h.tag && null !== l2 && (h = l2, e ? (k2 = Kb(c, f2), null != k2 && g.unshift(tf(c, k2, h))) : e || (k2 = Kb(c, f2), null != k2 && g.push(tf(c, k2, h))));
    c = c.return;
  }
  0 !== g.length && a.push({ event: b, listeners: g });
}
var xf = /\r\n?/g, yf = /\u0000|\uFFFD/g;
function zf(a) {
  return ("string" === typeof a ? a : "" + a).replace(xf, "\n").replace(yf, "");
}
function Af(a, b, c) {
  b = zf(b);
  if (zf(a) !== b && c) throw Error(p(425));
}
function Bf() {
}
var Cf = null, Df = null;
function Ef(a, b) {
  return "textarea" === a || "noscript" === a || "string" === typeof b.children || "number" === typeof b.children || "object" === typeof b.dangerouslySetInnerHTML && null !== b.dangerouslySetInnerHTML && null != b.dangerouslySetInnerHTML.__html;
}
var Ff = "function" === typeof setTimeout ? setTimeout : void 0, Gf = "function" === typeof clearTimeout ? clearTimeout : void 0, Hf = "function" === typeof Promise ? Promise : void 0, Jf = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof Hf ? function(a) {
  return Hf.resolve(null).then(a).catch(If);
} : Ff;
function If(a) {
  setTimeout(function() {
    throw a;
  });
}
function Kf(a, b) {
  var c = b, d = 0;
  do {
    var e = c.nextSibling;
    a.removeChild(c);
    if (e && 8 === e.nodeType) if (c = e.data, "/$" === c) {
      if (0 === d) {
        a.removeChild(e);
        bd(b);
        return;
      }
      d--;
    } else "$" !== c && "$?" !== c && "$!" !== c || d++;
    c = e;
  } while (c);
  bd(b);
}
function Lf(a) {
  for (; null != a; a = a.nextSibling) {
    var b = a.nodeType;
    if (1 === b || 3 === b) break;
    if (8 === b) {
      b = a.data;
      if ("$" === b || "$!" === b || "$?" === b) break;
      if ("/$" === b) return null;
    }
  }
  return a;
}
function Mf(a) {
  a = a.previousSibling;
  for (var b = 0; a; ) {
    if (8 === a.nodeType) {
      var c = a.data;
      if ("$" === c || "$!" === c || "$?" === c) {
        if (0 === b) return a;
        b--;
      } else "/$" === c && b++;
    }
    a = a.previousSibling;
  }
  return null;
}
var Nf = Math.random().toString(36).slice(2), Of = "__reactFiber$" + Nf, Pf = "__reactProps$" + Nf, uf = "__reactContainer$" + Nf, of = "__reactEvents$" + Nf, Qf = "__reactListeners$" + Nf, Rf = "__reactHandles$" + Nf;
function Wc(a) {
  var b = a[Of];
  if (b) return b;
  for (var c = a.parentNode; c; ) {
    if (b = c[uf] || c[Of]) {
      c = b.alternate;
      if (null !== b.child || null !== c && null !== c.child) for (a = Mf(a); null !== a; ) {
        if (c = a[Of]) return c;
        a = Mf(a);
      }
      return b;
    }
    a = c;
    c = a.parentNode;
  }
  return null;
}
function Cb(a) {
  a = a[Of] || a[uf];
  return !a || 5 !== a.tag && 6 !== a.tag && 13 !== a.tag && 3 !== a.tag ? null : a;
}
function ue(a) {
  if (5 === a.tag || 6 === a.tag) return a.stateNode;
  throw Error(p(33));
}
function Db(a) {
  return a[Pf] || null;
}
var Sf = [], Tf = -1;
function Uf(a) {
  return { current: a };
}
function E(a) {
  0 > Tf || (a.current = Sf[Tf], Sf[Tf] = null, Tf--);
}
function G(a, b) {
  Tf++;
  Sf[Tf] = a.current;
  a.current = b;
}
var Vf = {}, H = Uf(Vf), Wf = Uf(false), Xf = Vf;
function Yf(a, b) {
  var c = a.type.contextTypes;
  if (!c) return Vf;
  var d = a.stateNode;
  if (d && d.__reactInternalMemoizedUnmaskedChildContext === b) return d.__reactInternalMemoizedMaskedChildContext;
  var e = {}, f2;
  for (f2 in c) e[f2] = b[f2];
  d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);
  return e;
}
function Zf(a) {
  a = a.childContextTypes;
  return null !== a && void 0 !== a;
}
function $f() {
  E(Wf);
  E(H);
}
function ag(a, b, c) {
  if (H.current !== Vf) throw Error(p(168));
  G(H, b);
  G(Wf, c);
}
function bg(a, b, c) {
  var d = a.stateNode;
  b = b.childContextTypes;
  if ("function" !== typeof d.getChildContext) return c;
  d = d.getChildContext();
  for (var e in d) if (!(e in b)) throw Error(p(108, Ra(a) || "Unknown", e));
  return A({}, c, d);
}
function cg(a) {
  a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || Vf;
  Xf = H.current;
  G(H, a);
  G(Wf, Wf.current);
  return true;
}
function dg(a, b, c) {
  var d = a.stateNode;
  if (!d) throw Error(p(169));
  c ? (a = bg(a, b, Xf), d.__reactInternalMemoizedMergedChildContext = a, E(Wf), E(H), G(H, a)) : E(Wf);
  G(Wf, c);
}
var eg = null, fg = false, gg = false;
function hg(a) {
  null === eg ? eg = [a] : eg.push(a);
}
function ig(a) {
  fg = true;
  hg(a);
}
function jg() {
  if (!gg && null !== eg) {
    gg = true;
    var a = 0, b = C;
    try {
      var c = eg;
      for (C = 1; a < c.length; a++) {
        var d = c[a];
        do
          d = d(true);
        while (null !== d);
      }
      eg = null;
      fg = false;
    } catch (e) {
      throw null !== eg && (eg = eg.slice(a + 1)), ac(fc, jg), e;
    } finally {
      C = b, gg = false;
    }
  }
  return null;
}
var kg = [], lg = 0, mg = null, ng = 0, og = [], pg = 0, qg = null, rg = 1, sg = "";
function tg(a, b) {
  kg[lg++] = ng;
  kg[lg++] = mg;
  mg = a;
  ng = b;
}
function ug(a, b, c) {
  og[pg++] = rg;
  og[pg++] = sg;
  og[pg++] = qg;
  qg = a;
  var d = rg;
  a = sg;
  var e = 32 - oc(d) - 1;
  d &= ~(1 << e);
  c += 1;
  var f2 = 32 - oc(b) + e;
  if (30 < f2) {
    var g = e - e % 5;
    f2 = (d & (1 << g) - 1).toString(32);
    d >>= g;
    e -= g;
    rg = 1 << 32 - oc(b) + e | c << e | d;
    sg = f2 + a;
  } else rg = 1 << f2 | c << e | d, sg = a;
}
function vg(a) {
  null !== a.return && (tg(a, 1), ug(a, 1, 0));
}
function wg(a) {
  for (; a === mg; ) mg = kg[--lg], kg[lg] = null, ng = kg[--lg], kg[lg] = null;
  for (; a === qg; ) qg = og[--pg], og[pg] = null, sg = og[--pg], og[pg] = null, rg = og[--pg], og[pg] = null;
}
var xg = null, yg = null, I = false, zg = null;
function Ag(a, b) {
  var c = Bg(5, null, null, 0);
  c.elementType = "DELETED";
  c.stateNode = b;
  c.return = a;
  b = a.deletions;
  null === b ? (a.deletions = [c], a.flags |= 16) : b.push(c);
}
function Cg(a, b) {
  switch (a.tag) {
    case 5:
      var c = a.type;
      b = 1 !== b.nodeType || c.toLowerCase() !== b.nodeName.toLowerCase() ? null : b;
      return null !== b ? (a.stateNode = b, xg = a, yg = Lf(b.firstChild), true) : false;
    case 6:
      return b = "" === a.pendingProps || 3 !== b.nodeType ? null : b, null !== b ? (a.stateNode = b, xg = a, yg = null, true) : false;
    case 13:
      return b = 8 !== b.nodeType ? null : b, null !== b ? (c = null !== qg ? { id: rg, overflow: sg } : null, a.memoizedState = { dehydrated: b, treeContext: c, retryLane: 1073741824 }, c = Bg(18, null, null, 0), c.stateNode = b, c.return = a, a.child = c, xg = a, yg = null, true) : false;
    default:
      return false;
  }
}
function Dg(a) {
  return 0 !== (a.mode & 1) && 0 === (a.flags & 128);
}
function Eg(a) {
  if (I) {
    var b = yg;
    if (b) {
      var c = b;
      if (!Cg(a, b)) {
        if (Dg(a)) throw Error(p(418));
        b = Lf(c.nextSibling);
        var d = xg;
        b && Cg(a, b) ? Ag(d, c) : (a.flags = a.flags & -4097 | 2, I = false, xg = a);
      }
    } else {
      if (Dg(a)) throw Error(p(418));
      a.flags = a.flags & -4097 | 2;
      I = false;
      xg = a;
    }
  }
}
function Fg(a) {
  for (a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag; ) a = a.return;
  xg = a;
}
function Gg(a) {
  if (a !== xg) return false;
  if (!I) return Fg(a), I = true, false;
  var b;
  (b = 3 !== a.tag) && !(b = 5 !== a.tag) && (b = a.type, b = "head" !== b && "body" !== b && !Ef(a.type, a.memoizedProps));
  if (b && (b = yg)) {
    if (Dg(a)) throw Hg(), Error(p(418));
    for (; b; ) Ag(a, b), b = Lf(b.nextSibling);
  }
  Fg(a);
  if (13 === a.tag) {
    a = a.memoizedState;
    a = null !== a ? a.dehydrated : null;
    if (!a) throw Error(p(317));
    a: {
      a = a.nextSibling;
      for (b = 0; a; ) {
        if (8 === a.nodeType) {
          var c = a.data;
          if ("/$" === c) {
            if (0 === b) {
              yg = Lf(a.nextSibling);
              break a;
            }
            b--;
          } else "$" !== c && "$!" !== c && "$?" !== c || b++;
        }
        a = a.nextSibling;
      }
      yg = null;
    }
  } else yg = xg ? Lf(a.stateNode.nextSibling) : null;
  return true;
}
function Hg() {
  for (var a = yg; a; ) a = Lf(a.nextSibling);
}
function Ig() {
  yg = xg = null;
  I = false;
}
function Jg(a) {
  null === zg ? zg = [a] : zg.push(a);
}
var Kg = ua.ReactCurrentBatchConfig;
function Lg(a, b, c) {
  a = c.ref;
  if (null !== a && "function" !== typeof a && "object" !== typeof a) {
    if (c._owner) {
      c = c._owner;
      if (c) {
        if (1 !== c.tag) throw Error(p(309));
        var d = c.stateNode;
      }
      if (!d) throw Error(p(147, a));
      var e = d, f2 = "" + a;
      if (null !== b && null !== b.ref && "function" === typeof b.ref && b.ref._stringRef === f2) return b.ref;
      b = function(a2) {
        var b2 = e.refs;
        null === a2 ? delete b2[f2] : b2[f2] = a2;
      };
      b._stringRef = f2;
      return b;
    }
    if ("string" !== typeof a) throw Error(p(284));
    if (!c._owner) throw Error(p(290, a));
  }
  return a;
}
function Mg(a, b) {
  a = Object.prototype.toString.call(b);
  throw Error(p(31, "[object Object]" === a ? "object with keys {" + Object.keys(b).join(", ") + "}" : a));
}
function Ng(a) {
  var b = a._init;
  return b(a._payload);
}
function Og(a) {
  function b(b2, c2) {
    if (a) {
      var d2 = b2.deletions;
      null === d2 ? (b2.deletions = [c2], b2.flags |= 16) : d2.push(c2);
    }
  }
  function c(c2, d2) {
    if (!a) return null;
    for (; null !== d2; ) b(c2, d2), d2 = d2.sibling;
    return null;
  }
  function d(a2, b2) {
    for (a2 = /* @__PURE__ */ new Map(); null !== b2; ) null !== b2.key ? a2.set(b2.key, b2) : a2.set(b2.index, b2), b2 = b2.sibling;
    return a2;
  }
  function e(a2, b2) {
    a2 = Pg(a2, b2);
    a2.index = 0;
    a2.sibling = null;
    return a2;
  }
  function f2(b2, c2, d2) {
    b2.index = d2;
    if (!a) return b2.flags |= 1048576, c2;
    d2 = b2.alternate;
    if (null !== d2) return d2 = d2.index, d2 < c2 ? (b2.flags |= 2, c2) : d2;
    b2.flags |= 2;
    return c2;
  }
  function g(b2) {
    a && null === b2.alternate && (b2.flags |= 2);
    return b2;
  }
  function h(a2, b2, c2, d2) {
    if (null === b2 || 6 !== b2.tag) return b2 = Qg(c2, a2.mode, d2), b2.return = a2, b2;
    b2 = e(b2, c2);
    b2.return = a2;
    return b2;
  }
  function k2(a2, b2, c2, d2) {
    var f3 = c2.type;
    if (f3 === ya) return m2(a2, b2, c2.props.children, d2, c2.key);
    if (null !== b2 && (b2.elementType === f3 || "object" === typeof f3 && null !== f3 && f3.$$typeof === Ha && Ng(f3) === b2.type)) return d2 = e(b2, c2.props), d2.ref = Lg(a2, b2, c2), d2.return = a2, d2;
    d2 = Rg(c2.type, c2.key, c2.props, null, a2.mode, d2);
    d2.ref = Lg(a2, b2, c2);
    d2.return = a2;
    return d2;
  }
  function l2(a2, b2, c2, d2) {
    if (null === b2 || 4 !== b2.tag || b2.stateNode.containerInfo !== c2.containerInfo || b2.stateNode.implementation !== c2.implementation) return b2 = Sg(c2, a2.mode, d2), b2.return = a2, b2;
    b2 = e(b2, c2.children || []);
    b2.return = a2;
    return b2;
  }
  function m2(a2, b2, c2, d2, f3) {
    if (null === b2 || 7 !== b2.tag) return b2 = Tg(c2, a2.mode, d2, f3), b2.return = a2, b2;
    b2 = e(b2, c2);
    b2.return = a2;
    return b2;
  }
  function q2(a2, b2, c2) {
    if ("string" === typeof b2 && "" !== b2 || "number" === typeof b2) return b2 = Qg("" + b2, a2.mode, c2), b2.return = a2, b2;
    if ("object" === typeof b2 && null !== b2) {
      switch (b2.$$typeof) {
        case va:
          return c2 = Rg(b2.type, b2.key, b2.props, null, a2.mode, c2), c2.ref = Lg(a2, null, b2), c2.return = a2, c2;
        case wa:
          return b2 = Sg(b2, a2.mode, c2), b2.return = a2, b2;
        case Ha:
          var d2 = b2._init;
          return q2(a2, d2(b2._payload), c2);
      }
      if (eb(b2) || Ka(b2)) return b2 = Tg(b2, a2.mode, c2, null), b2.return = a2, b2;
      Mg(a2, b2);
    }
    return null;
  }
  function r2(a2, b2, c2, d2) {
    var e2 = null !== b2 ? b2.key : null;
    if ("string" === typeof c2 && "" !== c2 || "number" === typeof c2) return null !== e2 ? null : h(a2, b2, "" + c2, d2);
    if ("object" === typeof c2 && null !== c2) {
      switch (c2.$$typeof) {
        case va:
          return c2.key === e2 ? k2(a2, b2, c2, d2) : null;
        case wa:
          return c2.key === e2 ? l2(a2, b2, c2, d2) : null;
        case Ha:
          return e2 = c2._init, r2(
            a2,
            b2,
            e2(c2._payload),
            d2
          );
      }
      if (eb(c2) || Ka(c2)) return null !== e2 ? null : m2(a2, b2, c2, d2, null);
      Mg(a2, c2);
    }
    return null;
  }
  function y2(a2, b2, c2, d2, e2) {
    if ("string" === typeof d2 && "" !== d2 || "number" === typeof d2) return a2 = a2.get(c2) || null, h(b2, a2, "" + d2, e2);
    if ("object" === typeof d2 && null !== d2) {
      switch (d2.$$typeof) {
        case va:
          return a2 = a2.get(null === d2.key ? c2 : d2.key) || null, k2(b2, a2, d2, e2);
        case wa:
          return a2 = a2.get(null === d2.key ? c2 : d2.key) || null, l2(b2, a2, d2, e2);
        case Ha:
          var f3 = d2._init;
          return y2(a2, b2, c2, f3(d2._payload), e2);
      }
      if (eb(d2) || Ka(d2)) return a2 = a2.get(c2) || null, m2(b2, a2, d2, e2, null);
      Mg(b2, d2);
    }
    return null;
  }
  function n2(e2, g2, h2, k3) {
    for (var l3 = null, m3 = null, u2 = g2, w2 = g2 = 0, x2 = null; null !== u2 && w2 < h2.length; w2++) {
      u2.index > w2 ? (x2 = u2, u2 = null) : x2 = u2.sibling;
      var n3 = r2(e2, u2, h2[w2], k3);
      if (null === n3) {
        null === u2 && (u2 = x2);
        break;
      }
      a && u2 && null === n3.alternate && b(e2, u2);
      g2 = f2(n3, g2, w2);
      null === m3 ? l3 = n3 : m3.sibling = n3;
      m3 = n3;
      u2 = x2;
    }
    if (w2 === h2.length) return c(e2, u2), I && tg(e2, w2), l3;
    if (null === u2) {
      for (; w2 < h2.length; w2++) u2 = q2(e2, h2[w2], k3), null !== u2 && (g2 = f2(u2, g2, w2), null === m3 ? l3 = u2 : m3.sibling = u2, m3 = u2);
      I && tg(e2, w2);
      return l3;
    }
    for (u2 = d(e2, u2); w2 < h2.length; w2++) x2 = y2(u2, e2, w2, h2[w2], k3), null !== x2 && (a && null !== x2.alternate && u2.delete(null === x2.key ? w2 : x2.key), g2 = f2(x2, g2, w2), null === m3 ? l3 = x2 : m3.sibling = x2, m3 = x2);
    a && u2.forEach(function(a2) {
      return b(e2, a2);
    });
    I && tg(e2, w2);
    return l3;
  }
  function t2(e2, g2, h2, k3) {
    var l3 = Ka(h2);
    if ("function" !== typeof l3) throw Error(p(150));
    h2 = l3.call(h2);
    if (null == h2) throw Error(p(151));
    for (var u2 = l3 = null, m3 = g2, w2 = g2 = 0, x2 = null, n3 = h2.next(); null !== m3 && !n3.done; w2++, n3 = h2.next()) {
      m3.index > w2 ? (x2 = m3, m3 = null) : x2 = m3.sibling;
      var t3 = r2(e2, m3, n3.value, k3);
      if (null === t3) {
        null === m3 && (m3 = x2);
        break;
      }
      a && m3 && null === t3.alternate && b(e2, m3);
      g2 = f2(t3, g2, w2);
      null === u2 ? l3 = t3 : u2.sibling = t3;
      u2 = t3;
      m3 = x2;
    }
    if (n3.done) return c(
      e2,
      m3
    ), I && tg(e2, w2), l3;
    if (null === m3) {
      for (; !n3.done; w2++, n3 = h2.next()) n3 = q2(e2, n3.value, k3), null !== n3 && (g2 = f2(n3, g2, w2), null === u2 ? l3 = n3 : u2.sibling = n3, u2 = n3);
      I && tg(e2, w2);
      return l3;
    }
    for (m3 = d(e2, m3); !n3.done; w2++, n3 = h2.next()) n3 = y2(m3, e2, w2, n3.value, k3), null !== n3 && (a && null !== n3.alternate && m3.delete(null === n3.key ? w2 : n3.key), g2 = f2(n3, g2, w2), null === u2 ? l3 = n3 : u2.sibling = n3, u2 = n3);
    a && m3.forEach(function(a2) {
      return b(e2, a2);
    });
    I && tg(e2, w2);
    return l3;
  }
  function J2(a2, d2, f3, h2) {
    "object" === typeof f3 && null !== f3 && f3.type === ya && null === f3.key && (f3 = f3.props.children);
    if ("object" === typeof f3 && null !== f3) {
      switch (f3.$$typeof) {
        case va:
          a: {
            for (var k3 = f3.key, l3 = d2; null !== l3; ) {
              if (l3.key === k3) {
                k3 = f3.type;
                if (k3 === ya) {
                  if (7 === l3.tag) {
                    c(a2, l3.sibling);
                    d2 = e(l3, f3.props.children);
                    d2.return = a2;
                    a2 = d2;
                    break a;
                  }
                } else if (l3.elementType === k3 || "object" === typeof k3 && null !== k3 && k3.$$typeof === Ha && Ng(k3) === l3.type) {
                  c(a2, l3.sibling);
                  d2 = e(l3, f3.props);
                  d2.ref = Lg(a2, l3, f3);
                  d2.return = a2;
                  a2 = d2;
                  break a;
                }
                c(a2, l3);
                break;
              } else b(a2, l3);
              l3 = l3.sibling;
            }
            f3.type === ya ? (d2 = Tg(f3.props.children, a2.mode, h2, f3.key), d2.return = a2, a2 = d2) : (h2 = Rg(f3.type, f3.key, f3.props, null, a2.mode, h2), h2.ref = Lg(a2, d2, f3), h2.return = a2, a2 = h2);
          }
          return g(a2);
        case wa:
          a: {
            for (l3 = f3.key; null !== d2; ) {
              if (d2.key === l3) if (4 === d2.tag && d2.stateNode.containerInfo === f3.containerInfo && d2.stateNode.implementation === f3.implementation) {
                c(a2, d2.sibling);
                d2 = e(d2, f3.children || []);
                d2.return = a2;
                a2 = d2;
                break a;
              } else {
                c(a2, d2);
                break;
              }
              else b(a2, d2);
              d2 = d2.sibling;
            }
            d2 = Sg(f3, a2.mode, h2);
            d2.return = a2;
            a2 = d2;
          }
          return g(a2);
        case Ha:
          return l3 = f3._init, J2(a2, d2, l3(f3._payload), h2);
      }
      if (eb(f3)) return n2(a2, d2, f3, h2);
      if (Ka(f3)) return t2(a2, d2, f3, h2);
      Mg(a2, f3);
    }
    return "string" === typeof f3 && "" !== f3 || "number" === typeof f3 ? (f3 = "" + f3, null !== d2 && 6 === d2.tag ? (c(a2, d2.sibling), d2 = e(d2, f3), d2.return = a2, a2 = d2) : (c(a2, d2), d2 = Qg(f3, a2.mode, h2), d2.return = a2, a2 = d2), g(a2)) : c(a2, d2);
  }
  return J2;
}
var Ug = Og(true), Vg = Og(false), Wg = Uf(null), Xg = null, Yg = null, Zg = null;
function $g() {
  Zg = Yg = Xg = null;
}
function ah(a) {
  var b = Wg.current;
  E(Wg);
  a._currentValue = b;
}
function bh(a, b, c) {
  for (; null !== a; ) {
    var d = a.alternate;
    (a.childLanes & b) !== b ? (a.childLanes |= b, null !== d && (d.childLanes |= b)) : null !== d && (d.childLanes & b) !== b && (d.childLanes |= b);
    if (a === c) break;
    a = a.return;
  }
}
function ch(a, b) {
  Xg = a;
  Zg = Yg = null;
  a = a.dependencies;
  null !== a && null !== a.firstContext && (0 !== (a.lanes & b) && (dh = true), a.firstContext = null);
}
function eh(a) {
  var b = a._currentValue;
  if (Zg !== a) if (a = { context: a, memoizedValue: b, next: null }, null === Yg) {
    if (null === Xg) throw Error(p(308));
    Yg = a;
    Xg.dependencies = { lanes: 0, firstContext: a };
  } else Yg = Yg.next = a;
  return b;
}
var fh = null;
function gh(a) {
  null === fh ? fh = [a] : fh.push(a);
}
function hh(a, b, c, d) {
  var e = b.interleaved;
  null === e ? (c.next = c, gh(b)) : (c.next = e.next, e.next = c);
  b.interleaved = c;
  return ih(a, d);
}
function ih(a, b) {
  a.lanes |= b;
  var c = a.alternate;
  null !== c && (c.lanes |= b);
  c = a;
  for (a = a.return; null !== a; ) a.childLanes |= b, c = a.alternate, null !== c && (c.childLanes |= b), c = a, a = a.return;
  return 3 === c.tag ? c.stateNode : null;
}
var jh = false;
function kh(a) {
  a.updateQueue = { baseState: a.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, interleaved: null, lanes: 0 }, effects: null };
}
function lh(a, b) {
  a = a.updateQueue;
  b.updateQueue === a && (b.updateQueue = { baseState: a.baseState, firstBaseUpdate: a.firstBaseUpdate, lastBaseUpdate: a.lastBaseUpdate, shared: a.shared, effects: a.effects });
}
function mh(a, b) {
  return { eventTime: a, lane: b, tag: 0, payload: null, callback: null, next: null };
}
function nh(a, b, c) {
  var d = a.updateQueue;
  if (null === d) return null;
  d = d.shared;
  if (0 !== (K & 2)) {
    var e = d.pending;
    null === e ? b.next = b : (b.next = e.next, e.next = b);
    d.pending = b;
    return ih(a, c);
  }
  e = d.interleaved;
  null === e ? (b.next = b, gh(d)) : (b.next = e.next, e.next = b);
  d.interleaved = b;
  return ih(a, c);
}
function oh(a, b, c) {
  b = b.updateQueue;
  if (null !== b && (b = b.shared, 0 !== (c & 4194240))) {
    var d = b.lanes;
    d &= a.pendingLanes;
    c |= d;
    b.lanes = c;
    Cc(a, c);
  }
}
function ph(a, b) {
  var c = a.updateQueue, d = a.alternate;
  if (null !== d && (d = d.updateQueue, c === d)) {
    var e = null, f2 = null;
    c = c.firstBaseUpdate;
    if (null !== c) {
      do {
        var g = { eventTime: c.eventTime, lane: c.lane, tag: c.tag, payload: c.payload, callback: c.callback, next: null };
        null === f2 ? e = f2 = g : f2 = f2.next = g;
        c = c.next;
      } while (null !== c);
      null === f2 ? e = f2 = b : f2 = f2.next = b;
    } else e = f2 = b;
    c = { baseState: d.baseState, firstBaseUpdate: e, lastBaseUpdate: f2, shared: d.shared, effects: d.effects };
    a.updateQueue = c;
    return;
  }
  a = c.lastBaseUpdate;
  null === a ? c.firstBaseUpdate = b : a.next = b;
  c.lastBaseUpdate = b;
}
function qh(a, b, c, d) {
  var e = a.updateQueue;
  jh = false;
  var f2 = e.firstBaseUpdate, g = e.lastBaseUpdate, h = e.shared.pending;
  if (null !== h) {
    e.shared.pending = null;
    var k2 = h, l2 = k2.next;
    k2.next = null;
    null === g ? f2 = l2 : g.next = l2;
    g = k2;
    var m2 = a.alternate;
    null !== m2 && (m2 = m2.updateQueue, h = m2.lastBaseUpdate, h !== g && (null === h ? m2.firstBaseUpdate = l2 : h.next = l2, m2.lastBaseUpdate = k2));
  }
  if (null !== f2) {
    var q2 = e.baseState;
    g = 0;
    m2 = l2 = k2 = null;
    h = f2;
    do {
      var r2 = h.lane, y2 = h.eventTime;
      if ((d & r2) === r2) {
        null !== m2 && (m2 = m2.next = {
          eventTime: y2,
          lane: 0,
          tag: h.tag,
          payload: h.payload,
          callback: h.callback,
          next: null
        });
        a: {
          var n2 = a, t2 = h;
          r2 = b;
          y2 = c;
          switch (t2.tag) {
            case 1:
              n2 = t2.payload;
              if ("function" === typeof n2) {
                q2 = n2.call(y2, q2, r2);
                break a;
              }
              q2 = n2;
              break a;
            case 3:
              n2.flags = n2.flags & -65537 | 128;
            case 0:
              n2 = t2.payload;
              r2 = "function" === typeof n2 ? n2.call(y2, q2, r2) : n2;
              if (null === r2 || void 0 === r2) break a;
              q2 = A({}, q2, r2);
              break a;
            case 2:
              jh = true;
          }
        }
        null !== h.callback && 0 !== h.lane && (a.flags |= 64, r2 = e.effects, null === r2 ? e.effects = [h] : r2.push(h));
      } else y2 = { eventTime: y2, lane: r2, tag: h.tag, payload: h.payload, callback: h.callback, next: null }, null === m2 ? (l2 = m2 = y2, k2 = q2) : m2 = m2.next = y2, g |= r2;
      h = h.next;
      if (null === h) if (h = e.shared.pending, null === h) break;
      else r2 = h, h = r2.next, r2.next = null, e.lastBaseUpdate = r2, e.shared.pending = null;
    } while (1);
    null === m2 && (k2 = q2);
    e.baseState = k2;
    e.firstBaseUpdate = l2;
    e.lastBaseUpdate = m2;
    b = e.shared.interleaved;
    if (null !== b) {
      e = b;
      do
        g |= e.lane, e = e.next;
      while (e !== b);
    } else null === f2 && (e.shared.lanes = 0);
    rh |= g;
    a.lanes = g;
    a.memoizedState = q2;
  }
}
function sh(a, b, c) {
  a = b.effects;
  b.effects = null;
  if (null !== a) for (b = 0; b < a.length; b++) {
    var d = a[b], e = d.callback;
    if (null !== e) {
      d.callback = null;
      d = c;
      if ("function" !== typeof e) throw Error(p(191, e));
      e.call(d);
    }
  }
}
var th = {}, uh = Uf(th), vh = Uf(th), wh = Uf(th);
function xh(a) {
  if (a === th) throw Error(p(174));
  return a;
}
function yh(a, b) {
  G(wh, b);
  G(vh, a);
  G(uh, th);
  a = b.nodeType;
  switch (a) {
    case 9:
    case 11:
      b = (b = b.documentElement) ? b.namespaceURI : lb(null, "");
      break;
    default:
      a = 8 === a ? b.parentNode : b, b = a.namespaceURI || null, a = a.tagName, b = lb(b, a);
  }
  E(uh);
  G(uh, b);
}
function zh() {
  E(uh);
  E(vh);
  E(wh);
}
function Ah(a) {
  xh(wh.current);
  var b = xh(uh.current);
  var c = lb(b, a.type);
  b !== c && (G(vh, a), G(uh, c));
}
function Bh(a) {
  vh.current === a && (E(uh), E(vh));
}
var L = Uf(0);
function Ch(a) {
  for (var b = a; null !== b; ) {
    if (13 === b.tag) {
      var c = b.memoizedState;
      if (null !== c && (c = c.dehydrated, null === c || "$?" === c.data || "$!" === c.data)) return b;
    } else if (19 === b.tag && void 0 !== b.memoizedProps.revealOrder) {
      if (0 !== (b.flags & 128)) return b;
    } else if (null !== b.child) {
      b.child.return = b;
      b = b.child;
      continue;
    }
    if (b === a) break;
    for (; null === b.sibling; ) {
      if (null === b.return || b.return === a) return null;
      b = b.return;
    }
    b.sibling.return = b.return;
    b = b.sibling;
  }
  return null;
}
var Dh = [];
function Eh() {
  for (var a = 0; a < Dh.length; a++) Dh[a]._workInProgressVersionPrimary = null;
  Dh.length = 0;
}
var Fh = ua.ReactCurrentDispatcher, Gh = ua.ReactCurrentBatchConfig, Hh = 0, M = null, N = null, O = null, Ih = false, Jh = false, Kh = 0, Lh = 0;
function P() {
  throw Error(p(321));
}
function Mh(a, b) {
  if (null === b) return false;
  for (var c = 0; c < b.length && c < a.length; c++) if (!He(a[c], b[c])) return false;
  return true;
}
function Nh(a, b, c, d, e, f2) {
  Hh = f2;
  M = b;
  b.memoizedState = null;
  b.updateQueue = null;
  b.lanes = 0;
  Fh.current = null === a || null === a.memoizedState ? Oh : Ph;
  a = c(d, e);
  if (Jh) {
    f2 = 0;
    do {
      Jh = false;
      Kh = 0;
      if (25 <= f2) throw Error(p(301));
      f2 += 1;
      O = N = null;
      b.updateQueue = null;
      Fh.current = Qh;
      a = c(d, e);
    } while (Jh);
  }
  Fh.current = Rh;
  b = null !== N && null !== N.next;
  Hh = 0;
  O = N = M = null;
  Ih = false;
  if (b) throw Error(p(300));
  return a;
}
function Sh() {
  var a = 0 !== Kh;
  Kh = 0;
  return a;
}
function Th() {
  var a = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
  null === O ? M.memoizedState = O = a : O = O.next = a;
  return O;
}
function Uh() {
  if (null === N) {
    var a = M.alternate;
    a = null !== a ? a.memoizedState : null;
  } else a = N.next;
  var b = null === O ? M.memoizedState : O.next;
  if (null !== b) O = b, N = a;
  else {
    if (null === a) throw Error(p(310));
    N = a;
    a = { memoizedState: N.memoizedState, baseState: N.baseState, baseQueue: N.baseQueue, queue: N.queue, next: null };
    null === O ? M.memoizedState = O = a : O = O.next = a;
  }
  return O;
}
function Vh(a, b) {
  return "function" === typeof b ? b(a) : b;
}
function Wh(a) {
  var b = Uh(), c = b.queue;
  if (null === c) throw Error(p(311));
  c.lastRenderedReducer = a;
  var d = N, e = d.baseQueue, f2 = c.pending;
  if (null !== f2) {
    if (null !== e) {
      var g = e.next;
      e.next = f2.next;
      f2.next = g;
    }
    d.baseQueue = e = f2;
    c.pending = null;
  }
  if (null !== e) {
    f2 = e.next;
    d = d.baseState;
    var h = g = null, k2 = null, l2 = f2;
    do {
      var m2 = l2.lane;
      if ((Hh & m2) === m2) null !== k2 && (k2 = k2.next = { lane: 0, action: l2.action, hasEagerState: l2.hasEagerState, eagerState: l2.eagerState, next: null }), d = l2.hasEagerState ? l2.eagerState : a(d, l2.action);
      else {
        var q2 = {
          lane: m2,
          action: l2.action,
          hasEagerState: l2.hasEagerState,
          eagerState: l2.eagerState,
          next: null
        };
        null === k2 ? (h = k2 = q2, g = d) : k2 = k2.next = q2;
        M.lanes |= m2;
        rh |= m2;
      }
      l2 = l2.next;
    } while (null !== l2 && l2 !== f2);
    null === k2 ? g = d : k2.next = h;
    He(d, b.memoizedState) || (dh = true);
    b.memoizedState = d;
    b.baseState = g;
    b.baseQueue = k2;
    c.lastRenderedState = d;
  }
  a = c.interleaved;
  if (null !== a) {
    e = a;
    do
      f2 = e.lane, M.lanes |= f2, rh |= f2, e = e.next;
    while (e !== a);
  } else null === e && (c.lanes = 0);
  return [b.memoizedState, c.dispatch];
}
function Xh(a) {
  var b = Uh(), c = b.queue;
  if (null === c) throw Error(p(311));
  c.lastRenderedReducer = a;
  var d = c.dispatch, e = c.pending, f2 = b.memoizedState;
  if (null !== e) {
    c.pending = null;
    var g = e = e.next;
    do
      f2 = a(f2, g.action), g = g.next;
    while (g !== e);
    He(f2, b.memoizedState) || (dh = true);
    b.memoizedState = f2;
    null === b.baseQueue && (b.baseState = f2);
    c.lastRenderedState = f2;
  }
  return [f2, d];
}
function Yh() {
}
function Zh(a, b) {
  var c = M, d = Uh(), e = b(), f2 = !He(d.memoizedState, e);
  f2 && (d.memoizedState = e, dh = true);
  d = d.queue;
  $h(ai.bind(null, c, d, a), [a]);
  if (d.getSnapshot !== b || f2 || null !== O && O.memoizedState.tag & 1) {
    c.flags |= 2048;
    bi(9, ci.bind(null, c, d, e, b), void 0, null);
    if (null === Q) throw Error(p(349));
    0 !== (Hh & 30) || di(c, b, e);
  }
  return e;
}
function di(a, b, c) {
  a.flags |= 16384;
  a = { getSnapshot: b, value: c };
  b = M.updateQueue;
  null === b ? (b = { lastEffect: null, stores: null }, M.updateQueue = b, b.stores = [a]) : (c = b.stores, null === c ? b.stores = [a] : c.push(a));
}
function ci(a, b, c, d) {
  b.value = c;
  b.getSnapshot = d;
  ei(b) && fi(a);
}
function ai(a, b, c) {
  return c(function() {
    ei(b) && fi(a);
  });
}
function ei(a) {
  var b = a.getSnapshot;
  a = a.value;
  try {
    var c = b();
    return !He(a, c);
  } catch (d) {
    return true;
  }
}
function fi(a) {
  var b = ih(a, 1);
  null !== b && gi(b, a, 1, -1);
}
function hi(a) {
  var b = Th();
  "function" === typeof a && (a = a());
  b.memoizedState = b.baseState = a;
  a = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: Vh, lastRenderedState: a };
  b.queue = a;
  a = a.dispatch = ii.bind(null, M, a);
  return [b.memoizedState, a];
}
function bi(a, b, c, d) {
  a = { tag: a, create: b, destroy: c, deps: d, next: null };
  b = M.updateQueue;
  null === b ? (b = { lastEffect: null, stores: null }, M.updateQueue = b, b.lastEffect = a.next = a) : (c = b.lastEffect, null === c ? b.lastEffect = a.next = a : (d = c.next, c.next = a, a.next = d, b.lastEffect = a));
  return a;
}
function ji() {
  return Uh().memoizedState;
}
function ki(a, b, c, d) {
  var e = Th();
  M.flags |= a;
  e.memoizedState = bi(1 | b, c, void 0, void 0 === d ? null : d);
}
function li(a, b, c, d) {
  var e = Uh();
  d = void 0 === d ? null : d;
  var f2 = void 0;
  if (null !== N) {
    var g = N.memoizedState;
    f2 = g.destroy;
    if (null !== d && Mh(d, g.deps)) {
      e.memoizedState = bi(b, c, f2, d);
      return;
    }
  }
  M.flags |= a;
  e.memoizedState = bi(1 | b, c, f2, d);
}
function mi(a, b) {
  return ki(8390656, 8, a, b);
}
function $h(a, b) {
  return li(2048, 8, a, b);
}
function ni(a, b) {
  return li(4, 2, a, b);
}
function oi(a, b) {
  return li(4, 4, a, b);
}
function pi(a, b) {
  if ("function" === typeof b) return a = a(), b(a), function() {
    b(null);
  };
  if (null !== b && void 0 !== b) return a = a(), b.current = a, function() {
    b.current = null;
  };
}
function qi(a, b, c) {
  c = null !== c && void 0 !== c ? c.concat([a]) : null;
  return li(4, 4, pi.bind(null, b, a), c);
}
function ri() {
}
function si(a, b) {
  var c = Uh();
  b = void 0 === b ? null : b;
  var d = c.memoizedState;
  if (null !== d && null !== b && Mh(b, d[1])) return d[0];
  c.memoizedState = [a, b];
  return a;
}
function ti(a, b) {
  var c = Uh();
  b = void 0 === b ? null : b;
  var d = c.memoizedState;
  if (null !== d && null !== b && Mh(b, d[1])) return d[0];
  a = a();
  c.memoizedState = [a, b];
  return a;
}
function ui(a, b, c) {
  if (0 === (Hh & 21)) return a.baseState && (a.baseState = false, dh = true), a.memoizedState = c;
  He(c, b) || (c = yc(), M.lanes |= c, rh |= c, a.baseState = true);
  return b;
}
function vi(a, b) {
  var c = C;
  C = 0 !== c && 4 > c ? c : 4;
  a(true);
  var d = Gh.transition;
  Gh.transition = {};
  try {
    a(false), b();
  } finally {
    C = c, Gh.transition = d;
  }
}
function wi() {
  return Uh().memoizedState;
}
function xi(a, b, c) {
  var d = yi(a);
  c = { lane: d, action: c, hasEagerState: false, eagerState: null, next: null };
  if (zi(a)) Ai(b, c);
  else if (c = hh(a, b, c, d), null !== c) {
    var e = R();
    gi(c, a, d, e);
    Bi(c, b, d);
  }
}
function ii(a, b, c) {
  var d = yi(a), e = { lane: d, action: c, hasEagerState: false, eagerState: null, next: null };
  if (zi(a)) Ai(b, e);
  else {
    var f2 = a.alternate;
    if (0 === a.lanes && (null === f2 || 0 === f2.lanes) && (f2 = b.lastRenderedReducer, null !== f2)) try {
      var g = b.lastRenderedState, h = f2(g, c);
      e.hasEagerState = true;
      e.eagerState = h;
      if (He(h, g)) {
        var k2 = b.interleaved;
        null === k2 ? (e.next = e, gh(b)) : (e.next = k2.next, k2.next = e);
        b.interleaved = e;
        return;
      }
    } catch (l2) {
    } finally {
    }
    c = hh(a, b, e, d);
    null !== c && (e = R(), gi(c, a, d, e), Bi(c, b, d));
  }
}
function zi(a) {
  var b = a.alternate;
  return a === M || null !== b && b === M;
}
function Ai(a, b) {
  Jh = Ih = true;
  var c = a.pending;
  null === c ? b.next = b : (b.next = c.next, c.next = b);
  a.pending = b;
}
function Bi(a, b, c) {
  if (0 !== (c & 4194240)) {
    var d = b.lanes;
    d &= a.pendingLanes;
    c |= d;
    b.lanes = c;
    Cc(a, c);
  }
}
var Rh = { readContext: eh, useCallback: P, useContext: P, useEffect: P, useImperativeHandle: P, useInsertionEffect: P, useLayoutEffect: P, useMemo: P, useReducer: P, useRef: P, useState: P, useDebugValue: P, useDeferredValue: P, useTransition: P, useMutableSource: P, useSyncExternalStore: P, useId: P, unstable_isNewReconciler: false }, Oh = { readContext: eh, useCallback: function(a, b) {
  Th().memoizedState = [a, void 0 === b ? null : b];
  return a;
}, useContext: eh, useEffect: mi, useImperativeHandle: function(a, b, c) {
  c = null !== c && void 0 !== c ? c.concat([a]) : null;
  return ki(
    4194308,
    4,
    pi.bind(null, b, a),
    c
  );
}, useLayoutEffect: function(a, b) {
  return ki(4194308, 4, a, b);
}, useInsertionEffect: function(a, b) {
  return ki(4, 2, a, b);
}, useMemo: function(a, b) {
  var c = Th();
  b = void 0 === b ? null : b;
  a = a();
  c.memoizedState = [a, b];
  return a;
}, useReducer: function(a, b, c) {
  var d = Th();
  b = void 0 !== c ? c(b) : b;
  d.memoizedState = d.baseState = b;
  a = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: a, lastRenderedState: b };
  d.queue = a;
  a = a.dispatch = xi.bind(null, M, a);
  return [d.memoizedState, a];
}, useRef: function(a) {
  var b = Th();
  a = { current: a };
  return b.memoizedState = a;
}, useState: hi, useDebugValue: ri, useDeferredValue: function(a) {
  return Th().memoizedState = a;
}, useTransition: function() {
  var a = hi(false), b = a[0];
  a = vi.bind(null, a[1]);
  Th().memoizedState = a;
  return [b, a];
}, useMutableSource: function() {
}, useSyncExternalStore: function(a, b, c) {
  var d = M, e = Th();
  if (I) {
    if (void 0 === c) throw Error(p(407));
    c = c();
  } else {
    c = b();
    if (null === Q) throw Error(p(349));
    0 !== (Hh & 30) || di(d, b, c);
  }
  e.memoizedState = c;
  var f2 = { value: c, getSnapshot: b };
  e.queue = f2;
  mi(ai.bind(
    null,
    d,
    f2,
    a
  ), [a]);
  d.flags |= 2048;
  bi(9, ci.bind(null, d, f2, c, b), void 0, null);
  return c;
}, useId: function() {
  var a = Th(), b = Q.identifierPrefix;
  if (I) {
    var c = sg;
    var d = rg;
    c = (d & ~(1 << 32 - oc(d) - 1)).toString(32) + c;
    b = ":" + b + "R" + c;
    c = Kh++;
    0 < c && (b += "H" + c.toString(32));
    b += ":";
  } else c = Lh++, b = ":" + b + "r" + c.toString(32) + ":";
  return a.memoizedState = b;
}, unstable_isNewReconciler: false }, Ph = {
  readContext: eh,
  useCallback: si,
  useContext: eh,
  useEffect: $h,
  useImperativeHandle: qi,
  useInsertionEffect: ni,
  useLayoutEffect: oi,
  useMemo: ti,
  useReducer: Wh,
  useRef: ji,
  useState: function() {
    return Wh(Vh);
  },
  useDebugValue: ri,
  useDeferredValue: function(a) {
    var b = Uh();
    return ui(b, N.memoizedState, a);
  },
  useTransition: function() {
    var a = Wh(Vh)[0], b = Uh().memoizedState;
    return [a, b];
  },
  useMutableSource: Yh,
  useSyncExternalStore: Zh,
  useId: wi,
  unstable_isNewReconciler: false
}, Qh = { readContext: eh, useCallback: si, useContext: eh, useEffect: $h, useImperativeHandle: qi, useInsertionEffect: ni, useLayoutEffect: oi, useMemo: ti, useReducer: Xh, useRef: ji, useState: function() {
  return Xh(Vh);
}, useDebugValue: ri, useDeferredValue: function(a) {
  var b = Uh();
  return null === N ? b.memoizedState = a : ui(b, N.memoizedState, a);
}, useTransition: function() {
  var a = Xh(Vh)[0], b = Uh().memoizedState;
  return [a, b];
}, useMutableSource: Yh, useSyncExternalStore: Zh, useId: wi, unstable_isNewReconciler: false };
function Ci(a, b) {
  if (a && a.defaultProps) {
    b = A({}, b);
    a = a.defaultProps;
    for (var c in a) void 0 === b[c] && (b[c] = a[c]);
    return b;
  }
  return b;
}
function Di(a, b, c, d) {
  b = a.memoizedState;
  c = c(d, b);
  c = null === c || void 0 === c ? b : A({}, b, c);
  a.memoizedState = c;
  0 === a.lanes && (a.updateQueue.baseState = c);
}
var Ei = { isMounted: function(a) {
  return (a = a._reactInternals) ? Vb(a) === a : false;
}, enqueueSetState: function(a, b, c) {
  a = a._reactInternals;
  var d = R(), e = yi(a), f2 = mh(d, e);
  f2.payload = b;
  void 0 !== c && null !== c && (f2.callback = c);
  b = nh(a, f2, e);
  null !== b && (gi(b, a, e, d), oh(b, a, e));
}, enqueueReplaceState: function(a, b, c) {
  a = a._reactInternals;
  var d = R(), e = yi(a), f2 = mh(d, e);
  f2.tag = 1;
  f2.payload = b;
  void 0 !== c && null !== c && (f2.callback = c);
  b = nh(a, f2, e);
  null !== b && (gi(b, a, e, d), oh(b, a, e));
}, enqueueForceUpdate: function(a, b) {
  a = a._reactInternals;
  var c = R(), d = yi(a), e = mh(c, d);
  e.tag = 2;
  void 0 !== b && null !== b && (e.callback = b);
  b = nh(a, e, d);
  null !== b && (gi(b, a, d, c), oh(b, a, d));
} };
function Fi(a, b, c, d, e, f2, g) {
  a = a.stateNode;
  return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d, f2, g) : b.prototype && b.prototype.isPureReactComponent ? !Ie(c, d) || !Ie(e, f2) : true;
}
function Gi(a, b, c) {
  var d = false, e = Vf;
  var f2 = b.contextType;
  "object" === typeof f2 && null !== f2 ? f2 = eh(f2) : (e = Zf(b) ? Xf : H.current, d = b.contextTypes, f2 = (d = null !== d && void 0 !== d) ? Yf(a, e) : Vf);
  b = new b(c, f2);
  a.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null;
  b.updater = Ei;
  a.stateNode = b;
  b._reactInternals = a;
  d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f2);
  return b;
}
function Hi(a, b, c, d) {
  a = b.state;
  "function" === typeof b.componentWillReceiveProps && b.componentWillReceiveProps(c, d);
  "function" === typeof b.UNSAFE_componentWillReceiveProps && b.UNSAFE_componentWillReceiveProps(c, d);
  b.state !== a && Ei.enqueueReplaceState(b, b.state, null);
}
function Ii(a, b, c, d) {
  var e = a.stateNode;
  e.props = c;
  e.state = a.memoizedState;
  e.refs = {};
  kh(a);
  var f2 = b.contextType;
  "object" === typeof f2 && null !== f2 ? e.context = eh(f2) : (f2 = Zf(b) ? Xf : H.current, e.context = Yf(a, f2));
  e.state = a.memoizedState;
  f2 = b.getDerivedStateFromProps;
  "function" === typeof f2 && (Di(a, b, f2, c), e.state = a.memoizedState);
  "function" === typeof b.getDerivedStateFromProps || "function" === typeof e.getSnapshotBeforeUpdate || "function" !== typeof e.UNSAFE_componentWillMount && "function" !== typeof e.componentWillMount || (b = e.state, "function" === typeof e.componentWillMount && e.componentWillMount(), "function" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b !== e.state && Ei.enqueueReplaceState(e, e.state, null), qh(a, c, e, d), e.state = a.memoizedState);
  "function" === typeof e.componentDidMount && (a.flags |= 4194308);
}
function Ji(a, b) {
  try {
    var c = "", d = b;
    do
      c += Pa(d), d = d.return;
    while (d);
    var e = c;
  } catch (f2) {
    e = "\nError generating stack: " + f2.message + "\n" + f2.stack;
  }
  return { value: a, source: b, stack: e, digest: null };
}
function Ki(a, b, c) {
  return { value: a, source: null, stack: null != c ? c : null, digest: null != b ? b : null };
}
function Li(a, b) {
  try {
    console.error(b.value);
  } catch (c) {
    setTimeout(function() {
      throw c;
    });
  }
}
var Mi = "function" === typeof WeakMap ? WeakMap : Map;
function Ni(a, b, c) {
  c = mh(-1, c);
  c.tag = 3;
  c.payload = { element: null };
  var d = b.value;
  c.callback = function() {
    Oi || (Oi = true, Pi = d);
    Li(a, b);
  };
  return c;
}
function Qi(a, b, c) {
  c = mh(-1, c);
  c.tag = 3;
  var d = a.type.getDerivedStateFromError;
  if ("function" === typeof d) {
    var e = b.value;
    c.payload = function() {
      return d(e);
    };
    c.callback = function() {
      Li(a, b);
    };
  }
  var f2 = a.stateNode;
  null !== f2 && "function" === typeof f2.componentDidCatch && (c.callback = function() {
    Li(a, b);
    "function" !== typeof d && (null === Ri ? Ri = /* @__PURE__ */ new Set([this]) : Ri.add(this));
    var c2 = b.stack;
    this.componentDidCatch(b.value, { componentStack: null !== c2 ? c2 : "" });
  });
  return c;
}
function Si(a, b, c) {
  var d = a.pingCache;
  if (null === d) {
    d = a.pingCache = new Mi();
    var e = /* @__PURE__ */ new Set();
    d.set(b, e);
  } else e = d.get(b), void 0 === e && (e = /* @__PURE__ */ new Set(), d.set(b, e));
  e.has(c) || (e.add(c), a = Ti.bind(null, a, b, c), b.then(a, a));
}
function Ui(a) {
  do {
    var b;
    if (b = 13 === a.tag) b = a.memoizedState, b = null !== b ? null !== b.dehydrated ? true : false : true;
    if (b) return a;
    a = a.return;
  } while (null !== a);
  return null;
}
function Vi(a, b, c, d, e) {
  if (0 === (a.mode & 1)) return a === b ? a.flags |= 65536 : (a.flags |= 128, c.flags |= 131072, c.flags &= -52805, 1 === c.tag && (null === c.alternate ? c.tag = 17 : (b = mh(-1, 1), b.tag = 2, nh(c, b, 1))), c.lanes |= 1), a;
  a.flags |= 65536;
  a.lanes = e;
  return a;
}
var Wi = ua.ReactCurrentOwner, dh = false;
function Xi(a, b, c, d) {
  b.child = null === a ? Vg(b, null, c, d) : Ug(b, a.child, c, d);
}
function Yi(a, b, c, d, e) {
  c = c.render;
  var f2 = b.ref;
  ch(b, e);
  d = Nh(a, b, c, d, f2, e);
  c = Sh();
  if (null !== a && !dh) return b.updateQueue = a.updateQueue, b.flags &= -2053, a.lanes &= ~e, Zi(a, b, e);
  I && c && vg(b);
  b.flags |= 1;
  Xi(a, b, d, e);
  return b.child;
}
function $i(a, b, c, d, e) {
  if (null === a) {
    var f2 = c.type;
    if ("function" === typeof f2 && !aj(f2) && void 0 === f2.defaultProps && null === c.compare && void 0 === c.defaultProps) return b.tag = 15, b.type = f2, bj(a, b, f2, d, e);
    a = Rg(c.type, null, d, b, b.mode, e);
    a.ref = b.ref;
    a.return = b;
    return b.child = a;
  }
  f2 = a.child;
  if (0 === (a.lanes & e)) {
    var g = f2.memoizedProps;
    c = c.compare;
    c = null !== c ? c : Ie;
    if (c(g, d) && a.ref === b.ref) return Zi(a, b, e);
  }
  b.flags |= 1;
  a = Pg(f2, d);
  a.ref = b.ref;
  a.return = b;
  return b.child = a;
}
function bj(a, b, c, d, e) {
  if (null !== a) {
    var f2 = a.memoizedProps;
    if (Ie(f2, d) && a.ref === b.ref) if (dh = false, b.pendingProps = d = f2, 0 !== (a.lanes & e)) 0 !== (a.flags & 131072) && (dh = true);
    else return b.lanes = a.lanes, Zi(a, b, e);
  }
  return cj(a, b, c, d, e);
}
function dj(a, b, c) {
  var d = b.pendingProps, e = d.children, f2 = null !== a ? a.memoizedState : null;
  if ("hidden" === d.mode) if (0 === (b.mode & 1)) b.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, G(ej, fj), fj |= c;
  else {
    if (0 === (c & 1073741824)) return a = null !== f2 ? f2.baseLanes | c : c, b.lanes = b.childLanes = 1073741824, b.memoizedState = { baseLanes: a, cachePool: null, transitions: null }, b.updateQueue = null, G(ej, fj), fj |= a, null;
    b.memoizedState = { baseLanes: 0, cachePool: null, transitions: null };
    d = null !== f2 ? f2.baseLanes : c;
    G(ej, fj);
    fj |= d;
  }
  else null !== f2 ? (d = f2.baseLanes | c, b.memoizedState = null) : d = c, G(ej, fj), fj |= d;
  Xi(a, b, e, c);
  return b.child;
}
function gj(a, b) {
  var c = b.ref;
  if (null === a && null !== c || null !== a && a.ref !== c) b.flags |= 512, b.flags |= 2097152;
}
function cj(a, b, c, d, e) {
  var f2 = Zf(c) ? Xf : H.current;
  f2 = Yf(b, f2);
  ch(b, e);
  c = Nh(a, b, c, d, f2, e);
  d = Sh();
  if (null !== a && !dh) return b.updateQueue = a.updateQueue, b.flags &= -2053, a.lanes &= ~e, Zi(a, b, e);
  I && d && vg(b);
  b.flags |= 1;
  Xi(a, b, c, e);
  return b.child;
}
function hj(a, b, c, d, e) {
  if (Zf(c)) {
    var f2 = true;
    cg(b);
  } else f2 = false;
  ch(b, e);
  if (null === b.stateNode) ij(a, b), Gi(b, c, d), Ii(b, c, d, e), d = true;
  else if (null === a) {
    var g = b.stateNode, h = b.memoizedProps;
    g.props = h;
    var k2 = g.context, l2 = c.contextType;
    "object" === typeof l2 && null !== l2 ? l2 = eh(l2) : (l2 = Zf(c) ? Xf : H.current, l2 = Yf(b, l2));
    var m2 = c.getDerivedStateFromProps, q2 = "function" === typeof m2 || "function" === typeof g.getSnapshotBeforeUpdate;
    q2 || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== d || k2 !== l2) && Hi(b, g, d, l2);
    jh = false;
    var r2 = b.memoizedState;
    g.state = r2;
    qh(b, d, g, e);
    k2 = b.memoizedState;
    h !== d || r2 !== k2 || Wf.current || jh ? ("function" === typeof m2 && (Di(b, c, m2, d), k2 = b.memoizedState), (h = jh || Fi(b, c, h, d, r2, k2, l2)) ? (q2 || "function" !== typeof g.UNSAFE_componentWillMount && "function" !== typeof g.componentWillMount || ("function" === typeof g.componentWillMount && g.componentWillMount(), "function" === typeof g.UNSAFE_componentWillMount && g.UNSAFE_componentWillMount()), "function" === typeof g.componentDidMount && (b.flags |= 4194308)) : ("function" === typeof g.componentDidMount && (b.flags |= 4194308), b.memoizedProps = d, b.memoizedState = k2), g.props = d, g.state = k2, g.context = l2, d = h) : ("function" === typeof g.componentDidMount && (b.flags |= 4194308), d = false);
  } else {
    g = b.stateNode;
    lh(a, b);
    h = b.memoizedProps;
    l2 = b.type === b.elementType ? h : Ci(b.type, h);
    g.props = l2;
    q2 = b.pendingProps;
    r2 = g.context;
    k2 = c.contextType;
    "object" === typeof k2 && null !== k2 ? k2 = eh(k2) : (k2 = Zf(c) ? Xf : H.current, k2 = Yf(b, k2));
    var y2 = c.getDerivedStateFromProps;
    (m2 = "function" === typeof y2 || "function" === typeof g.getSnapshotBeforeUpdate) || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== q2 || r2 !== k2) && Hi(b, g, d, k2);
    jh = false;
    r2 = b.memoizedState;
    g.state = r2;
    qh(b, d, g, e);
    var n2 = b.memoizedState;
    h !== q2 || r2 !== n2 || Wf.current || jh ? ("function" === typeof y2 && (Di(b, c, y2, d), n2 = b.memoizedState), (l2 = jh || Fi(b, c, l2, d, r2, n2, k2) || false) ? (m2 || "function" !== typeof g.UNSAFE_componentWillUpdate && "function" !== typeof g.componentWillUpdate || ("function" === typeof g.componentWillUpdate && g.componentWillUpdate(d, n2, k2), "function" === typeof g.UNSAFE_componentWillUpdate && g.UNSAFE_componentWillUpdate(d, n2, k2)), "function" === typeof g.componentDidUpdate && (b.flags |= 4), "function" === typeof g.getSnapshotBeforeUpdate && (b.flags |= 1024)) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && r2 === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && r2 === a.memoizedState || (b.flags |= 1024), b.memoizedProps = d, b.memoizedState = n2), g.props = d, g.state = n2, g.context = k2, d = l2) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && r2 === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && r2 === a.memoizedState || (b.flags |= 1024), d = false);
  }
  return jj(a, b, c, d, f2, e);
}
function jj(a, b, c, d, e, f2) {
  gj(a, b);
  var g = 0 !== (b.flags & 128);
  if (!d && !g) return e && dg(b, c, false), Zi(a, b, f2);
  d = b.stateNode;
  Wi.current = b;
  var h = g && "function" !== typeof c.getDerivedStateFromError ? null : d.render();
  b.flags |= 1;
  null !== a && g ? (b.child = Ug(b, a.child, null, f2), b.child = Ug(b, null, h, f2)) : Xi(a, b, h, f2);
  b.memoizedState = d.state;
  e && dg(b, c, true);
  return b.child;
}
function kj(a) {
  var b = a.stateNode;
  b.pendingContext ? ag(a, b.pendingContext, b.pendingContext !== b.context) : b.context && ag(a, b.context, false);
  yh(a, b.containerInfo);
}
function lj(a, b, c, d, e) {
  Ig();
  Jg(e);
  b.flags |= 256;
  Xi(a, b, c, d);
  return b.child;
}
var mj = { dehydrated: null, treeContext: null, retryLane: 0 };
function nj(a) {
  return { baseLanes: a, cachePool: null, transitions: null };
}
function oj(a, b, c) {
  var d = b.pendingProps, e = L.current, f2 = false, g = 0 !== (b.flags & 128), h;
  (h = g) || (h = null !== a && null === a.memoizedState ? false : 0 !== (e & 2));
  if (h) f2 = true, b.flags &= -129;
  else if (null === a || null !== a.memoizedState) e |= 1;
  G(L, e & 1);
  if (null === a) {
    Eg(b);
    a = b.memoizedState;
    if (null !== a && (a = a.dehydrated, null !== a)) return 0 === (b.mode & 1) ? b.lanes = 1 : "$!" === a.data ? b.lanes = 8 : b.lanes = 1073741824, null;
    g = d.children;
    a = d.fallback;
    return f2 ? (d = b.mode, f2 = b.child, g = { mode: "hidden", children: g }, 0 === (d & 1) && null !== f2 ? (f2.childLanes = 0, f2.pendingProps = g) : f2 = pj(g, d, 0, null), a = Tg(a, d, c, null), f2.return = b, a.return = b, f2.sibling = a, b.child = f2, b.child.memoizedState = nj(c), b.memoizedState = mj, a) : qj(b, g);
  }
  e = a.memoizedState;
  if (null !== e && (h = e.dehydrated, null !== h)) return rj(a, b, g, d, h, e, c);
  if (f2) {
    f2 = d.fallback;
    g = b.mode;
    e = a.child;
    h = e.sibling;
    var k2 = { mode: "hidden", children: d.children };
    0 === (g & 1) && b.child !== e ? (d = b.child, d.childLanes = 0, d.pendingProps = k2, b.deletions = null) : (d = Pg(e, k2), d.subtreeFlags = e.subtreeFlags & 14680064);
    null !== h ? f2 = Pg(h, f2) : (f2 = Tg(f2, g, c, null), f2.flags |= 2);
    f2.return = b;
    d.return = b;
    d.sibling = f2;
    b.child = d;
    d = f2;
    f2 = b.child;
    g = a.child.memoizedState;
    g = null === g ? nj(c) : { baseLanes: g.baseLanes | c, cachePool: null, transitions: g.transitions };
    f2.memoizedState = g;
    f2.childLanes = a.childLanes & ~c;
    b.memoizedState = mj;
    return d;
  }
  f2 = a.child;
  a = f2.sibling;
  d = Pg(f2, { mode: "visible", children: d.children });
  0 === (b.mode & 1) && (d.lanes = c);
  d.return = b;
  d.sibling = null;
  null !== a && (c = b.deletions, null === c ? (b.deletions = [a], b.flags |= 16) : c.push(a));
  b.child = d;
  b.memoizedState = null;
  return d;
}
function qj(a, b) {
  b = pj({ mode: "visible", children: b }, a.mode, 0, null);
  b.return = a;
  return a.child = b;
}
function sj(a, b, c, d) {
  null !== d && Jg(d);
  Ug(b, a.child, null, c);
  a = qj(b, b.pendingProps.children);
  a.flags |= 2;
  b.memoizedState = null;
  return a;
}
function rj(a, b, c, d, e, f2, g) {
  if (c) {
    if (b.flags & 256) return b.flags &= -257, d = Ki(Error(p(422))), sj(a, b, g, d);
    if (null !== b.memoizedState) return b.child = a.child, b.flags |= 128, null;
    f2 = d.fallback;
    e = b.mode;
    d = pj({ mode: "visible", children: d.children }, e, 0, null);
    f2 = Tg(f2, e, g, null);
    f2.flags |= 2;
    d.return = b;
    f2.return = b;
    d.sibling = f2;
    b.child = d;
    0 !== (b.mode & 1) && Ug(b, a.child, null, g);
    b.child.memoizedState = nj(g);
    b.memoizedState = mj;
    return f2;
  }
  if (0 === (b.mode & 1)) return sj(a, b, g, null);
  if ("$!" === e.data) {
    d = e.nextSibling && e.nextSibling.dataset;
    if (d) var h = d.dgst;
    d = h;
    f2 = Error(p(419));
    d = Ki(f2, d, void 0);
    return sj(a, b, g, d);
  }
  h = 0 !== (g & a.childLanes);
  if (dh || h) {
    d = Q;
    if (null !== d) {
      switch (g & -g) {
        case 4:
          e = 2;
          break;
        case 16:
          e = 8;
          break;
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          e = 32;
          break;
        case 536870912:
          e = 268435456;
          break;
        default:
          e = 0;
      }
      e = 0 !== (e & (d.suspendedLanes | g)) ? 0 : e;
      0 !== e && e !== f2.retryLane && (f2.retryLane = e, ih(a, e), gi(d, a, e, -1));
    }
    tj();
    d = Ki(Error(p(421)));
    return sj(a, b, g, d);
  }
  if ("$?" === e.data) return b.flags |= 128, b.child = a.child, b = uj.bind(null, a), e._reactRetry = b, null;
  a = f2.treeContext;
  yg = Lf(e.nextSibling);
  xg = b;
  I = true;
  zg = null;
  null !== a && (og[pg++] = rg, og[pg++] = sg, og[pg++] = qg, rg = a.id, sg = a.overflow, qg = b);
  b = qj(b, d.children);
  b.flags |= 4096;
  return b;
}
function vj(a, b, c) {
  a.lanes |= b;
  var d = a.alternate;
  null !== d && (d.lanes |= b);
  bh(a.return, b, c);
}
function wj(a, b, c, d, e) {
  var f2 = a.memoizedState;
  null === f2 ? a.memoizedState = { isBackwards: b, rendering: null, renderingStartTime: 0, last: d, tail: c, tailMode: e } : (f2.isBackwards = b, f2.rendering = null, f2.renderingStartTime = 0, f2.last = d, f2.tail = c, f2.tailMode = e);
}
function xj(a, b, c) {
  var d = b.pendingProps, e = d.revealOrder, f2 = d.tail;
  Xi(a, b, d.children, c);
  d = L.current;
  if (0 !== (d & 2)) d = d & 1 | 2, b.flags |= 128;
  else {
    if (null !== a && 0 !== (a.flags & 128)) a: for (a = b.child; null !== a; ) {
      if (13 === a.tag) null !== a.memoizedState && vj(a, c, b);
      else if (19 === a.tag) vj(a, c, b);
      else if (null !== a.child) {
        a.child.return = a;
        a = a.child;
        continue;
      }
      if (a === b) break a;
      for (; null === a.sibling; ) {
        if (null === a.return || a.return === b) break a;
        a = a.return;
      }
      a.sibling.return = a.return;
      a = a.sibling;
    }
    d &= 1;
  }
  G(L, d);
  if (0 === (b.mode & 1)) b.memoizedState = null;
  else switch (e) {
    case "forwards":
      c = b.child;
      for (e = null; null !== c; ) a = c.alternate, null !== a && null === Ch(a) && (e = c), c = c.sibling;
      c = e;
      null === c ? (e = b.child, b.child = null) : (e = c.sibling, c.sibling = null);
      wj(b, false, e, c, f2);
      break;
    case "backwards":
      c = null;
      e = b.child;
      for (b.child = null; null !== e; ) {
        a = e.alternate;
        if (null !== a && null === Ch(a)) {
          b.child = e;
          break;
        }
        a = e.sibling;
        e.sibling = c;
        c = e;
        e = a;
      }
      wj(b, true, c, null, f2);
      break;
    case "together":
      wj(b, false, null, null, void 0);
      break;
    default:
      b.memoizedState = null;
  }
  return b.child;
}
function ij(a, b) {
  0 === (b.mode & 1) && null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2);
}
function Zi(a, b, c) {
  null !== a && (b.dependencies = a.dependencies);
  rh |= b.lanes;
  if (0 === (c & b.childLanes)) return null;
  if (null !== a && b.child !== a.child) throw Error(p(153));
  if (null !== b.child) {
    a = b.child;
    c = Pg(a, a.pendingProps);
    b.child = c;
    for (c.return = b; null !== a.sibling; ) a = a.sibling, c = c.sibling = Pg(a, a.pendingProps), c.return = b;
    c.sibling = null;
  }
  return b.child;
}
function yj(a, b, c) {
  switch (b.tag) {
    case 3:
      kj(b);
      Ig();
      break;
    case 5:
      Ah(b);
      break;
    case 1:
      Zf(b.type) && cg(b);
      break;
    case 4:
      yh(b, b.stateNode.containerInfo);
      break;
    case 10:
      var d = b.type._context, e = b.memoizedProps.value;
      G(Wg, d._currentValue);
      d._currentValue = e;
      break;
    case 13:
      d = b.memoizedState;
      if (null !== d) {
        if (null !== d.dehydrated) return G(L, L.current & 1), b.flags |= 128, null;
        if (0 !== (c & b.child.childLanes)) return oj(a, b, c);
        G(L, L.current & 1);
        a = Zi(a, b, c);
        return null !== a ? a.sibling : null;
      }
      G(L, L.current & 1);
      break;
    case 19:
      d = 0 !== (c & b.childLanes);
      if (0 !== (a.flags & 128)) {
        if (d) return xj(a, b, c);
        b.flags |= 128;
      }
      e = b.memoizedState;
      null !== e && (e.rendering = null, e.tail = null, e.lastEffect = null);
      G(L, L.current);
      if (d) break;
      else return null;
    case 22:
    case 23:
      return b.lanes = 0, dj(a, b, c);
  }
  return Zi(a, b, c);
}
var zj, Aj, Bj, Cj;
zj = function(a, b) {
  for (var c = b.child; null !== c; ) {
    if (5 === c.tag || 6 === c.tag) a.appendChild(c.stateNode);
    else if (4 !== c.tag && null !== c.child) {
      c.child.return = c;
      c = c.child;
      continue;
    }
    if (c === b) break;
    for (; null === c.sibling; ) {
      if (null === c.return || c.return === b) return;
      c = c.return;
    }
    c.sibling.return = c.return;
    c = c.sibling;
  }
};
Aj = function() {
};
Bj = function(a, b, c, d) {
  var e = a.memoizedProps;
  if (e !== d) {
    a = b.stateNode;
    xh(uh.current);
    var f2 = null;
    switch (c) {
      case "input":
        e = Ya(a, e);
        d = Ya(a, d);
        f2 = [];
        break;
      case "select":
        e = A({}, e, { value: void 0 });
        d = A({}, d, { value: void 0 });
        f2 = [];
        break;
      case "textarea":
        e = gb(a, e);
        d = gb(a, d);
        f2 = [];
        break;
      default:
        "function" !== typeof e.onClick && "function" === typeof d.onClick && (a.onclick = Bf);
    }
    ub(c, d);
    var g;
    c = null;
    for (l2 in e) if (!d.hasOwnProperty(l2) && e.hasOwnProperty(l2) && null != e[l2]) if ("style" === l2) {
      var h = e[l2];
      for (g in h) h.hasOwnProperty(g) && (c || (c = {}), c[g] = "");
    } else "dangerouslySetInnerHTML" !== l2 && "children" !== l2 && "suppressContentEditableWarning" !== l2 && "suppressHydrationWarning" !== l2 && "autoFocus" !== l2 && (ea.hasOwnProperty(l2) ? f2 || (f2 = []) : (f2 = f2 || []).push(l2, null));
    for (l2 in d) {
      var k2 = d[l2];
      h = null != e ? e[l2] : void 0;
      if (d.hasOwnProperty(l2) && k2 !== h && (null != k2 || null != h)) if ("style" === l2) if (h) {
        for (g in h) !h.hasOwnProperty(g) || k2 && k2.hasOwnProperty(g) || (c || (c = {}), c[g] = "");
        for (g in k2) k2.hasOwnProperty(g) && h[g] !== k2[g] && (c || (c = {}), c[g] = k2[g]);
      } else c || (f2 || (f2 = []), f2.push(
        l2,
        c
      )), c = k2;
      else "dangerouslySetInnerHTML" === l2 ? (k2 = k2 ? k2.__html : void 0, h = h ? h.__html : void 0, null != k2 && h !== k2 && (f2 = f2 || []).push(l2, k2)) : "children" === l2 ? "string" !== typeof k2 && "number" !== typeof k2 || (f2 = f2 || []).push(l2, "" + k2) : "suppressContentEditableWarning" !== l2 && "suppressHydrationWarning" !== l2 && (ea.hasOwnProperty(l2) ? (null != k2 && "onScroll" === l2 && D("scroll", a), f2 || h === k2 || (f2 = [])) : (f2 = f2 || []).push(l2, k2));
    }
    c && (f2 = f2 || []).push("style", c);
    var l2 = f2;
    if (b.updateQueue = l2) b.flags |= 4;
  }
};
Cj = function(a, b, c, d) {
  c !== d && (b.flags |= 4);
};
function Dj(a, b) {
  if (!I) switch (a.tailMode) {
    case "hidden":
      b = a.tail;
      for (var c = null; null !== b; ) null !== b.alternate && (c = b), b = b.sibling;
      null === c ? a.tail = null : c.sibling = null;
      break;
    case "collapsed":
      c = a.tail;
      for (var d = null; null !== c; ) null !== c.alternate && (d = c), c = c.sibling;
      null === d ? b || null === a.tail ? a.tail = null : a.tail.sibling = null : d.sibling = null;
  }
}
function S(a) {
  var b = null !== a.alternate && a.alternate.child === a.child, c = 0, d = 0;
  if (b) for (var e = a.child; null !== e; ) c |= e.lanes | e.childLanes, d |= e.subtreeFlags & 14680064, d |= e.flags & 14680064, e.return = a, e = e.sibling;
  else for (e = a.child; null !== e; ) c |= e.lanes | e.childLanes, d |= e.subtreeFlags, d |= e.flags, e.return = a, e = e.sibling;
  a.subtreeFlags |= d;
  a.childLanes = c;
  return b;
}
function Ej(a, b, c) {
  var d = b.pendingProps;
  wg(b);
  switch (b.tag) {
    case 2:
    case 16:
    case 15:
    case 0:
    case 11:
    case 7:
    case 8:
    case 12:
    case 9:
    case 14:
      return S(b), null;
    case 1:
      return Zf(b.type) && $f(), S(b), null;
    case 3:
      d = b.stateNode;
      zh();
      E(Wf);
      E(H);
      Eh();
      d.pendingContext && (d.context = d.pendingContext, d.pendingContext = null);
      if (null === a || null === a.child) Gg(b) ? b.flags |= 4 : null === a || a.memoizedState.isDehydrated && 0 === (b.flags & 256) || (b.flags |= 1024, null !== zg && (Fj(zg), zg = null));
      Aj(a, b);
      S(b);
      return null;
    case 5:
      Bh(b);
      var e = xh(wh.current);
      c = b.type;
      if (null !== a && null != b.stateNode) Bj(a, b, c, d, e), a.ref !== b.ref && (b.flags |= 512, b.flags |= 2097152);
      else {
        if (!d) {
          if (null === b.stateNode) throw Error(p(166));
          S(b);
          return null;
        }
        a = xh(uh.current);
        if (Gg(b)) {
          d = b.stateNode;
          c = b.type;
          var f2 = b.memoizedProps;
          d[Of] = b;
          d[Pf] = f2;
          a = 0 !== (b.mode & 1);
          switch (c) {
            case "dialog":
              D("cancel", d);
              D("close", d);
              break;
            case "iframe":
            case "object":
            case "embed":
              D("load", d);
              break;
            case "video":
            case "audio":
              for (e = 0; e < lf.length; e++) D(lf[e], d);
              break;
            case "source":
              D("error", d);
              break;
            case "img":
            case "image":
            case "link":
              D(
                "error",
                d
              );
              D("load", d);
              break;
            case "details":
              D("toggle", d);
              break;
            case "input":
              Za(d, f2);
              D("invalid", d);
              break;
            case "select":
              d._wrapperState = { wasMultiple: !!f2.multiple };
              D("invalid", d);
              break;
            case "textarea":
              hb(d, f2), D("invalid", d);
          }
          ub(c, f2);
          e = null;
          for (var g in f2) if (f2.hasOwnProperty(g)) {
            var h = f2[g];
            "children" === g ? "string" === typeof h ? d.textContent !== h && (true !== f2.suppressHydrationWarning && Af(d.textContent, h, a), e = ["children", h]) : "number" === typeof h && d.textContent !== "" + h && (true !== f2.suppressHydrationWarning && Af(
              d.textContent,
              h,
              a
            ), e = ["children", "" + h]) : ea.hasOwnProperty(g) && null != h && "onScroll" === g && D("scroll", d);
          }
          switch (c) {
            case "input":
              Va(d);
              db(d, f2, true);
              break;
            case "textarea":
              Va(d);
              jb(d);
              break;
            case "select":
            case "option":
              break;
            default:
              "function" === typeof f2.onClick && (d.onclick = Bf);
          }
          d = e;
          b.updateQueue = d;
          null !== d && (b.flags |= 4);
        } else {
          g = 9 === e.nodeType ? e : e.ownerDocument;
          "http://www.w3.org/1999/xhtml" === a && (a = kb(c));
          "http://www.w3.org/1999/xhtml" === a ? "script" === c ? (a = g.createElement("div"), a.innerHTML = "<script><\/script>", a = a.removeChild(a.firstChild)) : "string" === typeof d.is ? a = g.createElement(c, { is: d.is }) : (a = g.createElement(c), "select" === c && (g = a, d.multiple ? g.multiple = true : d.size && (g.size = d.size))) : a = g.createElementNS(a, c);
          a[Of] = b;
          a[Pf] = d;
          zj(a, b, false, false);
          b.stateNode = a;
          a: {
            g = vb(c, d);
            switch (c) {
              case "dialog":
                D("cancel", a);
                D("close", a);
                e = d;
                break;
              case "iframe":
              case "object":
              case "embed":
                D("load", a);
                e = d;
                break;
              case "video":
              case "audio":
                for (e = 0; e < lf.length; e++) D(lf[e], a);
                e = d;
                break;
              case "source":
                D("error", a);
                e = d;
                break;
              case "img":
              case "image":
              case "link":
                D(
                  "error",
                  a
                );
                D("load", a);
                e = d;
                break;
              case "details":
                D("toggle", a);
                e = d;
                break;
              case "input":
                Za(a, d);
                e = Ya(a, d);
                D("invalid", a);
                break;
              case "option":
                e = d;
                break;
              case "select":
                a._wrapperState = { wasMultiple: !!d.multiple };
                e = A({}, d, { value: void 0 });
                D("invalid", a);
                break;
              case "textarea":
                hb(a, d);
                e = gb(a, d);
                D("invalid", a);
                break;
              default:
                e = d;
            }
            ub(c, e);
            h = e;
            for (f2 in h) if (h.hasOwnProperty(f2)) {
              var k2 = h[f2];
              "style" === f2 ? sb(a, k2) : "dangerouslySetInnerHTML" === f2 ? (k2 = k2 ? k2.__html : void 0, null != k2 && nb(a, k2)) : "children" === f2 ? "string" === typeof k2 ? ("textarea" !== c || "" !== k2) && ob(a, k2) : "number" === typeof k2 && ob(a, "" + k2) : "suppressContentEditableWarning" !== f2 && "suppressHydrationWarning" !== f2 && "autoFocus" !== f2 && (ea.hasOwnProperty(f2) ? null != k2 && "onScroll" === f2 && D("scroll", a) : null != k2 && ta(a, f2, k2, g));
            }
            switch (c) {
              case "input":
                Va(a);
                db(a, d, false);
                break;
              case "textarea":
                Va(a);
                jb(a);
                break;
              case "option":
                null != d.value && a.setAttribute("value", "" + Sa(d.value));
                break;
              case "select":
                a.multiple = !!d.multiple;
                f2 = d.value;
                null != f2 ? fb(a, !!d.multiple, f2, false) : null != d.defaultValue && fb(
                  a,
                  !!d.multiple,
                  d.defaultValue,
                  true
                );
                break;
              default:
                "function" === typeof e.onClick && (a.onclick = Bf);
            }
            switch (c) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                d = !!d.autoFocus;
                break a;
              case "img":
                d = true;
                break a;
              default:
                d = false;
            }
          }
          d && (b.flags |= 4);
        }
        null !== b.ref && (b.flags |= 512, b.flags |= 2097152);
      }
      S(b);
      return null;
    case 6:
      if (a && null != b.stateNode) Cj(a, b, a.memoizedProps, d);
      else {
        if ("string" !== typeof d && null === b.stateNode) throw Error(p(166));
        c = xh(wh.current);
        xh(uh.current);
        if (Gg(b)) {
          d = b.stateNode;
          c = b.memoizedProps;
          d[Of] = b;
          if (f2 = d.nodeValue !== c) {
            if (a = xg, null !== a) switch (a.tag) {
              case 3:
                Af(d.nodeValue, c, 0 !== (a.mode & 1));
                break;
              case 5:
                true !== a.memoizedProps.suppressHydrationWarning && Af(d.nodeValue, c, 0 !== (a.mode & 1));
            }
          }
          f2 && (b.flags |= 4);
        } else d = (9 === c.nodeType ? c : c.ownerDocument).createTextNode(d), d[Of] = b, b.stateNode = d;
      }
      S(b);
      return null;
    case 13:
      E(L);
      d = b.memoizedState;
      if (null === a || null !== a.memoizedState && null !== a.memoizedState.dehydrated) {
        if (I && null !== yg && 0 !== (b.mode & 1) && 0 === (b.flags & 128)) Hg(), Ig(), b.flags |= 98560, f2 = false;
        else if (f2 = Gg(b), null !== d && null !== d.dehydrated) {
          if (null === a) {
            if (!f2) throw Error(p(318));
            f2 = b.memoizedState;
            f2 = null !== f2 ? f2.dehydrated : null;
            if (!f2) throw Error(p(317));
            f2[Of] = b;
          } else Ig(), 0 === (b.flags & 128) && (b.memoizedState = null), b.flags |= 4;
          S(b);
          f2 = false;
        } else null !== zg && (Fj(zg), zg = null), f2 = true;
        if (!f2) return b.flags & 65536 ? b : null;
      }
      if (0 !== (b.flags & 128)) return b.lanes = c, b;
      d = null !== d;
      d !== (null !== a && null !== a.memoizedState) && d && (b.child.flags |= 8192, 0 !== (b.mode & 1) && (null === a || 0 !== (L.current & 1) ? 0 === T && (T = 3) : tj()));
      null !== b.updateQueue && (b.flags |= 4);
      S(b);
      return null;
    case 4:
      return zh(), Aj(a, b), null === a && sf(b.stateNode.containerInfo), S(b), null;
    case 10:
      return ah(b.type._context), S(b), null;
    case 17:
      return Zf(b.type) && $f(), S(b), null;
    case 19:
      E(L);
      f2 = b.memoizedState;
      if (null === f2) return S(b), null;
      d = 0 !== (b.flags & 128);
      g = f2.rendering;
      if (null === g) if (d) Dj(f2, false);
      else {
        if (0 !== T || null !== a && 0 !== (a.flags & 128)) for (a = b.child; null !== a; ) {
          g = Ch(a);
          if (null !== g) {
            b.flags |= 128;
            Dj(f2, false);
            d = g.updateQueue;
            null !== d && (b.updateQueue = d, b.flags |= 4);
            b.subtreeFlags = 0;
            d = c;
            for (c = b.child; null !== c; ) f2 = c, a = d, f2.flags &= 14680066, g = f2.alternate, null === g ? (f2.childLanes = 0, f2.lanes = a, f2.child = null, f2.subtreeFlags = 0, f2.memoizedProps = null, f2.memoizedState = null, f2.updateQueue = null, f2.dependencies = null, f2.stateNode = null) : (f2.childLanes = g.childLanes, f2.lanes = g.lanes, f2.child = g.child, f2.subtreeFlags = 0, f2.deletions = null, f2.memoizedProps = g.memoizedProps, f2.memoizedState = g.memoizedState, f2.updateQueue = g.updateQueue, f2.type = g.type, a = g.dependencies, f2.dependencies = null === a ? null : { lanes: a.lanes, firstContext: a.firstContext }), c = c.sibling;
            G(L, L.current & 1 | 2);
            return b.child;
          }
          a = a.sibling;
        }
        null !== f2.tail && B() > Gj && (b.flags |= 128, d = true, Dj(f2, false), b.lanes = 4194304);
      }
      else {
        if (!d) if (a = Ch(g), null !== a) {
          if (b.flags |= 128, d = true, c = a.updateQueue, null !== c && (b.updateQueue = c, b.flags |= 4), Dj(f2, true), null === f2.tail && "hidden" === f2.tailMode && !g.alternate && !I) return S(b), null;
        } else 2 * B() - f2.renderingStartTime > Gj && 1073741824 !== c && (b.flags |= 128, d = true, Dj(f2, false), b.lanes = 4194304);
        f2.isBackwards ? (g.sibling = b.child, b.child = g) : (c = f2.last, null !== c ? c.sibling = g : b.child = g, f2.last = g);
      }
      if (null !== f2.tail) return b = f2.tail, f2.rendering = b, f2.tail = b.sibling, f2.renderingStartTime = B(), b.sibling = null, c = L.current, G(L, d ? c & 1 | 2 : c & 1), b;
      S(b);
      return null;
    case 22:
    case 23:
      return Hj(), d = null !== b.memoizedState, null !== a && null !== a.memoizedState !== d && (b.flags |= 8192), d && 0 !== (b.mode & 1) ? 0 !== (fj & 1073741824) && (S(b), b.subtreeFlags & 6 && (b.flags |= 8192)) : S(b), null;
    case 24:
      return null;
    case 25:
      return null;
  }
  throw Error(p(156, b.tag));
}
function Ij(a, b) {
  wg(b);
  switch (b.tag) {
    case 1:
      return Zf(b.type) && $f(), a = b.flags, a & 65536 ? (b.flags = a & -65537 | 128, b) : null;
    case 3:
      return zh(), E(Wf), E(H), Eh(), a = b.flags, 0 !== (a & 65536) && 0 === (a & 128) ? (b.flags = a & -65537 | 128, b) : null;
    case 5:
      return Bh(b), null;
    case 13:
      E(L);
      a = b.memoizedState;
      if (null !== a && null !== a.dehydrated) {
        if (null === b.alternate) throw Error(p(340));
        Ig();
      }
      a = b.flags;
      return a & 65536 ? (b.flags = a & -65537 | 128, b) : null;
    case 19:
      return E(L), null;
    case 4:
      return zh(), null;
    case 10:
      return ah(b.type._context), null;
    case 22:
    case 23:
      return Hj(), null;
    case 24:
      return null;
    default:
      return null;
  }
}
var Jj = false, U = false, Kj = "function" === typeof WeakSet ? WeakSet : Set, V = null;
function Lj(a, b) {
  var c = a.ref;
  if (null !== c) if ("function" === typeof c) try {
    c(null);
  } catch (d) {
    W(a, b, d);
  }
  else c.current = null;
}
function Mj(a, b, c) {
  try {
    c();
  } catch (d) {
    W(a, b, d);
  }
}
var Nj = false;
function Oj(a, b) {
  Cf = dd;
  a = Me();
  if (Ne(a)) {
    if ("selectionStart" in a) var c = { start: a.selectionStart, end: a.selectionEnd };
    else a: {
      c = (c = a.ownerDocument) && c.defaultView || window;
      var d = c.getSelection && c.getSelection();
      if (d && 0 !== d.rangeCount) {
        c = d.anchorNode;
        var e = d.anchorOffset, f2 = d.focusNode;
        d = d.focusOffset;
        try {
          c.nodeType, f2.nodeType;
        } catch (F2) {
          c = null;
          break a;
        }
        var g = 0, h = -1, k2 = -1, l2 = 0, m2 = 0, q2 = a, r2 = null;
        b: for (; ; ) {
          for (var y2; ; ) {
            q2 !== c || 0 !== e && 3 !== q2.nodeType || (h = g + e);
            q2 !== f2 || 0 !== d && 3 !== q2.nodeType || (k2 = g + d);
            3 === q2.nodeType && (g += q2.nodeValue.length);
            if (null === (y2 = q2.firstChild)) break;
            r2 = q2;
            q2 = y2;
          }
          for (; ; ) {
            if (q2 === a) break b;
            r2 === c && ++l2 === e && (h = g);
            r2 === f2 && ++m2 === d && (k2 = g);
            if (null !== (y2 = q2.nextSibling)) break;
            q2 = r2;
            r2 = q2.parentNode;
          }
          q2 = y2;
        }
        c = -1 === h || -1 === k2 ? null : { start: h, end: k2 };
      } else c = null;
    }
    c = c || { start: 0, end: 0 };
  } else c = null;
  Df = { focusedElem: a, selectionRange: c };
  dd = false;
  for (V = b; null !== V; ) if (b = V, a = b.child, 0 !== (b.subtreeFlags & 1028) && null !== a) a.return = b, V = a;
  else for (; null !== V; ) {
    b = V;
    try {
      var n2 = b.alternate;
      if (0 !== (b.flags & 1024)) switch (b.tag) {
        case 0:
        case 11:
        case 15:
          break;
        case 1:
          if (null !== n2) {
            var t2 = n2.memoizedProps, J2 = n2.memoizedState, x2 = b.stateNode, w2 = x2.getSnapshotBeforeUpdate(b.elementType === b.type ? t2 : Ci(b.type, t2), J2);
            x2.__reactInternalSnapshotBeforeUpdate = w2;
          }
          break;
        case 3:
          var u2 = b.stateNode.containerInfo;
          1 === u2.nodeType ? u2.textContent = "" : 9 === u2.nodeType && u2.documentElement && u2.removeChild(u2.documentElement);
          break;
        case 5:
        case 6:
        case 4:
        case 17:
          break;
        default:
          throw Error(p(163));
      }
    } catch (F2) {
      W(b, b.return, F2);
    }
    a = b.sibling;
    if (null !== a) {
      a.return = b.return;
      V = a;
      break;
    }
    V = b.return;
  }
  n2 = Nj;
  Nj = false;
  return n2;
}
function Pj(a, b, c) {
  var d = b.updateQueue;
  d = null !== d ? d.lastEffect : null;
  if (null !== d) {
    var e = d = d.next;
    do {
      if ((e.tag & a) === a) {
        var f2 = e.destroy;
        e.destroy = void 0;
        void 0 !== f2 && Mj(b, c, f2);
      }
      e = e.next;
    } while (e !== d);
  }
}
function Qj(a, b) {
  b = b.updateQueue;
  b = null !== b ? b.lastEffect : null;
  if (null !== b) {
    var c = b = b.next;
    do {
      if ((c.tag & a) === a) {
        var d = c.create;
        c.destroy = d();
      }
      c = c.next;
    } while (c !== b);
  }
}
function Rj(a) {
  var b = a.ref;
  if (null !== b) {
    var c = a.stateNode;
    switch (a.tag) {
      case 5:
        a = c;
        break;
      default:
        a = c;
    }
    "function" === typeof b ? b(a) : b.current = a;
  }
}
function Sj(a) {
  var b = a.alternate;
  null !== b && (a.alternate = null, Sj(b));
  a.child = null;
  a.deletions = null;
  a.sibling = null;
  5 === a.tag && (b = a.stateNode, null !== b && (delete b[Of], delete b[Pf], delete b[of], delete b[Qf], delete b[Rf]));
  a.stateNode = null;
  a.return = null;
  a.dependencies = null;
  a.memoizedProps = null;
  a.memoizedState = null;
  a.pendingProps = null;
  a.stateNode = null;
  a.updateQueue = null;
}
function Tj(a) {
  return 5 === a.tag || 3 === a.tag || 4 === a.tag;
}
function Uj(a) {
  a: for (; ; ) {
    for (; null === a.sibling; ) {
      if (null === a.return || Tj(a.return)) return null;
      a = a.return;
    }
    a.sibling.return = a.return;
    for (a = a.sibling; 5 !== a.tag && 6 !== a.tag && 18 !== a.tag; ) {
      if (a.flags & 2) continue a;
      if (null === a.child || 4 === a.tag) continue a;
      else a.child.return = a, a = a.child;
    }
    if (!(a.flags & 2)) return a.stateNode;
  }
}
function Vj(a, b, c) {
  var d = a.tag;
  if (5 === d || 6 === d) a = a.stateNode, b ? 8 === c.nodeType ? c.parentNode.insertBefore(a, b) : c.insertBefore(a, b) : (8 === c.nodeType ? (b = c.parentNode, b.insertBefore(a, c)) : (b = c, b.appendChild(a)), c = c._reactRootContainer, null !== c && void 0 !== c || null !== b.onclick || (b.onclick = Bf));
  else if (4 !== d && (a = a.child, null !== a)) for (Vj(a, b, c), a = a.sibling; null !== a; ) Vj(a, b, c), a = a.sibling;
}
function Wj(a, b, c) {
  var d = a.tag;
  if (5 === d || 6 === d) a = a.stateNode, b ? c.insertBefore(a, b) : c.appendChild(a);
  else if (4 !== d && (a = a.child, null !== a)) for (Wj(a, b, c), a = a.sibling; null !== a; ) Wj(a, b, c), a = a.sibling;
}
var X = null, Xj = false;
function Yj(a, b, c) {
  for (c = c.child; null !== c; ) Zj(a, b, c), c = c.sibling;
}
function Zj(a, b, c) {
  if (lc && "function" === typeof lc.onCommitFiberUnmount) try {
    lc.onCommitFiberUnmount(kc, c);
  } catch (h) {
  }
  switch (c.tag) {
    case 5:
      U || Lj(c, b);
    case 6:
      var d = X, e = Xj;
      X = null;
      Yj(a, b, c);
      X = d;
      Xj = e;
      null !== X && (Xj ? (a = X, c = c.stateNode, 8 === a.nodeType ? a.parentNode.removeChild(c) : a.removeChild(c)) : X.removeChild(c.stateNode));
      break;
    case 18:
      null !== X && (Xj ? (a = X, c = c.stateNode, 8 === a.nodeType ? Kf(a.parentNode, c) : 1 === a.nodeType && Kf(a, c), bd(a)) : Kf(X, c.stateNode));
      break;
    case 4:
      d = X;
      e = Xj;
      X = c.stateNode.containerInfo;
      Xj = true;
      Yj(a, b, c);
      X = d;
      Xj = e;
      break;
    case 0:
    case 11:
    case 14:
    case 15:
      if (!U && (d = c.updateQueue, null !== d && (d = d.lastEffect, null !== d))) {
        e = d = d.next;
        do {
          var f2 = e, g = f2.destroy;
          f2 = f2.tag;
          void 0 !== g && (0 !== (f2 & 2) ? Mj(c, b, g) : 0 !== (f2 & 4) && Mj(c, b, g));
          e = e.next;
        } while (e !== d);
      }
      Yj(a, b, c);
      break;
    case 1:
      if (!U && (Lj(c, b), d = c.stateNode, "function" === typeof d.componentWillUnmount)) try {
        d.props = c.memoizedProps, d.state = c.memoizedState, d.componentWillUnmount();
      } catch (h) {
        W(c, b, h);
      }
      Yj(a, b, c);
      break;
    case 21:
      Yj(a, b, c);
      break;
    case 22:
      c.mode & 1 ? (U = (d = U) || null !== c.memoizedState, Yj(a, b, c), U = d) : Yj(a, b, c);
      break;
    default:
      Yj(a, b, c);
  }
}
function ak(a) {
  var b = a.updateQueue;
  if (null !== b) {
    a.updateQueue = null;
    var c = a.stateNode;
    null === c && (c = a.stateNode = new Kj());
    b.forEach(function(b2) {
      var d = bk.bind(null, a, b2);
      c.has(b2) || (c.add(b2), b2.then(d, d));
    });
  }
}
function ck(a, b) {
  var c = b.deletions;
  if (null !== c) for (var d = 0; d < c.length; d++) {
    var e = c[d];
    try {
      var f2 = a, g = b, h = g;
      a: for (; null !== h; ) {
        switch (h.tag) {
          case 5:
            X = h.stateNode;
            Xj = false;
            break a;
          case 3:
            X = h.stateNode.containerInfo;
            Xj = true;
            break a;
          case 4:
            X = h.stateNode.containerInfo;
            Xj = true;
            break a;
        }
        h = h.return;
      }
      if (null === X) throw Error(p(160));
      Zj(f2, g, e);
      X = null;
      Xj = false;
      var k2 = e.alternate;
      null !== k2 && (k2.return = null);
      e.return = null;
    } catch (l2) {
      W(e, b, l2);
    }
  }
  if (b.subtreeFlags & 12854) for (b = b.child; null !== b; ) dk(b, a), b = b.sibling;
}
function dk(a, b) {
  var c = a.alternate, d = a.flags;
  switch (a.tag) {
    case 0:
    case 11:
    case 14:
    case 15:
      ck(b, a);
      ek(a);
      if (d & 4) {
        try {
          Pj(3, a, a.return), Qj(3, a);
        } catch (t2) {
          W(a, a.return, t2);
        }
        try {
          Pj(5, a, a.return);
        } catch (t2) {
          W(a, a.return, t2);
        }
      }
      break;
    case 1:
      ck(b, a);
      ek(a);
      d & 512 && null !== c && Lj(c, c.return);
      break;
    case 5:
      ck(b, a);
      ek(a);
      d & 512 && null !== c && Lj(c, c.return);
      if (a.flags & 32) {
        var e = a.stateNode;
        try {
          ob(e, "");
        } catch (t2) {
          W(a, a.return, t2);
        }
      }
      if (d & 4 && (e = a.stateNode, null != e)) {
        var f2 = a.memoizedProps, g = null !== c ? c.memoizedProps : f2, h = a.type, k2 = a.updateQueue;
        a.updateQueue = null;
        if (null !== k2) try {
          "input" === h && "radio" === f2.type && null != f2.name && ab(e, f2);
          vb(h, g);
          var l2 = vb(h, f2);
          for (g = 0; g < k2.length; g += 2) {
            var m2 = k2[g], q2 = k2[g + 1];
            "style" === m2 ? sb(e, q2) : "dangerouslySetInnerHTML" === m2 ? nb(e, q2) : "children" === m2 ? ob(e, q2) : ta(e, m2, q2, l2);
          }
          switch (h) {
            case "input":
              bb(e, f2);
              break;
            case "textarea":
              ib(e, f2);
              break;
            case "select":
              var r2 = e._wrapperState.wasMultiple;
              e._wrapperState.wasMultiple = !!f2.multiple;
              var y2 = f2.value;
              null != y2 ? fb(e, !!f2.multiple, y2, false) : r2 !== !!f2.multiple && (null != f2.defaultValue ? fb(
                e,
                !!f2.multiple,
                f2.defaultValue,
                true
              ) : fb(e, !!f2.multiple, f2.multiple ? [] : "", false));
          }
          e[Pf] = f2;
        } catch (t2) {
          W(a, a.return, t2);
        }
      }
      break;
    case 6:
      ck(b, a);
      ek(a);
      if (d & 4) {
        if (null === a.stateNode) throw Error(p(162));
        e = a.stateNode;
        f2 = a.memoizedProps;
        try {
          e.nodeValue = f2;
        } catch (t2) {
          W(a, a.return, t2);
        }
      }
      break;
    case 3:
      ck(b, a);
      ek(a);
      if (d & 4 && null !== c && c.memoizedState.isDehydrated) try {
        bd(b.containerInfo);
      } catch (t2) {
        W(a, a.return, t2);
      }
      break;
    case 4:
      ck(b, a);
      ek(a);
      break;
    case 13:
      ck(b, a);
      ek(a);
      e = a.child;
      e.flags & 8192 && (f2 = null !== e.memoizedState, e.stateNode.isHidden = f2, !f2 || null !== e.alternate && null !== e.alternate.memoizedState || (fk = B()));
      d & 4 && ak(a);
      break;
    case 22:
      m2 = null !== c && null !== c.memoizedState;
      a.mode & 1 ? (U = (l2 = U) || m2, ck(b, a), U = l2) : ck(b, a);
      ek(a);
      if (d & 8192) {
        l2 = null !== a.memoizedState;
        if ((a.stateNode.isHidden = l2) && !m2 && 0 !== (a.mode & 1)) for (V = a, m2 = a.child; null !== m2; ) {
          for (q2 = V = m2; null !== V; ) {
            r2 = V;
            y2 = r2.child;
            switch (r2.tag) {
              case 0:
              case 11:
              case 14:
              case 15:
                Pj(4, r2, r2.return);
                break;
              case 1:
                Lj(r2, r2.return);
                var n2 = r2.stateNode;
                if ("function" === typeof n2.componentWillUnmount) {
                  d = r2;
                  c = r2.return;
                  try {
                    b = d, n2.props = b.memoizedProps, n2.state = b.memoizedState, n2.componentWillUnmount();
                  } catch (t2) {
                    W(d, c, t2);
                  }
                }
                break;
              case 5:
                Lj(r2, r2.return);
                break;
              case 22:
                if (null !== r2.memoizedState) {
                  gk(q2);
                  continue;
                }
            }
            null !== y2 ? (y2.return = r2, V = y2) : gk(q2);
          }
          m2 = m2.sibling;
        }
        a: for (m2 = null, q2 = a; ; ) {
          if (5 === q2.tag) {
            if (null === m2) {
              m2 = q2;
              try {
                e = q2.stateNode, l2 ? (f2 = e.style, "function" === typeof f2.setProperty ? f2.setProperty("display", "none", "important") : f2.display = "none") : (h = q2.stateNode, k2 = q2.memoizedProps.style, g = void 0 !== k2 && null !== k2 && k2.hasOwnProperty("display") ? k2.display : null, h.style.display = rb("display", g));
              } catch (t2) {
                W(a, a.return, t2);
              }
            }
          } else if (6 === q2.tag) {
            if (null === m2) try {
              q2.stateNode.nodeValue = l2 ? "" : q2.memoizedProps;
            } catch (t2) {
              W(a, a.return, t2);
            }
          } else if ((22 !== q2.tag && 23 !== q2.tag || null === q2.memoizedState || q2 === a) && null !== q2.child) {
            q2.child.return = q2;
            q2 = q2.child;
            continue;
          }
          if (q2 === a) break a;
          for (; null === q2.sibling; ) {
            if (null === q2.return || q2.return === a) break a;
            m2 === q2 && (m2 = null);
            q2 = q2.return;
          }
          m2 === q2 && (m2 = null);
          q2.sibling.return = q2.return;
          q2 = q2.sibling;
        }
      }
      break;
    case 19:
      ck(b, a);
      ek(a);
      d & 4 && ak(a);
      break;
    case 21:
      break;
    default:
      ck(
        b,
        a
      ), ek(a);
  }
}
function ek(a) {
  var b = a.flags;
  if (b & 2) {
    try {
      a: {
        for (var c = a.return; null !== c; ) {
          if (Tj(c)) {
            var d = c;
            break a;
          }
          c = c.return;
        }
        throw Error(p(160));
      }
      switch (d.tag) {
        case 5:
          var e = d.stateNode;
          d.flags & 32 && (ob(e, ""), d.flags &= -33);
          var f2 = Uj(a);
          Wj(a, f2, e);
          break;
        case 3:
        case 4:
          var g = d.stateNode.containerInfo, h = Uj(a);
          Vj(a, h, g);
          break;
        default:
          throw Error(p(161));
      }
    } catch (k2) {
      W(a, a.return, k2);
    }
    a.flags &= -3;
  }
  b & 4096 && (a.flags &= -4097);
}
function hk(a, b, c) {
  V = a;
  ik(a);
}
function ik(a, b, c) {
  for (var d = 0 !== (a.mode & 1); null !== V; ) {
    var e = V, f2 = e.child;
    if (22 === e.tag && d) {
      var g = null !== e.memoizedState || Jj;
      if (!g) {
        var h = e.alternate, k2 = null !== h && null !== h.memoizedState || U;
        h = Jj;
        var l2 = U;
        Jj = g;
        if ((U = k2) && !l2) for (V = e; null !== V; ) g = V, k2 = g.child, 22 === g.tag && null !== g.memoizedState ? jk(e) : null !== k2 ? (k2.return = g, V = k2) : jk(e);
        for (; null !== f2; ) V = f2, ik(f2), f2 = f2.sibling;
        V = e;
        Jj = h;
        U = l2;
      }
      kk(a);
    } else 0 !== (e.subtreeFlags & 8772) && null !== f2 ? (f2.return = e, V = f2) : kk(a);
  }
}
function kk(a) {
  for (; null !== V; ) {
    var b = V;
    if (0 !== (b.flags & 8772)) {
      var c = b.alternate;
      try {
        if (0 !== (b.flags & 8772)) switch (b.tag) {
          case 0:
          case 11:
          case 15:
            U || Qj(5, b);
            break;
          case 1:
            var d = b.stateNode;
            if (b.flags & 4 && !U) if (null === c) d.componentDidMount();
            else {
              var e = b.elementType === b.type ? c.memoizedProps : Ci(b.type, c.memoizedProps);
              d.componentDidUpdate(e, c.memoizedState, d.__reactInternalSnapshotBeforeUpdate);
            }
            var f2 = b.updateQueue;
            null !== f2 && sh(b, f2, d);
            break;
          case 3:
            var g = b.updateQueue;
            if (null !== g) {
              c = null;
              if (null !== b.child) switch (b.child.tag) {
                case 5:
                  c = b.child.stateNode;
                  break;
                case 1:
                  c = b.child.stateNode;
              }
              sh(b, g, c);
            }
            break;
          case 5:
            var h = b.stateNode;
            if (null === c && b.flags & 4) {
              c = h;
              var k2 = b.memoizedProps;
              switch (b.type) {
                case "button":
                case "input":
                case "select":
                case "textarea":
                  k2.autoFocus && c.focus();
                  break;
                case "img":
                  k2.src && (c.src = k2.src);
              }
            }
            break;
          case 6:
            break;
          case 4:
            break;
          case 12:
            break;
          case 13:
            if (null === b.memoizedState) {
              var l2 = b.alternate;
              if (null !== l2) {
                var m2 = l2.memoizedState;
                if (null !== m2) {
                  var q2 = m2.dehydrated;
                  null !== q2 && bd(q2);
                }
              }
            }
            break;
          case 19:
          case 17:
          case 21:
          case 22:
          case 23:
          case 25:
            break;
          default:
            throw Error(p(163));
        }
        U || b.flags & 512 && Rj(b);
      } catch (r2) {
        W(b, b.return, r2);
      }
    }
    if (b === a) {
      V = null;
      break;
    }
    c = b.sibling;
    if (null !== c) {
      c.return = b.return;
      V = c;
      break;
    }
    V = b.return;
  }
}
function gk(a) {
  for (; null !== V; ) {
    var b = V;
    if (b === a) {
      V = null;
      break;
    }
    var c = b.sibling;
    if (null !== c) {
      c.return = b.return;
      V = c;
      break;
    }
    V = b.return;
  }
}
function jk(a) {
  for (; null !== V; ) {
    var b = V;
    try {
      switch (b.tag) {
        case 0:
        case 11:
        case 15:
          var c = b.return;
          try {
            Qj(4, b);
          } catch (k2) {
            W(b, c, k2);
          }
          break;
        case 1:
          var d = b.stateNode;
          if ("function" === typeof d.componentDidMount) {
            var e = b.return;
            try {
              d.componentDidMount();
            } catch (k2) {
              W(b, e, k2);
            }
          }
          var f2 = b.return;
          try {
            Rj(b);
          } catch (k2) {
            W(b, f2, k2);
          }
          break;
        case 5:
          var g = b.return;
          try {
            Rj(b);
          } catch (k2) {
            W(b, g, k2);
          }
      }
    } catch (k2) {
      W(b, b.return, k2);
    }
    if (b === a) {
      V = null;
      break;
    }
    var h = b.sibling;
    if (null !== h) {
      h.return = b.return;
      V = h;
      break;
    }
    V = b.return;
  }
}
var lk = Math.ceil, mk = ua.ReactCurrentDispatcher, nk = ua.ReactCurrentOwner, ok = ua.ReactCurrentBatchConfig, K = 0, Q = null, Y = null, Z = 0, fj = 0, ej = Uf(0), T = 0, pk = null, rh = 0, qk = 0, rk = 0, sk = null, tk = null, fk = 0, Gj = Infinity, uk = null, Oi = false, Pi = null, Ri = null, vk = false, wk = null, xk = 0, yk = 0, zk = null, Ak = -1, Bk = 0;
function R() {
  return 0 !== (K & 6) ? B() : -1 !== Ak ? Ak : Ak = B();
}
function yi(a) {
  if (0 === (a.mode & 1)) return 1;
  if (0 !== (K & 2) && 0 !== Z) return Z & -Z;
  if (null !== Kg.transition) return 0 === Bk && (Bk = yc()), Bk;
  a = C;
  if (0 !== a) return a;
  a = window.event;
  a = void 0 === a ? 16 : jd(a.type);
  return a;
}
function gi(a, b, c, d) {
  if (50 < yk) throw yk = 0, zk = null, Error(p(185));
  Ac(a, c, d);
  if (0 === (K & 2) || a !== Q) a === Q && (0 === (K & 2) && (qk |= c), 4 === T && Ck(a, Z)), Dk(a, d), 1 === c && 0 === K && 0 === (b.mode & 1) && (Gj = B() + 500, fg && jg());
}
function Dk(a, b) {
  var c = a.callbackNode;
  wc(a, b);
  var d = uc(a, a === Q ? Z : 0);
  if (0 === d) null !== c && bc(c), a.callbackNode = null, a.callbackPriority = 0;
  else if (b = d & -d, a.callbackPriority !== b) {
    null != c && bc(c);
    if (1 === b) 0 === a.tag ? ig(Ek.bind(null, a)) : hg(Ek.bind(null, a)), Jf(function() {
      0 === (K & 6) && jg();
    }), c = null;
    else {
      switch (Dc(d)) {
        case 1:
          c = fc;
          break;
        case 4:
          c = gc;
          break;
        case 16:
          c = hc;
          break;
        case 536870912:
          c = jc;
          break;
        default:
          c = hc;
      }
      c = Fk(c, Gk.bind(null, a));
    }
    a.callbackPriority = b;
    a.callbackNode = c;
  }
}
function Gk(a, b) {
  Ak = -1;
  Bk = 0;
  if (0 !== (K & 6)) throw Error(p(327));
  var c = a.callbackNode;
  if (Hk() && a.callbackNode !== c) return null;
  var d = uc(a, a === Q ? Z : 0);
  if (0 === d) return null;
  if (0 !== (d & 30) || 0 !== (d & a.expiredLanes) || b) b = Ik(a, d);
  else {
    b = d;
    var e = K;
    K |= 2;
    var f2 = Jk();
    if (Q !== a || Z !== b) uk = null, Gj = B() + 500, Kk(a, b);
    do
      try {
        Lk();
        break;
      } catch (h) {
        Mk(a, h);
      }
    while (1);
    $g();
    mk.current = f2;
    K = e;
    null !== Y ? b = 0 : (Q = null, Z = 0, b = T);
  }
  if (0 !== b) {
    2 === b && (e = xc(a), 0 !== e && (d = e, b = Nk(a, e)));
    if (1 === b) throw c = pk, Kk(a, 0), Ck(a, d), Dk(a, B()), c;
    if (6 === b) Ck(a, d);
    else {
      e = a.current.alternate;
      if (0 === (d & 30) && !Ok(e) && (b = Ik(a, d), 2 === b && (f2 = xc(a), 0 !== f2 && (d = f2, b = Nk(a, f2))), 1 === b)) throw c = pk, Kk(a, 0), Ck(a, d), Dk(a, B()), c;
      a.finishedWork = e;
      a.finishedLanes = d;
      switch (b) {
        case 0:
        case 1:
          throw Error(p(345));
        case 2:
          Pk(a, tk, uk);
          break;
        case 3:
          Ck(a, d);
          if ((d & 130023424) === d && (b = fk + 500 - B(), 10 < b)) {
            if (0 !== uc(a, 0)) break;
            e = a.suspendedLanes;
            if ((e & d) !== d) {
              R();
              a.pingedLanes |= a.suspendedLanes & e;
              break;
            }
            a.timeoutHandle = Ff(Pk.bind(null, a, tk, uk), b);
            break;
          }
          Pk(a, tk, uk);
          break;
        case 4:
          Ck(a, d);
          if ((d & 4194240) === d) break;
          b = a.eventTimes;
          for (e = -1; 0 < d; ) {
            var g = 31 - oc(d);
            f2 = 1 << g;
            g = b[g];
            g > e && (e = g);
            d &= ~f2;
          }
          d = e;
          d = B() - d;
          d = (120 > d ? 120 : 480 > d ? 480 : 1080 > d ? 1080 : 1920 > d ? 1920 : 3e3 > d ? 3e3 : 4320 > d ? 4320 : 1960 * lk(d / 1960)) - d;
          if (10 < d) {
            a.timeoutHandle = Ff(Pk.bind(null, a, tk, uk), d);
            break;
          }
          Pk(a, tk, uk);
          break;
        case 5:
          Pk(a, tk, uk);
          break;
        default:
          throw Error(p(329));
      }
    }
  }
  Dk(a, B());
  return a.callbackNode === c ? Gk.bind(null, a) : null;
}
function Nk(a, b) {
  var c = sk;
  a.current.memoizedState.isDehydrated && (Kk(a, b).flags |= 256);
  a = Ik(a, b);
  2 !== a && (b = tk, tk = c, null !== b && Fj(b));
  return a;
}
function Fj(a) {
  null === tk ? tk = a : tk.push.apply(tk, a);
}
function Ok(a) {
  for (var b = a; ; ) {
    if (b.flags & 16384) {
      var c = b.updateQueue;
      if (null !== c && (c = c.stores, null !== c)) for (var d = 0; d < c.length; d++) {
        var e = c[d], f2 = e.getSnapshot;
        e = e.value;
        try {
          if (!He(f2(), e)) return false;
        } catch (g) {
          return false;
        }
      }
    }
    c = b.child;
    if (b.subtreeFlags & 16384 && null !== c) c.return = b, b = c;
    else {
      if (b === a) break;
      for (; null === b.sibling; ) {
        if (null === b.return || b.return === a) return true;
        b = b.return;
      }
      b.sibling.return = b.return;
      b = b.sibling;
    }
  }
  return true;
}
function Ck(a, b) {
  b &= ~rk;
  b &= ~qk;
  a.suspendedLanes |= b;
  a.pingedLanes &= ~b;
  for (a = a.expirationTimes; 0 < b; ) {
    var c = 31 - oc(b), d = 1 << c;
    a[c] = -1;
    b &= ~d;
  }
}
function Ek(a) {
  if (0 !== (K & 6)) throw Error(p(327));
  Hk();
  var b = uc(a, 0);
  if (0 === (b & 1)) return Dk(a, B()), null;
  var c = Ik(a, b);
  if (0 !== a.tag && 2 === c) {
    var d = xc(a);
    0 !== d && (b = d, c = Nk(a, d));
  }
  if (1 === c) throw c = pk, Kk(a, 0), Ck(a, b), Dk(a, B()), c;
  if (6 === c) throw Error(p(345));
  a.finishedWork = a.current.alternate;
  a.finishedLanes = b;
  Pk(a, tk, uk);
  Dk(a, B());
  return null;
}
function Qk(a, b) {
  var c = K;
  K |= 1;
  try {
    return a(b);
  } finally {
    K = c, 0 === K && (Gj = B() + 500, fg && jg());
  }
}
function Rk(a) {
  null !== wk && 0 === wk.tag && 0 === (K & 6) && Hk();
  var b = K;
  K |= 1;
  var c = ok.transition, d = C;
  try {
    if (ok.transition = null, C = 1, a) return a();
  } finally {
    C = d, ok.transition = c, K = b, 0 === (K & 6) && jg();
  }
}
function Hj() {
  fj = ej.current;
  E(ej);
}
function Kk(a, b) {
  a.finishedWork = null;
  a.finishedLanes = 0;
  var c = a.timeoutHandle;
  -1 !== c && (a.timeoutHandle = -1, Gf(c));
  if (null !== Y) for (c = Y.return; null !== c; ) {
    var d = c;
    wg(d);
    switch (d.tag) {
      case 1:
        d = d.type.childContextTypes;
        null !== d && void 0 !== d && $f();
        break;
      case 3:
        zh();
        E(Wf);
        E(H);
        Eh();
        break;
      case 5:
        Bh(d);
        break;
      case 4:
        zh();
        break;
      case 13:
        E(L);
        break;
      case 19:
        E(L);
        break;
      case 10:
        ah(d.type._context);
        break;
      case 22:
      case 23:
        Hj();
    }
    c = c.return;
  }
  Q = a;
  Y = a = Pg(a.current, null);
  Z = fj = b;
  T = 0;
  pk = null;
  rk = qk = rh = 0;
  tk = sk = null;
  if (null !== fh) {
    for (b = 0; b < fh.length; b++) if (c = fh[b], d = c.interleaved, null !== d) {
      c.interleaved = null;
      var e = d.next, f2 = c.pending;
      if (null !== f2) {
        var g = f2.next;
        f2.next = e;
        d.next = g;
      }
      c.pending = d;
    }
    fh = null;
  }
  return a;
}
function Mk(a, b) {
  do {
    var c = Y;
    try {
      $g();
      Fh.current = Rh;
      if (Ih) {
        for (var d = M.memoizedState; null !== d; ) {
          var e = d.queue;
          null !== e && (e.pending = null);
          d = d.next;
        }
        Ih = false;
      }
      Hh = 0;
      O = N = M = null;
      Jh = false;
      Kh = 0;
      nk.current = null;
      if (null === c || null === c.return) {
        T = 1;
        pk = b;
        Y = null;
        break;
      }
      a: {
        var f2 = a, g = c.return, h = c, k2 = b;
        b = Z;
        h.flags |= 32768;
        if (null !== k2 && "object" === typeof k2 && "function" === typeof k2.then) {
          var l2 = k2, m2 = h, q2 = m2.tag;
          if (0 === (m2.mode & 1) && (0 === q2 || 11 === q2 || 15 === q2)) {
            var r2 = m2.alternate;
            r2 ? (m2.updateQueue = r2.updateQueue, m2.memoizedState = r2.memoizedState, m2.lanes = r2.lanes) : (m2.updateQueue = null, m2.memoizedState = null);
          }
          var y2 = Ui(g);
          if (null !== y2) {
            y2.flags &= -257;
            Vi(y2, g, h, f2, b);
            y2.mode & 1 && Si(f2, l2, b);
            b = y2;
            k2 = l2;
            var n2 = b.updateQueue;
            if (null === n2) {
              var t2 = /* @__PURE__ */ new Set();
              t2.add(k2);
              b.updateQueue = t2;
            } else n2.add(k2);
            break a;
          } else {
            if (0 === (b & 1)) {
              Si(f2, l2, b);
              tj();
              break a;
            }
            k2 = Error(p(426));
          }
        } else if (I && h.mode & 1) {
          var J2 = Ui(g);
          if (null !== J2) {
            0 === (J2.flags & 65536) && (J2.flags |= 256);
            Vi(J2, g, h, f2, b);
            Jg(Ji(k2, h));
            break a;
          }
        }
        f2 = k2 = Ji(k2, h);
        4 !== T && (T = 2);
        null === sk ? sk = [f2] : sk.push(f2);
        f2 = g;
        do {
          switch (f2.tag) {
            case 3:
              f2.flags |= 65536;
              b &= -b;
              f2.lanes |= b;
              var x2 = Ni(f2, k2, b);
              ph(f2, x2);
              break a;
            case 1:
              h = k2;
              var w2 = f2.type, u2 = f2.stateNode;
              if (0 === (f2.flags & 128) && ("function" === typeof w2.getDerivedStateFromError || null !== u2 && "function" === typeof u2.componentDidCatch && (null === Ri || !Ri.has(u2)))) {
                f2.flags |= 65536;
                b &= -b;
                f2.lanes |= b;
                var F2 = Qi(f2, h, b);
                ph(f2, F2);
                break a;
              }
          }
          f2 = f2.return;
        } while (null !== f2);
      }
      Sk(c);
    } catch (na) {
      b = na;
      Y === c && null !== c && (Y = c = c.return);
      continue;
    }
    break;
  } while (1);
}
function Jk() {
  var a = mk.current;
  mk.current = Rh;
  return null === a ? Rh : a;
}
function tj() {
  if (0 === T || 3 === T || 2 === T) T = 4;
  null === Q || 0 === (rh & 268435455) && 0 === (qk & 268435455) || Ck(Q, Z);
}
function Ik(a, b) {
  var c = K;
  K |= 2;
  var d = Jk();
  if (Q !== a || Z !== b) uk = null, Kk(a, b);
  do
    try {
      Tk();
      break;
    } catch (e) {
      Mk(a, e);
    }
  while (1);
  $g();
  K = c;
  mk.current = d;
  if (null !== Y) throw Error(p(261));
  Q = null;
  Z = 0;
  return T;
}
function Tk() {
  for (; null !== Y; ) Uk(Y);
}
function Lk() {
  for (; null !== Y && !cc(); ) Uk(Y);
}
function Uk(a) {
  var b = Vk(a.alternate, a, fj);
  a.memoizedProps = a.pendingProps;
  null === b ? Sk(a) : Y = b;
  nk.current = null;
}
function Sk(a) {
  var b = a;
  do {
    var c = b.alternate;
    a = b.return;
    if (0 === (b.flags & 32768)) {
      if (c = Ej(c, b, fj), null !== c) {
        Y = c;
        return;
      }
    } else {
      c = Ij(c, b);
      if (null !== c) {
        c.flags &= 32767;
        Y = c;
        return;
      }
      if (null !== a) a.flags |= 32768, a.subtreeFlags = 0, a.deletions = null;
      else {
        T = 6;
        Y = null;
        return;
      }
    }
    b = b.sibling;
    if (null !== b) {
      Y = b;
      return;
    }
    Y = b = a;
  } while (null !== b);
  0 === T && (T = 5);
}
function Pk(a, b, c) {
  var d = C, e = ok.transition;
  try {
    ok.transition = null, C = 1, Wk(a, b, c, d);
  } finally {
    ok.transition = e, C = d;
  }
  return null;
}
function Wk(a, b, c, d) {
  do
    Hk();
  while (null !== wk);
  if (0 !== (K & 6)) throw Error(p(327));
  c = a.finishedWork;
  var e = a.finishedLanes;
  if (null === c) return null;
  a.finishedWork = null;
  a.finishedLanes = 0;
  if (c === a.current) throw Error(p(177));
  a.callbackNode = null;
  a.callbackPriority = 0;
  var f2 = c.lanes | c.childLanes;
  Bc(a, f2);
  a === Q && (Y = Q = null, Z = 0);
  0 === (c.subtreeFlags & 2064) && 0 === (c.flags & 2064) || vk || (vk = true, Fk(hc, function() {
    Hk();
    return null;
  }));
  f2 = 0 !== (c.flags & 15990);
  if (0 !== (c.subtreeFlags & 15990) || f2) {
    f2 = ok.transition;
    ok.transition = null;
    var g = C;
    C = 1;
    var h = K;
    K |= 4;
    nk.current = null;
    Oj(a, c);
    dk(c, a);
    Oe(Df);
    dd = !!Cf;
    Df = Cf = null;
    a.current = c;
    hk(c);
    dc();
    K = h;
    C = g;
    ok.transition = f2;
  } else a.current = c;
  vk && (vk = false, wk = a, xk = e);
  f2 = a.pendingLanes;
  0 === f2 && (Ri = null);
  mc(c.stateNode);
  Dk(a, B());
  if (null !== b) for (d = a.onRecoverableError, c = 0; c < b.length; c++) e = b[c], d(e.value, { componentStack: e.stack, digest: e.digest });
  if (Oi) throw Oi = false, a = Pi, Pi = null, a;
  0 !== (xk & 1) && 0 !== a.tag && Hk();
  f2 = a.pendingLanes;
  0 !== (f2 & 1) ? a === zk ? yk++ : (yk = 0, zk = a) : yk = 0;
  jg();
  return null;
}
function Hk() {
  if (null !== wk) {
    var a = Dc(xk), b = ok.transition, c = C;
    try {
      ok.transition = null;
      C = 16 > a ? 16 : a;
      if (null === wk) var d = false;
      else {
        a = wk;
        wk = null;
        xk = 0;
        if (0 !== (K & 6)) throw Error(p(331));
        var e = K;
        K |= 4;
        for (V = a.current; null !== V; ) {
          var f2 = V, g = f2.child;
          if (0 !== (V.flags & 16)) {
            var h = f2.deletions;
            if (null !== h) {
              for (var k2 = 0; k2 < h.length; k2++) {
                var l2 = h[k2];
                for (V = l2; null !== V; ) {
                  var m2 = V;
                  switch (m2.tag) {
                    case 0:
                    case 11:
                    case 15:
                      Pj(8, m2, f2);
                  }
                  var q2 = m2.child;
                  if (null !== q2) q2.return = m2, V = q2;
                  else for (; null !== V; ) {
                    m2 = V;
                    var r2 = m2.sibling, y2 = m2.return;
                    Sj(m2);
                    if (m2 === l2) {
                      V = null;
                      break;
                    }
                    if (null !== r2) {
                      r2.return = y2;
                      V = r2;
                      break;
                    }
                    V = y2;
                  }
                }
              }
              var n2 = f2.alternate;
              if (null !== n2) {
                var t2 = n2.child;
                if (null !== t2) {
                  n2.child = null;
                  do {
                    var J2 = t2.sibling;
                    t2.sibling = null;
                    t2 = J2;
                  } while (null !== t2);
                }
              }
              V = f2;
            }
          }
          if (0 !== (f2.subtreeFlags & 2064) && null !== g) g.return = f2, V = g;
          else b: for (; null !== V; ) {
            f2 = V;
            if (0 !== (f2.flags & 2048)) switch (f2.tag) {
              case 0:
              case 11:
              case 15:
                Pj(9, f2, f2.return);
            }
            var x2 = f2.sibling;
            if (null !== x2) {
              x2.return = f2.return;
              V = x2;
              break b;
            }
            V = f2.return;
          }
        }
        var w2 = a.current;
        for (V = w2; null !== V; ) {
          g = V;
          var u2 = g.child;
          if (0 !== (g.subtreeFlags & 2064) && null !== u2) u2.return = g, V = u2;
          else b: for (g = w2; null !== V; ) {
            h = V;
            if (0 !== (h.flags & 2048)) try {
              switch (h.tag) {
                case 0:
                case 11:
                case 15:
                  Qj(9, h);
              }
            } catch (na) {
              W(h, h.return, na);
            }
            if (h === g) {
              V = null;
              break b;
            }
            var F2 = h.sibling;
            if (null !== F2) {
              F2.return = h.return;
              V = F2;
              break b;
            }
            V = h.return;
          }
        }
        K = e;
        jg();
        if (lc && "function" === typeof lc.onPostCommitFiberRoot) try {
          lc.onPostCommitFiberRoot(kc, a);
        } catch (na) {
        }
        d = true;
      }
      return d;
    } finally {
      C = c, ok.transition = b;
    }
  }
  return false;
}
function Xk(a, b, c) {
  b = Ji(c, b);
  b = Ni(a, b, 1);
  a = nh(a, b, 1);
  b = R();
  null !== a && (Ac(a, 1, b), Dk(a, b));
}
function W(a, b, c) {
  if (3 === a.tag) Xk(a, a, c);
  else for (; null !== b; ) {
    if (3 === b.tag) {
      Xk(b, a, c);
      break;
    } else if (1 === b.tag) {
      var d = b.stateNode;
      if ("function" === typeof b.type.getDerivedStateFromError || "function" === typeof d.componentDidCatch && (null === Ri || !Ri.has(d))) {
        a = Ji(c, a);
        a = Qi(b, a, 1);
        b = nh(b, a, 1);
        a = R();
        null !== b && (Ac(b, 1, a), Dk(b, a));
        break;
      }
    }
    b = b.return;
  }
}
function Ti(a, b, c) {
  var d = a.pingCache;
  null !== d && d.delete(b);
  b = R();
  a.pingedLanes |= a.suspendedLanes & c;
  Q === a && (Z & c) === c && (4 === T || 3 === T && (Z & 130023424) === Z && 500 > B() - fk ? Kk(a, 0) : rk |= c);
  Dk(a, b);
}
function Yk(a, b) {
  0 === b && (0 === (a.mode & 1) ? b = 1 : (b = sc, sc <<= 1, 0 === (sc & 130023424) && (sc = 4194304)));
  var c = R();
  a = ih(a, b);
  null !== a && (Ac(a, b, c), Dk(a, c));
}
function uj(a) {
  var b = a.memoizedState, c = 0;
  null !== b && (c = b.retryLane);
  Yk(a, c);
}
function bk(a, b) {
  var c = 0;
  switch (a.tag) {
    case 13:
      var d = a.stateNode;
      var e = a.memoizedState;
      null !== e && (c = e.retryLane);
      break;
    case 19:
      d = a.stateNode;
      break;
    default:
      throw Error(p(314));
  }
  null !== d && d.delete(b);
  Yk(a, c);
}
var Vk;
Vk = function(a, b, c) {
  if (null !== a) if (a.memoizedProps !== b.pendingProps || Wf.current) dh = true;
  else {
    if (0 === (a.lanes & c) && 0 === (b.flags & 128)) return dh = false, yj(a, b, c);
    dh = 0 !== (a.flags & 131072) ? true : false;
  }
  else dh = false, I && 0 !== (b.flags & 1048576) && ug(b, ng, b.index);
  b.lanes = 0;
  switch (b.tag) {
    case 2:
      var d = b.type;
      ij(a, b);
      a = b.pendingProps;
      var e = Yf(b, H.current);
      ch(b, c);
      e = Nh(null, b, d, a, e, c);
      var f2 = Sh();
      b.flags |= 1;
      "object" === typeof e && null !== e && "function" === typeof e.render && void 0 === e.$$typeof ? (b.tag = 1, b.memoizedState = null, b.updateQueue = null, Zf(d) ? (f2 = true, cg(b)) : f2 = false, b.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null, kh(b), e.updater = Ei, b.stateNode = e, e._reactInternals = b, Ii(b, d, a, c), b = jj(null, b, d, true, f2, c)) : (b.tag = 0, I && f2 && vg(b), Xi(null, b, e, c), b = b.child);
      return b;
    case 16:
      d = b.elementType;
      a: {
        ij(a, b);
        a = b.pendingProps;
        e = d._init;
        d = e(d._payload);
        b.type = d;
        e = b.tag = Zk(d);
        a = Ci(d, a);
        switch (e) {
          case 0:
            b = cj(null, b, d, a, c);
            break a;
          case 1:
            b = hj(null, b, d, a, c);
            break a;
          case 11:
            b = Yi(null, b, d, a, c);
            break a;
          case 14:
            b = $i(null, b, d, Ci(d.type, a), c);
            break a;
        }
        throw Error(p(
          306,
          d,
          ""
        ));
      }
      return b;
    case 0:
      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Ci(d, e), cj(a, b, d, e, c);
    case 1:
      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Ci(d, e), hj(a, b, d, e, c);
    case 3:
      a: {
        kj(b);
        if (null === a) throw Error(p(387));
        d = b.pendingProps;
        f2 = b.memoizedState;
        e = f2.element;
        lh(a, b);
        qh(b, d, null, c);
        var g = b.memoizedState;
        d = g.element;
        if (f2.isDehydrated) if (f2 = { element: d, isDehydrated: false, cache: g.cache, pendingSuspenseBoundaries: g.pendingSuspenseBoundaries, transitions: g.transitions }, b.updateQueue.baseState = f2, b.memoizedState = f2, b.flags & 256) {
          e = Ji(Error(p(423)), b);
          b = lj(a, b, d, c, e);
          break a;
        } else if (d !== e) {
          e = Ji(Error(p(424)), b);
          b = lj(a, b, d, c, e);
          break a;
        } else for (yg = Lf(b.stateNode.containerInfo.firstChild), xg = b, I = true, zg = null, c = Vg(b, null, d, c), b.child = c; c; ) c.flags = c.flags & -3 | 4096, c = c.sibling;
        else {
          Ig();
          if (d === e) {
            b = Zi(a, b, c);
            break a;
          }
          Xi(a, b, d, c);
        }
        b = b.child;
      }
      return b;
    case 5:
      return Ah(b), null === a && Eg(b), d = b.type, e = b.pendingProps, f2 = null !== a ? a.memoizedProps : null, g = e.children, Ef(d, e) ? g = null : null !== f2 && Ef(d, f2) && (b.flags |= 32), gj(a, b), Xi(a, b, g, c), b.child;
    case 6:
      return null === a && Eg(b), null;
    case 13:
      return oj(a, b, c);
    case 4:
      return yh(b, b.stateNode.containerInfo), d = b.pendingProps, null === a ? b.child = Ug(b, null, d, c) : Xi(a, b, d, c), b.child;
    case 11:
      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Ci(d, e), Yi(a, b, d, e, c);
    case 7:
      return Xi(a, b, b.pendingProps, c), b.child;
    case 8:
      return Xi(a, b, b.pendingProps.children, c), b.child;
    case 12:
      return Xi(a, b, b.pendingProps.children, c), b.child;
    case 10:
      a: {
        d = b.type._context;
        e = b.pendingProps;
        f2 = b.memoizedProps;
        g = e.value;
        G(Wg, d._currentValue);
        d._currentValue = g;
        if (null !== f2) if (He(f2.value, g)) {
          if (f2.children === e.children && !Wf.current) {
            b = Zi(a, b, c);
            break a;
          }
        } else for (f2 = b.child, null !== f2 && (f2.return = b); null !== f2; ) {
          var h = f2.dependencies;
          if (null !== h) {
            g = f2.child;
            for (var k2 = h.firstContext; null !== k2; ) {
              if (k2.context === d) {
                if (1 === f2.tag) {
                  k2 = mh(-1, c & -c);
                  k2.tag = 2;
                  var l2 = f2.updateQueue;
                  if (null !== l2) {
                    l2 = l2.shared;
                    var m2 = l2.pending;
                    null === m2 ? k2.next = k2 : (k2.next = m2.next, m2.next = k2);
                    l2.pending = k2;
                  }
                }
                f2.lanes |= c;
                k2 = f2.alternate;
                null !== k2 && (k2.lanes |= c);
                bh(
                  f2.return,
                  c,
                  b
                );
                h.lanes |= c;
                break;
              }
              k2 = k2.next;
            }
          } else if (10 === f2.tag) g = f2.type === b.type ? null : f2.child;
          else if (18 === f2.tag) {
            g = f2.return;
            if (null === g) throw Error(p(341));
            g.lanes |= c;
            h = g.alternate;
            null !== h && (h.lanes |= c);
            bh(g, c, b);
            g = f2.sibling;
          } else g = f2.child;
          if (null !== g) g.return = f2;
          else for (g = f2; null !== g; ) {
            if (g === b) {
              g = null;
              break;
            }
            f2 = g.sibling;
            if (null !== f2) {
              f2.return = g.return;
              g = f2;
              break;
            }
            g = g.return;
          }
          f2 = g;
        }
        Xi(a, b, e.children, c);
        b = b.child;
      }
      return b;
    case 9:
      return e = b.type, d = b.pendingProps.children, ch(b, c), e = eh(e), d = d(e), b.flags |= 1, Xi(a, b, d, c), b.child;
    case 14:
      return d = b.type, e = Ci(d, b.pendingProps), e = Ci(d.type, e), $i(a, b, d, e, c);
    case 15:
      return bj(a, b, b.type, b.pendingProps, c);
    case 17:
      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Ci(d, e), ij(a, b), b.tag = 1, Zf(d) ? (a = true, cg(b)) : a = false, ch(b, c), Gi(b, d, e), Ii(b, d, e, c), jj(null, b, d, true, a, c);
    case 19:
      return xj(a, b, c);
    case 22:
      return dj(a, b, c);
  }
  throw Error(p(156, b.tag));
};
function Fk(a, b) {
  return ac(a, b);
}
function $k(a, b, c, d) {
  this.tag = a;
  this.key = c;
  this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
  this.index = 0;
  this.ref = null;
  this.pendingProps = b;
  this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
  this.mode = d;
  this.subtreeFlags = this.flags = 0;
  this.deletions = null;
  this.childLanes = this.lanes = 0;
  this.alternate = null;
}
function Bg(a, b, c, d) {
  return new $k(a, b, c, d);
}
function aj(a) {
  a = a.prototype;
  return !(!a || !a.isReactComponent);
}
function Zk(a) {
  if ("function" === typeof a) return aj(a) ? 1 : 0;
  if (void 0 !== a && null !== a) {
    a = a.$$typeof;
    if (a === Da) return 11;
    if (a === Ga) return 14;
  }
  return 2;
}
function Pg(a, b) {
  var c = a.alternate;
  null === c ? (c = Bg(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.type = a.type, c.flags = 0, c.subtreeFlags = 0, c.deletions = null);
  c.flags = a.flags & 14680064;
  c.childLanes = a.childLanes;
  c.lanes = a.lanes;
  c.child = a.child;
  c.memoizedProps = a.memoizedProps;
  c.memoizedState = a.memoizedState;
  c.updateQueue = a.updateQueue;
  b = a.dependencies;
  c.dependencies = null === b ? null : { lanes: b.lanes, firstContext: b.firstContext };
  c.sibling = a.sibling;
  c.index = a.index;
  c.ref = a.ref;
  return c;
}
function Rg(a, b, c, d, e, f2) {
  var g = 2;
  d = a;
  if ("function" === typeof a) aj(a) && (g = 1);
  else if ("string" === typeof a) g = 5;
  else a: switch (a) {
    case ya:
      return Tg(c.children, e, f2, b);
    case za:
      g = 8;
      e |= 8;
      break;
    case Aa:
      return a = Bg(12, c, b, e | 2), a.elementType = Aa, a.lanes = f2, a;
    case Ea:
      return a = Bg(13, c, b, e), a.elementType = Ea, a.lanes = f2, a;
    case Fa:
      return a = Bg(19, c, b, e), a.elementType = Fa, a.lanes = f2, a;
    case Ia:
      return pj(c, e, f2, b);
    default:
      if ("object" === typeof a && null !== a) switch (a.$$typeof) {
        case Ba:
          g = 10;
          break a;
        case Ca:
          g = 9;
          break a;
        case Da:
          g = 11;
          break a;
        case Ga:
          g = 14;
          break a;
        case Ha:
          g = 16;
          d = null;
          break a;
      }
      throw Error(p(130, null == a ? a : typeof a, ""));
  }
  b = Bg(g, c, b, e);
  b.elementType = a;
  b.type = d;
  b.lanes = f2;
  return b;
}
function Tg(a, b, c, d) {
  a = Bg(7, a, d, b);
  a.lanes = c;
  return a;
}
function pj(a, b, c, d) {
  a = Bg(22, a, d, b);
  a.elementType = Ia;
  a.lanes = c;
  a.stateNode = { isHidden: false };
  return a;
}
function Qg(a, b, c) {
  a = Bg(6, a, null, b);
  a.lanes = c;
  return a;
}
function Sg(a, b, c) {
  b = Bg(4, null !== a.children ? a.children : [], a.key, b);
  b.lanes = c;
  b.stateNode = { containerInfo: a.containerInfo, pendingChildren: null, implementation: a.implementation };
  return b;
}
function al(a, b, c, d, e) {
  this.tag = b;
  this.containerInfo = a;
  this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
  this.timeoutHandle = -1;
  this.callbackNode = this.pendingContext = this.context = null;
  this.callbackPriority = 0;
  this.eventTimes = zc(0);
  this.expirationTimes = zc(-1);
  this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
  this.entanglements = zc(0);
  this.identifierPrefix = d;
  this.onRecoverableError = e;
  this.mutableSourceEagerHydrationData = null;
}
function bl(a, b, c, d, e, f2, g, h, k2) {
  a = new al(a, b, c, h, k2);
  1 === b ? (b = 1, true === f2 && (b |= 8)) : b = 0;
  f2 = Bg(3, null, null, b);
  a.current = f2;
  f2.stateNode = a;
  f2.memoizedState = { element: d, isDehydrated: c, cache: null, transitions: null, pendingSuspenseBoundaries: null };
  kh(f2);
  return a;
}
function cl(a, b, c) {
  var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
  return { $$typeof: wa, key: null == d ? null : "" + d, children: a, containerInfo: b, implementation: c };
}
function dl(a) {
  if (!a) return Vf;
  a = a._reactInternals;
  a: {
    if (Vb(a) !== a || 1 !== a.tag) throw Error(p(170));
    var b = a;
    do {
      switch (b.tag) {
        case 3:
          b = b.stateNode.context;
          break a;
        case 1:
          if (Zf(b.type)) {
            b = b.stateNode.__reactInternalMemoizedMergedChildContext;
            break a;
          }
      }
      b = b.return;
    } while (null !== b);
    throw Error(p(171));
  }
  if (1 === a.tag) {
    var c = a.type;
    if (Zf(c)) return bg(a, c, b);
  }
  return b;
}
function el(a, b, c, d, e, f2, g, h, k2) {
  a = bl(c, d, true, a, e, f2, g, h, k2);
  a.context = dl(null);
  c = a.current;
  d = R();
  e = yi(c);
  f2 = mh(d, e);
  f2.callback = void 0 !== b && null !== b ? b : null;
  nh(c, f2, e);
  a.current.lanes = e;
  Ac(a, e, d);
  Dk(a, d);
  return a;
}
function fl(a, b, c, d) {
  var e = b.current, f2 = R(), g = yi(e);
  c = dl(c);
  null === b.context ? b.context = c : b.pendingContext = c;
  b = mh(f2, g);
  b.payload = { element: a };
  d = void 0 === d ? null : d;
  null !== d && (b.callback = d);
  a = nh(e, b, g);
  null !== a && (gi(a, e, g, f2), oh(a, e, g));
  return g;
}
function gl(a) {
  a = a.current;
  if (!a.child) return null;
  switch (a.child.tag) {
    case 5:
      return a.child.stateNode;
    default:
      return a.child.stateNode;
  }
}
function hl(a, b) {
  a = a.memoizedState;
  if (null !== a && null !== a.dehydrated) {
    var c = a.retryLane;
    a.retryLane = 0 !== c && c < b ? c : b;
  }
}
function il(a, b) {
  hl(a, b);
  (a = a.alternate) && hl(a, b);
}
function jl() {
  return null;
}
var kl = "function" === typeof reportError ? reportError : function(a) {
  console.error(a);
};
function ll(a) {
  this._internalRoot = a;
}
ml.prototype.render = ll.prototype.render = function(a) {
  var b = this._internalRoot;
  if (null === b) throw Error(p(409));
  fl(a, b, null, null);
};
ml.prototype.unmount = ll.prototype.unmount = function() {
  var a = this._internalRoot;
  if (null !== a) {
    this._internalRoot = null;
    var b = a.containerInfo;
    Rk(function() {
      fl(null, a, null, null);
    });
    b[uf] = null;
  }
};
function ml(a) {
  this._internalRoot = a;
}
ml.prototype.unstable_scheduleHydration = function(a) {
  if (a) {
    var b = Hc();
    a = { blockedOn: null, target: a, priority: b };
    for (var c = 0; c < Qc.length && 0 !== b && b < Qc[c].priority; c++) ;
    Qc.splice(c, 0, a);
    0 === c && Vc(a);
  }
};
function nl(a) {
  return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType);
}
function ol(a) {
  return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue));
}
function pl() {
}
function ql(a, b, c, d, e) {
  if (e) {
    if ("function" === typeof d) {
      var f2 = d;
      d = function() {
        var a2 = gl(g);
        f2.call(a2);
      };
    }
    var g = el(b, d, a, 0, null, false, false, "", pl);
    a._reactRootContainer = g;
    a[uf] = g.current;
    sf(8 === a.nodeType ? a.parentNode : a);
    Rk();
    return g;
  }
  for (; e = a.lastChild; ) a.removeChild(e);
  if ("function" === typeof d) {
    var h = d;
    d = function() {
      var a2 = gl(k2);
      h.call(a2);
    };
  }
  var k2 = bl(a, 0, false, null, null, false, false, "", pl);
  a._reactRootContainer = k2;
  a[uf] = k2.current;
  sf(8 === a.nodeType ? a.parentNode : a);
  Rk(function() {
    fl(b, k2, c, d);
  });
  return k2;
}
function rl(a, b, c, d, e) {
  var f2 = c._reactRootContainer;
  if (f2) {
    var g = f2;
    if ("function" === typeof e) {
      var h = e;
      e = function() {
        var a2 = gl(g);
        h.call(a2);
      };
    }
    fl(b, g, a, e);
  } else g = ql(c, b, a, e, d);
  return gl(g);
}
Ec = function(a) {
  switch (a.tag) {
    case 3:
      var b = a.stateNode;
      if (b.current.memoizedState.isDehydrated) {
        var c = tc(b.pendingLanes);
        0 !== c && (Cc(b, c | 1), Dk(b, B()), 0 === (K & 6) && (Gj = B() + 500, jg()));
      }
      break;
    case 13:
      Rk(function() {
        var b2 = ih(a, 1);
        if (null !== b2) {
          var c2 = R();
          gi(b2, a, 1, c2);
        }
      }), il(a, 1);
  }
};
Fc = function(a) {
  if (13 === a.tag) {
    var b = ih(a, 134217728);
    if (null !== b) {
      var c = R();
      gi(b, a, 134217728, c);
    }
    il(a, 134217728);
  }
};
Gc = function(a) {
  if (13 === a.tag) {
    var b = yi(a), c = ih(a, b);
    if (null !== c) {
      var d = R();
      gi(c, a, b, d);
    }
    il(a, b);
  }
};
Hc = function() {
  return C;
};
Ic = function(a, b) {
  var c = C;
  try {
    return C = a, b();
  } finally {
    C = c;
  }
};
yb = function(a, b, c) {
  switch (b) {
    case "input":
      bb(a, c);
      b = c.name;
      if ("radio" === c.type && null != b) {
        for (c = a; c.parentNode; ) c = c.parentNode;
        c = c.querySelectorAll("input[name=" + JSON.stringify("" + b) + '][type="radio"]');
        for (b = 0; b < c.length; b++) {
          var d = c[b];
          if (d !== a && d.form === a.form) {
            var e = Db(d);
            if (!e) throw Error(p(90));
            Wa(d);
            bb(d, e);
          }
        }
      }
      break;
    case "textarea":
      ib(a, c);
      break;
    case "select":
      b = c.value, null != b && fb(a, !!c.multiple, b, false);
  }
};
Gb = Qk;
Hb = Rk;
var sl = { usingClientEntryPoint: false, Events: [Cb, ue, Db, Eb, Fb, Qk] }, tl = { findFiberByHostInstance: Wc, bundleType: 0, version: "18.3.1", rendererPackageName: "react-dom" };
var ul = { bundleType: tl.bundleType, version: tl.version, rendererPackageName: tl.rendererPackageName, rendererConfig: tl.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setErrorHandler: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: ua.ReactCurrentDispatcher, findHostInstanceByFiber: function(a) {
  a = Zb(a);
  return null === a ? null : a.stateNode;
}, findFiberByHostInstance: tl.findFiberByHostInstance || jl, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null, reconcilerVersion: "18.3.1-next-f1338f8080-20240426" };
if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
  var vl = __REACT_DEVTOOLS_GLOBAL_HOOK__;
  if (!vl.isDisabled && vl.supportsFiber) try {
    kc = vl.inject(ul), lc = vl;
  } catch (a) {
  }
}
reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = sl;
reactDom_production_min.createPortal = function(a, b) {
  var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
  if (!nl(b)) throw Error(p(200));
  return cl(a, b, null, c);
};
reactDom_production_min.createRoot = function(a, b) {
  if (!nl(a)) throw Error(p(299));
  var c = false, d = "", e = kl;
  null !== b && void 0 !== b && (true === b.unstable_strictMode && (c = true), void 0 !== b.identifierPrefix && (d = b.identifierPrefix), void 0 !== b.onRecoverableError && (e = b.onRecoverableError));
  b = bl(a, 1, false, null, null, c, false, d, e);
  a[uf] = b.current;
  sf(8 === a.nodeType ? a.parentNode : a);
  return new ll(b);
};
reactDom_production_min.findDOMNode = function(a) {
  if (null == a) return null;
  if (1 === a.nodeType) return a;
  var b = a._reactInternals;
  if (void 0 === b) {
    if ("function" === typeof a.render) throw Error(p(188));
    a = Object.keys(a).join(",");
    throw Error(p(268, a));
  }
  a = Zb(b);
  a = null === a ? null : a.stateNode;
  return a;
};
reactDom_production_min.flushSync = function(a) {
  return Rk(a);
};
reactDom_production_min.hydrate = function(a, b, c) {
  if (!ol(b)) throw Error(p(200));
  return rl(null, a, b, true, c);
};
reactDom_production_min.hydrateRoot = function(a, b, c) {
  if (!nl(a)) throw Error(p(405));
  var d = null != c && c.hydratedSources || null, e = false, f2 = "", g = kl;
  null !== c && void 0 !== c && (true === c.unstable_strictMode && (e = true), void 0 !== c.identifierPrefix && (f2 = c.identifierPrefix), void 0 !== c.onRecoverableError && (g = c.onRecoverableError));
  b = el(b, null, a, 1, null != c ? c : null, e, false, f2, g);
  a[uf] = b.current;
  sf(a);
  if (d) for (a = 0; a < d.length; a++) c = d[a], e = c._getVersion, e = e(c._source), null == b.mutableSourceEagerHydrationData ? b.mutableSourceEagerHydrationData = [c, e] : b.mutableSourceEagerHydrationData.push(
    c,
    e
  );
  return new ml(b);
};
reactDom_production_min.render = function(a, b, c) {
  if (!ol(b)) throw Error(p(200));
  return rl(null, a, b, false, c);
};
reactDom_production_min.unmountComponentAtNode = function(a) {
  if (!ol(a)) throw Error(p(40));
  return a._reactRootContainer ? (Rk(function() {
    rl(null, null, a, false, function() {
      a._reactRootContainer = null;
      a[uf] = null;
    });
  }), true) : false;
};
reactDom_production_min.unstable_batchedUpdates = Qk;
reactDom_production_min.unstable_renderSubtreeIntoContainer = function(a, b, c, d) {
  if (!ol(c)) throw Error(p(200));
  if (null == a || void 0 === a._reactInternals) throw Error(p(38));
  return rl(a, b, c, false, d);
};
reactDom_production_min.version = "18.3.1-next-f1338f8080-20240426";
function checkDCE() {
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
    return;
  }
  try {
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    console.error(err);
  }
}
{
  checkDCE();
  reactDom.exports = reactDom_production_min;
}
var reactDomExports = reactDom.exports;
var createRoot;
var m = reactDomExports;
{
  createRoot = m.createRoot;
  m.hydrateRoot;
}
/**
 * @remix-run/router v1.6.2
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
function _extends$1() {
  _extends$1 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$1.apply(this, arguments);
}
var Action;
(function(Action2) {
  Action2["Pop"] = "POP";
  Action2["Push"] = "PUSH";
  Action2["Replace"] = "REPLACE";
})(Action || (Action = {}));
const PopStateEventType = "popstate";
function createBrowserHistory(options) {
  if (options === void 0) {
    options = {};
  }
  function createBrowserLocation(window2, globalHistory) {
    let {
      pathname,
      search,
      hash: hash2
    } = window2.location;
    return createLocation(
      "",
      {
        pathname,
        search,
        hash: hash2
      },
      // state defaults to `null` because `window.history.state` does
      globalHistory.state && globalHistory.state.usr || null,
      globalHistory.state && globalHistory.state.key || "default"
    );
  }
  function createBrowserHref(window2, to) {
    return typeof to === "string" ? to : createPath(to);
  }
  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);
}
function invariant(value, message2) {
  if (value === false || value === null || typeof value === "undefined") {
    throw new Error(message2);
  }
}
function warning(cond, message2) {
  if (!cond) {
    if (typeof console !== "undefined") console.warn(message2);
    try {
      throw new Error(message2);
    } catch (e) {
    }
  }
}
function createKey() {
  return Math.random().toString(36).substr(2, 8);
}
function getHistoryState(location2, index) {
  return {
    usr: location2.state,
    key: location2.key,
    idx: index
  };
}
function createLocation(current, to, state, key) {
  if (state === void 0) {
    state = null;
  }
  let location2 = _extends$1({
    pathname: typeof current === "string" ? current : current.pathname,
    search: "",
    hash: ""
  }, typeof to === "string" ? parsePath(to) : to, {
    state,
    // TODO: This could be cleaned up.  push/replace should probably just take
    // full Locations now and avoid the need to run through this flow at all
    // But that's a pretty big refactor to the current test suite so going to
    // keep as is for the time being and just let any incoming keys take precedence
    key: to && to.key || key || createKey()
  });
  return location2;
}
function createPath(_ref) {
  let {
    pathname = "/",
    search = "",
    hash: hash2 = ""
  } = _ref;
  if (search && search !== "?") pathname += search.charAt(0) === "?" ? search : "?" + search;
  if (hash2 && hash2 !== "#") pathname += hash2.charAt(0) === "#" ? hash2 : "#" + hash2;
  return pathname;
}
function parsePath(path) {
  let parsedPath = {};
  if (path) {
    let hashIndex = path.indexOf("#");
    if (hashIndex >= 0) {
      parsedPath.hash = path.substr(hashIndex);
      path = path.substr(0, hashIndex);
    }
    let searchIndex = path.indexOf("?");
    if (searchIndex >= 0) {
      parsedPath.search = path.substr(searchIndex);
      path = path.substr(0, searchIndex);
    }
    if (path) {
      parsedPath.pathname = path;
    }
  }
  return parsedPath;
}
function getUrlBasedHistory(getLocation, createHref, validateLocation, options) {
  if (options === void 0) {
    options = {};
  }
  let {
    window: window2 = document.defaultView,
    v5Compat = false
  } = options;
  let globalHistory = window2.history;
  let action = Action.Pop;
  let listener = null;
  let index = getIndex();
  if (index == null) {
    index = 0;
    globalHistory.replaceState(_extends$1({}, globalHistory.state, {
      idx: index
    }), "");
  }
  function getIndex() {
    let state = globalHistory.state || {
      idx: null
    };
    return state.idx;
  }
  function handlePop() {
    action = Action.Pop;
    let nextIndex = getIndex();
    let delta = nextIndex == null ? null : nextIndex - index;
    index = nextIndex;
    if (listener) {
      listener({
        action,
        location: history2.location,
        delta
      });
    }
  }
  function push(to, state) {
    action = Action.Push;
    let location2 = createLocation(history2.location, to, state);
    index = getIndex() + 1;
    let historyState = getHistoryState(location2, index);
    let url = history2.createHref(location2);
    try {
      globalHistory.pushState(historyState, "", url);
    } catch (error) {
      window2.location.assign(url);
    }
    if (v5Compat && listener) {
      listener({
        action,
        location: history2.location,
        delta: 1
      });
    }
  }
  function replace(to, state) {
    action = Action.Replace;
    let location2 = createLocation(history2.location, to, state);
    index = getIndex();
    let historyState = getHistoryState(location2, index);
    let url = history2.createHref(location2);
    globalHistory.replaceState(historyState, "", url);
    if (v5Compat && listener) {
      listener({
        action,
        location: history2.location,
        delta: 0
      });
    }
  }
  function createURL(to) {
    let base = window2.location.origin !== "null" ? window2.location.origin : window2.location.href;
    let href = typeof to === "string" ? to : createPath(to);
    invariant(base, "No window.location.(origin|href) available to create URL for href: " + href);
    return new URL(href, base);
  }
  let history2 = {
    get action() {
      return action;
    },
    get location() {
      return getLocation(window2, globalHistory);
    },
    listen(fn) {
      if (listener) {
        throw new Error("A history only accepts one active listener");
      }
      window2.addEventListener(PopStateEventType, handlePop);
      listener = fn;
      return () => {
        window2.removeEventListener(PopStateEventType, handlePop);
        listener = null;
      };
    },
    createHref(to) {
      return createHref(window2, to);
    },
    createURL,
    encodeLocation(to) {
      let url = createURL(to);
      return {
        pathname: url.pathname,
        search: url.search,
        hash: url.hash
      };
    },
    push,
    replace,
    go(n2) {
      return globalHistory.go(n2);
    }
  };
  return history2;
}
var ResultType;
(function(ResultType2) {
  ResultType2["data"] = "data";
  ResultType2["deferred"] = "deferred";
  ResultType2["redirect"] = "redirect";
  ResultType2["error"] = "error";
})(ResultType || (ResultType = {}));
function matchRoutes(routes, locationArg, basename) {
  if (basename === void 0) {
    basename = "/";
  }
  let location2 = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
  let pathname = stripBasename(location2.pathname || "/", basename);
  if (pathname == null) {
    return null;
  }
  let branches = flattenRoutes(routes);
  rankRouteBranches(branches);
  let matches = null;
  for (let i = 0; matches == null && i < branches.length; ++i) {
    matches = matchRouteBranch(
      branches[i],
      // Incoming pathnames are generally encoded from either window.location
      // or from router.navigate, but we want to match against the unencoded
      // paths in the route definitions.  Memory router locations won't be
      // encoded here but there also shouldn't be anything to decode so this
      // should be a safe operation.  This avoids needing matchRoutes to be
      // history-aware.
      safelyDecodeURI(pathname)
    );
  }
  return matches;
}
function flattenRoutes(routes, branches, parentsMeta, parentPath) {
  if (branches === void 0) {
    branches = [];
  }
  if (parentsMeta === void 0) {
    parentsMeta = [];
  }
  if (parentPath === void 0) {
    parentPath = "";
  }
  let flattenRoute = (route, index, relativePath) => {
    let meta = {
      relativePath: relativePath === void 0 ? route.path || "" : relativePath,
      caseSensitive: route.caseSensitive === true,
      childrenIndex: index,
      route
    };
    if (meta.relativePath.startsWith("/")) {
      invariant(meta.relativePath.startsWith(parentPath), 'Absolute route path "' + meta.relativePath + '" nested under path ' + ('"' + parentPath + '" is not valid. An absolute child route path ') + "must start with the combined path of all its parent routes.");
      meta.relativePath = meta.relativePath.slice(parentPath.length);
    }
    let path = joinPaths([parentPath, meta.relativePath]);
    let routesMeta = parentsMeta.concat(meta);
    if (route.children && route.children.length > 0) {
      invariant(
        // Our types know better, but runtime JS may not!
        // @ts-expect-error
        route.index !== true,
        "Index routes must not have child routes. Please remove " + ('all child routes from route path "' + path + '".')
      );
      flattenRoutes(route.children, branches, routesMeta, path);
    }
    if (route.path == null && !route.index) {
      return;
    }
    branches.push({
      path,
      score: computeScore(path, route.index),
      routesMeta
    });
  };
  routes.forEach((route, index) => {
    var _route$path;
    if (route.path === "" || !((_route$path = route.path) != null && _route$path.includes("?"))) {
      flattenRoute(route, index);
    } else {
      for (let exploded of explodeOptionalSegments(route.path)) {
        flattenRoute(route, index, exploded);
      }
    }
  });
  return branches;
}
function explodeOptionalSegments(path) {
  let segments = path.split("/");
  if (segments.length === 0) return [];
  let [first, ...rest] = segments;
  let isOptional = first.endsWith("?");
  let required = first.replace(/\?$/, "");
  if (rest.length === 0) {
    return isOptional ? [required, ""] : [required];
  }
  let restExploded = explodeOptionalSegments(rest.join("/"));
  let result = [];
  result.push(...restExploded.map((subpath) => subpath === "" ? required : [required, subpath].join("/")));
  if (isOptional) {
    result.push(...restExploded);
  }
  return result.map((exploded) => path.startsWith("/") && exploded === "" ? "/" : exploded);
}
function rankRouteBranches(branches) {
  branches.sort((a, b) => a.score !== b.score ? b.score - a.score : compareIndexes(a.routesMeta.map((meta) => meta.childrenIndex), b.routesMeta.map((meta) => meta.childrenIndex)));
}
const paramRe = /^:\w+$/;
const dynamicSegmentValue = 3;
const indexRouteValue = 2;
const emptySegmentValue = 1;
const staticSegmentValue = 10;
const splatPenalty = -2;
const isSplat = (s) => s === "*";
function computeScore(path, index) {
  let segments = path.split("/");
  let initialScore = segments.length;
  if (segments.some(isSplat)) {
    initialScore += splatPenalty;
  }
  if (index) {
    initialScore += indexRouteValue;
  }
  return segments.filter((s) => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue), initialScore);
}
function compareIndexes(a, b) {
  let siblings = a.length === b.length && a.slice(0, -1).every((n2, i) => n2 === b[i]);
  return siblings ? (
    // If two routes are siblings, we should try to match the earlier sibling
    // first. This allows people to have fine-grained control over the matching
    // behavior by simply putting routes with identical paths in the order they
    // want them tried.
    a[a.length - 1] - b[b.length - 1]
  ) : (
    // Otherwise, it doesn't really make sense to rank non-siblings by index,
    // so they sort equally.
    0
  );
}
function matchRouteBranch(branch, pathname) {
  let {
    routesMeta
  } = branch;
  let matchedParams = {};
  let matchedPathname = "/";
  let matches = [];
  for (let i = 0; i < routesMeta.length; ++i) {
    let meta = routesMeta[i];
    let end = i === routesMeta.length - 1;
    let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
    let match2 = matchPath({
      path: meta.relativePath,
      caseSensitive: meta.caseSensitive,
      end
    }, remainingPathname);
    if (!match2) return null;
    Object.assign(matchedParams, match2.params);
    let route = meta.route;
    matches.push({
      // TODO: Can this as be avoided?
      params: matchedParams,
      pathname: joinPaths([matchedPathname, match2.pathname]),
      pathnameBase: normalizePathname(joinPaths([matchedPathname, match2.pathnameBase])),
      route
    });
    if (match2.pathnameBase !== "/") {
      matchedPathname = joinPaths([matchedPathname, match2.pathnameBase]);
    }
  }
  return matches;
}
function matchPath(pattern, pathname) {
  if (typeof pattern === "string") {
    pattern = {
      path: pattern,
      caseSensitive: false,
      end: true
    };
  }
  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);
  let match2 = pathname.match(matcher);
  if (!match2) return null;
  let matchedPathname = match2[0];
  let pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
  let captureGroups = match2.slice(1);
  let params = paramNames.reduce((memo, paramName, index) => {
    if (paramName === "*") {
      let splatValue = captureGroups[index] || "";
      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
    }
    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || "", paramName);
    return memo;
  }, {});
  return {
    params,
    pathname: matchedPathname,
    pathnameBase,
    pattern
  };
}
function compilePath(path, caseSensitive, end) {
  if (caseSensitive === void 0) {
    caseSensitive = false;
  }
  if (end === void 0) {
    end = true;
  }
  warning(path === "*" || !path.endsWith("*") || path.endsWith("/*"), 'Route path "' + path + '" will be treated as if it were ' + ('"' + path.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path.replace(/\*$/, "/*") + '".'));
  let paramNames = [];
  let regexpSource = "^" + path.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^$?{}|()[\]]/g, "\\$&").replace(/\/:(\w+)/g, (_, paramName) => {
    paramNames.push(paramName);
    return "/([^\\/]+)";
  });
  if (path.endsWith("*")) {
    paramNames.push("*");
    regexpSource += path === "*" || path === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$";
  } else if (end) {
    regexpSource += "\\/*$";
  } else if (path !== "" && path !== "/") {
    regexpSource += "(?:(?=\\/|$))";
  } else ;
  let matcher = new RegExp(regexpSource, caseSensitive ? void 0 : "i");
  return [matcher, paramNames];
}
function safelyDecodeURI(value) {
  try {
    return decodeURI(value);
  } catch (error) {
    warning(false, 'The URL path "' + value + '" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent ' + ("encoding (" + error + ")."));
    return value;
  }
}
function safelyDecodeURIComponent(value, paramName) {
  try {
    return decodeURIComponent(value);
  } catch (error) {
    warning(false, 'The value for the URL param "' + paramName + '" will not be decoded because' + (' the string "' + value + '" is a malformed URL segment. This is probably') + (" due to a bad percent encoding (" + error + ")."));
    return value;
  }
}
function stripBasename(pathname, basename) {
  if (basename === "/") return pathname;
  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {
    return null;
  }
  let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length;
  let nextChar = pathname.charAt(startIndex);
  if (nextChar && nextChar !== "/") {
    return null;
  }
  return pathname.slice(startIndex) || "/";
}
const joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/");
const normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
function isRouteErrorResponse(error) {
  return error != null && typeof error.status === "number" && typeof error.statusText === "string" && typeof error.internal === "boolean" && "data" in error;
}
const validMutationMethodsArr = ["post", "put", "patch", "delete"];
new Set(validMutationMethodsArr);
const validRequestMethodsArr = ["get", ...validMutationMethodsArr];
new Set(validRequestMethodsArr);
/**
 * React Router v6.11.2
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
const DataRouterContext = /* @__PURE__ */ reactExports.createContext(null);
const DataRouterStateContext = /* @__PURE__ */ reactExports.createContext(null);
const NavigationContext = /* @__PURE__ */ reactExports.createContext(null);
const LocationContext = /* @__PURE__ */ reactExports.createContext(null);
const RouteContext = /* @__PURE__ */ reactExports.createContext({
  outlet: null,
  matches: [],
  isDataRoute: false
});
const RouteErrorContext = /* @__PURE__ */ reactExports.createContext(null);
function useInRouterContext() {
  return reactExports.useContext(LocationContext) != null;
}
function useLocation() {
  !useInRouterContext() ? invariant(false) : void 0;
  return reactExports.useContext(LocationContext).location;
}
const OutletContext = /* @__PURE__ */ reactExports.createContext(null);
function useOutlet(context) {
  let outlet = reactExports.useContext(RouteContext).outlet;
  if (outlet) {
    return /* @__PURE__ */ reactExports.createElement(OutletContext.Provider, {
      value: context
    }, outlet);
  }
  return outlet;
}
function useRoutes(routes, locationArg) {
  return useRoutesImpl(routes, locationArg);
}
function useRoutesImpl(routes, locationArg, dataRouterState) {
  !useInRouterContext() ? invariant(false) : void 0;
  let {
    navigator: navigator2
  } = reactExports.useContext(NavigationContext);
  let {
    matches: parentMatches
  } = reactExports.useContext(RouteContext);
  let routeMatch = parentMatches[parentMatches.length - 1];
  let parentParams = routeMatch ? routeMatch.params : {};
  routeMatch ? routeMatch.pathname : "/";
  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
  routeMatch && routeMatch.route;
  let locationFromContext = useLocation();
  let location2;
  if (locationArg) {
    var _parsedLocationArg$pa;
    let parsedLocationArg = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
    !(parentPathnameBase === "/" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? invariant(false) : void 0;
    location2 = parsedLocationArg;
  } else {
    location2 = locationFromContext;
  }
  let pathname = location2.pathname || "/";
  let remainingPathname = parentPathnameBase === "/" ? pathname : pathname.slice(parentPathnameBase.length) || "/";
  let matches = matchRoutes(routes, {
    pathname: remainingPathname
  });
  let renderedMatches = _renderMatches(matches && matches.map((match2) => Object.assign({}, match2, {
    params: Object.assign({}, parentParams, match2.params),
    pathname: joinPaths([
      parentPathnameBase,
      // Re-encode pathnames that were decoded inside matchRoutes
      navigator2.encodeLocation ? navigator2.encodeLocation(match2.pathname).pathname : match2.pathname
    ]),
    pathnameBase: match2.pathnameBase === "/" ? parentPathnameBase : joinPaths([
      parentPathnameBase,
      // Re-encode pathnames that were decoded inside matchRoutes
      navigator2.encodeLocation ? navigator2.encodeLocation(match2.pathnameBase).pathname : match2.pathnameBase
    ])
  })), parentMatches, dataRouterState);
  if (locationArg && renderedMatches) {
    return /* @__PURE__ */ reactExports.createElement(LocationContext.Provider, {
      value: {
        location: _extends({
          pathname: "/",
          search: "",
          hash: "",
          state: null,
          key: "default"
        }, location2),
        navigationType: Action.Pop
      }
    }, renderedMatches);
  }
  return renderedMatches;
}
function DefaultErrorComponent() {
  let error = useRouteError();
  let message2 = isRouteErrorResponse(error) ? error.status + " " + error.statusText : error instanceof Error ? error.message : JSON.stringify(error);
  let stack = error instanceof Error ? error.stack : null;
  let lightgrey = "rgba(200,200,200, 0.5)";
  let preStyles = {
    padding: "0.5rem",
    backgroundColor: lightgrey
  };
  let devInfo = null;
  return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement("h2", null, "Unexpected Application Error!"), /* @__PURE__ */ reactExports.createElement("h3", {
    style: {
      fontStyle: "italic"
    }
  }, message2), stack ? /* @__PURE__ */ reactExports.createElement("pre", {
    style: preStyles
  }, stack) : null, devInfo);
}
const defaultErrorElement = /* @__PURE__ */ reactExports.createElement(DefaultErrorComponent, null);
class RenderErrorBoundary extends reactExports.Component {
  constructor(props) {
    super(props);
    this.state = {
      location: props.location,
      revalidation: props.revalidation,
      error: props.error
    };
  }
  static getDerivedStateFromError(error) {
    return {
      error
    };
  }
  static getDerivedStateFromProps(props, state) {
    if (state.location !== props.location || state.revalidation !== "idle" && props.revalidation === "idle") {
      return {
        error: props.error,
        location: props.location,
        revalidation: props.revalidation
      };
    }
    return {
      error: props.error || state.error,
      location: state.location,
      revalidation: props.revalidation || state.revalidation
    };
  }
  componentDidCatch(error, errorInfo) {
    console.error("React Router caught the following error during render", error, errorInfo);
  }
  render() {
    return this.state.error ? /* @__PURE__ */ reactExports.createElement(RouteContext.Provider, {
      value: this.props.routeContext
    }, /* @__PURE__ */ reactExports.createElement(RouteErrorContext.Provider, {
      value: this.state.error,
      children: this.props.component
    })) : this.props.children;
  }
}
function RenderedRoute(_ref) {
  let {
    routeContext,
    match: match2,
    children: children2
  } = _ref;
  let dataRouterContext = reactExports.useContext(DataRouterContext);
  if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match2.route.errorElement || match2.route.ErrorBoundary)) {
    dataRouterContext.staticContext._deepestRenderedBoundaryId = match2.route.id;
  }
  return /* @__PURE__ */ reactExports.createElement(RouteContext.Provider, {
    value: routeContext
  }, children2);
}
function _renderMatches(matches, parentMatches, dataRouterState) {
  var _dataRouterState2;
  if (parentMatches === void 0) {
    parentMatches = [];
  }
  if (dataRouterState === void 0) {
    dataRouterState = null;
  }
  if (matches == null) {
    var _dataRouterState;
    if ((_dataRouterState = dataRouterState) != null && _dataRouterState.errors) {
      matches = dataRouterState.matches;
    } else {
      return null;
    }
  }
  let renderedMatches = matches;
  let errors = (_dataRouterState2 = dataRouterState) == null ? void 0 : _dataRouterState2.errors;
  if (errors != null) {
    let errorIndex = renderedMatches.findIndex((m2) => m2.route.id && (errors == null ? void 0 : errors[m2.route.id]));
    !(errorIndex >= 0) ? invariant(false) : void 0;
    renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));
  }
  return renderedMatches.reduceRight((outlet, match2, index) => {
    let error = match2.route.id ? errors == null ? void 0 : errors[match2.route.id] : null;
    let errorElement = null;
    if (dataRouterState) {
      errorElement = match2.route.errorElement || defaultErrorElement;
    }
    let matches2 = parentMatches.concat(renderedMatches.slice(0, index + 1));
    let getChildren = () => {
      let children2;
      if (error) {
        children2 = errorElement;
      } else if (match2.route.Component) {
        children2 = /* @__PURE__ */ reactExports.createElement(match2.route.Component, null);
      } else if (match2.route.element) {
        children2 = match2.route.element;
      } else {
        children2 = outlet;
      }
      return /* @__PURE__ */ reactExports.createElement(RenderedRoute, {
        match: match2,
        routeContext: {
          outlet,
          matches: matches2,
          isDataRoute: dataRouterState != null
        },
        children: children2
      });
    };
    return dataRouterState && (match2.route.ErrorBoundary || match2.route.errorElement || index === 0) ? /* @__PURE__ */ reactExports.createElement(RenderErrorBoundary, {
      location: dataRouterState.location,
      revalidation: dataRouterState.revalidation,
      component: errorElement,
      error,
      children: getChildren(),
      routeContext: {
        outlet: null,
        matches: matches2,
        isDataRoute: true
      }
    }) : getChildren();
  }, null);
}
var DataRouterHook$1;
(function(DataRouterHook2) {
  DataRouterHook2["UseBlocker"] = "useBlocker";
  DataRouterHook2["UseRevalidator"] = "useRevalidator";
  DataRouterHook2["UseNavigateStable"] = "useNavigate";
})(DataRouterHook$1 || (DataRouterHook$1 = {}));
var DataRouterStateHook$1;
(function(DataRouterStateHook2) {
  DataRouterStateHook2["UseBlocker"] = "useBlocker";
  DataRouterStateHook2["UseLoaderData"] = "useLoaderData";
  DataRouterStateHook2["UseActionData"] = "useActionData";
  DataRouterStateHook2["UseRouteError"] = "useRouteError";
  DataRouterStateHook2["UseNavigation"] = "useNavigation";
  DataRouterStateHook2["UseRouteLoaderData"] = "useRouteLoaderData";
  DataRouterStateHook2["UseMatches"] = "useMatches";
  DataRouterStateHook2["UseRevalidator"] = "useRevalidator";
  DataRouterStateHook2["UseNavigateStable"] = "useNavigate";
  DataRouterStateHook2["UseRouteId"] = "useRouteId";
})(DataRouterStateHook$1 || (DataRouterStateHook$1 = {}));
function useDataRouterState(hookName) {
  let state = reactExports.useContext(DataRouterStateContext);
  !state ? invariant(false) : void 0;
  return state;
}
function useRouteContext(hookName) {
  let route = reactExports.useContext(RouteContext);
  !route ? invariant(false) : void 0;
  return route;
}
function useCurrentRouteId(hookName) {
  let route = useRouteContext();
  let thisRoute = route.matches[route.matches.length - 1];
  !thisRoute.route.id ? invariant(false) : void 0;
  return thisRoute.route.id;
}
function useRouteError() {
  var _state$errors;
  let error = reactExports.useContext(RouteErrorContext);
  let state = useDataRouterState(DataRouterStateHook$1.UseRouteError);
  let routeId = useCurrentRouteId(DataRouterStateHook$1.UseRouteError);
  if (error) {
    return error;
  }
  return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];
}
function Outlet(props) {
  return useOutlet(props.context);
}
function Route(_props) {
  invariant(false);
}
function Router(_ref5) {
  let {
    basename: basenameProp = "/",
    children: children2 = null,
    location: locationProp,
    navigationType = Action.Pop,
    navigator: navigator2,
    static: staticProp = false
  } = _ref5;
  !!useInRouterContext() ? invariant(false) : void 0;
  let basename = basenameProp.replace(/^\/*/, "/");
  let navigationContext = reactExports.useMemo(() => ({
    basename,
    navigator: navigator2,
    static: staticProp
  }), [basename, navigator2, staticProp]);
  if (typeof locationProp === "string") {
    locationProp = parsePath(locationProp);
  }
  let {
    pathname = "/",
    search = "",
    hash: hash2 = "",
    state = null,
    key = "default"
  } = locationProp;
  let locationContext = reactExports.useMemo(() => {
    let trailingPathname = stripBasename(pathname, basename);
    if (trailingPathname == null) {
      return null;
    }
    return {
      location: {
        pathname: trailingPathname,
        search,
        hash: hash2,
        state,
        key
      },
      navigationType
    };
  }, [basename, pathname, search, hash2, state, key, navigationType]);
  if (locationContext == null) {
    return null;
  }
  return /* @__PURE__ */ reactExports.createElement(NavigationContext.Provider, {
    value: navigationContext
  }, /* @__PURE__ */ reactExports.createElement(LocationContext.Provider, {
    children: children2,
    value: locationContext
  }));
}
function Routes(_ref6) {
  let {
    children: children2,
    location: location2
  } = _ref6;
  return useRoutes(createRoutesFromChildren(children2), location2);
}
var AwaitRenderStatus;
(function(AwaitRenderStatus2) {
  AwaitRenderStatus2[AwaitRenderStatus2["pending"] = 0] = "pending";
  AwaitRenderStatus2[AwaitRenderStatus2["success"] = 1] = "success";
  AwaitRenderStatus2[AwaitRenderStatus2["error"] = 2] = "error";
})(AwaitRenderStatus || (AwaitRenderStatus = {}));
new Promise(() => {
});
function createRoutesFromChildren(children2, parentPath) {
  if (parentPath === void 0) {
    parentPath = [];
  }
  let routes = [];
  reactExports.Children.forEach(children2, (element2, index) => {
    if (!/* @__PURE__ */ reactExports.isValidElement(element2)) {
      return;
    }
    let treePath = [...parentPath, index];
    if (element2.type === reactExports.Fragment) {
      routes.push.apply(routes, createRoutesFromChildren(element2.props.children, treePath));
      return;
    }
    !(element2.type === Route) ? invariant(false) : void 0;
    !(!element2.props.index || !element2.props.children) ? invariant(false) : void 0;
    let route = {
      id: element2.props.id || treePath.join("-"),
      caseSensitive: element2.props.caseSensitive,
      element: element2.props.element,
      Component: element2.props.Component,
      index: element2.props.index,
      path: element2.props.path,
      loader: element2.props.loader,
      action: element2.props.action,
      errorElement: element2.props.errorElement,
      ErrorBoundary: element2.props.ErrorBoundary,
      hasErrorBoundary: element2.props.ErrorBoundary != null || element2.props.errorElement != null,
      shouldRevalidate: element2.props.shouldRevalidate,
      handle: element2.props.handle,
      lazy: element2.props.lazy
    };
    if (element2.props.children) {
      route.children = createRoutesFromChildren(element2.props.children, treePath);
    }
    routes.push(route);
  });
  return routes;
}
/**
 * React Router DOM v6.11.2
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
function BrowserRouter(_ref) {
  let {
    basename,
    children: children2,
    window: window2
  } = _ref;
  let historyRef = reactExports.useRef();
  if (historyRef.current == null) {
    historyRef.current = createBrowserHistory({
      window: window2,
      v5Compat: true
    });
  }
  let history2 = historyRef.current;
  let [state, setState] = reactExports.useState({
    action: history2.action,
    location: history2.location
  });
  reactExports.useLayoutEffect(() => history2.listen(setState), [history2]);
  return /* @__PURE__ */ reactExports.createElement(Router, {
    basename,
    children: children2,
    location: state.location,
    navigationType: state.action,
    navigator: history2
  });
}
var DataRouterHook;
(function(DataRouterHook2) {
  DataRouterHook2["UseScrollRestoration"] = "useScrollRestoration";
  DataRouterHook2["UseSubmitImpl"] = "useSubmitImpl";
  DataRouterHook2["UseFetcher"] = "useFetcher";
})(DataRouterHook || (DataRouterHook = {}));
var DataRouterStateHook;
(function(DataRouterStateHook2) {
  DataRouterStateHook2["UseFetchers"] = "useFetchers";
  DataRouterStateHook2["UseScrollRestoration"] = "useScrollRestoration";
})(DataRouterStateHook || (DataRouterStateHook = {}));
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
function noop() {
}
const identity = (x2) => x2;
function assign(tar, src) {
  for (const k2 in src) tar[k2] = src[k2];
  return (
    /** @type {T & S} */
    tar
  );
}
function run(fn) {
  return fn();
}
function blank_object() {
  return /* @__PURE__ */ Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function is_function(thing) {
  return typeof thing === "function";
}
function safe_not_equal(a, b) {
  return a != a ? b == b : a !== b || a && typeof a === "object" || typeof a === "function";
}
let src_url_equal_anchor;
function src_url_equal(element_src, url) {
  if (element_src === url) return true;
  if (!src_url_equal_anchor) {
    src_url_equal_anchor = document.createElement("a");
  }
  src_url_equal_anchor.href = url;
  return element_src === src_url_equal_anchor.href;
}
function is_empty(obj) {
  return Object.keys(obj).length === 0;
}
function subscribe(store, ...callbacks) {
  if (store == null) {
    for (const callback of callbacks) {
      callback(void 0);
    }
    return noop;
  }
  const unsub = store.subscribe(...callbacks);
  return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}
function component_subscribe(component, store, callback) {
  component.$$.on_destroy.push(subscribe(store, callback));
}
function create_slot(definition, ctx, $$scope, fn) {
  if (definition) {
    const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
    return definition[0](slot_ctx);
  }
}
function get_slot_context(definition, ctx, $$scope, fn) {
  return definition[1] && fn ? assign($$scope.ctx.slice(), definition[1](fn(ctx))) : $$scope.ctx;
}
function get_slot_changes(definition, $$scope, dirty, fn) {
  if (definition[2] && fn) {
    const lets = definition[2](fn(dirty));
    if ($$scope.dirty === void 0) {
      return lets;
    }
    if (typeof lets === "object") {
      const merged = [];
      const len = Math.max($$scope.dirty.length, lets.length);
      for (let i = 0; i < len; i += 1) {
        merged[i] = $$scope.dirty[i] | lets[i];
      }
      return merged;
    }
    return $$scope.dirty | lets;
  }
  return $$scope.dirty;
}
function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
  if (slot_changes) {
    const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
    slot.p(slot_context, slot_changes);
  }
}
function get_all_dirty_from_scope($$scope) {
  if ($$scope.ctx.length > 32) {
    const dirty = [];
    const length = $$scope.ctx.length / 32;
    for (let i = 0; i < length; i++) {
      dirty[i] = -1;
    }
    return dirty;
  }
  return -1;
}
function compute_slots(slots) {
  const result = {};
  for (const key in slots) {
    result[key] = true;
  }
  return result;
}
function null_to_empty(value) {
  return value == null ? "" : value;
}
function action_destroyer(action_result) {
  return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
}
function split_css_unit(value) {
  const split = typeof value === "string" && value.match(/^\s*(-?[\d.]+)([^\s]*)\s*$/);
  return split ? [parseFloat(split[1]), split[2] || "px"] : [
    /** @type {number} */
    value,
    "px"
  ];
}
const is_client = typeof window !== "undefined";
let now = is_client ? () => window.performance.now() : () => Date.now();
let raf = is_client ? (cb2) => requestAnimationFrame(cb2) : noop;
const tasks = /* @__PURE__ */ new Set();
function run_tasks(now2) {
  tasks.forEach((task) => {
    if (!task.c(now2)) {
      tasks.delete(task);
      task.f();
    }
  });
  if (tasks.size !== 0) raf(run_tasks);
}
function loop(callback) {
  let task;
  if (tasks.size === 0) raf(run_tasks);
  return {
    promise: new Promise((fulfill) => {
      tasks.add(task = { c: callback, f: fulfill });
    }),
    abort() {
      tasks.delete(task);
    }
  };
}
const globals = typeof window !== "undefined" ? window : typeof globalThis !== "undefined" ? globalThis : (
  // @ts-ignore Node typings have this
  global
);
function append(target, node) {
  target.appendChild(node);
}
function append_styles(target, style_sheet_id, styles2) {
  const append_styles_to = get_root_for_style(target);
  if (!append_styles_to.getElementById(style_sheet_id)) {
    const style2 = element("style");
    style2.id = style_sheet_id;
    style2.textContent = styles2;
    append_stylesheet(append_styles_to, style2);
  }
}
function get_root_for_style(node) {
  if (!node) return document;
  const root2 = node.getRootNode ? node.getRootNode() : node.ownerDocument;
  if (root2 && /** @type {ShadowRoot} */
  root2.host) {
    return (
      /** @type {ShadowRoot} */
      root2
    );
  }
  return node.ownerDocument;
}
function append_empty_stylesheet(node) {
  const style_element = element("style");
  style_element.textContent = "/* empty */";
  append_stylesheet(get_root_for_style(node), style_element);
  return style_element.sheet;
}
function append_stylesheet(node, style2) {
  append(
    /** @type {Document} */
    node.head || node,
    style2
  );
  return style2.sheet;
}
function insert(target, node, anchor) {
  target.insertBefore(node, anchor || null);
}
function detach(node) {
  if (node.parentNode) {
    node.parentNode.removeChild(node);
  }
}
function destroy_each(iterations, detaching) {
  for (let i = 0; i < iterations.length; i += 1) {
    if (iterations[i]) iterations[i].d(detaching);
  }
}
function element(name) {
  return document.createElement(name);
}
function svg_element(name) {
  return document.createElementNS("http://www.w3.org/2000/svg", name);
}
function text(data) {
  return document.createTextNode(data);
}
function space() {
  return text(" ");
}
function empty() {
  return text("");
}
function listen(node, event, handler, options) {
  node.addEventListener(event, handler, options);
  return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
  if (value == null) node.removeAttribute(attribute);
  else if (node.getAttribute(attribute) !== value) node.setAttribute(attribute, value);
}
const always_set_through_set_attribute = ["width", "height"];
function set_attributes(node, attributes) {
  const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);
  for (const key in attributes) {
    if (attributes[key] == null) {
      node.removeAttribute(key);
    } else if (key === "style") {
      node.style.cssText = attributes[key];
    } else if (key === "__value") {
      node.value = node[key] = attributes[key];
    } else if (descriptors[key] && descriptors[key].set && always_set_through_set_attribute.indexOf(key) === -1) {
      node[key] = attributes[key];
    } else {
      attr(node, key, attributes[key]);
    }
  }
}
function set_custom_element_data_map(node, data_map) {
  Object.keys(data_map).forEach((key) => {
    set_custom_element_data(node, key, data_map[key]);
  });
}
function set_custom_element_data(node, prop, value) {
  const lower = prop.toLowerCase();
  if (lower in node) {
    node[lower] = typeof node[lower] === "boolean" && value === "" ? true : value;
  } else if (prop in node) {
    node[prop] = typeof node[prop] === "boolean" && value === "" ? true : value;
  } else {
    attr(node, prop, value);
  }
}
function set_dynamic_element_data(tag) {
  return /-/.test(tag) ? set_custom_element_data_map : set_attributes;
}
function children(element2) {
  return Array.from(element2.childNodes);
}
function set_data(text2, data) {
  data = "" + data;
  if (text2.data === data) return;
  text2.data = /** @type {string} */
  data;
}
function set_input_value(input, value) {
  input.value = value == null ? "" : value;
}
function set_style(node, key, value, important) {
  if (value == null) {
    node.style.removeProperty(key);
  } else {
    node.style.setProperty(key, value, "");
  }
}
let crossorigin;
function is_crossorigin() {
  if (crossorigin === void 0) {
    crossorigin = false;
    try {
      if (typeof window !== "undefined" && window.parent) {
        void window.parent.document;
      }
    } catch (error) {
      crossorigin = true;
    }
  }
  return crossorigin;
}
function add_iframe_resize_listener(node, fn) {
  const computed_style = getComputedStyle(node);
  if (computed_style.position === "static") {
    node.style.position = "relative";
  }
  const iframe = element("iframe");
  iframe.setAttribute(
    "style",
    "display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;"
  );
  iframe.setAttribute("aria-hidden", "true");
  iframe.tabIndex = -1;
  const crossorigin2 = is_crossorigin();
  let unsubscribe;
  if (crossorigin2) {
    iframe.src = "data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}<\/script>";
    unsubscribe = listen(
      window,
      "message",
      /** @param {MessageEvent} event */
      (event) => {
        if (event.source === iframe.contentWindow) fn();
      }
    );
  } else {
    iframe.src = "about:blank";
    iframe.onload = () => {
      unsubscribe = listen(iframe.contentWindow, "resize", fn);
      fn();
    };
  }
  append(node, iframe);
  return () => {
    if (crossorigin2) {
      unsubscribe();
    } else if (unsubscribe && iframe.contentWindow) {
      unsubscribe();
    }
    detach(iframe);
  };
}
function toggle_class(element2, name, toggle) {
  element2.classList.toggle(name, !!toggle);
}
function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
  return new CustomEvent(type, { detail, bubbles, cancelable });
}
function get_custom_elements_slots(element2) {
  const result = {};
  element2.childNodes.forEach(
    /** @param {Element} node */
    (node) => {
      result[node.slot || "default"] = true;
    }
  );
  return result;
}
const managed_styles = /* @__PURE__ */ new Map();
let active = 0;
function hash(str) {
  let hash2 = 5381;
  let i = str.length;
  while (i--) hash2 = (hash2 << 5) - hash2 ^ str.charCodeAt(i);
  return hash2 >>> 0;
}
function create_style_information(doc, node) {
  const info = { stylesheet: append_empty_stylesheet(node), rules: {} };
  managed_styles.set(doc, info);
  return info;
}
function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
  const step = 16.666 / duration;
  let keyframes = "{\n";
  for (let p2 = 0; p2 <= 1; p2 += step) {
    const t2 = a + (b - a) * ease(p2);
    keyframes += p2 * 100 + `%{${fn(t2, 1 - t2)}}
`;
  }
  const rule = keyframes + `100% {${fn(b, 1 - b)}}
}`;
  const name = `__svelte_${hash(rule)}_${uid}`;
  const doc = get_root_for_style(node);
  const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);
  if (!rules[name]) {
    rules[name] = true;
    stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
  }
  const animation = node.style.animation || "";
  node.style.animation = `${animation ? `${animation}, ` : ""}${name} ${duration}ms linear ${delay}ms 1 both`;
  active += 1;
  return name;
}
function delete_rule(node, name) {
  const previous = (node.style.animation || "").split(", ");
  const next = previous.filter(
    name ? (anim) => anim.indexOf(name) < 0 : (anim) => anim.indexOf("__svelte") === -1
    // remove all Svelte animations
  );
  const deleted = previous.length - next.length;
  if (deleted) {
    node.style.animation = next.join(", ");
    active -= deleted;
    if (!active) clear_rules();
  }
}
function clear_rules() {
  raf(() => {
    if (active) return;
    managed_styles.forEach((info) => {
      const { ownerNode } = info.stylesheet;
      if (ownerNode) detach(ownerNode);
    });
    managed_styles.clear();
  });
}
let current_component;
function set_current_component(component) {
  current_component = component;
}
function get_current_component() {
  if (!current_component) throw new Error("Function called outside component initialization");
  return current_component;
}
function onMount(fn) {
  get_current_component().$$.on_mount.push(fn);
}
function afterUpdate(fn) {
  get_current_component().$$.after_update.push(fn);
}
function onDestroy(fn) {
  get_current_component().$$.on_destroy.push(fn);
}
const dirty_components = [];
const binding_callbacks = [];
let render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = /* @__PURE__ */ Promise.resolve();
let update_scheduled = false;
function schedule_update() {
  if (!update_scheduled) {
    update_scheduled = true;
    resolved_promise.then(flush);
  }
}
function tick() {
  schedule_update();
  return resolved_promise;
}
function add_render_callback(fn) {
  render_callbacks.push(fn);
}
const seen_callbacks = /* @__PURE__ */ new Set();
let flushidx = 0;
function flush() {
  if (flushidx !== 0) {
    return;
  }
  const saved_component = current_component;
  do {
    try {
      while (flushidx < dirty_components.length) {
        const component = dirty_components[flushidx];
        flushidx++;
        set_current_component(component);
        update(component.$$);
      }
    } catch (e) {
      dirty_components.length = 0;
      flushidx = 0;
      throw e;
    }
    set_current_component(null);
    dirty_components.length = 0;
    flushidx = 0;
    while (binding_callbacks.length) binding_callbacks.pop()();
    for (let i = 0; i < render_callbacks.length; i += 1) {
      const callback = render_callbacks[i];
      if (!seen_callbacks.has(callback)) {
        seen_callbacks.add(callback);
        callback();
      }
    }
    render_callbacks.length = 0;
  } while (dirty_components.length);
  while (flush_callbacks.length) {
    flush_callbacks.pop()();
  }
  update_scheduled = false;
  seen_callbacks.clear();
  set_current_component(saved_component);
}
function update($$) {
  if ($$.fragment !== null) {
    $$.update();
    run_all($$.before_update);
    const dirty = $$.dirty;
    $$.dirty = [-1];
    $$.fragment && $$.fragment.p($$.ctx, dirty);
    $$.after_update.forEach(add_render_callback);
  }
}
function flush_render_callbacks(fns) {
  const filtered = [];
  const targets = [];
  render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));
  targets.forEach((c) => c());
  render_callbacks = filtered;
}
let promise;
function wait() {
  if (!promise) {
    promise = Promise.resolve();
    promise.then(() => {
      promise = null;
    });
  }
  return promise;
}
function dispatch$2(node, direction, kind) {
  node.dispatchEvent(custom_event(`${direction ? "intro" : "outro"}${kind}`));
}
const outroing = /* @__PURE__ */ new Set();
let outros;
function group_outros() {
  outros = {
    r: 0,
    c: [],
    p: outros
    // parent group
  };
}
function check_outros() {
  if (!outros.r) {
    run_all(outros.c);
  }
  outros = outros.p;
}
function transition_in(block, local) {
  if (block && block.i) {
    outroing.delete(block);
    block.i(local);
  }
}
function transition_out(block, local, detach2, callback) {
  if (block && block.o) {
    if (outroing.has(block)) return;
    outroing.add(block);
    outros.c.push(() => {
      outroing.delete(block);
      if (callback) {
        if (detach2) block.d(1);
        callback();
      }
    });
    block.o(local);
  } else if (callback) {
    callback();
  }
}
const null_transition = { duration: 0 };
function create_in_transition(node, fn, params) {
  const options = { direction: "in" };
  let config = fn(node, params, options);
  let running = false;
  let animation_name;
  let task;
  let uid = 0;
  function cleanup() {
    if (animation_name) delete_rule(node, animation_name);
  }
  function go() {
    const {
      delay = 0,
      duration = 300,
      easing = identity,
      tick: tick2 = noop,
      css
    } = config || null_transition;
    if (css) animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
    tick2(0, 1);
    const start_time = now() + delay;
    const end_time = start_time + duration;
    if (task) task.abort();
    running = true;
    add_render_callback(() => dispatch$2(node, true, "start"));
    task = loop((now2) => {
      if (running) {
        if (now2 >= end_time) {
          tick2(1, 0);
          dispatch$2(node, true, "end");
          cleanup();
          return running = false;
        }
        if (now2 >= start_time) {
          const t2 = easing((now2 - start_time) / duration);
          tick2(t2, 1 - t2);
        }
      }
      return running;
    });
  }
  let started = false;
  return {
    start() {
      if (started) return;
      started = true;
      delete_rule(node);
      if (is_function(config)) {
        config = config(options);
        wait().then(go);
      } else {
        go();
      }
    },
    invalidate() {
      started = false;
    },
    end() {
      if (running) {
        cleanup();
        running = false;
      }
    }
  };
}
function create_out_transition(node, fn, params) {
  const options = { direction: "out" };
  let config = fn(node, params, options);
  let running = true;
  let animation_name;
  const group = outros;
  group.r += 1;
  let original_inert_value;
  function go() {
    const {
      delay = 0,
      duration = 300,
      easing = identity,
      tick: tick2 = noop,
      css
    } = config || null_transition;
    if (css) animation_name = create_rule(node, 1, 0, duration, delay, easing, css);
    const start_time = now() + delay;
    const end_time = start_time + duration;
    add_render_callback(() => dispatch$2(node, false, "start"));
    if ("inert" in node) {
      original_inert_value = /** @type {HTMLElement} */
      node.inert;
      node.inert = true;
    }
    loop((now2) => {
      if (running) {
        if (now2 >= end_time) {
          tick2(0, 1);
          dispatch$2(node, false, "end");
          if (!--group.r) {
            run_all(group.c);
          }
          return false;
        }
        if (now2 >= start_time) {
          const t2 = easing((now2 - start_time) / duration);
          tick2(1 - t2, t2);
        }
      }
      return running;
    });
  }
  if (is_function(config)) {
    wait().then(() => {
      config = config(options);
      go();
    });
  } else {
    go();
  }
  return {
    end(reset) {
      if (reset && "inert" in node) {
        node.inert = original_inert_value;
      }
      if (reset && config.tick) {
        config.tick(1, 0);
      }
      if (running) {
        if (animation_name) delete_rule(node, animation_name);
        running = false;
      }
    }
  };
}
function create_bidirectional_transition(node, fn, params, intro) {
  const options = { direction: "both" };
  let config = fn(node, params, options);
  let t2 = intro ? 0 : 1;
  let running_program = null;
  let pending_program = null;
  let animation_name = null;
  let original_inert_value;
  function clear_animation() {
    if (animation_name) delete_rule(node, animation_name);
  }
  function init2(program, duration) {
    const d = (
      /** @type {Program['d']} */
      program.b - t2
    );
    duration *= Math.abs(d);
    return {
      a: t2,
      b: program.b,
      d,
      duration,
      start: program.start,
      end: program.start + duration,
      group: program.group
    };
  }
  function go(b) {
    const {
      delay = 0,
      duration = 300,
      easing = identity,
      tick: tick2 = noop,
      css
    } = config || null_transition;
    const program = {
      start: now() + delay,
      b
    };
    if (!b) {
      program.group = outros;
      outros.r += 1;
    }
    if ("inert" in node) {
      if (b) {
        if (original_inert_value !== void 0) {
          node.inert = original_inert_value;
        }
      } else {
        original_inert_value = /** @type {HTMLElement} */
        node.inert;
        node.inert = true;
      }
    }
    if (running_program || pending_program) {
      pending_program = program;
    } else {
      if (css) {
        clear_animation();
        animation_name = create_rule(node, t2, b, duration, delay, easing, css);
      }
      if (b) tick2(0, 1);
      running_program = init2(program, duration);
      add_render_callback(() => dispatch$2(node, b, "start"));
      loop((now2) => {
        if (pending_program && now2 > pending_program.start) {
          running_program = init2(pending_program, duration);
          pending_program = null;
          dispatch$2(node, running_program.b, "start");
          if (css) {
            clear_animation();
            animation_name = create_rule(
              node,
              t2,
              running_program.b,
              running_program.duration,
              0,
              easing,
              config.css
            );
          }
        }
        if (running_program) {
          if (now2 >= running_program.end) {
            tick2(t2 = running_program.b, 1 - t2);
            dispatch$2(node, running_program.b, "end");
            if (!pending_program) {
              if (running_program.b) {
                clear_animation();
              } else {
                if (!--running_program.group.r) run_all(running_program.group.c);
              }
            }
            running_program = null;
          } else if (now2 >= running_program.start) {
            const p2 = now2 - running_program.start;
            t2 = running_program.a + running_program.d * easing(p2 / running_program.duration);
            tick2(t2, 1 - t2);
          }
        }
        return !!(running_program || pending_program);
      });
    }
  }
  return {
    run(b) {
      if (is_function(config)) {
        wait().then(() => {
          const opts = { direction: b ? "in" : "out" };
          config = config(opts);
          go(b);
        });
      } else {
        go(b);
      }
    },
    end() {
      clear_animation();
      running_program = pending_program = null;
    }
  };
}
function ensure_array_like(array_like_or_iterator) {
  return (array_like_or_iterator == null ? void 0 : array_like_or_iterator.length) !== void 0 ? array_like_or_iterator : Array.from(array_like_or_iterator);
}
function destroy_block(block, lookup) {
  block.d(1);
  lookup.delete(block.key);
}
function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block2, next, get_context) {
  let o = old_blocks.length;
  let n2 = list.length;
  let i = o;
  const old_indexes = {};
  while (i--) old_indexes[old_blocks[i].key] = i;
  const new_blocks = [];
  const new_lookup = /* @__PURE__ */ new Map();
  const deltas = /* @__PURE__ */ new Map();
  const updates = [];
  i = n2;
  while (i--) {
    const child_ctx = get_context(ctx, list, i);
    const key = get_key(child_ctx);
    let block = lookup.get(key);
    if (!block) {
      block = create_each_block2(key, child_ctx);
      block.c();
    } else {
      updates.push(() => block.p(child_ctx, dirty));
    }
    new_lookup.set(key, new_blocks[i] = block);
    if (key in old_indexes) deltas.set(key, Math.abs(i - old_indexes[key]));
  }
  const will_move = /* @__PURE__ */ new Set();
  const did_move = /* @__PURE__ */ new Set();
  function insert2(block) {
    transition_in(block, 1);
    block.m(node, next);
    lookup.set(block.key, block);
    next = block.first;
    n2--;
  }
  while (o && n2) {
    const new_block = new_blocks[n2 - 1];
    const old_block = old_blocks[o - 1];
    const new_key = new_block.key;
    const old_key = old_block.key;
    if (new_block === old_block) {
      next = new_block.first;
      o--;
      n2--;
    } else if (!new_lookup.has(old_key)) {
      destroy(old_block, lookup);
      o--;
    } else if (!lookup.has(new_key) || will_move.has(new_key)) {
      insert2(new_block);
    } else if (did_move.has(old_key)) {
      o--;
    } else if (deltas.get(new_key) > deltas.get(old_key)) {
      did_move.add(new_key);
      insert2(new_block);
    } else {
      will_move.add(old_key);
      o--;
    }
  }
  while (o--) {
    const old_block = old_blocks[o];
    if (!new_lookup.has(old_block.key)) destroy(old_block, lookup);
  }
  while (n2) insert2(new_blocks[n2 - 1]);
  run_all(updates);
  return new_blocks;
}
function get_spread_update(levels, updates) {
  const update2 = {};
  const to_null_out = {};
  const accounted_for = { $$scope: 1 };
  let i = levels.length;
  while (i--) {
    const o = levels[i];
    const n2 = updates[i];
    if (n2) {
      for (const key in o) {
        if (!(key in n2)) to_null_out[key] = 1;
      }
      for (const key in n2) {
        if (!accounted_for[key]) {
          update2[key] = n2[key];
          accounted_for[key] = 1;
        }
      }
      levels[i] = n2;
    } else {
      for (const key in o) {
        accounted_for[key] = 1;
      }
    }
  }
  for (const key in to_null_out) {
    if (!(key in update2)) update2[key] = void 0;
  }
  return update2;
}
function create_component(block) {
  block && block.c();
}
function mount_component(component, target, anchor) {
  const { fragment, after_update } = component.$$;
  fragment && fragment.m(target, anchor);
  add_render_callback(() => {
    const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);
    if (component.$$.on_destroy) {
      component.$$.on_destroy.push(...new_on_destroy);
    } else {
      run_all(new_on_destroy);
    }
    component.$$.on_mount = [];
  });
  after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
  const $$ = component.$$;
  if ($$.fragment !== null) {
    flush_render_callbacks($$.after_update);
    run_all($$.on_destroy);
    $$.fragment && $$.fragment.d(detaching);
    $$.on_destroy = $$.fragment = null;
    $$.ctx = [];
  }
}
function make_dirty(component, i) {
  if (component.$$.dirty[0] === -1) {
    dirty_components.push(component);
    schedule_update();
    component.$$.dirty.fill(0);
  }
  component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
}
function init(component, options, instance2, create_fragment2, not_equal, props, append_styles2 = null, dirty = [-1]) {
  const parent_component = current_component;
  set_current_component(component);
  const $$ = component.$$ = {
    fragment: null,
    ctx: [],
    // state
    props,
    update: noop,
    not_equal,
    bound: blank_object(),
    // lifecycle
    on_mount: [],
    on_destroy: [],
    on_disconnect: [],
    before_update: [],
    after_update: [],
    context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
    // everything else
    callbacks: blank_object(),
    dirty,
    skip_bound: false,
    root: options.target || parent_component.$$.root
  };
  append_styles2 && append_styles2($$.root);
  let ready = false;
  $$.ctx = instance2 ? instance2(component, options.props || {}, (i, ret, ...rest) => {
    const value = rest.length ? rest[0] : ret;
    if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
      if (!$$.skip_bound && $$.bound[i]) $$.bound[i](value);
      if (ready) make_dirty(component, i);
    }
    return ret;
  }) : [];
  $$.update();
  ready = true;
  run_all($$.before_update);
  $$.fragment = create_fragment2 ? create_fragment2($$.ctx) : false;
  if (options.target) {
    if (options.hydrate) {
      const nodes = children(options.target);
      $$.fragment && $$.fragment.l(nodes);
      nodes.forEach(detach);
    } else {
      $$.fragment && $$.fragment.c();
    }
    if (options.intro) transition_in(component.$$.fragment);
    mount_component(component, options.target, options.anchor);
    flush();
  }
  set_current_component(parent_component);
}
let SvelteElement;
if (typeof HTMLElement === "function") {
  SvelteElement = class extends HTMLElement {
    constructor($$componentCtor, $$slots, use_shadow_dom) {
      super();
      __publicField(this, "$$ctor");
      __publicField(this, "$$s");
      __publicField(this, "$$c");
      __publicField(this, "$$cn", false);
      __publicField(this, "$$d", {});
      __publicField(this, "$$r", false);
      __publicField(this, "$$p_d", {});
      __publicField(this, "$$l", {});
      __publicField(this, "$$l_u", /* @__PURE__ */ new Map());
      this.$$ctor = $$componentCtor;
      this.$$s = $$slots;
      if (use_shadow_dom) {
        this.attachShadow({ mode: "open" });
      }
    }
    addEventListener(type, listener, options) {
      this.$$l[type] = this.$$l[type] || [];
      this.$$l[type].push(listener);
      if (this.$$c) {
        const unsub = this.$$c.$on(type, listener);
        this.$$l_u.set(listener, unsub);
      }
      super.addEventListener(type, listener, options);
    }
    removeEventListener(type, listener, options) {
      super.removeEventListener(type, listener, options);
      if (this.$$c) {
        const unsub = this.$$l_u.get(listener);
        if (unsub) {
          unsub();
          this.$$l_u.delete(listener);
        }
      }
    }
    async connectedCallback() {
      this.$$cn = true;
      if (!this.$$c) {
        let create_slot2 = function(name) {
          return () => {
            let node;
            const obj = {
              c: function create() {
                node = element("slot");
                if (name !== "default") {
                  attr(node, "name", name);
                }
              },
              /**
               * @param {HTMLElement} target
               * @param {HTMLElement} [anchor]
               */
              m: function mount(target, anchor) {
                insert(target, node, anchor);
              },
              d: function destroy(detaching) {
                if (detaching) {
                  detach(node);
                }
              }
            };
            return obj;
          };
        };
        await Promise.resolve();
        if (!this.$$cn || this.$$c) {
          return;
        }
        const $$slots = {};
        const existing_slots = get_custom_elements_slots(this);
        for (const name of this.$$s) {
          if (name in existing_slots) {
            $$slots[name] = [create_slot2(name)];
          }
        }
        for (const attribute of this.attributes) {
          const name = this.$$g_p(attribute.name);
          if (!(name in this.$$d)) {
            this.$$d[name] = get_custom_element_value(name, attribute.value, this.$$p_d, "toProp");
          }
        }
        for (const key in this.$$p_d) {
          if (!(key in this.$$d) && this[key] !== void 0) {
            this.$$d[key] = this[key];
            delete this[key];
          }
        }
        this.$$c = new this.$$ctor({
          target: this.shadowRoot || this,
          props: {
            ...this.$$d,
            $$slots,
            $$scope: {
              ctx: []
            }
          }
        });
        const reflect_attributes = () => {
          this.$$r = true;
          for (const key in this.$$p_d) {
            this.$$d[key] = this.$$c.$$.ctx[this.$$c.$$.props[key]];
            if (this.$$p_d[key].reflect) {
              const attribute_value = get_custom_element_value(
                key,
                this.$$d[key],
                this.$$p_d,
                "toAttribute"
              );
              if (attribute_value == null) {
                this.removeAttribute(this.$$p_d[key].attribute || key);
              } else {
                this.setAttribute(this.$$p_d[key].attribute || key, attribute_value);
              }
            }
          }
          this.$$r = false;
        };
        this.$$c.$$.after_update.push(reflect_attributes);
        reflect_attributes();
        for (const type in this.$$l) {
          for (const listener of this.$$l[type]) {
            const unsub = this.$$c.$on(type, listener);
            this.$$l_u.set(listener, unsub);
          }
        }
        this.$$l = {};
      }
    }
    // We don't need this when working within Svelte code, but for compatibility of people using this outside of Svelte
    // and setting attributes through setAttribute etc, this is helpful
    attributeChangedCallback(attr2, _oldValue, newValue) {
      var _a;
      if (this.$$r) return;
      attr2 = this.$$g_p(attr2);
      this.$$d[attr2] = get_custom_element_value(attr2, newValue, this.$$p_d, "toProp");
      (_a = this.$$c) == null ? void 0 : _a.$set({ [attr2]: this.$$d[attr2] });
    }
    disconnectedCallback() {
      this.$$cn = false;
      Promise.resolve().then(() => {
        if (!this.$$cn && this.$$c) {
          this.$$c.$destroy();
          this.$$c = void 0;
        }
      });
    }
    $$g_p(attribute_name) {
      return Object.keys(this.$$p_d).find(
        (key) => this.$$p_d[key].attribute === attribute_name || !this.$$p_d[key].attribute && key.toLowerCase() === attribute_name
      ) || attribute_name;
    }
  };
}
function get_custom_element_value(prop, value, props_definition, transform) {
  var _a;
  const type = (_a = props_definition[prop]) == null ? void 0 : _a.type;
  value = type === "Boolean" && typeof value !== "boolean" ? value != null : value;
  if (!transform || !props_definition[prop]) {
    return value;
  } else if (transform === "toAttribute") {
    switch (type) {
      case "Object":
      case "Array":
        return value == null ? null : JSON.stringify(value);
      case "Boolean":
        return value ? "" : null;
      case "Number":
        return value == null ? null : value;
      default:
        return value;
    }
  } else {
    switch (type) {
      case "Object":
      case "Array":
        return value && JSON.parse(value);
      case "Boolean":
        return value;
      case "Number":
        return value != null ? +value : value;
      default:
        return value;
    }
  }
}
function create_custom_element(Component, props_definition, slots, accessors, use_shadow_dom, extend) {
  let Class = class extends SvelteElement {
    constructor() {
      super(Component, slots, use_shadow_dom);
      this.$$p_d = props_definition;
    }
    static get observedAttributes() {
      return Object.keys(props_definition).map(
        (key) => (props_definition[key].attribute || key).toLowerCase()
      );
    }
  };
  Object.keys(props_definition).forEach((prop) => {
    Object.defineProperty(Class.prototype, prop, {
      get() {
        return this.$$c && prop in this.$$c ? this.$$c[prop] : this.$$d[prop];
      },
      set(value) {
        var _a;
        value = get_custom_element_value(prop, value, props_definition);
        this.$$d[prop] = value;
        (_a = this.$$c) == null ? void 0 : _a.$set({ [prop]: value });
      }
    });
  });
  accessors.forEach((accessor) => {
    Object.defineProperty(Class.prototype, accessor, {
      get() {
        var _a;
        return (_a = this.$$c) == null ? void 0 : _a[accessor];
      }
    });
  });
  Component.element = /** @type {any} */
  Class;
  return Class;
}
class SvelteComponent {
  constructor() {
    __publicField(this, "$$");
    __publicField(this, "$$set");
  }
  /** @returns {void} */
  $destroy() {
    destroy_component(this, 1);
    this.$destroy = noop;
  }
  /**
   * @template {Extract<keyof Events, string>} K
   * @param {K} type
   * @param {((e: Events[K]) => void) | null | undefined} callback
   * @returns {() => void}
   */
  $on(type, callback) {
    if (!is_function(callback)) {
      return noop;
    }
    const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
    callbacks.push(callback);
    return () => {
      const index = callbacks.indexOf(callback);
      if (index !== -1) callbacks.splice(index, 1);
    };
  }
  /**
   * @param {Partial<Props>} props
   * @returns {void}
   */
  $set(props) {
    if (this.$$set && !is_empty(props)) {
      this.$$.skip_bound = true;
      this.$$set(props);
      this.$$.skip_bound = false;
    }
  }
}
const PUBLIC_VERSION = "4";
if (typeof window !== "undefined")
  (window.__svelte || (window.__svelte = { v: /* @__PURE__ */ new Set() })).v.add(PUBLIC_VERSION);
class Src extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, null, safe_not_equal, {});
  }
}
create_custom_element(Src, {}, [], [], true);
const conversions = {
  "0": "none",
  "1": "3xs",
  "2": "2xs",
  "3": "xs",
  "4": "s",
  "5": "m",
  "6": "l",
  "7": "xl",
  "8": "2xl",
  "9": "3xl",
  "10": "4xl",
  "none": "none",
  "3xs": "3xs",
  "2xs": "2xs",
  "xs": "xs",
  "s": "s",
  "m": "m",
  "l": "l",
  "xl": "xl",
  "2xl": "2xl",
  "3xl": "3xl",
  "4xl": "4xl"
};
function convertSpacing(size) {
  if (!size) return "none";
  if (!Number.isInteger(+size)) {
    return size;
  }
  return conversions[size] || "none";
}
function calculateMargin(mt, mr, mb2, ml2) {
  mt = convertSpacing(mt);
  mb2 = convertSpacing(mb2);
  ml2 = convertSpacing(ml2);
  mr = convertSpacing(mr);
  return [
    mt && mt !== "none" && `margin-top:var(--goa-space-${mt});` || "",
    mr && mr !== "none" && `margin-right:var(--goa-space-${mr});` || "",
    mb2 && mb2 !== "none" && `margin-bottom:var(--goa-space-${mb2});` || "",
    ml2 && ml2 !== "none" && `margin-left:var(--goa-space-${ml2});` || ""
  ].join(" ");
}
function injectCss(el2, rootSelector, css, media) {
  if (!el2) return;
  const style2 = document.createElement("style");
  const _css = Object.entries(css).map((entry) => `${entry[0]}: ${entry[1]};`).join(" ");
  {
    style2.innerHTML = `${rootSelector} {${_css}}`;
  }
  el2.appendChild(style2);
}
function styles(...css) {
  return css.filter((item) => !!item).map(
    (item) => typeof item === "string" ? item.replace(/;$/, "") : item
  ).join(";");
}
function style(name, value) {
  return value ? `${name}: ${value}` : "";
}
function receive(el2, handler) {
  if (!el2) {
    console.warn("receive() el is null | undefined");
  }
  el2 == null ? void 0 : el2.addEventListener("msg", (e) => {
    const ce2 = e;
    handler(ce2.detail.action, ce2.detail.data, e);
  });
}
function relay(el2, eventName, data, opts) {
  const dispatch2 = () => {
    el2 == null ? void 0 : el2.dispatchEvent(
      new CustomEvent("msg", {
        composed: true,
        bubbles: opts == null ? void 0 : opts.bubbles,
        cancelable: opts == null ? void 0 : opts.cancelable,
        detail: {
          action: eventName,
          data
        }
      })
    );
  };
  if (opts == null ? void 0 : opts.timeout) {
    setTimeout(dispatch2, opts.timeout);
  } else {
    dispatch2();
  }
}
function dispatch$1(el2, eventName, detail, opts) {
  const dispatch2 = () => {
    el2 == null ? void 0 : el2.dispatchEvent(
      new CustomEvent(eventName, {
        composed: true,
        bubbles: opts == null ? void 0 : opts.bubbles,
        cancelable: opts == null ? void 0 : opts.cancelable,
        detail
      })
    );
  };
  if (opts == null ? void 0 : opts.timeout) {
    setTimeout(dispatch2, opts.timeout);
  } else {
    dispatch2();
  }
}
function getSlottedChildren(rootEl, parentTestSelector) {
  const slot = rootEl == null ? void 0 : rootEl.querySelector("slot");
  if (slot) {
    return slot.assignedElements();
  } else {
    if (parentTestSelector) {
      return [...rootEl.querySelector(parentTestSelector).children];
    }
    return [...rootEl.children];
  }
}
function toBoolean(value) {
  if (value === "false") {
    return false;
  }
  if (value === "") {
    return true;
  }
  return !!value;
}
function fromBoolean(value) {
  return value ? "true" : "false";
}
function isValidDate(d) {
  return !isNaN(d.getDate());
}
function validateRequired(componentName, props) {
  Object.entries(props).forEach((prop) => {
    if (!prop[1]) {
      console.warn(`${componentName}: ${prop[0]} is required`);
    }
  });
}
function typeValidator(message2, values, required = false) {
  const validator = (value) => {
    if (!required && !value) {
      return;
    }
    if (required && !value) {
      console.error(`[${value}] is an invalid ${message2.toLowerCase()}`);
      return;
    }
    if (!values.includes(value || "")) {
      console.error(`[${value}] is an invalid ${message2.toLowerCase()}`);
    }
  };
  return [values, validator];
}
function getTimestamp(val) {
  const months = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  ];
  const now2 = /* @__PURE__ */ new Date();
  const hour24 = now2.getHours();
  const min0 = now2.getMinutes();
  const date = now2.getDate();
  const month = months[now2.getMonth()];
  const year = now2.getFullYear();
  const hour = hour24 === 0 && 12 || hour24 > 12 && hour24 - 12 || hour24;
  const meridium = hour24 === 0 && "AM" || hour24 >= 12 && "PM" || "AM";
  const min = min0 < 10 && `0${min0}` || min0;
  const ordinal = date % 10 === 1 && date !== 11 && "st" || date % 10 === 2 && date !== 12 && "nd" || date % 10 === 3 && date !== 13 && "rd" || "th";
  return `${month} ${date}${ordinal} ${year}, ${hour}:${min} ${meridium}`;
}
function pluralize(word, count) {
  if (count === 1) return word;
  return `${word}s`;
}
function clamp(value, min, max) {
  return value > max ? max : value < min ? min : value;
}
function generateRandomId() {
  return `${Math.random().toString(36).substring(2, 9)}`;
}
function add_css$$(target) {
  append_styles(target, "svelte-1j9i5d0", ':host{box-sizing:border-box;font-family:var(--goa-font-family-sans);font-size:var(--goa-font-size-4)}.goa-accordion.svelte-1j9i5d0.svelte-1j9i5d0,.goa-accordion.svelte-1j9i5d0 .svelte-1j9i5d0{box-sizing:border-box}.goa-accordion.svelte-1j9i5d0.svelte-1j9i5d0{container:self / inline-size}summary.svelte-1j9i5d0.svelte-1j9i5d0{min-height:3.5rem;padding:var(--goa-space-s) var(--goa-space-m) var(--goa-space-s) 0;border-width:var(--goa-border-width-s);border-style:solid;border-radius:var(--goa-border-radius-m);background-color:var(--goa-color-greyscale-100);border-color:var(--goa-color-greyscale-200);color:var(--goa-color-text-default);cursor:pointer;list-style:none;display:flex;align-items:flex-start;position:relative}summary.svelte-1j9i5d0.svelte-1j9i5d0:hover{background-color:var(--goa-color-greyscale-200)}summary.svelte-1j9i5d0.svelte-1j9i5d0:focus-visible,summary.svelte-1j9i5d0.svelte-1j9i5d0:active{background-color:var(--goa-color-greyscale-100);outline:none}summary.svelte-1j9i5d0.svelte-1j9i5d0:focus-visible::before{content:"";position:absolute;top:-1px;right:-1px;bottom:-1px;left:-1px;border:var(--goa-border-width-l) solid var(--goa-color-interactive-focus);border-radius:4px}summary.svelte-1j9i5d0.svelte-1j9i5d0::marker,summary.svelte-1j9i5d0.svelte-1j9i5d0::-webkit-details-marker{display:none}summary.svelte-1j9i5d0 goa-icon.svelte-1j9i5d0{padding:0.125rem 1rem}.title.svelte-1j9i5d0.svelte-1j9i5d0{display:flex;flex:1}.title.svelte-1j9i5d0 span.svelte-1j9i5d0{padding-bottom:var(--goa-space-2xs, 0)}.heading.svelte-1j9i5d0.svelte-1j9i5d0{font:var(--goa-typography-heading-s);padding-right:1rem}.secondary-text.svelte-1j9i5d0.svelte-1j9i5d0{font:var(--goa-typography-body-s);line-height:1.5rem;padding-right:1rem}.heading-content.svelte-1j9i5d0.svelte-1j9i5d0{flex:1}goa-icon.svelte-1j9i5d0.svelte-1j9i5d0{padding:0.125rem 1rem}.container-medium.svelte-1j9i5d0.svelte-1j9i5d0{min-height:4rem}.container-medium.svelte-1j9i5d0 goa-icon.svelte-1j9i5d0{padding:0.375rem 1rem}.content.svelte-1j9i5d0.svelte-1j9i5d0{border-bottom:var(--goa-border-width-s) solid\n      var(--goa-color-greyscale-200);border-left:var(--goa-border-width-s) solid var(--goa-color-greyscale-200);border-right:var(--goa-border-width-s) solid var(--goa-color-greyscale-200);border-bottom-left-radius:var(--goa-border-radius-m);border-bottom-right-radius:var(--goa-border-radius-m)}.content.svelte-1j9i5d0 ::slotted(*:last-child){margin-bottom:0 !important}details[open].svelte-1j9i5d0 goa-icon.svelte-1j9i5d0{transform:rotate(90deg)}details[open].svelte-1j9i5d0 summary.svelte-1j9i5d0{border-bottom-left-radius:var(--goa-border-radius-none);border-bottom-right-radius:var(--goa-border-radius-none)}.heading-medium.svelte-1j9i5d0.svelte-1j9i5d0{line-height:2rem;font:var(--goa-typography-heading-m)}@container self (max-width: 623px){.content.svelte-1j9i5d0.svelte-1j9i5d0{padding:1.5rem}.title.svelte-1j9i5d0.svelte-1j9i5d0{display:flex;flex-direction:column;align-items:flex-start}}@container self (min-width: 624px){.content.svelte-1j9i5d0.svelte-1j9i5d0{padding:1.5rem 2rem 1.5rem 3.5rem}.title.svelte-1j9i5d0.svelte-1j9i5d0{align-items:center}}');
}
const get_headingcontent_slot_changes = (dirty) => ({});
const get_headingcontent_slot_context = (ctx) => ({});
function create_if_block$C(ctx) {
  let span;
  let t2;
  return {
    c() {
      span = element("span");
      t2 = text(
        /*secondarytext*/
        ctx[2]
      );
      attr(span, "class", "secondary-text svelte-1j9i5d0");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*secondarytext*/
      4) set_data(
        t2,
        /*secondarytext*/
        ctx2[2]
      );
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_fragment$16(ctx) {
  let div3;
  let details;
  let summary;
  let goa_icon;
  let goa_icon_fillcolor_value;
  let t0;
  let div1;
  let span;
  let t1;
  let span_class_value;
  let span_data_testid_value;
  let t2;
  let t3;
  let div0;
  let div1_id_value;
  let summary_class_value;
  let summary_aria_controls_value;
  let summary_aria_expanded_value;
  let t4;
  let div2;
  let div2_aria_labelledby_value;
  let div2_id_value;
  let div3_style_value;
  let current;
  let mounted;
  let dispose;
  let if_block = (
    /*secondarytext*/
    ctx[2] && create_if_block$C(ctx)
  );
  const headingcontent_slot_template = (
    /*#slots*/
    ctx[17].headingcontent
  );
  const headingcontent_slot = create_slot(
    headingcontent_slot_template,
    ctx,
    /*$$scope*/
    ctx[16],
    get_headingcontent_slot_context
  );
  const default_slot_template = (
    /*#slots*/
    ctx[17].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[16],
    null
  );
  return {
    c() {
      div3 = element("div");
      details = element("details");
      summary = element("summary");
      goa_icon = element("goa-icon");
      t0 = space();
      div1 = element("div");
      span = element("span");
      t1 = text(
        /*heading*/
        ctx[1]
      );
      t2 = space();
      if (if_block) if_block.c();
      t3 = space();
      div0 = element("div");
      if (headingcontent_slot) headingcontent_slot.c();
      t4 = space();
      div2 = element("div");
      if (default_slot) default_slot.c();
      set_custom_element_data(goa_icon, "type", "chevron-forward");
      set_custom_element_data(goa_icon, "fillcolor", goa_icon_fillcolor_value = /*_hovering*/
      ctx[10] ? "var(--goa-color-interactive-hover)" : "var(--goa-color-interactive-default)");
      set_custom_element_data(goa_icon, "class", "svelte-1j9i5d0");
      attr(span, "class", span_class_value = "heading heading-" + /*headingsize*/
      ctx[3] + " svelte-1j9i5d0");
      attr(span, "data-testid", span_data_testid_value = `${/*testid*/
      ctx[5]}-heading`);
      attr(div0, "class", "heading-content svelte-1j9i5d0");
      toggle_class(
        div0,
        "heading-content-top",
        /*_headingContentSlotChildren*/
        ctx[12].length
      );
      attr(div1, "class", "title svelte-1j9i5d0");
      attr(div1, "id", div1_id_value = `${/*_accordionId*/
      ctx[13]}-heading`);
      attr(summary, "class", summary_class_value = null_to_empty(`container-${/*headingsize*/
      ctx[3]}`) + " svelte-1j9i5d0");
      attr(summary, "aria-controls", summary_aria_controls_value = `${/*_accordionId*/
      ctx[13]}-content`);
      attr(summary, "aria-expanded", summary_aria_expanded_value = /*open*/
      ctx[0] === "true");
      attr(div2, "class", "content svelte-1j9i5d0");
      attr(div2, "role", "region");
      attr(div2, "aria-labelledby", div2_aria_labelledby_value = `${/*_accordionId*/
      ctx[13]}-heading`);
      attr(div2, "id", div2_id_value = `${/*_accordionId*/
      ctx[13]}-content`);
      details.open = /*isOpen*/
      ctx[14];
      attr(details, "class", "svelte-1j9i5d0");
      attr(div3, "style", div3_style_value = `
    ${calculateMargin(
        /*mt*/
        ctx[6],
        /*mr*/
        ctx[7],
        /*mb*/
        ctx[8],
        /*ml*/
        ctx[9]
      )};
    max-width: ${/*maxwidth*/
      ctx[4]};
  `);
      attr(div3, "class", "goa-accordion svelte-1j9i5d0");
      attr(
        div3,
        "data-testid",
        /*testid*/
        ctx[5]
      );
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      append(div3, details);
      append(details, summary);
      append(summary, goa_icon);
      append(summary, t0);
      append(summary, div1);
      append(div1, span);
      append(span, t1);
      append(div1, t2);
      if (if_block) if_block.m(div1, null);
      append(div1, t3);
      append(div1, div0);
      if (headingcontent_slot) {
        headingcontent_slot.m(div0, null);
      }
      ctx[18](div1);
      append(details, t4);
      append(details, div2);
      if (default_slot) {
        default_slot.m(div2, null);
      }
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            summary,
            "mouseover",
            /*mouseover_handler*/
            ctx[19]
          ),
          listen(
            summary,
            "mouseout",
            /*mouseout_handler*/
            ctx[20]
          ),
          listen(
            summary,
            "focus",
            /*focus_handler*/
            ctx[21]
          ),
          listen(
            summary,
            "blur",
            /*blur_handler*/
            ctx[22]
          ),
          listen(
            details,
            "toggle",
            /*toggle_handler*/
            ctx[23]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & /*_hovering*/
      1024 && goa_icon_fillcolor_value !== (goa_icon_fillcolor_value = /*_hovering*/
      ctx2[10] ? "var(--goa-color-interactive-hover)" : "var(--goa-color-interactive-default)")) {
        set_custom_element_data(goa_icon, "fillcolor", goa_icon_fillcolor_value);
      }
      if (!current || dirty & /*heading*/
      2) set_data(
        t1,
        /*heading*/
        ctx2[1]
      );
      if (!current || dirty & /*headingsize*/
      8 && span_class_value !== (span_class_value = "heading heading-" + /*headingsize*/
      ctx2[3] + " svelte-1j9i5d0")) {
        attr(span, "class", span_class_value);
      }
      if (!current || dirty & /*testid*/
      32 && span_data_testid_value !== (span_data_testid_value = `${/*testid*/
      ctx2[5]}-heading`)) {
        attr(span, "data-testid", span_data_testid_value);
      }
      if (
        /*secondarytext*/
        ctx2[2]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block$C(ctx2);
          if_block.c();
          if_block.m(div1, t3);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (headingcontent_slot) {
        if (headingcontent_slot.p && (!current || dirty & /*$$scope*/
        65536)) {
          update_slot_base(
            headingcontent_slot,
            headingcontent_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[16],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[16]
            ) : get_slot_changes(
              headingcontent_slot_template,
              /*$$scope*/
              ctx2[16],
              dirty,
              get_headingcontent_slot_changes
            ),
            get_headingcontent_slot_context
          );
        }
      }
      if (!current || dirty & /*_headingContentSlotChildren*/
      4096) {
        toggle_class(
          div0,
          "heading-content-top",
          /*_headingContentSlotChildren*/
          ctx2[12].length
        );
      }
      if (!current || dirty & /*_accordionId*/
      8192 && div1_id_value !== (div1_id_value = `${/*_accordionId*/
      ctx2[13]}-heading`)) {
        attr(div1, "id", div1_id_value);
      }
      if (!current || dirty & /*headingsize*/
      8 && summary_class_value !== (summary_class_value = null_to_empty(`container-${/*headingsize*/
      ctx2[3]}`) + " svelte-1j9i5d0")) {
        attr(summary, "class", summary_class_value);
      }
      if (!current || dirty & /*_accordionId*/
      8192 && summary_aria_controls_value !== (summary_aria_controls_value = `${/*_accordionId*/
      ctx2[13]}-content`)) {
        attr(summary, "aria-controls", summary_aria_controls_value);
      }
      if (!current || dirty & /*open*/
      1 && summary_aria_expanded_value !== (summary_aria_expanded_value = /*open*/
      ctx2[0] === "true")) {
        attr(summary, "aria-expanded", summary_aria_expanded_value);
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        65536)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[16],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[16]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[16],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*_accordionId*/
      8192 && div2_aria_labelledby_value !== (div2_aria_labelledby_value = `${/*_accordionId*/
      ctx2[13]}-heading`)) {
        attr(div2, "aria-labelledby", div2_aria_labelledby_value);
      }
      if (!current || dirty & /*_accordionId*/
      8192 && div2_id_value !== (div2_id_value = `${/*_accordionId*/
      ctx2[13]}-content`)) {
        attr(div2, "id", div2_id_value);
      }
      if (!current || dirty & /*isOpen*/
      16384) {
        details.open = /*isOpen*/
        ctx2[14];
      }
      if (!current || dirty & /*mt, mr, mb, ml, maxwidth*/
      976 && div3_style_value !== (div3_style_value = `
    ${calculateMargin(
        /*mt*/
        ctx2[6],
        /*mr*/
        ctx2[7],
        /*mb*/
        ctx2[8],
        /*ml*/
        ctx2[9]
      )};
    max-width: ${/*maxwidth*/
      ctx2[4]};
  `)) {
        attr(div3, "style", div3_style_value);
      }
      if (!current || dirty & /*testid*/
      32) {
        attr(
          div3,
          "data-testid",
          /*testid*/
          ctx2[5]
        );
      }
    },
    i(local) {
      if (current) return;
      transition_in(headingcontent_slot, local);
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(headingcontent_slot, local);
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div3);
      }
      if (if_block) if_block.d();
      if (headingcontent_slot) headingcontent_slot.d(detaching);
      ctx[18](null);
      if (default_slot) default_slot.d(detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$16($$self, $$props, $$invalidate) {
  let isOpen;
  let { $$slots: slots = {}, $$scope } = $$props;
  const [HeadingSizes, validateHeadingSize] = typeValidator("Accordion heading size", ["small", "medium"]);
  let { open = "false" } = $$props;
  let { heading = "" } = $$props;
  let { secondarytext = "" } = $$props;
  let { headingsize = "small" } = $$props;
  let { id: id2 = "" } = $$props;
  let { maxwidth = "none" } = $$props;
  let { testid = "" } = $$props;
  let { mt = null } = $$props;
  let { mr = null } = $$props;
  let { mb: mb2 = "xs" } = $$props;
  let { ml: ml2 = null } = $$props;
  let _hovering = false;
  let _titleEl;
  let _headingContentSlotChildren = [];
  let _accordionId = "";
  onMount(() => {
    validateRequired("GoAAccordion", { heading });
    validateHeadingSize(headingsize);
    $$invalidate(12, _headingContentSlotChildren = getChildren());
    $$invalidate(13, _accordionId = `accordion-${generateRandomId()}`);
  });
  function getChildren() {
    if (_titleEl) {
      const slot = _titleEl.querySelector("slot");
      if (slot) {
        return slot.assignedElements();
      } else {
        return [..._titleEl.children];
      }
    }
    return [];
  }
  function div1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _titleEl = $$value;
      $$invalidate(11, _titleEl);
    });
  }
  const mouseover_handler = () => $$invalidate(10, _hovering = true);
  const mouseout_handler = () => $$invalidate(10, _hovering = false);
  const focus_handler = () => $$invalidate(10, _hovering = false);
  const blur_handler = () => $$invalidate(10, _hovering = false);
  const toggle_handler = ({ target }) => $$invalidate(0, open = `${target == null ? void 0 : target.open}`);
  $$self.$$set = ($$props2) => {
    if ("open" in $$props2) $$invalidate(0, open = $$props2.open);
    if ("heading" in $$props2) $$invalidate(1, heading = $$props2.heading);
    if ("secondarytext" in $$props2) $$invalidate(2, secondarytext = $$props2.secondarytext);
    if ("headingsize" in $$props2) $$invalidate(3, headingsize = $$props2.headingsize);
    if ("id" in $$props2) $$invalidate(15, id2 = $$props2.id);
    if ("maxwidth" in $$props2) $$invalidate(4, maxwidth = $$props2.maxwidth);
    if ("testid" in $$props2) $$invalidate(5, testid = $$props2.testid);
    if ("mt" in $$props2) $$invalidate(6, mt = $$props2.mt);
    if ("mr" in $$props2) $$invalidate(7, mr = $$props2.mr);
    if ("mb" in $$props2) $$invalidate(8, mb2 = $$props2.mb);
    if ("ml" in $$props2) $$invalidate(9, ml2 = $$props2.ml);
    if ("$$scope" in $$props2) $$invalidate(16, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*open*/
    1) {
      $$invalidate(14, isOpen = toBoolean(open));
    }
  };
  return [
    open,
    heading,
    secondarytext,
    headingsize,
    maxwidth,
    testid,
    mt,
    mr,
    mb2,
    ml2,
    _hovering,
    _titleEl,
    _headingContentSlotChildren,
    _accordionId,
    isOpen,
    id2,
    $$scope,
    slots,
    div1_binding,
    mouseover_handler,
    mouseout_handler,
    focus_handler,
    blur_handler,
    toggle_handler
  ];
}
class Accordion extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$16,
      create_fragment$16,
      safe_not_equal,
      {
        open: 0,
        heading: 1,
        secondarytext: 2,
        headingsize: 3,
        id: 15,
        maxwidth: 4,
        testid: 5,
        mt: 6,
        mr: 7,
        mb: 8,
        ml: 9
      },
      add_css$$
    );
  }
  get open() {
    return this.$$.ctx[0];
  }
  set open(open) {
    this.$$set({ open });
    flush();
  }
  get heading() {
    return this.$$.ctx[1];
  }
  set heading(heading) {
    this.$$set({ heading });
    flush();
  }
  get secondarytext() {
    return this.$$.ctx[2];
  }
  set secondarytext(secondarytext) {
    this.$$set({ secondarytext });
    flush();
  }
  get headingsize() {
    return this.$$.ctx[3];
  }
  set headingsize(headingsize) {
    this.$$set({ headingsize });
    flush();
  }
  get id() {
    return this.$$.ctx[15];
  }
  set id(id2) {
    this.$$set({ id: id2 });
    flush();
  }
  get maxwidth() {
    return this.$$.ctx[4];
  }
  set maxwidth(maxwidth) {
    this.$$set({ maxwidth });
    flush();
  }
  get testid() {
    return this.$$.ctx[5];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
  get mt() {
    return this.$$.ctx[6];
  }
  set mt(mt) {
    this.$$set({ mt });
    flush();
  }
  get mr() {
    return this.$$.ctx[7];
  }
  set mr(mr) {
    this.$$set({ mr });
    flush();
  }
  get mb() {
    return this.$$.ctx[8];
  }
  set mb(mb2) {
    this.$$set({ mb: mb2 });
    flush();
  }
  get ml() {
    return this.$$.ctx[9];
  }
  set ml(ml2) {
    this.$$set({ ml: ml2 });
    flush();
  }
}
customElements.define("goa-accordion", create_custom_element(Accordion, { "open": {}, "heading": {}, "secondarytext": {}, "headingsize": {}, "id": {}, "maxwidth": {}, "testid": {}, "mt": {}, "mr": {}, "mb": {}, "ml": {} }, ["headingcontent", "default"], [], true));
const MOBILE_BP = 624;
const TABLET_BP = 1024;
function isUrlMatch(windowUrl, testUrl) {
  if (testUrl === void 0) return -1;
  const windowUrlParts = windowUrl.pathname.replace(/^\//, "").split("/");
  const urlParts = testUrl.replace(/^\//, "").split("/");
  if (windowUrlParts.length < urlParts.length) {
    return -1;
  }
  if (windowUrl.hash.length > 0 && windowUrl.hash === testUrl) {
    return 1;
  }
  let weight = -1;
  let index = 0;
  for (const part of urlParts) {
    if (windowUrlParts[index] !== part) {
      return -1;
    }
    weight += 1;
    index++;
  }
  return weight >= 0 ? weight + 1 : weight;
}
function getMatchedLink(links, windowUrl) {
  const weights = links.map((link) => {
    if (link.getAttribute("target")) return -1;
    return isUrlMatch(
      windowUrl,
      link.getAttribute("href") || ""
    );
  });
  const maxWeight = Math.max(...weights);
  if (weights.filter((weight) => weight === maxWeight).length > 1) {
    return null;
  }
  const indexOfMaxWeight = weights.indexOf(maxWeight);
  if (indexOfMaxWeight > -1) {
    return links[indexOfMaxWeight];
  }
  return null;
}
const { window: window_1$2 } = globals;
function add_css$_(target) {
  append_styles(target, "svelte-18utf18", ':host{--goa-app-header-color-bg:var(--goa-color-greyscale-white);--goa-app-header-border-bottom:var(--goa-border-width-s) solid var(--goa-color-greyscale-200);--goa-app-header-padding-desktop:var(--goa-space-3xl);--goa-app-header-padding-tablet:var(--goa-space-xl);--goa-app-header-padding-mobile:var(--goa-space-m);--goa-app-header-size-logo:var(--goa-space-xl);--goa-app-header-size-logo-mobile:var(--goa-space-l);--goa-app-header-space-btw-logo-service-name:var(--goa-space-m);--goa-app-header-space-btw-logo-service-name-mobile:var(--goa-space-xs);--goa-app-header-space-btw-service-name-nav-items: ;--goa-app-header-space-btw-service-name-nav-items-mobile:var(--goa-space-l);--goa-app-header-padding-logo:14px var(--goa-space-xl) var(--goa-space-m) 0px;--goa-app-header-padding-logo-mobile:var(--goa-space-s) var(--goa-space-m);--goa-app-header-max-width-service-name:28rem;--goa-app-header-min-width-service-name:8rem;--goa-app-header-color-service-name:var(--goa-color-text-default);--goa-app-header-service-name-border-focus:var(--goa-border-width-l) solid var(--goa-color-interactive-focus);--goa-app-header-typography-service-name:var(--goa-typography-body-m);--goa-app-header-typography-service-name-mobile:var(--goa-typography-body-s);--goa-app-header-padding-menu-button:var(--goa-space-m) var(--goa-space-s);--goa-app-header-typography-menu-button:var(--goa-typography-body-m);--goa-app-header-typography-menu-button-mobile:var(--goa-typography-body-s);--goa-app-header-color-menu-button:var(--goa-color-text-default);--goa-app-header-color-menu-button-hover:var(--goa-color-interactive-hover);--goa-app-header-color-menu-button-focus:var(--goa-color-interactive-hover);--goa-app-header-color-bg-menu-button-hover:var(--goa-color-greyscale-100);--goa-app-header-color-bg-menu-button-focus:var(--goa-color-greyscale-100);--goa-app-header-typography-nav-item:var(--goa-typography-heading-s);--goa-app-header-typography-menu-item:var(--goa-typography-body-m);--goa-app-header-height-nav-item:var(--goa-space-3xl);--goa-app-header-height-nav-item-mobile:50px;--goa-app-header-border-focus:var(--goa-border-width-l) solid var(--goa-color-interactive-focus);--goa-app-header-padding-nav-item:var(--goa-space-m) var(--goa-space-s);--goa-app-header-padding-nav-item-in-menu:9px var(--goa-space-m);--goa-app-header-color-text-nav-item:var(--goa-color-text-default);--goa-app-header-color-text-nav-item-hover:var(--goa-color-interactive-hover);--goa-app-header-color-text-nav-item-focus:var(--goa-color-interactive-hover);--goa-app-header-color-text-nav-item-current:var(--goa-color-text-default);--goa-app-header-color-bg-nav-item:var(--goa-color-greyscale-white);--goa-app-header-color-bg-nav-item-hover:var(--goa-color-greyscale-white);--goa-app-header-color-bg-nav-item-focus:var(--goa-color-greyscale-white);--goa-app-header-color-bg-nav-item-current:var(--goa-color-greyscale-white);--goa-app-header-color-bg-nav-item-in-menu-current:var(--goa-color-interactive-default);--goa-app-header-color-bg-nav-item-in-menu-current-hover:var(--goa-color-interactive-hover);--goa-app-header-color-bg-nav-item-child-hover:var(--goa-color-greyscale-100);--goa-app-header-color-bg-nav-item-child-focus:var(--goa-color-greyscale-100);--goa-app-header-border-nav-item-hidden:var(--goa-space-2xs) solid transparent;--goa-app-header-border-nav-item-default:var(--goa-space-2xs) solid transparent;--goa-app-header-border-nav-item-hover:var(--goa-space-2xs) solid var(--goa-color-interactive-hover);--goa-app-header-border-nav-item-focus:var(--goa-space-2xs) solid var(--goa-color-interactive-hover);--goa-app-header-border-nav-item-current:var(--goa-space-2xs) solid var(--goa-color-interactive-default);--goa-app-header-border-nav-item-current-hover:var(--goa-space-2xs) solid var(--goa-color-interactive-hover);--goa-app-header-border-nav-item-current-focus:var(--goa-space-2xs) solid var(--goa-color-interactive-hover);--goa-app-header-typography-link-item:var(--goa-typography-body-m);--goa-app-header-padding-link-item:var(--goa-space-m);--goa-app-header-nav-color-text-link-item:var(--goa-color-interactive-default);--goa-app-header-nav-color-text-link-item-hover:var(--goa-color-interactive-hover);--goa-app-header-nav-color-text-link-item-focus:var(--goa-color-interactive-hover);--goa-app-header-nav-color-bg-link-item:transparent;--goa-app-header-nav-color-bg-link-item-hover:transparent;--goa-app-header-nav-color-bg-link-item-focus:transparent;--goa-app-header-nav-color-text-link-item-in-menu:var(--goa-color-interactive-default);--goa-app-header-nav-color-text-link-item-in-menu-hover:var(--goa-color-interactive-hover);--goa-app-header-nav-color-text-link-item-in-menu-focus:var(--goa-color-interactive-hover);--goa-app-header-nav-color-bg-link-item-in-menu:transparent;--goa-app-header-nav-color-bg-link-item-in-menu-hover:var(--goa-color-greyscale-100);--goa-app-header-nav-color-bg-link-item-in-menu-focus:var(--goa-color-greyscale-100);--goa-app-header-padding-nav-item-with-children:var(--goa-space-m) var(--goa-space-s) var(--goa-space-s);--goa-app-header-padding-secondary-nav-item-in-menu-mobile:9px var(--goa-space-m) 9px 80px;--goa-app-header-padding-secondary-nav-item-in-menu:9px var(--goa-space-m) 9px var(--goa-space-xl);--goa-app-header-border-top-menu-item:inset 0 1px 0 0 var(--goa-color-greyscale-200);--goa-app-header-border-bottom-menu-item:inset 0 -1px 0 0 var(--goa-color-greyscale-200)}.svelte-18utf18{font:var(--goa-typography-body-m)}button.svelte-18utf18{padding:var(--goa-app-header-padding-nav-item-with-children);border:none;color:var(--goa-app-header-color-text-nav-item);cursor:pointer;display:flex;align-items:center;gap:6px;background:none;border-top:var(--goa-app-header-border-nav-item-hidden);border-bottom:var(--goa-app-header-border-nav-item-hidden)}button.svelte-18utf18:active,button.svelte-18utf18:hover{background:var(--goa-app-header-color-bg-nav-item-hover);color:var(--goa-app-header-color-text-nav-item-hover);border-top:var(--goa-app-header-border-nav-item-hidden);border-bottom:var(--goa-app-header-border-nav-item-hover)}button.svelte-18utf18:focus-visible{outline:var(--goa-app-header-border-focus) !important;position:relative;z-index:100;background-color:var(--goa-app-header-color-bg-nav-item-focus);color:var(--goa-app-header-color-text-nav-item-focus);border-top:var(--goa-app-header-border-nav-item-hidden);border-bottom:var(--goa-app-header-border-nav-item-focus)}button.open.svelte-18utf18{background-color:var(--goa-app-header-color-bg-menu-button-focus);color:var(--goa-app-header-color-menu-button-focus)}button.current.svelte-18utf18{border-top:var(--goa-app-header-border-nav-item-hidden);border-bottom:var(--goa-app-header-border-nav-item-current)}button.current.svelte-18utf18:hover{border-top:var(--goa-app-header-border-nav-item-hidden);border-bottom:var(--goa-app-header-border-nav-item-hover)}::slotted(a),::slotted(a:visited){box-shadow:var(--goa-app-header-border-top-menu-item);color:var(--goa-app-header-color-text-nav-item);display:block;padding:var(--goa-app-header-padding-nav-item-in-menu)!important;text-decoration:none}::slotted(a:hover){background:var(--goa-app-header-color-bg-nav-item-child-hover);color:var(--goa-app-header-color-text-nav-item-hover) !important}::slotted(a:focus-visible){outline:var(--goa-app-header-border-focus);outline-offset:-3px;background:var(--goa-app-header-color-bg-nav-item-child-focus);color:var(--goa-app-header-color-text-nav-item-focus) !important}::slotted(a.current){background-color:var(--goa-app-header-color-bg-nav-item-in-menu-current)}::slotted(a.current:hover){background:var(--goa-app-header-color-bg-nav-item-in-menu-current-hover)}::slotted(a.interactive){color:var(--goa-app-header-nav-color-text-link-item) !important;text-decoration:underline !important;white-space:nowrap}::slotted(a.interactive:hover){color:var(--goa-app-header-nav-color-text-link-item-hover) !important}::slotted(a.interactive:focus-visible){color:var(--goa-app-header-nav-color-text-link-item-focus) !important;background-color:var(--goa-app-header-color-bg-nav-item-focus)}.not-desktop.svelte-18utf18 ::slotted(a){padding:var(--goa-app-header-padding-secondary-nav-item-in-menu) !important}@media not (min-width: 1024px){button.svelte-18utf18{box-shadow:var(--goa-app-header-border-top-menu-item);padding:9px var(--goa-space-m);width:100%;border-top:none;border-bottom:none;display:flex;align-items:center}button.svelte-18utf18:active,button.svelte-18utf18:hover,button.svelte-18utf18:focus-visible{background:var(--goa-app-header-color-bg-nav-item-child-hover);color:var(--goa-app-header-color-text-nav-item-hover);border-top:none;border-bottom:none}button.svelte-18utf18:focus-visible{outline:var(--goa-app-header-border-focus) !important;outline-offset:-3px;border-top:none;border-bottom:none}button.open.svelte-18utf18{box-shadow:var(--goa-app-header-border-top-menu-item), var(--goa-app-header-border-bottom-menu-item);background:var(--goa-app-header-color-bg-nav-item-child-hover);color:var(--goa-app-header-color-text-nav-item-hover)}button.open.svelte-18utf18:hover,button.open.svelte-18utf18:focus-visible{box-shadow:var(--goa-app-header-border-top-menu-item), var(--goa-app-header-border-bottom-menu-item)}.heading.svelte-18utf18{flex:0 0 auto}}@media(max-width: 623px){.not-desktop.svelte-18utf18 ::slotted(a){padding:var(--goa-app-header-padding-secondary-nav-item-in-menu-mobile) !important}button.svelte-18utf18{padding:9px var(--goa-space-2xl)}}@media(min-width: 1024px){button[slot="target"].svelte-18utf18{font-weight:var(--goa-font-weight-bold);white-space:nowrap}button.secondary.svelte-18utf18{font-weight:var(--goa-font-weight-regular)}button.open.svelte-18utf18{background-color:var(--goa-app-header-color-bg-menu-button-focus);color:var(--goa-app-header-color-menu-button-focus);border-bottom:var(--goa-app-header-border-nav-item-focus)}}');
}
function create_else_block$f(ctx) {
  let button;
  let t0;
  let span;
  let t1;
  let t2;
  let goa_spacer;
  let t3;
  let goa_icon;
  let goa_icon_type_value;
  let button_class_value;
  let t4;
  let if_block1_anchor;
  let current;
  let mounted;
  let dispose;
  let if_block0 = (
    /*leadingicon*/
    ctx[1] && create_if_block_3$e(ctx)
  );
  let if_block1 = (
    /*_open*/
    ctx[10] && create_if_block_2$g(ctx)
  );
  return {
    c() {
      button = element("button");
      if (if_block0) if_block0.c();
      t0 = space();
      span = element("span");
      t1 = text(
        /*heading*/
        ctx[0]
      );
      t2 = space();
      goa_spacer = element("goa-spacer");
      t3 = space();
      goa_icon = element("goa-icon");
      t4 = space();
      if (if_block1) if_block1.c();
      if_block1_anchor = empty();
      attr(span, "class", "heading svelte-18utf18");
      set_custom_element_data(goa_spacer, "hspacing", "fill");
      set_custom_element_data(goa_spacer, "class", "svelte-18utf18");
      set_custom_element_data(goa_icon, "type", goa_icon_type_value = /*_open*/
      ctx[10] ? "chevron-up" : "chevron-down");
      set_custom_element_data(goa_icon, "mt", "2");
      set_custom_element_data(goa_icon, "class", "svelte-18utf18");
      attr(button, "class", button_class_value = null_to_empty(
        /*type*/
        ctx[2]
      ) + " svelte-18utf18");
      toggle_class(
        button,
        "open",
        /*_open*/
        ctx[10]
      );
    },
    m(target, anchor) {
      insert(target, button, anchor);
      if (if_block0) if_block0.m(button, null);
      append(button, t0);
      append(button, span);
      append(span, t1);
      append(button, t2);
      append(button, goa_spacer);
      append(button, t3);
      append(button, goa_icon);
      insert(target, t4, anchor);
      if (if_block1) if_block1.m(target, anchor);
      insert(target, if_block1_anchor, anchor);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*toggleMenu*/
          ctx[11]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (
        /*leadingicon*/
        ctx2[1]
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_3$e(ctx2);
          if_block0.c();
          if_block0.m(button, t0);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (!current || dirty & /*heading*/
      1) set_data(
        t1,
        /*heading*/
        ctx2[0]
      );
      if (!current || dirty & /*_open*/
      1024 && goa_icon_type_value !== (goa_icon_type_value = /*_open*/
      ctx2[10] ? "chevron-up" : "chevron-down")) {
        set_custom_element_data(goa_icon, "type", goa_icon_type_value);
      }
      if (!current || dirty & /*type*/
      4 && button_class_value !== (button_class_value = null_to_empty(
        /*type*/
        ctx2[2]
      ) + " svelte-18utf18")) {
        attr(button, "class", button_class_value);
      }
      if (!current || dirty & /*type, _open*/
      1028) {
        toggle_class(
          button,
          "open",
          /*_open*/
          ctx2[10]
        );
      }
      if (
        /*_open*/
        ctx2[10]
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & /*_open*/
          1024) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block_2$g(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(button);
        detach(t4);
        detach(if_block1_anchor);
      }
      if (if_block0) if_block0.d();
      if (if_block1) if_block1.d(detaching);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block$B(ctx) {
  let goa_popover;
  let button;
  let t0;
  let t1;
  let t2;
  let goa_icon;
  let goa_icon_type_value;
  let button_class_value;
  let t3;
  let div;
  let current;
  let if_block = (
    /*leadingicon*/
    ctx[1] && create_if_block_1$o(ctx)
  );
  const default_slot_template = (
    /*#slots*/
    ctx[13].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[12],
    null
  );
  return {
    c() {
      goa_popover = element("goa-popover");
      button = element("button");
      if (if_block) if_block.c();
      t0 = space();
      t1 = text(
        /*heading*/
        ctx[0]
      );
      t2 = space();
      goa_icon = element("goa-icon");
      t3 = space();
      div = element("div");
      if (default_slot) default_slot.c();
      set_custom_element_data(goa_icon, "type", goa_icon_type_value = /*_open*/
      ctx[10] ? "chevron-up" : "chevron-down");
      set_custom_element_data(goa_icon, "mt", "2");
      set_custom_element_data(goa_icon, "class", "svelte-18utf18");
      attr(button, "slot", "target");
      attr(button, "class", button_class_value = null_to_empty(
        /*type*/
        ctx[2]
      ) + " svelte-18utf18");
      toggle_class(
        button,
        "open",
        /*_open*/
        ctx[10]
      );
      toggle_class(
        button,
        "current",
        /*_hasCurrentLink*/
        ctx[9]
      );
      attr(div, "class", "desktop svelte-18utf18");
      set_custom_element_data(goa_popover, "context", "app-header-menu");
      set_custom_element_data(goa_popover, "focusborderwidth", "0");
      set_custom_element_data(goa_popover, "borderradius", "0");
      set_custom_element_data(goa_popover, "padded", "false");
      set_custom_element_data(goa_popover, "tabindex", "-1");
      set_custom_element_data(goa_popover, "maxwidth", "16rem");
      set_custom_element_data(goa_popover, "minwidth", "8rem");
      set_custom_element_data(goa_popover, "position", "below");
      set_custom_element_data(
        goa_popover,
        "open",
        /*_open*/
        ctx[10]
      );
      set_custom_element_data(goa_popover, "class", "svelte-18utf18");
    },
    m(target, anchor) {
      insert(target, goa_popover, anchor);
      append(goa_popover, button);
      if (if_block) if_block.m(button, null);
      append(button, t0);
      append(button, t1);
      append(button, t2);
      append(button, goa_icon);
      append(goa_popover, t3);
      append(goa_popover, div);
      if (default_slot) {
        default_slot.m(div, null);
      }
      ctx[15](div);
      ctx[16](goa_popover);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*leadingicon*/
        ctx2[1]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block_1$o(ctx2);
          if_block.c();
          if_block.m(button, t0);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (!current || dirty & /*heading*/
      1) set_data(
        t1,
        /*heading*/
        ctx2[0]
      );
      if (!current || dirty & /*_open*/
      1024 && goa_icon_type_value !== (goa_icon_type_value = /*_open*/
      ctx2[10] ? "chevron-up" : "chevron-down")) {
        set_custom_element_data(goa_icon, "type", goa_icon_type_value);
      }
      if (!current || dirty & /*type*/
      4 && button_class_value !== (button_class_value = null_to_empty(
        /*type*/
        ctx2[2]
      ) + " svelte-18utf18")) {
        attr(button, "class", button_class_value);
      }
      if (!current || dirty & /*type, _open*/
      1028) {
        toggle_class(
          button,
          "open",
          /*_open*/
          ctx2[10]
        );
      }
      if (!current || dirty & /*type, _hasCurrentLink*/
      516) {
        toggle_class(
          button,
          "current",
          /*_hasCurrentLink*/
          ctx2[9]
        );
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        4096)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[12],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[12]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[12],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*_open*/
      1024) {
        set_custom_element_data(
          goa_popover,
          "open",
          /*_open*/
          ctx2[10]
        );
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(goa_popover);
      }
      if (if_block) if_block.d();
      if (default_slot) default_slot.d(detaching);
      ctx[15](null);
      ctx[16](null);
    }
  };
}
function create_if_block_3$e(ctx) {
  let goa_icon;
  return {
    c() {
      goa_icon = element("goa-icon");
      set_custom_element_data(
        goa_icon,
        "type",
        /*leadingicon*/
        ctx[1]
      );
      set_custom_element_data(goa_icon, "mt", "1");
      set_custom_element_data(goa_icon, "class", "svelte-18utf18");
    },
    m(target, anchor) {
      insert(target, goa_icon, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*leadingicon*/
      2) {
        set_custom_element_data(
          goa_icon,
          "type",
          /*leadingicon*/
          ctx2[1]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(goa_icon);
      }
    }
  };
}
function create_if_block_2$g(ctx) {
  let div;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[13].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[12],
    null
  );
  return {
    c() {
      div = element("div");
      if (default_slot) default_slot.c();
      attr(div, "class", "not-desktop svelte-18utf18");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      ctx[17](div);
      current = true;
    },
    p(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        4096)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[12],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[12]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[12],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (default_slot) default_slot.d(detaching);
      ctx[17](null);
    }
  };
}
function create_if_block_1$o(ctx) {
  let goa_icon;
  return {
    c() {
      goa_icon = element("goa-icon");
      set_custom_element_data(
        goa_icon,
        "type",
        /*leadingicon*/
        ctx[1]
      );
      set_custom_element_data(goa_icon, "mt", "1");
      set_custom_element_data(goa_icon, "class", "svelte-18utf18");
    },
    m(target, anchor) {
      insert(target, goa_icon, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*leadingicon*/
      2) {
        set_custom_element_data(
          goa_icon,
          "type",
          /*leadingicon*/
          ctx2[1]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(goa_icon);
      }
    }
  };
}
function create_fragment$15(ctx) {
  let div;
  let current_block_type_index;
  let if_block;
  let current;
  let mounted;
  let dispose;
  add_render_callback(
    /*onwindowresize*/
    ctx[14]
  );
  const if_block_creators = [create_if_block$B, create_else_block$f];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*_desktop*/
      ctx2[5]
    ) return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      div = element("div");
      if_block.c();
      attr(
        div,
        "data-testid",
        /*testid*/
        ctx[3]
      );
      attr(div, "class", "svelte-18utf18");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if_blocks[current_block_type_index].m(div, null);
      ctx[18](div);
      current = true;
      if (!mounted) {
        dispose = listen(
          window_1$2,
          "resize",
          /*onwindowresize*/
          ctx[14]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(div, null);
      }
      if (!current || dirty & /*testid*/
      8) {
        attr(
          div,
          "data-testid",
          /*testid*/
          ctx2[3]
        );
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if_blocks[current_block_type_index].d();
      ctx[18](null);
      mounted = false;
      dispose();
    }
  };
}
function instance$15($$self, $$props, $$invalidate) {
  let _desktop;
  let { $$slots: slots = {}, $$scope } = $$props;
  let { heading } = $$props;
  let { leadingicon } = $$props;
  let { type = "primary" } = $$props;
  let { testid = "rootEl" } = $$props;
  let _innerWidth = window.innerWidth;
  let _popoverEl;
  let _slotParentEl;
  let _rootEl;
  let _hasCurrentLink = false;
  let _open = false;
  onMount(() => {
    validateRequired("GoaAppHeaderMenu", { heading });
    dispatchInit();
    addAppHeaderCurrentChangeListener();
  });
  function dispatchInit() {
    if (!_slotParentEl) return;
    const slottedChildren = getSlottedChildren(_slotParentEl);
    if (slottedChildren.length === 0) return;
    const links = slottedChildren.filter((el2) => el2.tagName === "A").map((el2) => {
      el2.classList.remove("current");
      return el2;
    });
    setTimeout(
      () => {
        _rootEl == null ? void 0 : _rootEl.dispatchEvent(new CustomEvent(
          "app-header-menu:mounted",
          {
            detail: { el: _rootEl, links },
            composed: true,
            bubbles: true
          }
        ));
      },
      1
    );
  }
  function addAppHeaderCurrentChangeListener() {
    _rootEl == null ? void 0 : _rootEl.addEventListener("app-header:changed", (e) => {
      const href = e.detail;
      setCurrentLink(href);
    });
  }
  function setCurrentLink(href) {
    if (!_slotParentEl) return;
    const slotChildren = getSlottedChildren(_slotParentEl);
    if (slotChildren.length === 0) return;
    const links = slotChildren.filter((el2) => el2.tagName === "A").map((el2) => {
      el2.classList.remove("current");
      return el2;
    });
    const matchedLink = links.find((link) => link.getAttribute("href") === href);
    if (matchedLink) {
      matchedLink.classList.add("current");
    }
    $$invalidate(9, _hasCurrentLink = !!matchedLink);
    closeMenu();
  }
  async function bindToPopoverCloseEvent() {
    await tick();
    if (!_popoverEl) return;
    _popoverEl.removeEventListener("_close", closeMenu);
    _popoverEl.removeEventListener("_open", openMenu);
    _popoverEl.addEventListener("_close", closeMenu);
    _popoverEl.addEventListener("_open", openMenu);
  }
  async function openMenu() {
    $$invalidate(10, _open = true);
    await tick();
    if (_slotParentEl) {
      _slotParentEl.addEventListener("click", closeMenu);
    }
  }
  function closeMenu() {
    if (_slotParentEl) {
      _slotParentEl.removeEventListener("click", closeMenu);
    }
    setTimeout(
      () => {
        $$invalidate(10, _open = false);
      },
      1
    );
  }
  function toggleMenu() {
    _open ? closeMenu() : openMenu();
  }
  function onwindowresize() {
    $$invalidate(4, _innerWidth = window_1$2.innerWidth);
  }
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _slotParentEl = $$value;
      $$invalidate(7, _slotParentEl);
    });
  }
  function goa_popover_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _popoverEl = $$value;
      $$invalidate(6, _popoverEl);
    });
  }
  function div_binding_1($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _slotParentEl = $$value;
      $$invalidate(7, _slotParentEl);
    });
  }
  function div_binding_2($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _rootEl = $$value;
      $$invalidate(8, _rootEl);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("heading" in $$props2) $$invalidate(0, heading = $$props2.heading);
    if ("leadingicon" in $$props2) $$invalidate(1, leadingicon = $$props2.leadingicon);
    if ("type" in $$props2) $$invalidate(2, type = $$props2.type);
    if ("testid" in $$props2) $$invalidate(3, testid = $$props2.testid);
    if ("$$scope" in $$props2) $$invalidate(12, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*_innerWidth*/
    16) {
      $$invalidate(5, _desktop = _innerWidth >= TABLET_BP);
    }
    if ($$self.$$.dirty & /*_desktop*/
    32) {
      _desktop && bindToPopoverCloseEvent();
    }
  };
  return [
    heading,
    leadingicon,
    type,
    testid,
    _innerWidth,
    _desktop,
    _popoverEl,
    _slotParentEl,
    _rootEl,
    _hasCurrentLink,
    _open,
    toggleMenu,
    $$scope,
    slots,
    onwindowresize,
    div_binding,
    goa_popover_binding,
    div_binding_1,
    div_binding_2
  ];
}
class AppHeaderMenu extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$15,
      create_fragment$15,
      safe_not_equal,
      {
        heading: 0,
        leadingicon: 1,
        type: 2,
        testid: 3
      },
      add_css$_
    );
  }
  get heading() {
    return this.$$.ctx[0];
  }
  set heading(heading) {
    this.$$set({ heading });
    flush();
  }
  get leadingicon() {
    return this.$$.ctx[1];
  }
  set leadingicon(leadingicon) {
    this.$$set({ leadingicon });
    flush();
  }
  get type() {
    return this.$$.ctx[2];
  }
  set type(type) {
    this.$$set({ type });
    flush();
  }
  get testid() {
    return this.$$.ctx[3];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
}
customElements.define("goa-app-header-menu", create_custom_element(AppHeaderMenu, { "heading": {}, "leadingicon": {}, "type": {}, "testid": {} }, ["default"], [], true));
const { window: window_1$1 } = globals;
function add_css$Z(target) {
  append_styles(target, "svelte-19s1mqm", ':host{--goa-app-header-color-bg:var(--goa-color-greyscale-white);--goa-app-header-border-bottom:var(--goa-border-width-s) solid\n      var(--goa-color-greyscale-200);--goa-app-header-padding-desktop:var(--goa-space-3xl);--goa-app-header-padding-tablet:var(--goa-space-xl);--goa-app-header-padding-mobile:var(--goa-space-m);--goa-app-header-size-logo:var(--goa-space-xl);--goa-app-header-size-logo-mobile:var(--goa-space-l);--goa-app-header-space-btw-logo-service-name:var(--goa-space-m);--goa-app-header-space-btw-logo-service-name-mobile:var(--goa-space-xs);--goa-app-header-space-btw-service-name-nav-items: ;--goa-app-header-space-btw-service-name-nav-items-mobile:var(--goa-space-l);--goa-app-header-padding-logo:14px var(--goa-space-xl) var(--goa-space-m) 0px;--goa-app-header-padding-logo-mobile:var(--goa-space-s) var(--goa-space-m);--goa-app-header-max-width-service-name:28rem;--goa-app-header-min-width-service-name:8rem;--goa-app-header-color-service-name:var(--goa-color-text-default);--goa-app-header-service-name-border-focus:var(--goa-border-width-l) solid\n      var(--goa-color-interactive-focus);--goa-app-header-typography-service-name:var(--goa-typography-body-m);--goa-app-header-typography-service-name-mobile:var(\n      --goa-typography-body-s\n    );--goa-app-header-padding-menu-button:var(--goa-space-m) var(--goa-space-s);--goa-app-header-typography-menu-button:var(--goa-typography-body-m);--goa-app-header-typography-menu-button-mobile:var(\n      --goa-typography-body-s\n    );--goa-app-header-color-menu-button:var(--goa-color-text-default);--goa-app-header-color-menu-button-hover:var(\n      --goa-color-interactive-hover\n    );--goa-app-header-color-menu-button-focus:var(\n      --goa-color-interactive-hover\n    );--goa-app-header-color-bg-menu-button-hover:var(--goa-color-greyscale-100);--goa-app-header-color-bg-menu-button-focus:var(--goa-color-greyscale-100);--goa-app-header-typography-nav-item:var(--goa-typography-heading-s);--goa-app-header-typography-menu-item:var(--goa-typography-body-m);--goa-app-header-height-nav-item:var(--goa-space-3xl);--goa-app-header-height-nav-item-mobile:50px;--goa-app-header-border-focus:var(--goa-border-width-l) solid\n      var(--goa-color-interactive-focus);--goa-app-header-padding-nav-item:var(--goa-space-m) var(--goa-space-s);--goa-app-header-padding-nav-item-in-menu:9px var(--goa-space-m);--goa-app-header-color-text-nav-item:var(--goa-color-text-default);--goa-app-header-color-text-nav-item-hover:var(\n      --goa-color-interactive-hover\n    );--goa-app-header-color-text-nav-item-focus:var(\n      --goa-color-interactive-hover\n    );--goa-app-header-color-text-nav-item-current:var(--goa-color-text-default);--goa-app-header-color-bg-nav-item:var(--goa-color-greyscale-white);--goa-app-header-color-bg-nav-item-hover:var(--goa-color-greyscale-white);--goa-app-header-color-bg-nav-item-focus:var(--goa-color-greyscale-white);--goa-app-header-color-bg-nav-item-current:var(\n      --goa-color-greyscale-white\n    );--goa-app-header-color-bg-nav-item-in-menu-current:var(\n      --goa-color-interactive-default\n    );--goa-app-header-color-bg-nav-item-in-menu-current-hover:var(\n      --goa-color-interactive-hover\n    );--goa-app-header-color-bg-nav-item-child-hover:var(\n      --goa-color-greyscale-100\n    );--goa-app-header-color-bg-nav-item-child-focus:var(\n      --goa-color-greyscale-100\n    );--goa-app-header-border-nav-item-hidden:var(--goa-space-2xs) solid\n      transparent;--goa-app-header-border-nav-item-default:var(--goa-space-2xs) solid\n      transparent;--goa-app-header-border-nav-item-hover:var(--goa-space-2xs) solid\n      var(--goa-color-interactive-hover);--goa-app-header-border-nav-item-focus:var(--goa-space-2xs) solid\n      var(--goa-color-interactive-hover);--goa-app-header-border-nav-item-current:var(--goa-space-2xs) solid\n      var(--goa-color-interactive-default);--goa-app-header-border-nav-item-current-hover:var(--goa-space-2xs) solid\n      var(--goa-color-interactive-hover);--goa-app-header-border-nav-item-current-focus:var(--goa-space-2xs) solid\n      var(--goa-color-interactive-hover);--goa-app-header-typography-link-item:var(--goa-typography-body-m);--goa-app-header-padding-link-item:var(--goa-space-m);--goa-app-header-nav-color-text-link-item:var(\n      --goa-color-interactive-default\n    );--goa-app-header-nav-color-text-link-item-hover:var(\n      --goa-color-interactive-hover\n    );--goa-app-header-nav-color-text-link-item-focus:var(\n      --goa-color-interactive-hover\n    );--goa-app-header-nav-color-bg-link-item:transparent;--goa-app-header-nav-color-bg-link-item-hover:transparent;--goa-app-header-nav-color-bg-link-item-focus:transparent;--goa-app-header-nav-color-text-link-item-in-menu:var(\n      --goa-color-interactive-default\n    );--goa-app-header-nav-color-text-link-item-in-menu-hover:var(\n      --goa-color-interactive-hover\n    );--goa-app-header-nav-color-text-link-item-in-menu-focus:var(\n      --goa-color-interactive-hover\n    );--goa-app-header-nav-color-bg-link-item-in-menu:transparent;--goa-app-header-nav-color-bg-link-item-in-menu-hover:var(\n      --goa-color-greyscale-100\n    );--goa-app-header-nav-color-bg-link-item-in-menu-focus:var(\n      --goa-color-greyscale-100\n    )}.svelte-19s1mqm.svelte-19s1mqm,::slotted(*){font:var(--goa-app-header-typography-service-name)}.container.svelte-19s1mqm.svelte-19s1mqm{border-bottom:var(--goa-app-header-border-bottom);background-color:var(--goa-app-header-color-bg)}@media(min-width: 1024px){.container.tablet.svelte-19s1mqm.svelte-19s1mqm{padding:0 var(--goa-space-3xl)}.container.desktop.svelte-19s1mqm.svelte-19s1mqm{padding:0 var(--desktop-padding)}}@media(min-width: 624px) and (max-width: 1023px){.container.svelte-19s1mqm.svelte-19s1mqm{padding:0 var(--goa-space-xl)}}.layout.svelte-19s1mqm.svelte-19s1mqm{width:100%;display:grid;grid-template-columns:1fr auto;grid-template-areas:"header menu"\n      "links links"}.content-area.svelte-19s1mqm.svelte-19s1mqm{grid-area:links}.desktop.svelte-19s1mqm .layout.svelte-19s1mqm{display:grid;grid-template-columns:auto 1fr auto;grid-template-rows:auto;grid-template-areas:"header . menu";margin:0 auto;width:min(var(--max-content-width), 100%)}.title.svelte-19s1mqm.svelte-19s1mqm{color:var(--goa-app-header-color-service-name)}.header-logo-title-area.svelte-19s1mqm.svelte-19s1mqm{grid-area:header;display:flex;text-decoration:none;align-items:flex-start}.header-logo-title-area.svelte-19s1mqm.svelte-19s1mqm:focus-visible{outline:var(--goa-app-header-service-name-border-focus);z-index:100;position:relative}::slotted(a){display:flex;align-items:center;margin:0;padding:var(--goa-app-header-padding-nav-item-in-menu);cursor:pointer;white-space:nowrap;text-decoration:none;overflow:hidden}::slotted(a:focus-visible){outline:var(--goa-app-header-border-focus);outline-offset:0px;z-index:100;position:relative}::slotted(a.inside-collapse-menu){color:var(--goa-app-header-color-text-nav-item);background-color:var(--goa-app-header-color-bg-nav-item)}::slotted(a.inside-collapse-menu:hover){color:var(--goa-app-header-color-text-nav-item-hover) !important;background-color:var(--goa-app-header-color-bg-nav-item-child-hover)}::slotted(a.inside-collapse-menu:focus-visible){outline-offset:-3px;background-color:var(\n      --goa-app-header-color-bg-nav-item-child-focus\n    ) !important;color:var(--goa-app-header-color-text-nav-item-focus) !important}::slotted(a.interactive){color:var(--goa-app-header-nav-color-text-link-item) !important;text-decoration:underline !important;white-space:nowrap}::slotted(a.interactive:hover){color:var(--goa-app-header-nav-color-text-link-item-hover) !important}::slotted(a.interactive:focus-visible){color:var(--goa-app-header-nav-color-text-link-item-focus) !important;background-color:var(\n      --goa-app-header-color-bg-nav-item-child-focus\n    ) !important}.desktop.svelte-19s1mqm .content-area.svelte-19s1mqm{grid-area:menu;display:flex;align-items:stretch}.desktop.svelte-19s1mqm .menu-toggle-area.svelte-19s1mqm{display:none}.desktop.svelte-19s1mqm .title.svelte-19s1mqm{padding-top:5.5px;max-width:var(--goa-app-header-max-width-service-name);min-width:var(--goa-app-header-min-width-service-name);font:var(--goa-app-header-typography-service-name)}.desktop.svelte-19s1mqm .header-logo-title-area.svelte-19s1mqm{grid-area:header;display:flex;align-items:flex-start;color:inherit;flex:1 1 auto;min-height:var(--goa-app-header-size-logo);margin:var(--goa-app-header-padding-logo);gap:var(--goa-app-header-space-btw-logo-service-name)}.desktop.svelte-19s1mqm .image-desktop.svelte-19s1mqm{display:block}.desktop.svelte-19s1mqm .image-mobile.svelte-19s1mqm{display:none}.desktop.svelte-19s1mqm ::slotted(a),.desktop.svelte-19s1mqm ::slotted(a:visited){font:var(--goa-app-header-typography-nav-item);display:block;align-items:center;padding:var(--goa-app-header-padding-nav-item);text-decoration:none;height:var(--goa-app-header-height-nav-item);border-top:var(--goa-app-header-border-nav-item-hidden);border-bottom:var(--goa-app-header-border-nav-item-hidden)}.desktop.svelte-19s1mqm ::slotted(a:hover){cursor:pointer;color:var(--goa-app-header-color-text-nav-item-hover) !important;background:var(--goa-app-header-color-bg-nav-item-hover);border-top:var(--goa-app-header-border-nav-item-hidden);border-bottom:var(--goa-app-header-border-nav-item-hover)}.desktop.svelte-19s1mqm ::slotted(a:focus-visible){cursor:pointer;color:var(--goa-app-header-color-text-nav-item-focus) !important;background:var(--goa-app-header-color-bg-nav-item-focus);border-top:var(--goa-app-header-border-nav-item-hidden);border-bottom:var(--goa-app-header-border-nav-item-focus)}.desktop.svelte-19s1mqm ::slotted(a.current){border-top:var(--goa-app-header-border-nav-item-current) !important;border-bottom:var(--goa-app-header-border-nav-item-hidden)}.desktop.svelte-19s1mqm ::slotted(a.current:hover){border-top:var(--goa-app-header-border-nav-item-current-hover) !important;border-bottom:var(--goa-app-header-border-nav-item-hidden)}.desktop.svelte-19s1mqm ::slotted(a.current:focus-visible){border-top:var(--goa-app-header-border-nav-item-current-focus) !important;border-bottom:var(--goa-app-header-border-nav-item-hidden)}.desktop.svelte-19s1mqm ::slotted(goa-app-header-menu){height:var(--goa-app-header-height-nav-item)}.desktop.svelte-19s1mqm ::slotted(goa-app-header-menu:hover){background:var(--goa-app-header-color-bg-nav-item-hover);cursor:pointer;color:var(--goa-app-header-color-text-nav-item-hover) !important;overflow:hidden !important}.desktop.svelte-19s1mqm ::slotted(a.interactive){font:var(--goa-app-header-typography-link-item);padding:var(--goa-app-header-padding-link-item)}.desktop.svelte-19s1mqm ::slotted(a.interactive:hover){border-top:var(--goa-app-header-border-nav-item-hidden);border-bottom:var(--goa-app-header-border-nav-item-hidden);background-color:var(--goa-app-header-nav-color-bg-link-item-hover)}.desktop.svelte-19s1mqm ::slotted(a.interactive:focus-visible){border-top:var(--goa-app-header-border-nav-item-hidden) !important;border-bottom:var(--goa-app-header-border-nav-item-hidden) !important;background-color:var(\n      --goa-app-header-nav-color-bg-link-item-focus\n    ) !important}.desktop.svelte-19s1mqm ::slotted(a.interactive.current){border-top:var(--goa-app-header-border-nav-item-hidden) !important;border-bottom:var(--goa-app-header-border-nav-item-hidden) !important}.tablet.svelte-19s1mqm .header-logo-title-area.svelte-19s1mqm{margin:var(--goa-app-header-padding-logo);min-height:var(--goa-app-header-size-logo);gap:var(--goa-app-header-space-btw-logo-service-name)}.tablet.svelte-19s1mqm .title.svelte-19s1mqm{padding-top:5.5px;font:var(--goa-app-header-typography-service-name);max-width:var(--goa-app-header-max-width-service-name);min-width:var(--goa-app-header-min-width-service-name)}.tablet.svelte-19s1mqm .image-desktop.svelte-19s1mqm{display:block}.tablet.svelte-19s1mqm .image-mobile.svelte-19s1mqm{display:none}.menu-toggle-area.svelte-19s1mqm.svelte-19s1mqm{grid-area:menu;display:flex;position:relative}.menu-toggle-area.svelte-19s1mqm button.svelte-19s1mqm{display:flex;background:transparent;border:none;cursor:pointer;height:var(--goa-app-header-height-nav-item);align-items:center;gap:6px;font:var(--goa-app-header-typography-menu-button);padding:var(--goa-app-header-padding-menu-button);text-decoration:none}.menu-toggle-area.svelte-19s1mqm button.svelte-19s1mqm:hover{color:var(--goa-app-header-color-menu-button-hover);box-shadow:inset 0 -4px 0 0 var(--goa-color-interactive-hover)}.menu-toggle-area.svelte-19s1mqm button.svelte-19s1mqm:focus-visible{outline:var(--goa-app-header-border-focus);z-index:100;position:relative;color:var(--goa-app-header-color-menu-button-focus);box-shadow:inset 0 -4px 0 0 var(--goa-color-interactive-hover)}.menu-toggle-area.svelte-19s1mqm button.menu-open.svelte-19s1mqm{background-color:var(--goa-app-header-color-bg-menu-button-focus);color:var(--goa-app-header-color-menu-button-focus);box-shadow:inset 0 -4px 0 0 var(--goa-color-interactive-hover)}.menu-toggle-area.svelte-19s1mqm goa-icon.svelte-19s1mqm{scale:1}.tablet.svelte-19s1mqm .menu-toggle-area.svelte-19s1mqm{padding-left:var(\n      --goa-app-header-space-btw-service-name-nav-items-in-menu\n    )}::slotted(a.interactive:focus-visible){color:var(--goa-app-header-nav-color-text-link-item-focus) !important;background-color:var(\n      --goa-app-header-nav-color-bg-link-item-in-menu-focus\n    ) !important;border-top:none !important;border-bottom:none}.tablet.svelte-19s1mqm ::slotted(a:not(:first-child)){box-shadow:inset 0 var(--goa-border-width-s) 0 0\n      var(--goa-color-greyscale-200)}.mobile.svelte-19s1mqm .title.svelte-19s1mqm{margin-top:-1px;color:var(--goa-app-header-color-service-name);max-width:var(--goa-app-header-max-width-service-name);min-width:var(--goa-app-header-min-width-service-name);font:var(--goa-app-header-typography-service-name-mobile)}.mobile.svelte-19s1mqm .header-logo-title-area.svelte-19s1mqm{display:flex;align-items:top;padding:var(--goa-app-header-padding-logo-mobile);gap:var(--goa-app-header-space-btw-logo-service-name-mobile)}.mobile.svelte-19s1mqm .image-desktop.svelte-19s1mqm{display:none}.mobile.svelte-19s1mqm .image-mobile.svelte-19s1mqm{display:block;width:var(--goa-app-header-size-logo-mobile)}.mobile.svelte-19s1mqm .menu-toggle-area button.svelte-19s1mqm{height:var(--goa-app-header-height-nav-item-mobile);font:var(--goa-app-header-typography-menu-button-mobile);display:flex;align-items:center}.mobile.svelte-19s1mqm .menu-toggle-area.svelte-19s1mqm{display:flex;align-items:end;position:relative}.mobile.svelte-19s1mqm .menu-toggle-area button.menu-open.svelte-19s1mqm{background-color:var(--goa-app-header-color-bg-menu-button-focus);color:var(--goa-app-header-color-menu-button-focus);box-shadow:inset 0 -4px 0 0 var(--goa-color-interactive-hover)}.mobile.svelte-19s1mqm .menu-toggle-area goa-icon.svelte-19s1mqm{scale:0.8}.mobile.svelte-19s1mqm ::slotted(a){box-shadow:inset 0 var(--goa-border-width-s) 0 0 var(--goa-color-greyscale-200);font:var(--goa-app-header-typography-menu-item);padding-left:var(--goa-space-2xl);padding-right:var(--goa-space-xl)}.mobile.show-menu.svelte-19s1mqm.svelte-19s1mqm{border-bottom:var(--goa-border-width-m) solid var(--goa-color-greyscale-200)}');
}
function create_else_block$e(ctx) {
  let div;
  let img0;
  let img0_src_value;
  let t0;
  let img1;
  let img1_src_value;
  let t1;
  let if_block = (
    /*heading*/
    ctx[0] && create_if_block_7$1(ctx)
  );
  return {
    c() {
      div = element("div");
      img0 = element("img");
      t0 = space();
      img1 = element("img");
      t1 = space();
      if (if_block) if_block.c();
      attr(img0, "alt", "GoA Logo");
      attr(img0, "class", "image-mobile svelte-19s1mqm");
      if (!src_url_equal(img0.src, img0_src_value = _mobileLogo)) attr(img0, "src", img0_src_value);
      attr(img1, "alt", "GoA Logo");
      attr(img1, "class", "image-desktop svelte-19s1mqm");
      if (!src_url_equal(img1.src, img1_src_value = _desktopLogo)) attr(img1, "src", img1_src_value);
      attr(div, "class", "header-logo-title-area svelte-19s1mqm");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, img0);
      append(div, t0);
      append(div, img1);
      append(div, t1);
      if (if_block) if_block.m(div, null);
    },
    p(ctx2, dirty) {
      if (
        /*heading*/
        ctx2[0]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block_7$1(ctx2);
          if_block.c();
          if_block.m(div, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (if_block) if_block.d();
    }
  };
}
function create_if_block_5$3(ctx) {
  let a;
  let img0;
  let img0_src_value;
  let t0;
  let img1;
  let img1_src_value;
  let t1;
  let if_block = (
    /*heading*/
    ctx[0] && create_if_block_6$3(ctx)
  );
  return {
    c() {
      a = element("a");
      img0 = element("img");
      t0 = space();
      img1 = element("img");
      t1 = space();
      if (if_block) if_block.c();
      attr(img0, "alt", "GoA Logo");
      attr(img0, "class", "image-mobile svelte-19s1mqm");
      if (!src_url_equal(img0.src, img0_src_value = _mobileLogo)) attr(img0, "src", img0_src_value);
      attr(img1, "alt", "GoA Logo");
      attr(img1, "class", "image-desktop svelte-19s1mqm");
      if (!src_url_equal(img1.src, img1_src_value = _desktopLogo)) attr(img1, "src", img1_src_value);
      attr(
        a,
        "href",
        /*url*/
        ctx[1]
      );
      attr(a, "class", "header-logo-title-area svelte-19s1mqm");
      attr(a, "data-testid", "url");
    },
    m(target, anchor) {
      insert(target, a, anchor);
      append(a, img0);
      append(a, t0);
      append(a, img1);
      append(a, t1);
      if (if_block) if_block.m(a, null);
    },
    p(ctx2, dirty) {
      if (
        /*heading*/
        ctx2[0]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block_6$3(ctx2);
          if_block.c();
          if_block.m(a, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (dirty & /*url*/
      2) {
        attr(
          a,
          "href",
          /*url*/
          ctx2[1]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(a);
      }
      if (if_block) if_block.d();
    }
  };
}
function create_if_block_7$1(ctx) {
  let span;
  let t2;
  return {
    c() {
      span = element("span");
      t2 = text(
        /*heading*/
        ctx[0]
      );
      attr(span, "data-testid", "title");
      attr(span, "class", "title svelte-19s1mqm");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*heading*/
      1) set_data(
        t2,
        /*heading*/
        ctx2[0]
      );
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_6$3(ctx) {
  let span;
  let t2;
  return {
    c() {
      span = element("span");
      t2 = text(
        /*heading*/
        ctx[0]
      );
      attr(span, "data-testid", "title");
      attr(span, "class", "title svelte-19s1mqm");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*heading*/
      1) set_data(
        t2,
        /*heading*/
        ctx2[0]
      );
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_4$6(ctx) {
  let div;
  let button;
  let t2;
  let goa_icon;
  let goa_icon_type_value;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      button = element("button");
      t2 = text("Menu\n          ");
      goa_icon = element("goa-icon");
      set_custom_element_data(goa_icon, "type", goa_icon_type_value = /*_showMenu*/
      ctx[9] ? "chevron-up" : "chevron-down");
      set_custom_element_data(goa_icon, "mt", "2");
      set_custom_element_data(goa_icon, "class", "svelte-19s1mqm");
      attr(button, "data-testid", "menu-toggle");
      attr(button, "class", "svelte-19s1mqm");
      toggle_class(
        button,
        "menu-open",
        /*_showMenu*/
        ctx[9]
      );
      attr(div, "class", "menu-toggle-area svelte-19s1mqm");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, button);
      append(button, t2);
      append(button, goa_icon);
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*toggleMenu*/
          ctx[12]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & /*_showMenu*/
      512 && goa_icon_type_value !== (goa_icon_type_value = /*_showMenu*/
      ctx2[9] ? "chevron-up" : "chevron-down")) {
        set_custom_element_data(goa_icon, "type", goa_icon_type_value);
      }
      if (dirty & /*_showMenu*/
      512) {
        toggle_class(
          button,
          "menu-open",
          /*_showMenu*/
          ctx2[9]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_2$f(ctx) {
  let goa_popover;
  let div;
  let button;
  let t0;
  let goa_icon;
  let goa_icon_type_value;
  let t1;
  let current;
  let mounted;
  let dispose;
  let if_block = (
    /*_showMenu*/
    ctx[9] && create_if_block_3$d(ctx)
  );
  return {
    c() {
      goa_popover = element("goa-popover");
      div = element("div");
      button = element("button");
      t0 = text("Menu\n            ");
      goa_icon = element("goa-icon");
      t1 = space();
      if (if_block) if_block.c();
      set_custom_element_data(goa_icon, "type", goa_icon_type_value = /*_showMenu*/
      ctx[9] ? "chevron-up" : "chevron-down");
      set_custom_element_data(goa_icon, "mt", "2");
      set_custom_element_data(goa_icon, "class", "svelte-19s1mqm");
      attr(button, "data-testid", "menu-toggle");
      attr(button, "class", "svelte-19s1mqm");
      toggle_class(
        button,
        "menu-open",
        /*_showMenu*/
        ctx[9]
      );
      attr(div, "slot", "target");
      attr(div, "style", styles("height: 100%; display: flex; align-items: end;"));
      attr(div, "class", "menu-toggle-area svelte-19s1mqm");
      set_custom_element_data(goa_popover, "class", "menu svelte-19s1mqm");
      set_custom_element_data(
        goa_popover,
        "open",
        /*_showMenu*/
        ctx[9]
      );
      set_custom_element_data(goa_popover, "minwidth", "16rem");
      set_custom_element_data(goa_popover, "context", "menu-toggle-area");
      set_custom_element_data(goa_popover, "focusborderwidth", "0");
      set_custom_element_data(goa_popover, "borderradius", "4");
      set_custom_element_data(goa_popover, "padded", "false");
      set_custom_element_data(goa_popover, "tabindex", "-1");
      set_custom_element_data(goa_popover, "height", "full");
      set_custom_element_data(goa_popover, "position", "below");
    },
    m(target, anchor) {
      insert(target, goa_popover, anchor);
      append(goa_popover, div);
      append(div, button);
      append(button, t0);
      append(button, goa_icon);
      append(goa_popover, t1);
      if (if_block) if_block.m(goa_popover, null);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            button,
            "click",
            /*toggleMenu*/
            ctx[12]
          ),
          listen(
            goa_popover,
            "_close",
            /*hideMenu*/
            ctx[13]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (!current || dirty & /*_showMenu*/
      512 && goa_icon_type_value !== (goa_icon_type_value = /*_showMenu*/
      ctx2[9] ? "chevron-up" : "chevron-down")) {
        set_custom_element_data(goa_icon, "type", goa_icon_type_value);
      }
      if (!current || dirty & /*_showMenu*/
      512) {
        toggle_class(
          button,
          "menu-open",
          /*_showMenu*/
          ctx2[9]
        );
      }
      if (
        /*_showMenu*/
        ctx2[9]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*_showMenu*/
          512) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_3$d(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(goa_popover, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      if (!current || dirty & /*_showMenu*/
      512) {
        set_custom_element_data(
          goa_popover,
          "open",
          /*_showMenu*/
          ctx2[9]
        );
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(goa_popover);
      }
      if (if_block) if_block.d();
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_if_block_3$d(ctx) {
  let div;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[16].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[15],
    null
  );
  return {
    c() {
      div = element("div");
      if (default_slot) default_slot.c();
      attr(div, "data-testid", "slot");
      attr(div, "class", "svelte-19s1mqm");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      ctx[18](div);
      current = true;
    },
    p(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        32768)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[15],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[15]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[15],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (default_slot) default_slot.d(detaching);
      ctx[18](null);
    }
  };
}
function create_if_block_1$n(ctx) {
  let div;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[16].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[15],
    null
  );
  return {
    c() {
      div = element("div");
      if (default_slot) default_slot.c();
      set_style(div, "display", "none");
      attr(div, "class", "svelte-19s1mqm");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      ctx[19](div);
      current = true;
    },
    p(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        32768)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[15],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[15]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[15],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (default_slot) default_slot.d(detaching);
      ctx[19](null);
    }
  };
}
function create_if_block$A(ctx) {
  let div;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[16].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[15],
    null
  );
  return {
    c() {
      div = element("div");
      if (default_slot) default_slot.c();
      attr(div, "data-testid", "slot");
      attr(div, "class", "content-area svelte-19s1mqm");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      ctx[20](div);
      current = true;
    },
    p(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        32768)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[15],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[15]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[15],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (default_slot) default_slot.d(detaching);
      ctx[20](null);
    }
  };
}
function create_fragment$14(ctx) {
  let div1;
  let div0;
  let t0;
  let t1;
  let t2;
  let t3;
  let div1_style_value;
  let current;
  let mounted;
  let dispose;
  add_render_callback(
    /*onwindowresize*/
    ctx[17]
  );
  function select_block_type(ctx2, dirty) {
    if (
      /*url*/
      ctx2[1]
    ) return create_if_block_5$3;
    return create_else_block$e;
  }
  let current_block_type = select_block_type(ctx);
  let if_block0 = current_block_type(ctx);
  let if_block1 = (
    /*_showToggleMenu*/
    ctx[8] && /*_mobile*/
    ctx[11] && create_if_block_4$6(ctx)
  );
  let if_block2 = (
    /*_showToggleMenu*/
    ctx[8] && /*_tablet*/
    ctx[10] && create_if_block_2$f(ctx)
  );
  let if_block3 = !/*_showMenu*/
  ctx[9] && /*_mobile*/
  (ctx[11] || /*_tablet*/
  ctx[10]) && create_if_block_1$n(ctx);
  let if_block4 = (
    /*_showMenu*/
    (ctx[9] && /*_mobile*/
    ctx[11] || /*_desktop*/
    ctx[5]) && create_if_block$A(ctx)
  );
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      if_block0.c();
      t0 = space();
      if (if_block1) if_block1.c();
      t1 = space();
      if (if_block2) if_block2.c();
      t2 = space();
      if (if_block3) if_block3.c();
      t3 = space();
      if (if_block4) if_block4.c();
      attr(div0, "class", "layout svelte-19s1mqm");
      attr(div1, "class", "container svelte-19s1mqm");
      attr(
        div1,
        "data-testid",
        /*testid*/
        ctx[2]
      );
      attr(div1, "style", div1_style_value = `
  --max-content-width: ${/*maxcontentwidth*/
      ctx[3] || "100%"};
  --desktop-padding: ${/*maxcontentwidth*/
      ctx[3] && /*maxcontentwidth*/
      ctx[3] !== "100%" && /*_windowWidth*/
      ctx[4] > +/*maxcontentwidth*/
      ctx[3] ? "0" : "var(--goa-space-3xl)"};
`);
      toggle_class(
        div1,
        "show-menu",
        /*_showMenu*/
        ctx[9]
      );
      toggle_class(
        div1,
        "mobile",
        /*_mobile*/
        ctx[11]
      );
      toggle_class(
        div1,
        "tablet",
        /*_tablet*/
        ctx[10]
      );
      toggle_class(
        div1,
        "desktop",
        /*_desktop*/
        ctx[5]
      );
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      if_block0.m(div0, null);
      append(div0, t0);
      if (if_block1) if_block1.m(div0, null);
      append(div0, t1);
      if (if_block2) if_block2.m(div0, null);
      append(div0, t2);
      if (if_block3) if_block3.m(div0, null);
      append(div0, t3);
      if (if_block4) if_block4.m(div0, null);
      ctx[21](div1);
      current = true;
      if (!mounted) {
        dispose = listen(
          window_1$1,
          "resize",
          /*onwindowresize*/
          ctx[17]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (current_block_type === (current_block_type = select_block_type(ctx2)) && if_block0) {
        if_block0.p(ctx2, dirty);
      } else {
        if_block0.d(1);
        if_block0 = current_block_type(ctx2);
        if (if_block0) {
          if_block0.c();
          if_block0.m(div0, t0);
        }
      }
      if (
        /*_showToggleMenu*/
        ctx2[8] && /*_mobile*/
        ctx2[11]
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block_4$6(ctx2);
          if_block1.c();
          if_block1.m(div0, t1);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (
        /*_showToggleMenu*/
        ctx2[8] && /*_tablet*/
        ctx2[10]
      ) {
        if (if_block2) {
          if_block2.p(ctx2, dirty);
          if (dirty & /*_showToggleMenu, _tablet*/
          1280) {
            transition_in(if_block2, 1);
          }
        } else {
          if_block2 = create_if_block_2$f(ctx2);
          if_block2.c();
          transition_in(if_block2, 1);
          if_block2.m(div0, t2);
        }
      } else if (if_block2) {
        group_outros();
        transition_out(if_block2, 1, 1, () => {
          if_block2 = null;
        });
        check_outros();
      }
      if (!/*_showMenu*/
      ctx2[9] && /*_mobile*/
      (ctx2[11] || /*_tablet*/
      ctx2[10])) {
        if (if_block3) {
          if_block3.p(ctx2, dirty);
          if (dirty & /*_showMenu, _mobile, _tablet*/
          3584) {
            transition_in(if_block3, 1);
          }
        } else {
          if_block3 = create_if_block_1$n(ctx2);
          if_block3.c();
          transition_in(if_block3, 1);
          if_block3.m(div0, t3);
        }
      } else if (if_block3) {
        group_outros();
        transition_out(if_block3, 1, 1, () => {
          if_block3 = null;
        });
        check_outros();
      }
      if (
        /*_showMenu*/
        ctx2[9] && /*_mobile*/
        ctx2[11] || /*_desktop*/
        ctx2[5]
      ) {
        if (if_block4) {
          if_block4.p(ctx2, dirty);
          if (dirty & /*_showMenu, _mobile, _desktop*/
          2592) {
            transition_in(if_block4, 1);
          }
        } else {
          if_block4 = create_if_block$A(ctx2);
          if_block4.c();
          transition_in(if_block4, 1);
          if_block4.m(div0, null);
        }
      } else if (if_block4) {
        group_outros();
        transition_out(if_block4, 1, 1, () => {
          if_block4 = null;
        });
        check_outros();
      }
      if (!current || dirty & /*testid*/
      4) {
        attr(
          div1,
          "data-testid",
          /*testid*/
          ctx2[2]
        );
      }
      if (!current || dirty & /*maxcontentwidth, _windowWidth*/
      24 && div1_style_value !== (div1_style_value = `
  --max-content-width: ${/*maxcontentwidth*/
      ctx2[3] || "100%"};
  --desktop-padding: ${/*maxcontentwidth*/
      ctx2[3] && /*maxcontentwidth*/
      ctx2[3] !== "100%" && /*_windowWidth*/
      ctx2[4] > +/*maxcontentwidth*/
      ctx2[3] ? "0" : "var(--goa-space-3xl)"};
`)) {
        attr(div1, "style", div1_style_value);
      }
      if (!current || dirty & /*_showMenu*/
      512) {
        toggle_class(
          div1,
          "show-menu",
          /*_showMenu*/
          ctx2[9]
        );
      }
      if (!current || dirty & /*_mobile*/
      2048) {
        toggle_class(
          div1,
          "mobile",
          /*_mobile*/
          ctx2[11]
        );
      }
      if (!current || dirty & /*_tablet*/
      1024) {
        toggle_class(
          div1,
          "tablet",
          /*_tablet*/
          ctx2[10]
        );
      }
      if (!current || dirty & /*_desktop*/
      32) {
        toggle_class(
          div1,
          "desktop",
          /*_desktop*/
          ctx2[5]
        );
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block2);
      transition_in(if_block3);
      transition_in(if_block4);
      current = true;
    },
    o(local) {
      transition_out(if_block2);
      transition_out(if_block3);
      transition_out(if_block4);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      if_block0.d();
      if (if_block1) if_block1.d();
      if (if_block2) if_block2.d();
      if (if_block3) if_block3.d();
      if (if_block4) if_block4.d();
      ctx[21](null);
      mounted = false;
      dispose();
    }
  };
}
const _mobileLogo = "data:image/svg+xml,%3Csvg width='35' height='35' viewBox='0 0 35 35' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cg clip-path='url(%23clip0_252_21401)'%3E%3Cpath d='M17.5 0C20.9612 0 24.3446 1.02636 27.2225 2.94928C30.1003 4.87221 32.3434 7.60533 33.6679 10.803C34.9924 14.0007 35.339 17.5194 34.6637 20.9141C33.9885 24.3087 32.3218 27.4269 29.8744 29.8744C27.4269 32.3218 24.3087 33.9885 20.9141 34.6637C17.5194 35.339 14.0007 34.9924 10.803 33.6679C7.60533 32.3434 4.87221 30.1003 2.94928 27.2225C1.02636 24.3446 0 20.9612 0 17.5C0 12.8587 1.84374 8.40752 5.12563 5.12563C8.40752 1.84374 12.8587 0 17.5 0V0Z' fill='%2300B6ED'/%3E%3Cpath d='M23.8045 24.8037C22.2993 24.2487 20.8302 23.6001 19.4059 22.8618C20.6989 22.3869 21.9597 21.8286 23.1803 21.1903C23.3048 22.4081 23.5131 23.6159 23.8036 24.8051M31.8873 9.83681C31.2574 9.7572 31.5846 10.0501 31.4091 10.8801C30.6504 14.4588 27.7236 17.0381 24.7854 18.7685C24.4775 14.6704 24.6033 10.1205 25.3748 7.33228C26.0258 4.97862 26.7999 5.41055 25.8397 4.91616C24.828 4.39581 23.7438 5.0833 22.8654 6.83656C21.987 8.58982 17.9421 18.1074 11.4762 24.5341C8.16898 27.8238 5.17753 26.1295 4.57844 25.6236C4.09108 25.2119 3.91118 25.8475 4.51598 26.4985C7.19074 29.3826 11.0984 27.7279 12.5213 26.3058C16.4536 22.3753 21.0255 13.9143 22.8751 10.3242C22.6597 13.451 22.7093 16.5904 23.0233 19.7089C21.5336 20.4399 19.98 21.0325 18.382 21.4793C17.4653 21.7195 16.8983 22.0929 16.8816 22.5174C16.8636 22.9823 17.4789 23.3747 18.3688 23.7969C19.9522 24.5491 24.5918 26.7409 25.735 27.4037C26.7137 27.9716 27.1914 27.5286 27.4812 26.9155C27.8599 26.1163 26.8215 25.6544 25.8151 25.3536C25.3709 23.6667 25.0692 21.9455 24.9129 20.2081C27.2714 18.7566 29.5934 16.8213 30.9319 14.4078C31.3641 13.5596 31.6853 12.6593 31.8877 11.7291C32.0278 11.1562 32.0661 10.5632 32.0007 9.97712C32.0007 9.97712 31.9831 9.84913 31.8877 9.83681' fill='white'/%3E%3C/g%3E%3Cdefs%3E%3CclipPath id='clip0_252_21401'%3E%3Crect width='35' height='35' fill='white'/%3E%3C/clipPath%3E%3C/defs%3E%3C/svg%3E%0A";
const _desktopLogo = "data:image/svg+xml,%3Csvg width='118' height='32' viewBox='0 0 155 42' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cg clip-path='url(%23clip0_74_4890)'%3E%3Cpath d='M155 21H140.6V35.4004H155V21Z' fill='%2300B6ED'/%3E%3Cpath d='M65.5539 33.211C64.116 33.349 62.6147 33.4882 61.0366 33.5566C61.6106 29.2005 63.9758 23.1883 66.915 24.1484C68.6357 24.7016 67.7035 29.8197 65.5527 33.2086L65.5539 33.211ZM61.8957 36.1823C61.4683 36.2514 61.0326 36.2514 60.6053 36.1823C60.7165 36.1047 60.8073 36.0013 60.8699 35.881C60.9325 35.7606 60.965 35.6268 60.9647 35.4911V34.9378C61.7531 34.9378 62.9717 34.7998 64.4779 34.6606C63.8154 35.4471 62.9038 35.9839 61.8957 36.1823ZM79.8198 25.8116C81.6842 24.1484 82.6164 24.29 82.8273 24.7052C83.3294 25.6736 81.1786 29.0625 76.9489 30.9297C77.3845 28.9796 78.3814 27.2002 79.8162 25.8116H79.8198ZM149 27.4712C148.784 24.0824 145.702 23.5291 145.272 24.4976C145.128 24.8432 146.419 24.7052 146.419 27.1256C146.419 31.0677 142.261 36.2543 136.953 36.2543C135.111 36.3656 133.298 35.7577 131.894 34.5583C130.49 33.3589 129.605 31.6613 129.425 29.8221C129.209 28.3701 129.568 26.3636 126.988 26.6408C125.19 26.8484 123.618 30.1677 121.324 33.001C119.387 35.4215 118.527 35.2139 118.957 33.139C119.531 30.5109 121.754 24.4256 124.335 24.0104C125.553 23.8027 125.983 25.8104 126.491 24.5636C126.674 24.1246 126.746 23.6475 126.701 23.1742C126.655 22.7009 126.495 22.246 126.233 21.8497C125.97 21.4533 125.615 21.1276 125.197 20.9012C124.78 20.6749 124.313 20.5549 123.839 20.5519C121.974 20.5519 119.751 22.4887 117.888 24.632C116.311 26.5688 108.209 38.0483 104.768 35.5595C103.191 34.3834 103.33 29.6793 104.338 24.1484C105.794 23.5168 107.361 23.1795 108.948 23.1559C110.536 23.1322 112.112 23.4226 113.587 24.0104C114.519 24.4256 114.665 24.356 114.233 23.3875C113.659 21.9355 110.433 19.653 105.343 20.6899C105.199 20.6899 105.127 20.7595 104.984 20.7595C105.414 18.9594 105.844 17.0946 106.421 15.2957C106.923 13.6361 108.286 10.8004 104.624 10.3168C103.477 10.1092 103.979 10.6624 103.546 12.184C102.827 14.9501 101.969 18.5442 101.323 22.2115C98.0002 24.1064 95.2885 26.9143 93.5082 30.3033C93.9222 28.7349 94.2336 27.141 94.4404 25.532C94.4806 25.1343 94.3704 24.7359 94.1314 24.4157C93.8924 24.0955 93.5422 23.8768 93.1499 23.8027C92.3615 23.5951 91.3526 23.9408 90.4252 25.2548C88.2025 28.2981 85.4071 33.0694 81.1055 35.0747C78.0225 36.5267 76.6601 35.0747 76.5894 32.7946C77.1289 32.6525 77.6562 32.4675 78.1663 32.2414C83.7583 29.8905 85.6228 26.294 84.2604 24.0812C82.898 22.0063 79.0985 22.6291 76.0155 25.7408C74.3913 27.5384 73.4079 29.8245 73.2188 32.2414C71.9284 32.5186 70.4941 32.7214 68.8454 32.9326C71.4263 28.8525 71.2118 23.3191 67.4075 22.3519C62.9621 21.2455 60.7395 25.3952 59.8084 28.8525C60.1679 24.98 60.7407 21.1063 61.4572 17.3034C61.8167 15.6437 62.9621 12.808 59.3004 12.3244C58.1537 12.1168 58.2963 12.67 58.3682 14.1917C58.512 16.2665 56.1455 28.6461 57.3641 34.0402C55.7872 34.5202 55.1414 35.6999 57.1484 36.8759C58.3625 37.3816 59.673 37.6128 60.9865 37.5531C62.3 37.4933 63.5842 37.1441 64.7475 36.5303C65.8289 36.0016 66.8016 35.2742 67.6148 34.3858C69.4792 34.1782 71.4143 33.8326 73.2069 33.5554C73.4932 35.9759 75.1432 37.7735 78.8708 37.4279C84.1765 36.9479 88.9083 30.6501 90.7008 27.608C90.3413 30.8589 88.1917 37.9811 91.9194 37.6355C93.3572 37.4975 92.7797 37.2899 92.8516 36.0455C93.211 31.7578 96.8668 28.0929 100.52 25.8788C99.8743 31.1349 100.09 35.8391 102.599 37.2899C107.187 40.056 113.569 32.7946 117.153 28.3689C115.355 32.311 114.356 37.2899 117.009 38.0507C120.164 38.9496 122.673 33.8326 125.612 29.9589C125.971 32.725 127.907 37.5659 135.649 37.5659C143.966 37.4963 149.2 32.6554 148.984 27.4688L149 27.4712ZM36.7117 36.1091C33.9173 35.1299 31.1875 33.9747 28.5387 32.6506C30.939 31.8034 33.2854 30.8103 35.565 29.6769C35.8138 31.8427 36.1968 33.9909 36.7117 36.1091ZM57.8817 39.9888C57.8098 39.7812 57.2359 40.0584 56.735 39.9888C55.2289 39.7812 53.2219 37.7759 52.6479 34.525C51.5695 28.6449 52.2178 22.8379 54.0103 14.1929C54.3698 12.5332 55.5164 9.69756 51.8535 9.14435C50.7068 9.00634 51.2796 9.55956 50.9932 11.0116C49.5553 17.4438 44.1106 22.0771 38.6624 25.1888C38.0884 17.8578 38.3029 9.62796 39.7408 4.64903C40.9629 0.430912 42.396 1.19173 40.6035 0.292908C38.8109 -0.605916 36.732 0.568916 35.0833 3.7478C33.4346 6.92669 25.9122 24.014 13.8629 35.5631C7.69931 41.4408 2.10485 38.3987 1.02886 37.4999C0.0966476 36.7391 -0.189725 37.9151 0.885072 39.09C5.8325 44.3461 13.1452 41.37 15.7968 38.8128C23.1059 31.759 31.6408 16.5438 35.0881 10.1128C34.6816 15.735 34.7775 21.3824 35.3745 26.9876C32.6035 28.2941 29.7251 29.3585 26.7713 30.1689C25.0507 30.5841 23.9747 31.2753 23.9747 32.0362C23.9747 32.797 25.1213 33.5578 26.7713 34.3162C29.7105 35.6999 38.3856 39.5724 40.4645 40.8168C42.2618 41.8536 43.1892 41.0244 43.6913 39.918C44.4102 38.4659 42.4727 37.6379 40.6083 37.1519C39.7869 34.1144 39.2115 31.0154 38.8876 27.8853C43.2611 25.2572 47.6346 21.7999 50.0718 17.445C49.4271 21.0451 47.8491 33.421 51.8691 38.6076C52.4249 39.3234 53.1422 39.8971 53.9622 40.2815C54.7822 40.666 55.6816 40.8502 56.5864 40.8192C57.5905 40.7496 58.0243 40.128 57.8769 39.9888' fill='%23545860'/%3E%3C/g%3E%3Cdefs%3E%3CclipPath id='clip0_74_4890'%3E%3Crect width='154.804' height='42' fill='white' transform='translate(0.195801)'/%3E%3C/clipPath%3E%3C/defs%3E%3C/svg%3E%0A";
function instance$14($$self, $$props, $$invalidate) {
  let _mobile;
  let _tablet;
  let _desktop;
  let { $$slots: slots = {}, $$scope } = $$props;
  let { heading = "" } = $$props;
  let { url = "" } = $$props;
  let { testid = "" } = $$props;
  let { maxcontentwidth = "" } = $$props;
  let { fullmenubreakpoint = TABLET_BP } = $$props;
  let _slotParentEl;
  let _rootEl;
  let _windowWidth = window.innerWidth;
  let _showToggleMenu = false;
  let _showMenu = false;
  let _appHeaderLinks = [];
  let _appHeaderMenuItems = [];
  onMount(() => {
    getChildren();
    addEventListeners();
  });
  onDestroy(() => {
    window.removeEventListener("popstate", onRouteChange, true);
  });
  const toggleMenu = () => $$invalidate(9, _showMenu = !_showMenu);
  const hideMenu = () => $$invalidate(9, _showMenu = false);
  function getChildren() {
    if (!_slotParentEl) return;
    const slotChildren = getSlottedChildren(_slotParentEl);
    if (slotChildren.length === 0) return;
    _appHeaderLinks = slotChildren.filter((el2) => el2.tagName === "A").map((el2) => {
      el2.classList.remove("current");
      return el2;
    });
  }
  function addEventListeners() {
    if (!_rootEl) return;
    _rootEl.addEventListener("app-header-menu:mounted", (e) => {
      const appHeaderMenuProps = e.detail;
      _appHeaderMenuItems = [..._appHeaderMenuItems, appHeaderMenuProps];
      setCurrentLink();
    });
    let currentLocation = document.location.href;
    const observer = new MutationObserver((_mutationList) => {
      if (isUrlMatch(document.location, currentLocation)) {
        currentLocation = document.location.href;
        onRouteChange();
      }
    });
    observer.observe(document.body, { childList: true, subtree: true });
    window.addEventListener("popstate", onRouteChange, true);
  }
  function onRouteChange() {
    setCurrentLink();
    hideMenu();
  }
  function setCurrentLink() {
    let links = [..._appHeaderLinks];
    _appHeaderMenuItems.forEach((el2) => {
      links = [...links, ...el2.links];
    });
    links.forEach((link) => link.classList.remove("current"));
    const matchedLink = getMatchedLink(links, window.location);
    if (matchedLink) {
      matchedLink.classList.add("current");
    }
    dispatchCurrentLink((matchedLink == null ? void 0 : matchedLink.getAttribute("href")) || "");
  }
  function dispatchCurrentLink(href) {
    _appHeaderMenuItems.forEach((item) => {
      item.el.dispatchEvent(new CustomEvent("app-header:changed", { composed: true, detail: href }));
    });
  }
  function onShowToggleMenuChange() {
    if (!_slotParentEl) return;
    const slot = _slotParentEl.querySelector("slot");
    if (!slot) return;
    slot.assignedElements().filter((el2) => el2.tagName === "A").map((el2) => {
      if (_showToggleMenu) el2.classList.add("inside-collapse-menu");
      else el2.classList.remove("inside-collapse-menu");
    });
  }
  async function hasChildren() {
    var _a;
    await tick();
    if (!_slotParentEl) return false;
    const slot = _slotParentEl == null ? void 0 : _slotParentEl.childNodes[0];
    const children2 = (_a = slot == null ? void 0 : slot.assignedElements) == null ? void 0 : _a.call(slot);
    if (children2) {
      return children2.length > 0;
    } else {
      return [..._slotParentEl == null ? void 0 : _slotParentEl.querySelectorAll("a")].length > 0;
    }
  }
  function onwindowresize() {
    $$invalidate(4, _windowWidth = window_1$1.innerWidth);
  }
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _slotParentEl = $$value;
      $$invalidate(6, _slotParentEl);
    });
  }
  function div_binding_1($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _slotParentEl = $$value;
      $$invalidate(6, _slotParentEl);
    });
  }
  function div_binding_2($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _slotParentEl = $$value;
      $$invalidate(6, _slotParentEl);
    });
  }
  function div1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _rootEl = $$value;
      $$invalidate(7, _rootEl);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("heading" in $$props2) $$invalidate(0, heading = $$props2.heading);
    if ("url" in $$props2) $$invalidate(1, url = $$props2.url);
    if ("testid" in $$props2) $$invalidate(2, testid = $$props2.testid);
    if ("maxcontentwidth" in $$props2) $$invalidate(3, maxcontentwidth = $$props2.maxcontentwidth);
    if ("fullmenubreakpoint" in $$props2) $$invalidate(14, fullmenubreakpoint = $$props2.fullmenubreakpoint);
    if ("$$scope" in $$props2) $$invalidate(15, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*_windowWidth*/
    16) {
      $$invalidate(11, _mobile = _windowWidth < MOBILE_BP);
    }
    if ($$self.$$.dirty & /*_windowWidth, fullmenubreakpoint*/
    16400) {
      $$invalidate(10, _tablet = _windowWidth >= MOBILE_BP && _windowWidth < fullmenubreakpoint);
    }
    if ($$self.$$.dirty & /*_windowWidth, fullmenubreakpoint*/
    16400) {
      $$invalidate(5, _desktop = _windowWidth >= +fullmenubreakpoint);
    }
    if ($$self.$$.dirty & /*_desktop*/
    32) {
      (async () => {
        $$invalidate(8, _showToggleMenu = _desktop ? false : await hasChildren());
        onShowToggleMenuChange();
      })();
    }
  };
  return [
    heading,
    url,
    testid,
    maxcontentwidth,
    _windowWidth,
    _desktop,
    _slotParentEl,
    _rootEl,
    _showToggleMenu,
    _showMenu,
    _tablet,
    _mobile,
    toggleMenu,
    hideMenu,
    fullmenubreakpoint,
    $$scope,
    slots,
    onwindowresize,
    div_binding,
    div_binding_1,
    div_binding_2,
    div1_binding
  ];
}
class AppHeader extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$14,
      create_fragment$14,
      safe_not_equal,
      {
        heading: 0,
        url: 1,
        testid: 2,
        maxcontentwidth: 3,
        fullmenubreakpoint: 14
      },
      add_css$Z
    );
  }
  get heading() {
    return this.$$.ctx[0];
  }
  set heading(heading) {
    this.$$set({ heading });
    flush();
  }
  get url() {
    return this.$$.ctx[1];
  }
  set url(url) {
    this.$$set({ url });
    flush();
  }
  get testid() {
    return this.$$.ctx[2];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
  get maxcontentwidth() {
    return this.$$.ctx[3];
  }
  set maxcontentwidth(maxcontentwidth) {
    this.$$set({ maxcontentwidth });
    flush();
  }
  get fullmenubreakpoint() {
    return this.$$.ctx[14];
  }
  set fullmenubreakpoint(fullmenubreakpoint) {
    this.$$set({ fullmenubreakpoint });
    flush();
  }
}
customElements.define("goa-app-header", create_custom_element(AppHeader, { "heading": {}, "url": {}, "testid": {}, "maxcontentwidth": {}, "fullmenubreakpoint": {} }, ["default"], [], true));
function add_css$Y(target) {
  append_styles(target, "svelte-yzqr1c", ":host{box-sizing:border-box;font-family:var(--goa-font-family-sans);height:22px;--goa-badge-border-radius:var(--goa-border-radius-m);--goa-badge-padding:0px var(--goa-space-xs);--goa-badge-gap:var(--goa-space-2xs);--goa-badge-height:22px;--goa-badge-font-size:var(--goa-font-size-2);--goa-badge-line-height:var(--goa-line-height-1);--goa-badge-icon-size:var(--goa-icon-size-1);--goa-badge-border:inset 0 0 var(--goa-border-width-s) 0 rgba(0, 0, 0, 0.5);--goa-badge-info-color-bg:var(--goa-color-greyscale-100);--goa-badge-info-color-content:var(--goa-color-info-default);--goa-badge-success-color-bg:var(--goa-color-success-default);--goa-badge-success-color-content:var(--goa-color-text-light);--goa-badge-important-color-bg:var(--goa-color-warning-default);--goa-badge-important-color-content:var(--goa-color-text-default);--goa-badge-emergency-color-bg:var(--goa-color-emergency-default);--goa-badge-emergency-color-content:var(--goa-color-text-light);--goa-badge-dark-color-bg:var(--goa-color-greyscale-black);--goa-badge-dark-color-content:var(--goa-color-text-light);--goa-badge-midtone-color-bg:var(--goa-color-greyscale-700);--goa-badge-midtone-color-content:var(--goa-color-text-light);--goa-badge-light-color-bg:var(--goa-color-greyscale-white);--goa-badge-light-color-content:var(--goa-color-text-default)}.goa-badge.svelte-yzqr1c{display:inline-flex;height:var(--goa-badge-height);width:auto;vertical-align:top;align-items:center;border-radius:var(--goa-badge-border-radius);padding:var(--goa-badge-padding);gap:var(--goa-badge-gap);font-weight:var(--goa-font-weight-regular);box-shadow:var(--goa-badge-border)}.icon-only.svelte-yzqr1c{padding:0 3px}.goa-badge-content.svelte-yzqr1c{font-size:var(--goa-badge-font-size);line-height:var(--goa-badge-line-height);white-space:nowrap;padding-bottom:3px}.goa-badge.badge-information.svelte-yzqr1c{background-color:var(--goa-badge-info-color-bg);color:var(--goa-badge-info-color-content)}.goa-badge.badge-success.svelte-yzqr1c{background-color:var(--goa-badge-success-color-bg);color:var(--goa-badge-success-color-content)}.goa-badge.badge-important.svelte-yzqr1c{background-color:var(--goa-badge-important-color-bg);color:var(--goa-badge-important-color-content)}.goa-badge.badge-emergency.svelte-yzqr1c{background-color:var(--goa-badge-emergency-color-bg);color:var(--goa-badge-emergency-color-content)}.goa-badge.badge-dark.svelte-yzqr1c{background-color:var(--goa-badge-dark-color-bg);color:var(--goa-badge-dark-color-content)}.goa-badge.badge-midtone.svelte-yzqr1c{background-color:var(--goa-badge-midtone-color-bg);color:var(--goa-badge-midtone-color-content)}.goa-badge.badge-light.svelte-yzqr1c{background-color:var(--goa-badge-light-color-bg);color:var(--goa-badge-light-color-content)}");
}
function create_else_block$d(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      set_style(div, "height", "22px");
      set_style(div, "margin-left", "-0.25rem");
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_if_block_1$m(ctx) {
  let goa_icon;
  let goa_icon_arialabel_value;
  let goa_icon_role_value;
  return {
    c() {
      goa_icon = element("goa-icon");
      set_custom_element_data(goa_icon, "arialabel", goa_icon_arialabel_value = /*showIconOnly*/
      ctx[9] && /*arialabel*/
      ctx[3] ? (
        /*arialabel*/
        ctx[3]
      ) : null);
      set_custom_element_data(goa_icon, "role", goa_icon_role_value = /*showIconOnly*/
      ctx[9] && /*arialabel*/
      ctx[3] ? "presentation" : null);
      set_custom_element_data(
        goa_icon,
        "type",
        /*iconType*/
        ctx[10]
      );
      set_custom_element_data(goa_icon, "size", "1");
    },
    m(target, anchor) {
      insert(target, goa_icon, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*showIconOnly, arialabel*/
      520 && goa_icon_arialabel_value !== (goa_icon_arialabel_value = /*showIconOnly*/
      ctx2[9] && /*arialabel*/
      ctx2[3] ? (
        /*arialabel*/
        ctx2[3]
      ) : null)) {
        set_custom_element_data(goa_icon, "arialabel", goa_icon_arialabel_value);
      }
      if (dirty & /*showIconOnly, arialabel*/
      520 && goa_icon_role_value !== (goa_icon_role_value = /*showIconOnly*/
      ctx2[9] && /*arialabel*/
      ctx2[3] ? "presentation" : null)) {
        set_custom_element_data(goa_icon, "role", goa_icon_role_value);
      }
      if (dirty & /*iconType*/
      1024) {
        set_custom_element_data(
          goa_icon,
          "type",
          /*iconType*/
          ctx2[10]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(goa_icon);
      }
    }
  };
}
function create_if_block$z(ctx) {
  let div;
  let t2;
  return {
    c() {
      div = element("div");
      t2 = text(
        /*content*/
        ctx[2]
      );
      attr(div, "class", "goa-badge-content svelte-yzqr1c");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*content*/
      4) set_data(
        t2,
        /*content*/
        ctx2[2]
      );
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_fragment$13(ctx) {
  let div;
  let t2;
  let div_style_value;
  let div_class_value;
  function select_block_type(ctx2, dirty) {
    if (
      /*showIcon*/
      ctx2[8]
    ) return create_if_block_1$m;
    return create_else_block$d;
  }
  let current_block_type = select_block_type(ctx);
  let if_block0 = current_block_type(ctx);
  let if_block1 = (
    /*content*/
    ctx[2] && create_if_block$z(ctx)
  );
  return {
    c() {
      div = element("div");
      if_block0.c();
      t2 = space();
      if (if_block1) if_block1.c();
      attr(div, "style", div_style_value = calculateMargin(
        /*mt*/
        ctx[4],
        /*mr*/
        ctx[5],
        /*mb*/
        ctx[6],
        /*ml*/
        ctx[7]
      ));
      attr(
        div,
        "data-testid",
        /*testid*/
        ctx[1]
      );
      attr(div, "data-type", "goa-badge");
      attr(div, "class", div_class_value = "goa-badge badge-" + /*type*/
      ctx[0] + " svelte-yzqr1c");
      toggle_class(
        div,
        "icon-only",
        /*showIconOnly*/
        ctx[9]
      );
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if_block0.m(div, null);
      append(div, t2);
      if (if_block1) if_block1.m(div, null);
    },
    p(ctx2, [dirty]) {
      if (current_block_type === (current_block_type = select_block_type(ctx2)) && if_block0) {
        if_block0.p(ctx2, dirty);
      } else {
        if_block0.d(1);
        if_block0 = current_block_type(ctx2);
        if (if_block0) {
          if_block0.c();
          if_block0.m(div, t2);
        }
      }
      if (
        /*content*/
        ctx2[2]
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block$z(ctx2);
          if_block1.c();
          if_block1.m(div, null);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (dirty & /*mt, mr, mb, ml*/
      240 && div_style_value !== (div_style_value = calculateMargin(
        /*mt*/
        ctx2[4],
        /*mr*/
        ctx2[5],
        /*mb*/
        ctx2[6],
        /*ml*/
        ctx2[7]
      ))) {
        attr(div, "style", div_style_value);
      }
      if (dirty & /*testid*/
      2) {
        attr(
          div,
          "data-testid",
          /*testid*/
          ctx2[1]
        );
      }
      if (dirty & /*type*/
      1 && div_class_value !== (div_class_value = "goa-badge badge-" + /*type*/
      ctx2[0] + " svelte-yzqr1c")) {
        attr(div, "class", div_class_value);
      }
      if (dirty & /*type, showIconOnly*/
      513) {
        toggle_class(
          div,
          "icon-only",
          /*showIconOnly*/
          ctx2[9]
        );
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if_block0.d();
      if (if_block1) if_block1.d();
    }
  };
}
function instance$13($$self, $$props, $$invalidate) {
  let showIcon;
  let showIconOnly;
  let iconType;
  const [Types, validateType] = typeValidator("Badge type", ["information", "important", "emergency", "success", "dark", "midtone", "light"], true);
  let { type } = $$props;
  let { testid = "" } = $$props;
  let { content = "" } = $$props;
  let { icon = "false" } = $$props;
  let { arialabel = "" } = $$props;
  let { mt = null } = $$props;
  let { mr = null } = $$props;
  let { mb: mb2 = null } = $$props;
  let { ml: ml2 = null } = $$props;
  onMount(() => {
    setTimeout(() => validateType(type), 1);
    if (!showIcon && !content) {
      console.warn("GoABadge must have either then content or icon property set");
    }
    if (showIconOnly && !arialabel) {
      console.warn("GoABadge with icon only requires an arialabel");
    }
  });
  $$self.$$set = ($$props2) => {
    if ("type" in $$props2) $$invalidate(0, type = $$props2.type);
    if ("testid" in $$props2) $$invalidate(1, testid = $$props2.testid);
    if ("content" in $$props2) $$invalidate(2, content = $$props2.content);
    if ("icon" in $$props2) $$invalidate(11, icon = $$props2.icon);
    if ("arialabel" in $$props2) $$invalidate(3, arialabel = $$props2.arialabel);
    if ("mt" in $$props2) $$invalidate(4, mt = $$props2.mt);
    if ("mr" in $$props2) $$invalidate(5, mr = $$props2.mr);
    if ("mb" in $$props2) $$invalidate(6, mb2 = $$props2.mb);
    if ("ml" in $$props2) $$invalidate(7, ml2 = $$props2.ml);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*icon*/
    2048) {
      $$invalidate(8, showIcon = toBoolean(icon));
    }
    if ($$self.$$.dirty & /*showIcon, content*/
    260) {
      $$invalidate(9, showIconOnly = showIcon && !content);
    }
    if ($$self.$$.dirty & /*type*/
    1) {
      $$invalidate(10, iconType = {
        success: "checkmark-circle",
        important: "alert-circle",
        information: "information-circle",
        emergency: "warning",
        dark: "information-circle",
        midtone: "information-circle",
        light: "information-circle"
      }[type]);
    }
  };
  return [
    type,
    testid,
    content,
    arialabel,
    mt,
    mr,
    mb2,
    ml2,
    showIcon,
    showIconOnly,
    iconType,
    icon
  ];
}
class Badge extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$13,
      create_fragment$13,
      safe_not_equal,
      {
        type: 0,
        testid: 1,
        content: 2,
        icon: 11,
        arialabel: 3,
        mt: 4,
        mr: 5,
        mb: 6,
        ml: 7
      },
      add_css$Y
    );
  }
  get type() {
    return this.$$.ctx[0];
  }
  set type(type) {
    this.$$set({ type });
    flush();
  }
  get testid() {
    return this.$$.ctx[1];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
  get content() {
    return this.$$.ctx[2];
  }
  set content(content) {
    this.$$set({ content });
    flush();
  }
  get icon() {
    return this.$$.ctx[11];
  }
  set icon(icon) {
    this.$$set({ icon });
    flush();
  }
  get arialabel() {
    return this.$$.ctx[3];
  }
  set arialabel(arialabel) {
    this.$$set({ arialabel });
    flush();
  }
  get mt() {
    return this.$$.ctx[4];
  }
  set mt(mt) {
    this.$$set({ mt });
    flush();
  }
  get mr() {
    return this.$$.ctx[5];
  }
  set mr(mr) {
    this.$$set({ mr });
    flush();
  }
  get mb() {
    return this.$$.ctx[6];
  }
  set mb(mb2) {
    this.$$set({ mb: mb2 });
    flush();
  }
  get ml() {
    return this.$$.ctx[7];
  }
  set ml(ml2) {
    this.$$set({ ml: ml2 });
    flush();
  }
}
customElements.define("goa-badge", create_custom_element(Badge, { "type": {}, "testid": {}, "content": {}, "icon": {}, "arialabel": {}, "mt": {}, "mr": {}, "mb": {}, "ml": {} }, [], [], true));
function add_css$X(target) {
  append_styles(target, "svelte-lif1us", ".block.svelte-lif1us{display:flex;flex-direction:var(--direction);align-items:var(--alignment);gap:var(--gap)}");
}
function create_fragment$12(ctx) {
  let div;
  let div_style_value;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[10].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[9],
    null
  );
  return {
    c() {
      div = element("div");
      if (default_slot) default_slot.c();
      attr(div, "class", "block svelte-lif1us");
      attr(div, "style", div_style_value = `
    ${calculateMargin(
        /*mt*/
        ctx[3],
        /*mr*/
        ctx[4],
        /*mb*/
        ctx[5],
        /*ml*/
        ctx[6]
      )};
    --gap: var(--goa-space-${/*gap*/
      ctx[0]});
    --alignment: ${/*_alignment*/
      ctx[7]};
    --direction: ${/*direction*/
      ctx[1]};
  `);
      attr(
        div,
        "data-testid",
        /*testid*/
        ctx[2]
      );
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        512)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[9],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[9]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[9],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*mt, mr, mb, ml, gap, _alignment, direction*/
      251 && div_style_value !== (div_style_value = `
    ${calculateMargin(
        /*mt*/
        ctx2[3],
        /*mr*/
        ctx2[4],
        /*mb*/
        ctx2[5],
        /*ml*/
        ctx2[6]
      )};
    --gap: var(--goa-space-${/*gap*/
      ctx2[0]});
    --alignment: ${/*_alignment*/
      ctx2[7]};
    --direction: ${/*direction*/
      ctx2[1]};
  `)) {
        attr(div, "style", div_style_value);
      }
      if (!current || dirty & /*testid*/
      4) {
        attr(
          div,
          "data-testid",
          /*testid*/
          ctx2[2]
        );
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (default_slot) default_slot.d(detaching);
    }
  };
}
function instance$12($$self, $$props, $$invalidate) {
  let _alignment;
  let { $$slots: slots = {}, $$scope } = $$props;
  let { gap = "m" } = $$props;
  let { direction = "row" } = $$props;
  let { alignment = "normal" } = $$props;
  let { testid = "" } = $$props;
  let { mt = null } = $$props;
  let { mr = null } = $$props;
  let { mb: mb2 = null } = $$props;
  let { ml: ml2 = null } = $$props;
  $$self.$$set = ($$props2) => {
    if ("gap" in $$props2) $$invalidate(0, gap = $$props2.gap);
    if ("direction" in $$props2) $$invalidate(1, direction = $$props2.direction);
    if ("alignment" in $$props2) $$invalidate(8, alignment = $$props2.alignment);
    if ("testid" in $$props2) $$invalidate(2, testid = $$props2.testid);
    if ("mt" in $$props2) $$invalidate(3, mt = $$props2.mt);
    if ("mr" in $$props2) $$invalidate(4, mr = $$props2.mr);
    if ("mb" in $$props2) $$invalidate(5, mb2 = $$props2.mb);
    if ("ml" in $$props2) $$invalidate(6, ml2 = $$props2.ml);
    if ("$$scope" in $$props2) $$invalidate(9, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*alignment*/
    256) {
      $$invalidate(7, _alignment = alignment === "start" ? "flex-start" : alignment === "end" ? "flex-end" : alignment === "center" ? "center" : "normal");
    }
  };
  return [gap, direction, testid, mt, mr, mb2, ml2, _alignment, alignment, $$scope, slots];
}
class Block extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$12,
      create_fragment$12,
      safe_not_equal,
      {
        gap: 0,
        direction: 1,
        alignment: 8,
        testid: 2,
        mt: 3,
        mr: 4,
        mb: 5,
        ml: 6
      },
      add_css$X
    );
  }
  get gap() {
    return this.$$.ctx[0];
  }
  set gap(gap) {
    this.$$set({ gap });
    flush();
  }
  get direction() {
    return this.$$.ctx[1];
  }
  set direction(direction) {
    this.$$set({ direction });
    flush();
  }
  get alignment() {
    return this.$$.ctx[8];
  }
  set alignment(alignment) {
    this.$$set({ alignment });
    flush();
  }
  get testid() {
    return this.$$.ctx[2];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
  get mt() {
    return this.$$.ctx[3];
  }
  set mt(mt) {
    this.$$set({ mt });
    flush();
  }
  get mr() {
    return this.$$.ctx[4];
  }
  set mr(mr) {
    this.$$set({ mr });
    flush();
  }
  get mb() {
    return this.$$.ctx[5];
  }
  set mb(mb2) {
    this.$$set({ mb: mb2 });
    flush();
  }
  get ml() {
    return this.$$.ctx[6];
  }
  set ml(ml2) {
    this.$$set({ ml: ml2 });
    flush();
  }
}
customElements.define("goa-block", create_custom_element(Block, { "gap": {}, "direction": {}, "alignment": {}, "testid": {}, "mt": {}, "mr": {}, "mb": {}, "ml": {} }, ["default"], [], true));
function add_css$W(target) {
  append_styles(target, "svelte-18ibze2", ":host{--goa-button-border-radius:var(--goa-border-radius-m);--goa-button-padding-lr:var(--goa-space-s);--goa-button-padding-lr-compact:var(--goa-space-xs);--goa-button-padding-lr-start:var(--goa-space-m);--goa-button-default-typography:var(--goa-font-weight-regular) var(--goa-font-size-5)/var(--goa-line-height-1) var(--goa-font-family-sans);--goa-button-compact-typography:var(--goa-font-weight-regular) var(--goa-font-size-4)/var(--goa-line-height-05) var(--goa-font-family-sans);--goa-button-start-typography:var(--goa-font-weight-bold) var(--goa-font-size-5)/var(--goa-line-height-1) var(--goa-font-family-sans);--goa-button-height:2.625rem;--goa-button-compact-height:2rem;--goa-button-start-height:3.25rem;--goa-button-gap:var(--goa-space-xs);--goa-button-compact-gap:6px;--goa-button-icon-size:var(--goa-icon-size-3);--goa-button-compact-icon-size:var(--goa-icon-size-2);--goa-button-primary-color-bg:var(--goa-color-interactive-default);--goa-button-primary-color-text:var(--goa-color-text-light);--goa-button-primary-border:none;--goa-button-primary-hover-color-bg:var(--goa-color-interactive-hover);--goa-button-primary-hover-color-text:var(--goa-color-text-light);--goa-button-primary-hover-border:none;--goa-button-primary-focus-color-bg:var(--goa-color-interactive-hover);--goa-button-primary-focus-color-text:var(--goa-color-text-light);--goa-button-primary-focus-border:none;--goa-button-primary-destructive-color-bg:var(--goa-color-emergency-default);--goa-button-primary-destructive-hover-color-bg:var(--goa-color-emergency-dark);--goa-button-primary-destructive-hover-color-text:var(--goa-color-text-light);--goa-button-primary-destructive-focus-color-bg:var(--goa-color-emergency-dark);--goa-button-primary-inverse-color-bg:var(--goa-color-greyscale-white);--goa-button-primary-inverse-color-text:var(--goa-color-text-default);--goa-button-primary-inverse-hover-color-bg:var(--goa-color-interactive-hover);--goa-button-primary-inverse-hover-color-text:var(--goa-color-greyscale-white);--goa-button-primary-inverse-focus-color-bg:var(--goa-color-interactive-hover);--goa-button-secondary-color-bg:var(--goa-color-greyscale-white);--goa-button-secondary-color-text:var(--goa-color-interactive-default);--goa-button-secondary-border:var(--goa-border-width-m) solid var(--goa-color-interactive-default);--goa-button-secondary-hover-color-bg:var(--goa-color-greyscale-100);--goa-button-secondary-hover-color-text:var(--goa-color-interactive-hover);--goa-button-secondary-hover-border:var(--goa-border-width-m) solid var(--goa-color-interactive-hover);--goa-button-secondary-focus-color-bg:var(--goa-color-greyscale-100);--goa-button-secondary-focus-color-text:var(--goa-color-interactive-hover);--goa-button-secondary-focus-border:var(--goa-border-width-m) solid var(--goa-color-interactive-hover);--goa-button-secondary-destructive-color-text:var(--goa-color-emergency-default);--goa-button-secondary-destructive-border:var(--goa-border-width-m) solid var(--goa-color-emergency-default);--goa-button-secondary-destructive-hover-border:var(--goa-border-width-m) solid var(--goa-color-emergency-dark);--goa-button-secondary-destructive-hover-color-text:var(--goa-color-emergency-dark);--goa-button-secondary-destructive-focus-color-text:var(--goa-color-emergency-dark);--goa-button-secondary-destructive-focus-border:var(--goa-border-width-m) solid var(--goa-color-emergency-dark);--goa-button-secondary-inverse-color-text:var(--goa-color-greyscale-white);--goa-button-secondary-inverse-color-bg:transparent;--goa-button-secondary-inverse-border:var(--goa-border-width-m) solid var(--goa-color-greyscale-white);--goa-button-secondary-inverse-hover-border:var(--goa-border-width-m) solid var(--goa-color-interactive-hover);--goa-button-secondary-inverse-hover-color-text:var(--goa-color-interactive-hover);--goa-button-secondary-inverse-focus-color-text:var(--goa-color-interactive-hover);--goa-button-secondary-inverse-focus-border:var(--goa-border-width-m) solid var(--goa-color-interactive-hover);--goa-button-tertiary-color-bg:none;--goa-button-tertiary-color-bg-mobile:var(--goa-color-greyscale-100);--goa-button-tertiary-color-text:var(--goa-color-interactive-default);--goa-button-tertiary-border:none;--goa-button-tertiary-hover-color-bg:var(--goa-color-greyscale-100);--goa-button-tertiary-hover-color-text:var(--goa-color-interactive-hover);--goa-button-tertiary-focus-color-bg:var(--goa-color-greyscale-100);--goa-button-tertiary-focus-color-text:var(--goa-color-interactive-hover);--goa-button-tertiary-destructive-color-text:var(--goa-color-emergency-default);--goa-button-tertiary-destructive-hover-color-text:var(--goa-color-emergency-dark);--goa-button-tertiary-destructive-focus-color-text:var(--goa-color-emergency-dark);--goa-button-tertiary-inverse-color-text:var(--goa-color-greyscale-white);--goa-button-tertiary-inverse-hover-color-text:var(--goa-color-interactive-hover);--goa-button-tertiary-inverse-focus-color-text:var(--goa-color-interactive-hover)}button.svelte-18ibze2{display:inline-flex;box-sizing:border-box;border-radius:var(--goa-button-border-radius);cursor:pointer;font:var(--goa-button-default-typography);height:var(--goa-button-height);letter-spacing:var(--goa-letter-spacing-button);padding:0 var(--goa-button-padding-lr);white-space:nowrap;gap:var(--goa-button-gap);align-items:center;justify-content:center;transition:transform 0.1s ease-in-out,\n      background-color 0.2s ease-in-out,\n      border-color 0.2s ease-in-out,\n      color 0.2s ease-in-out}button.svelte-18ibze2:active{transform:translateY(2px)}button.svelte-18ibze2:focus-visible{box-shadow:0 0 0 var(--goa-border-width-l) var(--goa-color-interactive-focus)}@media(max-width: 623px){:host{width:100%}button.svelte-18ibze2{width:100%;display:flex}button.tertiary.svelte-18ibze2{background-color:var(--goa-button-tertiary-color-bg-mobile) !important}button.tertiary.svelte-18ibze2:hover{background-color:var(--goa-color-greyscale-200) !important}button.tertiary.inverse.svelte-18ibze2{background-color:var(--goa-button-tertiary-color-bg) !important}button.tertiary.inverse.svelte-18ibze2:hover{background-color:var(--goa-color-greyscale-200) !important}}.icon.svelte-18ibze2{width:var(--goa-button-icon-size);height:var(--goa-button-icon-size)}.icon.compact.svelte-18ibze2{width:var(--goa-button-compact-icon-size);height:var(--goa-button-compact-icon-size)}.text.svelte-18ibze2{padding-bottom:0.2rem}button.compact.svelte-18ibze2{height:var(--goa-button-compact-height);font:var(--goa-button-compact-typography);padding:0 var(--goa-button-padding-lr-compact);gap:var(--goa-button-compact-gap)}button.start.svelte-18ibze2{height:var(--goa-button-start-height);font:var(--goa-button-start-typography);padding:0 var(--goa-button-padding-lr-start);letter-spacing:var(--goa-letter-spacing-button)}button.start.svelte-18ibze2,button.submit.svelte-18ibze2,button.primary.svelte-18ibze2{border:var(--goa-button-primary-border);background-color:var(--goa-button-primary-color-bg);color:var(--goa-button-primary-color-text)}button.svelte-18ibze2:hover{background-color:var(--goa-button-primary-hover-color-bg)}button.svelte-18ibze2:focus,button.svelte-18ibze2:active{border-color:var(--goa-button-primary-hover-border);background-color:var(--goa-button-primary-focus-color-bg);outline:none}button.secondary.svelte-18ibze2{border:var(--goa-button-secondary-border);background-color:var(--goa-button-secondary-color-bg);color:var(--goa-button-secondary-color-text)}button.secondary.svelte-18ibze2:hover{border:var(--goa-button-secondary-hover-border);color:var(--goa-button-secondary-hover-color-text);background-color:var(--goa-button-secondary-hover-color-bg)}button.secondary.svelte-18ibze2:focus,button.secondary.svelte-18ibze2:active{border:var(--goa-button-secondary-focus-border);background-color:var(--goa-button-secondary-focus-color-bg);color:var(--goa-button-secondary-focus-color-text);outline:none}button.tertiary.svelte-18ibze2{border:var(--goa-button-tertiary-border);background-color:var(--goa-button-tertiary-color-bg);color:var(--goa-button-tertiary-color-text);text-decoration:underline}button.tertiary.svelte-18ibze2:hover{background-color:var(--goa-button-tertiary-hover-color-bg);color:var(--goa-button-tertiary-hover-color-text)}button.tertiary.svelte-18ibze2:focus,button.tertiary.svelte-18ibze2:active{background-color:var(--goa-button-tertiary-focus-color-bg);color:var(--goa-button-tertiary-focus-color-text);outline:none}.submit.destructive.svelte-18ibze2,.primary.destructive.svelte-18ibze2{background-color:var(--goa-button-primary-destructive-color-bg)}.submit.destructive.svelte-18ibze2:hover,.primary.destructive.svelte-18ibze2:hover{background-color:var(--goa-button-primary-destructive-hover-color-bg)}.submit.destructive.svelte-18ibze2:focus,.submit.destructive.svelte-18ibze2:active,.primary.destructive.svelte-18ibze2:focus,.primary.destructive.svelte-18ibze2:active{background-color:var(--goa-button-primary-destructive-focus-color-bg)}.secondary.destructive.svelte-18ibze2{color:var(--goa-button-secondary-destructive-color-text);border:var(--goa-button-secondary-destructive-border)}.secondary.destructive.svelte-18ibze2:hover{color:var(--goa-button-secondary-destructive-hover-color-text);border:var(--goa-button-secondary-destructive-hover-border)}.secondary.destructive.svelte-18ibze2:focus,.secondary.destructive.svelte-18ibze2:active{color:var(--goa-button-secondary-destructive-focus-color-text);border:var(--goa-button-secondary-destructive-focus-border)}.tertiary.destructive.svelte-18ibze2{color:var(--goa-button-tertiary-destructive-color-text)}.tertiary.destructive.svelte-18ibze2:hover{color:var(--goa-button-tertiary-destructive-hover-color-text)}.tertiary.destructive.svelte-18ibze2:focus,.tertiary.destructive.svelte-18ibze2:active{color:var(--goa-button-tertiary-destructive-focus-color-text)}.submit.inverse.svelte-18ibze2,.primary.inverse.svelte-18ibze2{background-color:var(--goa-button-primary-inverse-color-bg);color:var(--goa-button-primary-inverse-color-text)}.submit.inverse.svelte-18ibze2:hover,.primary.inverse.svelte-18ibze2:hover{background-color:var(--goa-button-primary-inverse-hover-color-bg);color:var(--goa-button-primary-inverse-hover-color-text)}.submit.inverse.svelte-18ibze2:focus,.submit.inverse.svelte-18ibze2:active,.primary.inverse.svelte-18ibze2:focus,.primary.inverse.svelte-18ibze2:active{background-color:var(--goa-button-primary-inverse-focus-color-bg)}.secondary.inverse.svelte-18ibze2{color:var(--goa-button-secondary-inverse-color-text);border:var(--goa-button-secondary-inverse-border);background-color:var(--goa-button-secondary-inverse-color-bg)}.secondary.inverse.svelte-18ibze2:hover{color:var(--goa-button-secondary-inverse-hover-color-text);border:var(--goa-button-secondary-inverse-hover-border)}.secondary.inverse.svelte-18ibze2:focus,.secondary.inverse.svelte-18ibze2:active{color:var(--goa-button-secondary-inverse-focus-color-text);border:var(--goa-button-secondary-inverse-focus-border)}.tertiary.inverse.svelte-18ibze2{color:var(--goa-button-tertiary-inverse-color-text)}.tertiary.inverse.svelte-18ibze2:hover{color:var(--goa-button-tertiary-inverse-hover-color-text)}.tertiary.inverse.svelte-18ibze2:focus,.tertiary.inverse.svelte-18ibze2:active{color:var(--goa-button-tertiary-inverse-focus-color-text)}button.svelte-18ibze2:disabled{pointer-events:none;opacity:0.5}");
}
function create_else_block$c(ctx) {
  let t0;
  let span;
  let t1;
  let if_block1_anchor;
  let current;
  let if_block0 = (
    /*leadingicon*/
    ctx[3] && create_if_block_2$e(ctx)
  );
  const default_slot_template = (
    /*#slots*/
    ctx[15].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[14],
    null
  );
  let if_block1 = (
    /*trailingicon*/
    ctx[4] && create_if_block_1$l(ctx)
  );
  return {
    c() {
      if (if_block0) if_block0.c();
      t0 = space();
      span = element("span");
      if (default_slot) default_slot.c();
      t1 = space();
      if (if_block1) if_block1.c();
      if_block1_anchor = empty();
      attr(span, "class", "text svelte-18ibze2");
    },
    m(target, anchor) {
      if (if_block0) if_block0.m(target, anchor);
      insert(target, t0, anchor);
      insert(target, span, anchor);
      if (default_slot) {
        default_slot.m(span, null);
      }
      insert(target, t1, anchor);
      if (if_block1) if_block1.m(target, anchor);
      insert(target, if_block1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*leadingicon*/
        ctx2[3]
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_2$e(ctx2);
          if_block0.c();
          if_block0.m(t0.parentNode, t0);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        16384)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[14],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[14]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[14],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (
        /*trailingicon*/
        ctx2[4]
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block_1$l(ctx2);
          if_block1.c();
          if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(span);
        detach(t1);
        detach(if_block1_anchor);
      }
      if (if_block0) if_block0.d(detaching);
      if (default_slot) default_slot.d(detaching);
      if (if_block1) if_block1.d(detaching);
    }
  };
}
function create_if_block$y(ctx) {
  let span;
  let t2;
  let goa_icon;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[15].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[14],
    null
  );
  return {
    c() {
      span = element("span");
      if (default_slot) default_slot.c();
      t2 = space();
      goa_icon = element("goa-icon");
      attr(span, "class", "text svelte-18ibze2");
      set_custom_element_data(goa_icon, "id", "trailing-icon");
      set_custom_element_data(goa_icon, "size", "4");
      set_custom_element_data(goa_icon, "type", "arrow-forward");
      set_custom_element_data(goa_icon, "inverted", "true");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      if (default_slot) {
        default_slot.m(span, null);
      }
      insert(target, t2, anchor);
      insert(target, goa_icon, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        16384)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[14],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[14]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[14],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(span);
        detach(t2);
        detach(goa_icon);
      }
      if (default_slot) default_slot.d(detaching);
    }
  };
}
function create_if_block_2$e(ctx) {
  let goa_icon;
  return {
    c() {
      goa_icon = element("goa-icon");
      set_custom_element_data(goa_icon, "id", "leading-icon");
      set_custom_element_data(goa_icon, "size", "3");
      set_custom_element_data(
        goa_icon,
        "type",
        /*leadingicon*/
        ctx[3]
      );
      set_custom_element_data(
        goa_icon,
        "inverted",
        /*isButtonDark*/
        ctx[11]
      );
    },
    m(target, anchor) {
      insert(target, goa_icon, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*leadingicon*/
      8) {
        set_custom_element_data(
          goa_icon,
          "type",
          /*leadingicon*/
          ctx2[3]
        );
      }
      if (dirty & /*isButtonDark*/
      2048) {
        set_custom_element_data(
          goa_icon,
          "inverted",
          /*isButtonDark*/
          ctx2[11]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(goa_icon);
      }
    }
  };
}
function create_if_block_1$l(ctx) {
  let goa_icon;
  return {
    c() {
      goa_icon = element("goa-icon");
      set_custom_element_data(goa_icon, "id", "trailing-icon");
      set_custom_element_data(goa_icon, "size", "3");
      set_custom_element_data(
        goa_icon,
        "type",
        /*trailingicon*/
        ctx[4]
      );
      set_custom_element_data(
        goa_icon,
        "inverted",
        /*isButtonDark*/
        ctx[11]
      );
    },
    m(target, anchor) {
      insert(target, goa_icon, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*trailingicon*/
      16) {
        set_custom_element_data(
          goa_icon,
          "type",
          /*trailingicon*/
          ctx2[4]
        );
      }
      if (dirty & /*isButtonDark*/
      2048) {
        set_custom_element_data(
          goa_icon,
          "inverted",
          /*isButtonDark*/
          ctx2[11]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(goa_icon);
      }
    }
  };
}
function create_fragment$11(ctx) {
  let button;
  let current_block_type_index;
  let if_block;
  let button_class_value;
  let button_style_value;
  let button_type_value;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [create_if_block$y, create_else_block$c];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*type*/
      ctx2[0] === "start"
    ) return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      button = element("button");
      if_block.c();
      attr(button, "class", button_class_value = /*type*/
      ctx[0] + " " + /*size*/
      ctx[1] + " " + /*variant*/
      ctx[2] + " svelte-18ibze2");
      attr(button, "style", button_style_value = calculateMargin(
        /*mt*/
        ctx[6],
        /*mr*/
        ctx[7],
        /*mb*/
        ctx[8],
        /*ml*/
        ctx[9]
      ));
      button.disabled = /*isDisabled*/
      ctx[10];
      attr(
        button,
        "data-testid",
        /*testid*/
        ctx[5]
      );
      attr(button, "type", button_type_value = /*type*/
      ctx[0] == "submit" ? (
        /*type*/
        ctx[0]
      ) : "button");
    },
    m(target, anchor) {
      insert(target, button, anchor);
      if_blocks[current_block_type_index].m(button, null);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*clickHandler*/
          ctx[12]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(button, null);
      }
      if (!current || dirty & /*type, size, variant*/
      7 && button_class_value !== (button_class_value = /*type*/
      ctx2[0] + " " + /*size*/
      ctx2[1] + " " + /*variant*/
      ctx2[2] + " svelte-18ibze2")) {
        attr(button, "class", button_class_value);
      }
      if (!current || dirty & /*mt, mr, mb, ml*/
      960 && button_style_value !== (button_style_value = calculateMargin(
        /*mt*/
        ctx2[6],
        /*mr*/
        ctx2[7],
        /*mb*/
        ctx2[8],
        /*ml*/
        ctx2[9]
      ))) {
        attr(button, "style", button_style_value);
      }
      if (!current || dirty & /*isDisabled*/
      1024) {
        button.disabled = /*isDisabled*/
        ctx2[10];
      }
      if (!current || dirty & /*testid*/
      32) {
        attr(
          button,
          "data-testid",
          /*testid*/
          ctx2[5]
        );
      }
      if (!current || dirty & /*type*/
      1 && button_type_value !== (button_type_value = /*type*/
      ctx2[0] == "submit" ? (
        /*type*/
        ctx2[0]
      ) : "button")) {
        attr(button, "type", button_type_value);
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(button);
      }
      if_blocks[current_block_type_index].d();
      mounted = false;
      dispose();
    }
  };
}
function instance$11($$self, $$props, $$invalidate) {
  let isDisabled;
  let isButtonDark;
  let { $$slots: slots = {}, $$scope } = $$props;
  const [Types, validateType] = typeValidator("Button type", ["primary", "submit", "secondary", "tertiary", "start"], true);
  const [Sizes, validateSize] = typeValidator("Button size", ["normal", "compact"], true);
  const [Variants, validateVariant] = typeValidator("Button variant", ["normal", "destructive"], true);
  let { type = "primary" } = $$props;
  let { size = "normal" } = $$props;
  let { variant = "normal" } = $$props;
  let { disabled = "false" } = $$props;
  let { leadingicon = null } = $$props;
  let { trailingicon = null } = $$props;
  let { testid = "" } = $$props;
  let { mt = null } = $$props;
  let { mr = null } = $$props;
  let { mb: mb2 = null } = $$props;
  let { ml: ml2 = null } = $$props;
  onMount(() => {
    validateType(type);
    validateSize(size);
    validateVariant(variant);
  });
  function clickHandler(e) {
    if (!isDisabled && e.target) {
      dispatch$1(e.target, "_click", null, { bubbles: true });
    }
  }
  $$self.$$set = ($$props2) => {
    if ("type" in $$props2) $$invalidate(0, type = $$props2.type);
    if ("size" in $$props2) $$invalidate(1, size = $$props2.size);
    if ("variant" in $$props2) $$invalidate(2, variant = $$props2.variant);
    if ("disabled" in $$props2) $$invalidate(13, disabled = $$props2.disabled);
    if ("leadingicon" in $$props2) $$invalidate(3, leadingicon = $$props2.leadingicon);
    if ("trailingicon" in $$props2) $$invalidate(4, trailingicon = $$props2.trailingicon);
    if ("testid" in $$props2) $$invalidate(5, testid = $$props2.testid);
    if ("mt" in $$props2) $$invalidate(6, mt = $$props2.mt);
    if ("mr" in $$props2) $$invalidate(7, mr = $$props2.mr);
    if ("mb" in $$props2) $$invalidate(8, mb2 = $$props2.mb);
    if ("ml" in $$props2) $$invalidate(9, ml2 = $$props2.ml);
    if ("$$scope" in $$props2) $$invalidate(14, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*disabled*/
    8192) {
      $$invalidate(10, isDisabled = toBoolean(disabled));
    }
    if ($$self.$$.dirty & /*type*/
    1) {
      $$invalidate(11, isButtonDark = type === "primary" || type === "start");
    }
  };
  return [
    type,
    size,
    variant,
    leadingicon,
    trailingicon,
    testid,
    mt,
    mr,
    mb2,
    ml2,
    isDisabled,
    isButtonDark,
    clickHandler,
    disabled,
    $$scope,
    slots
  ];
}
class Button extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$11,
      create_fragment$11,
      safe_not_equal,
      {
        type: 0,
        size: 1,
        variant: 2,
        disabled: 13,
        leadingicon: 3,
        trailingicon: 4,
        testid: 5,
        mt: 6,
        mr: 7,
        mb: 8,
        ml: 9
      },
      add_css$W
    );
  }
  get type() {
    return this.$$.ctx[0];
  }
  set type(type) {
    this.$$set({ type });
    flush();
  }
  get size() {
    return this.$$.ctx[1];
  }
  set size(size) {
    this.$$set({ size });
    flush();
  }
  get variant() {
    return this.$$.ctx[2];
  }
  set variant(variant) {
    this.$$set({ variant });
    flush();
  }
  get disabled() {
    return this.$$.ctx[13];
  }
  set disabled(disabled) {
    this.$$set({ disabled });
    flush();
  }
  get leadingicon() {
    return this.$$.ctx[3];
  }
  set leadingicon(leadingicon) {
    this.$$set({ leadingicon });
    flush();
  }
  get trailingicon() {
    return this.$$.ctx[4];
  }
  set trailingicon(trailingicon) {
    this.$$set({ trailingicon });
    flush();
  }
  get testid() {
    return this.$$.ctx[5];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
  get mt() {
    return this.$$.ctx[6];
  }
  set mt(mt) {
    this.$$set({ mt });
    flush();
  }
  get mr() {
    return this.$$.ctx[7];
  }
  set mr(mr) {
    this.$$set({ mr });
    flush();
  }
  get mb() {
    return this.$$.ctx[8];
  }
  set mb(mb2) {
    this.$$set({ mb: mb2 });
    flush();
  }
  get ml() {
    return this.$$.ctx[9];
  }
  set ml(ml2) {
    this.$$set({ ml: ml2 });
    flush();
  }
}
customElements.define("goa-button", create_custom_element(Button, { "type": {}, "size": {}, "variant": {}, "disabled": {}, "leadingicon": {}, "trailingicon": {}, "testid": {}, "mt": {}, "mr": {}, "mb": {}, "ml": {} }, ["default"], [], true));
function add_css$V(target) {
  append_styles(target, "svelte-omchfi", ":host{--goa-button-group-gap:var(--goa-space-m);--goa-button-group-compact-gap:var(--goa-space-s);box-sizing:border-box;font-family:var(--goa-font-family-sans)}div.svelte-omchfi{display:flex;flex-direction:row;justify-content:var(--alignment);align-items:center;flex-wrap:wrap;gap:var(--gap-size);padding:3px 0;line-height:100%}");
}
function create_fragment$10(ctx) {
  let div;
  let div_style_value;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[9].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[8],
    null
  );
  return {
    c() {
      div = element("div");
      if (default_slot) default_slot.c();
      attr(
        div,
        "data-testid",
        /*testid*/
        ctx[1]
      );
      attr(div, "style", div_style_value = calculateMargin(
        /*mt*/
        ctx[2],
        /*mr*/
        ctx[3],
        /*mb*/
        ctx[4],
        /*ml*/
        ctx[5]
      ) + "; --alignment: " + /*_alignment*/
      ctx[6] + "; --gap-size: " + /*gap*/
      (ctx[0] === "relaxed" ? "var(--goa-button-group-gap)" : "var(--goa-button-group-compact-gap)"));
      attr(div, "class", "svelte-omchfi");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        256)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[8],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[8]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[8],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*testid*/
      2) {
        attr(
          div,
          "data-testid",
          /*testid*/
          ctx2[1]
        );
      }
      if (!current || dirty & /*mt, mr, mb, ml, _alignment, gap*/
      125 && div_style_value !== (div_style_value = calculateMargin(
        /*mt*/
        ctx2[2],
        /*mr*/
        ctx2[3],
        /*mb*/
        ctx2[4],
        /*ml*/
        ctx2[5]
      ) + "; --alignment: " + /*_alignment*/
      ctx2[6] + "; --gap-size: " + /*gap*/
      (ctx2[0] === "relaxed" ? "var(--goa-button-group-gap)" : "var(--goa-button-group-compact-gap)"))) {
        attr(div, "style", div_style_value);
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (default_slot) default_slot.d(detaching);
    }
  };
}
function instance$10($$self, $$props, $$invalidate) {
  let _alignment;
  let { $$slots: slots = {}, $$scope } = $$props;
  let { alignment = "start" } = $$props;
  let { gap = "relaxed" } = $$props;
  let { testid = "" } = $$props;
  let { mt = null } = $$props;
  let { mr = null } = $$props;
  let { mb: mb2 = null } = $$props;
  let { ml: ml2 = null } = $$props;
  const [BUTTON_ALIGNMENTS, validateAlignment] = typeValidator("alignment", ["start", "end", "center"]);
  const [GAPS, validateGap] = typeValidator("gap", ["relaxed", "compact"]);
  onMount(() => {
    validateAlignment(alignment);
    validateGap(gap);
  });
  $$self.$$set = ($$props2) => {
    if ("alignment" in $$props2) $$invalidate(7, alignment = $$props2.alignment);
    if ("gap" in $$props2) $$invalidate(0, gap = $$props2.gap);
    if ("testid" in $$props2) $$invalidate(1, testid = $$props2.testid);
    if ("mt" in $$props2) $$invalidate(2, mt = $$props2.mt);
    if ("mr" in $$props2) $$invalidate(3, mr = $$props2.mr);
    if ("mb" in $$props2) $$invalidate(4, mb2 = $$props2.mb);
    if ("ml" in $$props2) $$invalidate(5, ml2 = $$props2.ml);
    if ("$$scope" in $$props2) $$invalidate(8, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*alignment*/
    128) {
      $$invalidate(6, _alignment = {
        start: "flex-start",
        end: "flex-end",
        center: "center"
      }[alignment]);
    }
  };
  return [gap, testid, mt, mr, mb2, ml2, _alignment, alignment, $$scope, slots];
}
class ButtonGroup extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$10,
      create_fragment$10,
      safe_not_equal,
      {
        alignment: 7,
        gap: 0,
        testid: 1,
        mt: 2,
        mr: 3,
        mb: 4,
        ml: 5
      },
      add_css$V
    );
  }
  get alignment() {
    return this.$$.ctx[7];
  }
  set alignment(alignment) {
    this.$$set({ alignment });
    flush();
  }
  get gap() {
    return this.$$.ctx[0];
  }
  set gap(gap) {
    this.$$set({ gap });
    flush();
  }
  get testid() {
    return this.$$.ctx[1];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
  get mt() {
    return this.$$.ctx[2];
  }
  set mt(mt) {
    this.$$set({ mt });
    flush();
  }
  get mr() {
    return this.$$.ctx[3];
  }
  set mr(mr) {
    this.$$set({ mr });
    flush();
  }
  get mb() {
    return this.$$.ctx[4];
  }
  set mb(mb2) {
    this.$$set({ mb: mb2 });
    flush();
  }
  get ml() {
    return this.$$.ctx[5];
  }
  set ml(ml2) {
    this.$$set({ ml: ml2 });
    flush();
  }
}
customElements.define("goa-button-group", create_custom_element(ButtonGroup, { "alignment": {}, "gap": {}, "testid": {}, "mt": {}, "mr": {}, "mb": {}, "ml": {} }, ["default"], [], true));
function toDate(argument) {
  const argStr = Object.prototype.toString.call(argument);
  if (argument instanceof Date || typeof argument === "object" && argStr === "[object Date]") {
    return new argument.constructor(+argument);
  } else if (typeof argument === "number" || argStr === "[object Number]" || typeof argument === "string" || argStr === "[object String]") {
    return new Date(argument);
  } else {
    return /* @__PURE__ */ new Date(NaN);
  }
}
function constructFrom(date, value) {
  if (date instanceof Date) {
    return new date.constructor(value);
  } else {
    return new Date(value);
  }
}
function addDays(date, amount) {
  const _date = toDate(date);
  if (isNaN(amount)) return constructFrom(date, NaN);
  if (!amount) {
    return _date;
  }
  _date.setDate(_date.getDate() + amount);
  return _date;
}
function addMonths(date, amount) {
  const _date = toDate(date);
  if (isNaN(amount)) return constructFrom(date, NaN);
  if (!amount) {
    return _date;
  }
  const dayOfMonth = _date.getDate();
  const endOfDesiredMonth = constructFrom(date, _date.getTime());
  endOfDesiredMonth.setMonth(_date.getMonth() + amount + 1, 0);
  const daysInMonth = endOfDesiredMonth.getDate();
  if (dayOfMonth >= daysInMonth) {
    return endOfDesiredMonth;
  } else {
    _date.setFullYear(
      endOfDesiredMonth.getFullYear(),
      endOfDesiredMonth.getMonth(),
      dayOfMonth
    );
    return _date;
  }
}
const millisecondsInWeek = 6048e5;
const millisecondsInDay = 864e5;
const millisecondsInMinute = 6e4;
const millisecondsInHour = 36e5;
let defaultOptions = {};
function getDefaultOptions() {
  return defaultOptions;
}
function startOfWeek(date, options) {
  var _a, _b, _c, _d;
  const defaultOptions2 = getDefaultOptions();
  const weekStartsOn = (options == null ? void 0 : options.weekStartsOn) ?? ((_b = (_a = options == null ? void 0 : options.locale) == null ? void 0 : _a.options) == null ? void 0 : _b.weekStartsOn) ?? defaultOptions2.weekStartsOn ?? ((_d = (_c = defaultOptions2.locale) == null ? void 0 : _c.options) == null ? void 0 : _d.weekStartsOn) ?? 0;
  const _date = toDate(date);
  const day = _date.getDay();
  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  _date.setDate(_date.getDate() - diff);
  _date.setHours(0, 0, 0, 0);
  return _date;
}
function startOfISOWeek(date) {
  return startOfWeek(date, { weekStartsOn: 1 });
}
function getISOWeekYear(date) {
  const _date = toDate(date);
  const year = _date.getFullYear();
  const fourthOfJanuaryOfNextYear = constructFrom(date, 0);
  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);
  const startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);
  const fourthOfJanuaryOfThisYear = constructFrom(date, 0);
  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);
  const startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);
  if (_date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (_date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}
function startOfDay(date) {
  const _date = toDate(date);
  _date.setHours(0, 0, 0, 0);
  return _date;
}
function getTimezoneOffsetInMilliseconds(date) {
  const _date = toDate(date);
  const utcDate = new Date(
    Date.UTC(
      _date.getFullYear(),
      _date.getMonth(),
      _date.getDate(),
      _date.getHours(),
      _date.getMinutes(),
      _date.getSeconds(),
      _date.getMilliseconds()
    )
  );
  utcDate.setUTCFullYear(_date.getFullYear());
  return +date - +utcDate;
}
function differenceInCalendarDays(dateLeft, dateRight) {
  const startOfDayLeft = startOfDay(dateLeft);
  const startOfDayRight = startOfDay(dateRight);
  const timestampLeft = +startOfDayLeft - getTimezoneOffsetInMilliseconds(startOfDayLeft);
  const timestampRight = +startOfDayRight - getTimezoneOffsetInMilliseconds(startOfDayRight);
  return Math.round((timestampLeft - timestampRight) / millisecondsInDay);
}
function startOfISOWeekYear(date) {
  const year = getISOWeekYear(date);
  const fourthOfJanuary = constructFrom(date, 0);
  fourthOfJanuary.setFullYear(year, 0, 4);
  fourthOfJanuary.setHours(0, 0, 0, 0);
  return startOfISOWeek(fourthOfJanuary);
}
function addYears(date, amount) {
  return addMonths(date, amount * 12);
}
function isSameDay(dateLeft, dateRight) {
  const dateLeftStartOfDay = startOfDay(dateLeft);
  const dateRightStartOfDay = startOfDay(dateRight);
  return +dateLeftStartOfDay === +dateRightStartOfDay;
}
function isDate(value) {
  return value instanceof Date || typeof value === "object" && Object.prototype.toString.call(value) === "[object Date]";
}
function isValid(date) {
  if (!isDate(date) && typeof date !== "number") {
    return false;
  }
  const _date = toDate(date);
  return !isNaN(Number(_date));
}
function startOfYear(date) {
  const cleanDate = toDate(date);
  const _date = constructFrom(date, 0);
  _date.setFullYear(cleanDate.getFullYear(), 0, 1);
  _date.setHours(0, 0, 0, 0);
  return _date;
}
const formatDistanceLocale = {
  lessThanXSeconds: {
    one: "less than a second",
    other: "less than {{count}} seconds"
  },
  xSeconds: {
    one: "1 second",
    other: "{{count}} seconds"
  },
  halfAMinute: "half a minute",
  lessThanXMinutes: {
    one: "less than a minute",
    other: "less than {{count}} minutes"
  },
  xMinutes: {
    one: "1 minute",
    other: "{{count}} minutes"
  },
  aboutXHours: {
    one: "about 1 hour",
    other: "about {{count}} hours"
  },
  xHours: {
    one: "1 hour",
    other: "{{count}} hours"
  },
  xDays: {
    one: "1 day",
    other: "{{count}} days"
  },
  aboutXWeeks: {
    one: "about 1 week",
    other: "about {{count}} weeks"
  },
  xWeeks: {
    one: "1 week",
    other: "{{count}} weeks"
  },
  aboutXMonths: {
    one: "about 1 month",
    other: "about {{count}} months"
  },
  xMonths: {
    one: "1 month",
    other: "{{count}} months"
  },
  aboutXYears: {
    one: "about 1 year",
    other: "about {{count}} years"
  },
  xYears: {
    one: "1 year",
    other: "{{count}} years"
  },
  overXYears: {
    one: "over 1 year",
    other: "over {{count}} years"
  },
  almostXYears: {
    one: "almost 1 year",
    other: "almost {{count}} years"
  }
};
const formatDistance = (token, count, options) => {
  let result;
  const tokenValue = formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }
  if (options == null ? void 0 : options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "in " + result;
    } else {
      return result + " ago";
    }
  }
  return result;
};
function buildFormatLongFn(args) {
  return (options = {}) => {
    const width = options.width ? String(options.width) : args.defaultWidth;
    const format2 = args.formats[width] || args.formats[args.defaultWidth];
    return format2;
  };
}
const dateFormats = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
};
const timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
const dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
const formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: "full"
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: "full"
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: "full"
  })
};
const formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: "P"
};
const formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
function buildLocalizeFn(args) {
  return (value, options) => {
    const context = (options == null ? void 0 : options.context) ? String(options.context) : "standalone";
    let valuesArray;
    if (context === "formatting" && args.formattingValues) {
      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      const width = (options == null ? void 0 : options.width) ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      const defaultWidth = args.defaultWidth;
      const width = (options == null ? void 0 : options.width) ? String(options.width) : args.defaultWidth;
      valuesArray = args.values[width] || args.values[defaultWidth];
    }
    const index = args.argumentCallback ? args.argumentCallback(value) : value;
    return valuesArray[index];
  };
}
const eraValues = {
  narrow: ["B", "A"],
  abbreviated: ["BC", "AD"],
  wide: ["Before Christ", "Anno Domini"]
};
const quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
};
const monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
  ],
  wide: [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  ]
};
const dayValues = {
  narrow: ["S", "M", "T", "W", "T", "F", "S"],
  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  wide: [
    "Sunday",
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday"
  ]
};
const dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  }
};
const formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  }
};
const ordinalNumber = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);
  const rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + "st";
      case 2:
        return number + "nd";
      case 3:
        return number + "rd";
    }
  }
  return number + "th";
};
const localize = {
  ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: "wide"
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: "wide"
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
function buildMatchFn(args) {
  return (string, options = {}) => {
    const width = options.width;
    const matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    const matchResult = string.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    const matchedString = matchResult[0];
    const parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    const key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString)) : (
      // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type
      findKey(parsePatterns, (pattern) => pattern.test(matchedString))
    );
    let value;
    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options.valueCallback ? (
      // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type
      options.valueCallback(value)
    ) : value;
    const rest = string.slice(matchedString.length);
    return { value, rest };
  };
}
function findKey(object, predicate) {
  for (const key in object) {
    if (Object.prototype.hasOwnProperty.call(object, key) && predicate(object[key])) {
      return key;
    }
  }
  return void 0;
}
function findIndex(array, predicate) {
  for (let key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
  return void 0;
}
function buildMatchPatternFn(args) {
  return (string, options = {}) => {
    const matchResult = string.match(args.matchPattern);
    if (!matchResult) return null;
    const matchedString = matchResult[0];
    const parseResult = string.match(args.parsePattern);
    if (!parseResult) return null;
    let value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    const rest = string.slice(matchedString.length);
    return { value, rest };
  };
}
const matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
const parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
const matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
const parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
const matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
const parseMonthPatterns = {
  narrow: [
    /^j/i,
    /^f/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^j/i,
    /^j/i,
    /^a/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i
  ],
  any: [
    /^ja/i,
    /^f/i,
    /^mar/i,
    /^ap/i,
    /^may/i,
    /^jun/i,
    /^jul/i,
    /^au/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i
  ]
};
const matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
const parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
const matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
const parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
const match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: (value) => parseInt(value, 10)
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
const enUS = {
  code: "en-US",
  formatDistance,
  formatLong,
  formatRelative,
  localize,
  match,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
function getDayOfYear(date) {
  const _date = toDate(date);
  const diff = differenceInCalendarDays(_date, startOfYear(_date));
  const dayOfYear = diff + 1;
  return dayOfYear;
}
function getISOWeek(date) {
  const _date = toDate(date);
  const diff = +startOfISOWeek(_date) - +startOfISOWeekYear(_date);
  return Math.round(diff / millisecondsInWeek) + 1;
}
function getWeekYear(date, options) {
  var _a, _b, _c, _d;
  const _date = toDate(date);
  const year = _date.getFullYear();
  const defaultOptions2 = getDefaultOptions();
  const firstWeekContainsDate = (options == null ? void 0 : options.firstWeekContainsDate) ?? ((_b = (_a = options == null ? void 0 : options.locale) == null ? void 0 : _a.options) == null ? void 0 : _b.firstWeekContainsDate) ?? defaultOptions2.firstWeekContainsDate ?? ((_d = (_c = defaultOptions2.locale) == null ? void 0 : _c.options) == null ? void 0 : _d.firstWeekContainsDate) ?? 1;
  const firstWeekOfNextYear = constructFrom(date, 0);
  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setHours(0, 0, 0, 0);
  const startOfNextYear = startOfWeek(firstWeekOfNextYear, options);
  const firstWeekOfThisYear = constructFrom(date, 0);
  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setHours(0, 0, 0, 0);
  const startOfThisYear = startOfWeek(firstWeekOfThisYear, options);
  if (_date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (_date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}
function startOfWeekYear(date, options) {
  var _a, _b, _c, _d;
  const defaultOptions2 = getDefaultOptions();
  const firstWeekContainsDate = (options == null ? void 0 : options.firstWeekContainsDate) ?? ((_b = (_a = options == null ? void 0 : options.locale) == null ? void 0 : _a.options) == null ? void 0 : _b.firstWeekContainsDate) ?? defaultOptions2.firstWeekContainsDate ?? ((_d = (_c = defaultOptions2.locale) == null ? void 0 : _c.options) == null ? void 0 : _d.firstWeekContainsDate) ?? 1;
  const year = getWeekYear(date, options);
  const firstWeek = constructFrom(date, 0);
  firstWeek.setFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setHours(0, 0, 0, 0);
  const _date = startOfWeek(firstWeek, options);
  return _date;
}
function getWeek(date, options) {
  const _date = toDate(date);
  const diff = +startOfWeek(_date, options) - +startOfWeekYear(_date, options);
  return Math.round(diff / millisecondsInWeek) + 1;
}
function addLeadingZeros(number, targetLength) {
  const sign = number < 0 ? "-" : "";
  const output = Math.abs(number).toString().padStart(targetLength, "0");
  return sign + output;
}
const lightFormatters = {
  // Year
  y(date, token) {
    const signedYear = date.getFullYear();
    const year = signedYear > 0 ? signedYear : 1 - signedYear;
    return addLeadingZeros(token === "yy" ? year % 100 : year, token.length);
  },
  // Month
  M(date, token) {
    const month = date.getMonth();
    return token === "M" ? String(month + 1) : addLeadingZeros(month + 1, 2);
  },
  // Day of the month
  d(date, token) {
    return addLeadingZeros(date.getDate(), token.length);
  },
  // AM or PM
  a(date, token) {
    const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return dayPeriodEnumValue.toUpperCase();
      case "aaa":
        return dayPeriodEnumValue;
      case "aaaaa":
        return dayPeriodEnumValue[0];
      case "aaaa":
      default:
        return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";
    }
  },
  // Hour [1-12]
  h(date, token) {
    return addLeadingZeros(date.getHours() % 12 || 12, token.length);
  },
  // Hour [0-23]
  H(date, token) {
    return addLeadingZeros(date.getHours(), token.length);
  },
  // Minute
  m(date, token) {
    return addLeadingZeros(date.getMinutes(), token.length);
  },
  // Second
  s(date, token) {
    return addLeadingZeros(date.getSeconds(), token.length);
  },
  // Fraction of second
  S(date, token) {
    const numberOfDigits = token.length;
    const milliseconds = date.getMilliseconds();
    const fractionalSeconds = Math.trunc(
      milliseconds * Math.pow(10, numberOfDigits - 3)
    );
    return addLeadingZeros(fractionalSeconds, token.length);
  }
};
const dayPeriodEnum = {
  am: "am",
  pm: "pm",
  midnight: "midnight",
  noon: "noon",
  morning: "morning",
  afternoon: "afternoon",
  evening: "evening",
  night: "night"
};
const formatters = {
  // Era
  G: function(date, token, localize2) {
    const era = date.getFullYear() > 0 ? 1 : 0;
    switch (token) {
      case "G":
      case "GG":
      case "GGG":
        return localize2.era(era, { width: "abbreviated" });
      case "GGGGG":
        return localize2.era(era, { width: "narrow" });
      case "GGGG":
      default:
        return localize2.era(era, { width: "wide" });
    }
  },
  // Year
  y: function(date, token, localize2) {
    if (token === "yo") {
      const signedYear = date.getFullYear();
      const year = signedYear > 0 ? signedYear : 1 - signedYear;
      return localize2.ordinalNumber(year, { unit: "year" });
    }
    return lightFormatters.y(date, token);
  },
  // Local week-numbering year
  Y: function(date, token, localize2, options) {
    const signedWeekYear = getWeekYear(date, options);
    const weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
    if (token === "YY") {
      const twoDigitYear = weekYear % 100;
      return addLeadingZeros(twoDigitYear, 2);
    }
    if (token === "Yo") {
      return localize2.ordinalNumber(weekYear, { unit: "year" });
    }
    return addLeadingZeros(weekYear, token.length);
  },
  // ISO week-numbering year
  R: function(date, token) {
    const isoWeekYear = getISOWeekYear(date);
    return addLeadingZeros(isoWeekYear, token.length);
  },
  // Extended year. This is a single number designating the year of this calendar system.
  // The main difference between `y` and `u` localizers are B.C. years:
  // | Year | `y` | `u` |
  // |------|-----|-----|
  // | AC 1 |   1 |   1 |
  // | BC 1 |   1 |   0 |
  // | BC 2 |   2 |  -1 |
  // Also `yy` always returns the last two digits of a year,
  // while `uu` pads single digit years to 2 characters and returns other years unchanged.
  u: function(date, token) {
    const year = date.getFullYear();
    return addLeadingZeros(year, token.length);
  },
  // Quarter
  Q: function(date, token, localize2) {
    const quarter = Math.ceil((date.getMonth() + 1) / 3);
    switch (token) {
      case "Q":
        return String(quarter);
      case "QQ":
        return addLeadingZeros(quarter, 2);
      case "Qo":
        return localize2.ordinalNumber(quarter, { unit: "quarter" });
      case "QQQ":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "formatting"
        });
      case "QQQQQ":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "formatting"
        });
      case "QQQQ":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone quarter
  q: function(date, token, localize2) {
    const quarter = Math.ceil((date.getMonth() + 1) / 3);
    switch (token) {
      case "q":
        return String(quarter);
      case "qq":
        return addLeadingZeros(quarter, 2);
      case "qo":
        return localize2.ordinalNumber(quarter, { unit: "quarter" });
      case "qqq":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "standalone"
        });
      case "qqqqq":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "standalone"
        });
      case "qqqq":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // Month
  M: function(date, token, localize2) {
    const month = date.getMonth();
    switch (token) {
      case "M":
      case "MM":
        return lightFormatters.M(date, token);
      case "Mo":
        return localize2.ordinalNumber(month + 1, { unit: "month" });
      case "MMM":
        return localize2.month(month, {
          width: "abbreviated",
          context: "formatting"
        });
      case "MMMMM":
        return localize2.month(month, {
          width: "narrow",
          context: "formatting"
        });
      case "MMMM":
      default:
        return localize2.month(month, { width: "wide", context: "formatting" });
    }
  },
  // Stand-alone month
  L: function(date, token, localize2) {
    const month = date.getMonth();
    switch (token) {
      case "L":
        return String(month + 1);
      case "LL":
        return addLeadingZeros(month + 1, 2);
      case "Lo":
        return localize2.ordinalNumber(month + 1, { unit: "month" });
      case "LLL":
        return localize2.month(month, {
          width: "abbreviated",
          context: "standalone"
        });
      case "LLLLL":
        return localize2.month(month, {
          width: "narrow",
          context: "standalone"
        });
      case "LLLL":
      default:
        return localize2.month(month, { width: "wide", context: "standalone" });
    }
  },
  // Local week of year
  w: function(date, token, localize2, options) {
    const week = getWeek(date, options);
    if (token === "wo") {
      return localize2.ordinalNumber(week, { unit: "week" });
    }
    return addLeadingZeros(week, token.length);
  },
  // ISO week of year
  I: function(date, token, localize2) {
    const isoWeek = getISOWeek(date);
    if (token === "Io") {
      return localize2.ordinalNumber(isoWeek, { unit: "week" });
    }
    return addLeadingZeros(isoWeek, token.length);
  },
  // Day of the month
  d: function(date, token, localize2) {
    if (token === "do") {
      return localize2.ordinalNumber(date.getDate(), { unit: "date" });
    }
    return lightFormatters.d(date, token);
  },
  // Day of year
  D: function(date, token, localize2) {
    const dayOfYear = getDayOfYear(date);
    if (token === "Do") {
      return localize2.ordinalNumber(dayOfYear, { unit: "dayOfYear" });
    }
    return addLeadingZeros(dayOfYear, token.length);
  },
  // Day of week
  E: function(date, token, localize2) {
    const dayOfWeek = date.getDay();
    switch (token) {
      case "E":
      case "EE":
      case "EEE":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "EEEEE":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "EEEEEE":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "EEEE":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Local day of week
  e: function(date, token, localize2, options) {
    const dayOfWeek = date.getDay();
    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "e":
        return String(localDayOfWeek);
      case "ee":
        return addLeadingZeros(localDayOfWeek, 2);
      case "eo":
        return localize2.ordinalNumber(localDayOfWeek, { unit: "day" });
      case "eee":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "eeeee":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "eeeeee":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "eeee":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone local day of week
  c: function(date, token, localize2, options) {
    const dayOfWeek = date.getDay();
    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "c":
        return String(localDayOfWeek);
      case "cc":
        return addLeadingZeros(localDayOfWeek, token.length);
      case "co":
        return localize2.ordinalNumber(localDayOfWeek, { unit: "day" });
      case "ccc":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "standalone"
        });
      case "ccccc":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "standalone"
        });
      case "cccccc":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "standalone"
        });
      case "cccc":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // ISO day of week
  i: function(date, token, localize2) {
    const dayOfWeek = date.getDay();
    const isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
    switch (token) {
      case "i":
        return String(isoDayOfWeek);
      case "ii":
        return addLeadingZeros(isoDayOfWeek, token.length);
      case "io":
        return localize2.ordinalNumber(isoDayOfWeek, { unit: "day" });
      case "iii":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "iiiii":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "iiiiii":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "iiii":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM or PM
  a: function(date, token, localize2) {
    const hours = date.getHours();
    const dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "aaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "aaaaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "aaaa":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM, PM, midnight, noon
  b: function(date, token, localize2) {
    const hours = date.getHours();
    let dayPeriodEnumValue;
    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    }
    switch (token) {
      case "b":
      case "bb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "bbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "bbbbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "bbbb":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // in the morning, in the afternoon, in the evening, at night
  B: function(date, token, localize2) {
    const hours = date.getHours();
    let dayPeriodEnumValue;
    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }
    switch (token) {
      case "B":
      case "BB":
      case "BBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "BBBBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "BBBB":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Hour [1-12]
  h: function(date, token, localize2) {
    if (token === "ho") {
      let hours = date.getHours() % 12;
      if (hours === 0) hours = 12;
      return localize2.ordinalNumber(hours, { unit: "hour" });
    }
    return lightFormatters.h(date, token);
  },
  // Hour [0-23]
  H: function(date, token, localize2) {
    if (token === "Ho") {
      return localize2.ordinalNumber(date.getHours(), { unit: "hour" });
    }
    return lightFormatters.H(date, token);
  },
  // Hour [0-11]
  K: function(date, token, localize2) {
    const hours = date.getHours() % 12;
    if (token === "Ko") {
      return localize2.ordinalNumber(hours, { unit: "hour" });
    }
    return addLeadingZeros(hours, token.length);
  },
  // Hour [1-24]
  k: function(date, token, localize2) {
    let hours = date.getHours();
    if (hours === 0) hours = 24;
    if (token === "ko") {
      return localize2.ordinalNumber(hours, { unit: "hour" });
    }
    return addLeadingZeros(hours, token.length);
  },
  // Minute
  m: function(date, token, localize2) {
    if (token === "mo") {
      return localize2.ordinalNumber(date.getMinutes(), { unit: "minute" });
    }
    return lightFormatters.m(date, token);
  },
  // Second
  s: function(date, token, localize2) {
    if (token === "so") {
      return localize2.ordinalNumber(date.getSeconds(), { unit: "second" });
    }
    return lightFormatters.s(date, token);
  },
  // Fraction of second
  S: function(date, token) {
    return lightFormatters.S(date, token);
  },
  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
  X: function(date, token, _localize) {
    const timezoneOffset = date.getTimezoneOffset();
    if (timezoneOffset === 0) {
      return "Z";
    }
    switch (token) {
      case "X":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "XXXX":
      case "XX":
        return formatTimezone(timezoneOffset);
      case "XXXXX":
      case "XXX":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
  x: function(date, token, _localize) {
    const timezoneOffset = date.getTimezoneOffset();
    switch (token) {
      case "x":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "xxxx":
      case "xx":
        return formatTimezone(timezoneOffset);
      case "xxxxx":
      case "xxx":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (GMT)
  O: function(date, token, _localize) {
    const timezoneOffset = date.getTimezoneOffset();
    switch (token) {
      case "O":
      case "OO":
      case "OOO":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "OOOO":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (specific non-location)
  z: function(date, token, _localize) {
    const timezoneOffset = date.getTimezoneOffset();
    switch (token) {
      case "z":
      case "zz":
      case "zzz":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "zzzz":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  // Seconds timestamp
  t: function(date, token, _localize) {
    const timestamp = Math.trunc(date.getTime() / 1e3);
    return addLeadingZeros(timestamp, token.length);
  },
  // Milliseconds timestamp
  T: function(date, token, _localize) {
    const timestamp = date.getTime();
    return addLeadingZeros(timestamp, token.length);
  }
};
function formatTimezoneShort(offset, delimiter = "") {
  const sign = offset > 0 ? "-" : "+";
  const absOffset = Math.abs(offset);
  const hours = Math.trunc(absOffset / 60);
  const minutes = absOffset % 60;
  if (minutes === 0) {
    return sign + String(hours);
  }
  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
}
function formatTimezoneWithOptionalMinutes(offset, delimiter) {
  if (offset % 60 === 0) {
    const sign = offset > 0 ? "-" : "+";
    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
  }
  return formatTimezone(offset, delimiter);
}
function formatTimezone(offset, delimiter = "") {
  const sign = offset > 0 ? "-" : "+";
  const absOffset = Math.abs(offset);
  const hours = addLeadingZeros(Math.trunc(absOffset / 60), 2);
  const minutes = addLeadingZeros(absOffset % 60, 2);
  return sign + hours + delimiter + minutes;
}
const dateLongFormatter = (pattern, formatLong2) => {
  switch (pattern) {
    case "P":
      return formatLong2.date({ width: "short" });
    case "PP":
      return formatLong2.date({ width: "medium" });
    case "PPP":
      return formatLong2.date({ width: "long" });
    case "PPPP":
    default:
      return formatLong2.date({ width: "full" });
  }
};
const timeLongFormatter = (pattern, formatLong2) => {
  switch (pattern) {
    case "p":
      return formatLong2.time({ width: "short" });
    case "pp":
      return formatLong2.time({ width: "medium" });
    case "ppp":
      return formatLong2.time({ width: "long" });
    case "pppp":
    default:
      return formatLong2.time({ width: "full" });
  }
};
const dateTimeLongFormatter = (pattern, formatLong2) => {
  const matchResult = pattern.match(/(P+)(p+)?/) || [];
  const datePattern = matchResult[1];
  const timePattern = matchResult[2];
  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong2);
  }
  let dateTimeFormat;
  switch (datePattern) {
    case "P":
      dateTimeFormat = formatLong2.dateTime({ width: "short" });
      break;
    case "PP":
      dateTimeFormat = formatLong2.dateTime({ width: "medium" });
      break;
    case "PPP":
      dateTimeFormat = formatLong2.dateTime({ width: "long" });
      break;
    case "PPPP":
    default:
      dateTimeFormat = formatLong2.dateTime({ width: "full" });
      break;
  }
  return dateTimeFormat.replace("{{date}}", dateLongFormatter(datePattern, formatLong2)).replace("{{time}}", timeLongFormatter(timePattern, formatLong2));
};
const longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};
const dayOfYearTokenRE = /^D+$/;
const weekYearTokenRE = /^Y+$/;
const throwTokens = ["D", "DD", "YY", "YYYY"];
function isProtectedDayOfYearToken(token) {
  return dayOfYearTokenRE.test(token);
}
function isProtectedWeekYearToken(token) {
  return weekYearTokenRE.test(token);
}
function warnOrThrowProtectedError(token, format2, input) {
  const _message = message(token, format2, input);
  console.warn(_message);
  if (throwTokens.includes(token)) throw new RangeError(_message);
}
function message(token, format2, input) {
  const subject = token[0] === "Y" ? "years" : "days of the month";
  return `Use \`${token.toLowerCase()}\` instead of \`${token}\` (in \`${format2}\`) for formatting ${subject} to the input \`${input}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`;
}
const formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
const longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
const escapedStringRegExp = /^'([^]*?)'?$/;
const doubleQuoteRegExp = /''/g;
const unescapedLatinCharacterRegExp = /[a-zA-Z]/;
function format(date, formatStr, options) {
  var _a, _b, _c, _d;
  const defaultOptions2 = getDefaultOptions();
  const locale = defaultOptions2.locale ?? enUS;
  const firstWeekContainsDate = defaultOptions2.firstWeekContainsDate ?? ((_b = (_a = defaultOptions2.locale) == null ? void 0 : _a.options) == null ? void 0 : _b.firstWeekContainsDate) ?? 1;
  const weekStartsOn = defaultOptions2.weekStartsOn ?? ((_d = (_c = defaultOptions2.locale) == null ? void 0 : _c.options) == null ? void 0 : _d.weekStartsOn) ?? 0;
  const originalDate = toDate(date);
  if (!isValid(originalDate)) {
    throw new RangeError("Invalid time value");
  }
  let parts = formatStr.match(longFormattingTokensRegExp).map((substring) => {
    const firstCharacter = substring[0];
    if (firstCharacter === "p" || firstCharacter === "P") {
      const longFormatter = longFormatters[firstCharacter];
      return longFormatter(substring, locale.formatLong);
    }
    return substring;
  }).join("").match(formattingTokensRegExp).map((substring) => {
    if (substring === "''") {
      return { isToken: false, value: "'" };
    }
    const firstCharacter = substring[0];
    if (firstCharacter === "'") {
      return { isToken: false, value: cleanEscapedString(substring) };
    }
    if (formatters[firstCharacter]) {
      return { isToken: true, value: substring };
    }
    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
      throw new RangeError(
        "Format string contains an unescaped latin alphabet character `" + firstCharacter + "`"
      );
    }
    return { isToken: false, value: substring };
  });
  if (locale.localize.preprocessor) {
    parts = locale.localize.preprocessor(originalDate, parts);
  }
  const formatterOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale
  };
  return parts.map((part) => {
    if (!part.isToken) return part.value;
    const token = part.value;
    if (isProtectedWeekYearToken(token) || isProtectedDayOfYearToken(token)) {
      warnOrThrowProtectedError(token, formatStr, String(date));
    }
    const formatter = formatters[token[0]];
    return formatter(originalDate, token, locale.localize, formatterOptions);
  }).join("");
}
function cleanEscapedString(input) {
  const matched = input.match(escapedStringRegExp);
  if (!matched) {
    return input;
  }
  return matched[1].replace(doubleQuoteRegExp, "'");
}
function getDaysInMonth(date) {
  const _date = toDate(date);
  const year = _date.getFullYear();
  const monthIndex = _date.getMonth();
  const lastDayOfMonth2 = constructFrom(date, 0);
  lastDayOfMonth2.setFullYear(year, monthIndex + 1, 0);
  lastDayOfMonth2.setHours(0, 0, 0, 0);
  return lastDayOfMonth2.getDate();
}
function lastDayOfMonth(date) {
  const _date = toDate(date);
  const month = _date.getMonth();
  _date.setFullYear(_date.getFullYear(), month + 1, 0);
  _date.setHours(0, 0, 0, 0);
  return _date;
}
function isAfter(date, dateToCompare) {
  const _date = toDate(date);
  const _dateToCompare = toDate(dateToCompare);
  return _date.getTime() > _dateToCompare.getTime();
}
function isBefore(date, dateToCompare) {
  const _date = toDate(date);
  const _dateToCompare = toDate(dateToCompare);
  return +_date < +_dateToCompare;
}
function isSameMonth(dateLeft, dateRight) {
  const _dateLeft = toDate(dateLeft);
  const _dateRight = toDate(dateRight);
  return _dateLeft.getFullYear() === _dateRight.getFullYear() && _dateLeft.getMonth() === _dateRight.getMonth();
}
function parseISO(argument, options) {
  const additionalDigits = 2;
  const dateStrings = splitDateString(argument);
  let date;
  if (dateStrings.date) {
    const parseYearResult = parseYear(dateStrings.date, additionalDigits);
    date = parseDate(parseYearResult.restDateString, parseYearResult.year);
  }
  if (!date || isNaN(date.getTime())) {
    return /* @__PURE__ */ new Date(NaN);
  }
  const timestamp = date.getTime();
  let time = 0;
  let offset;
  if (dateStrings.time) {
    time = parseTime(dateStrings.time);
    if (isNaN(time)) {
      return /* @__PURE__ */ new Date(NaN);
    }
  }
  if (dateStrings.timezone) {
    offset = parseTimezone(dateStrings.timezone);
    if (isNaN(offset)) {
      return /* @__PURE__ */ new Date(NaN);
    }
  } else {
    const dirtyDate = new Date(timestamp + time);
    const result = /* @__PURE__ */ new Date(0);
    result.setFullYear(
      dirtyDate.getUTCFullYear(),
      dirtyDate.getUTCMonth(),
      dirtyDate.getUTCDate()
    );
    result.setHours(
      dirtyDate.getUTCHours(),
      dirtyDate.getUTCMinutes(),
      dirtyDate.getUTCSeconds(),
      dirtyDate.getUTCMilliseconds()
    );
    return result;
  }
  return new Date(timestamp + time + offset);
}
const patterns = {
  dateTimeDelimiter: /[T ]/,
  timeZoneDelimiter: /[Z ]/i,
  timezone: /([Z+-].*)$/
};
const dateRegex = /^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/;
const timeRegex = /^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/;
const timezoneRegex = /^([+-])(\d{2})(?::?(\d{2}))?$/;
function splitDateString(dateString) {
  const dateStrings = {};
  const array = dateString.split(patterns.dateTimeDelimiter);
  let timeString;
  if (array.length > 2) {
    return dateStrings;
  }
  if (/:/.test(array[0])) {
    timeString = array[0];
  } else {
    dateStrings.date = array[0];
    timeString = array[1];
    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {
      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];
      timeString = dateString.substr(
        dateStrings.date.length,
        dateString.length
      );
    }
  }
  if (timeString) {
    const token = patterns.timezone.exec(timeString);
    if (token) {
      dateStrings.time = timeString.replace(token[1], "");
      dateStrings.timezone = token[1];
    } else {
      dateStrings.time = timeString;
    }
  }
  return dateStrings;
}
function parseYear(dateString, additionalDigits) {
  const regex = new RegExp(
    "^(?:(\\d{4}|[+-]\\d{" + (4 + additionalDigits) + "})|(\\d{2}|[+-]\\d{" + (2 + additionalDigits) + "})$)"
  );
  const captures = dateString.match(regex);
  if (!captures) return { year: NaN, restDateString: "" };
  const year = captures[1] ? parseInt(captures[1]) : null;
  const century = captures[2] ? parseInt(captures[2]) : null;
  return {
    year: century === null ? year : century * 100,
    restDateString: dateString.slice((captures[1] || captures[2]).length)
  };
}
function parseDate(dateString, year) {
  if (year === null) return /* @__PURE__ */ new Date(NaN);
  const captures = dateString.match(dateRegex);
  if (!captures) return /* @__PURE__ */ new Date(NaN);
  const isWeekDate = !!captures[4];
  const dayOfYear = parseDateUnit(captures[1]);
  const month = parseDateUnit(captures[2]) - 1;
  const day = parseDateUnit(captures[3]);
  const week = parseDateUnit(captures[4]);
  const dayOfWeek = parseDateUnit(captures[5]) - 1;
  if (isWeekDate) {
    if (!validateWeekDate(year, week, dayOfWeek)) {
      return /* @__PURE__ */ new Date(NaN);
    }
    return dayOfISOWeekYear(year, week, dayOfWeek);
  } else {
    const date = /* @__PURE__ */ new Date(0);
    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {
      return /* @__PURE__ */ new Date(NaN);
    }
    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));
    return date;
  }
}
function parseDateUnit(value) {
  return value ? parseInt(value) : 1;
}
function parseTime(timeString) {
  const captures = timeString.match(timeRegex);
  if (!captures) return NaN;
  const hours = parseTimeUnit(captures[1]);
  const minutes = parseTimeUnit(captures[2]);
  const seconds = parseTimeUnit(captures[3]);
  if (!validateTime(hours, minutes, seconds)) {
    return NaN;
  }
  return hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1e3;
}
function parseTimeUnit(value) {
  return value && parseFloat(value.replace(",", ".")) || 0;
}
function parseTimezone(timezoneString) {
  if (timezoneString === "Z") return 0;
  const captures = timezoneString.match(timezoneRegex);
  if (!captures) return 0;
  const sign = captures[1] === "+" ? -1 : 1;
  const hours = parseInt(captures[2]);
  const minutes = captures[3] && parseInt(captures[3]) || 0;
  if (!validateTimezone(hours, minutes)) {
    return NaN;
  }
  return sign * (hours * millisecondsInHour + minutes * millisecondsInMinute);
}
function dayOfISOWeekYear(isoWeekYear, week, day) {
  const date = /* @__PURE__ */ new Date(0);
  date.setUTCFullYear(isoWeekYear, 0, 4);
  const fourthOfJanuaryDay = date.getUTCDay() || 7;
  const diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}
const daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
function isLeapYearIndex(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}
function validateDate(year, month, date) {
  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));
}
function validateDayOfYearDate(year, dayOfYear) {
  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);
}
function validateWeekDate(_year, week, day) {
  return week >= 1 && week <= 53 && day >= 0 && day <= 6;
}
function validateTime(hours, minutes, seconds) {
  if (hours === 24) {
    return minutes === 0 && seconds === 0;
  }
  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;
}
function validateTimezone(_hours, minutes) {
  return minutes >= 0 && minutes <= 59;
}
function setDate(date, dayOfMonth) {
  const _date = toDate(date);
  _date.setDate(dayOfMonth);
  return _date;
}
function add_css$U(target) {
  append_styles(target, "svelte-r1rxhs", ":host{--goa-date-input-: ;--goa-date-input-calendar-width:280px;--goa-date-input-calendar-border-radius:var(--goa-border-radius-m);--goa-date-input-day-of-week-font:var(--goa-typography-heading-xs);--goa-date-input-day-of-week-margin:var(--goa-space-xs) 0;--goa-date-input-day-font:var(--goa-typography-body-s);--goa-date-input-day-font-today:var(--goa-typography-heading-xs);--goa-date-input-day-underline-today:var(--goa-border-width-l) solid var(--goa-color-interactive-default);--goa-date-input-day-underline-today-width:var(--goa-space-l);--goa-date-input-day-underline-today-selected:var(--goa-border-width-l) solid var(--goa-color-greyscale-white);--goa-date-input-day-border-radius:var(--goa-border-radius-m);--goa-date-input-day-size:2.5rem;--goa-date-input-day-color-text:var(--goa-color-text-default);--goa-date-input-day-color-bg:transparent;--goa-date-input-day-color-text-hover:var(--goa-color-text-default);--goa-date-input-day-color-bg-hover:var(--goa-color-greyscale-200);--goa-date-input-day-border-focus:var(--goa-border-width-l) solid var(--goa-color-interactive-focus);--goa-date-input-day-color-text-selected:var(--goa-color-text-light);--goa-date-input-day-color-bg-selected:var(--goa-color-interactive-default);--goa-date-input-day-color-text-selected-hover:var(--goa-color-text-light);--goa-date-input-day-color-bg-selected-hover:var(--goa-color-interactive-hover);--goa-date-input-day-color-text-other-month:var(--goa-color-text-secondary);--goa-date-input-day-color-text-disabled:var(--goa-color-text-secondary)}.calendar.svelte-r1rxhs.svelte-r1rxhs{display:grid;justify-items:center;grid-template-columns:repeat(7, 1fr);gap:0px;width:var(--goa-date-input-calendar-width);font:var(--goa-date-input-day-font)}h5.svelte-r1rxhs.svelte-r1rxhs{margin:var(--goa-date-input-day-of-week-margin);font:var(--goa-date-input-day-of-week-font)}.day.svelte-r1rxhs.svelte-r1rxhs{align-items:center;background-color:var(--goa-date-input-day-color-bg);border:none;border-radius:var(--goa-date-input-day-border-radius);color:var(--goa-date-input-day-color-text);display:inline-flex;font:var(--goa-date-input-day-font);justify-content:center;margin:0;width:var(--goa-date-input-day-size);height:var(--goa-date-input-day-size)}.day.other-month.svelte-r1rxhs.svelte-r1rxhs{color:var(--goa-date-input-day-color-text-other-month)}.day.today.svelte-r1rxhs.svelte-r1rxhs{font:var(--goa-date-input-day-font-today)}.day.svelte-r1rxhs.svelte-r1rxhs:focus-within{outline:var(--goa-date-input-day-border-focus);z-index:1000;background-color:none}.day.svelte-r1rxhs.svelte-r1rxhs:hover{background-color:var(--goa-date-input-day-color-bg-hover);color:var(--goa-date-input-day-color-text-hover);cursor:pointer}.day.svelte-r1rxhs.svelte-r1rxhs:focus-within:hover{background-color:transparent}.day.selected.svelte-r1rxhs.svelte-r1rxhs{background-color:var(--goa-date-input-day-color-bg-selected);color:var(--goa-date-input-day-color-text-selected)}.day.selected.svelte-r1rxhs.svelte-r1rxhs:hover{background-color:var(--goa-date-input-day-color-bg-selected-hover);color:var(--goa-date-input-day-color-text-selected-hover)}.day.selected.svelte-r1rxhs.svelte-r1rxhs:focus-within:hover{background-color:var(--goa-date-input-day-color-bg-selected)}.day.today.selected.svelte-r1rxhs.svelte-r1rxhs:hover{background-color:var(--goa-date-input-day-color-bg-selected-hover);color:var(--goa-date-input-day-color-text-selected-hover)}.day.today.selected.svelte-r1rxhs.svelte-r1rxhs:focus-within:hover{background-color:var(--goa-date-input-day-color-bg-selected)}.day.disabled.svelte-r1rxhs.svelte-r1rxhs{color:var(--goa-date-input-day-color-text-disabled);cursor:default}.day.disabled.svelte-r1rxhs.svelte-r1rxhs:hover{background-color:transparent}.day-num.svelte-r1rxhs.svelte-r1rxhs{width:var(--goa-date-input-day-underline-today-width);pointer-events:none;margin-bottom:1px}.selected.svelte-r1rxhs .day-num.svelte-r1rxhs{width:var(--goa-date-input-day-underline-today-width);border-bottom:none}.today.svelte-r1rxhs .day-num.svelte-r1rxhs{padding-top:2px;border-bottom:var(--goa-date-input-day-underline-today)}.today.selected.svelte-r1rxhs .day-num.svelte-r1rxhs{border-bottom:var(--goa-date-input-day-underline-today-selected)}");
}
function get_each_context$8(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[28] = list[i];
  return child_ctx;
}
function get_each_context_1$2(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[28] = list[i];
  return child_ctx;
}
function get_each_context_2$1(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[28] = list[i];
  return child_ctx;
}
function get_each_context_3$1(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[35] = list[i];
  return child_ctx;
}
function get_each_context_4(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[38] = list[i];
  child_ctx[40] = i;
  return child_ctx;
}
function create_each_block_4(ctx) {
  let goa_dropdown_item;
  return {
    c() {
      goa_dropdown_item = element("goa-dropdown-item");
      set_custom_element_data(
        goa_dropdown_item,
        "value",
        /*i*/
        ctx[40]
      );
      set_custom_element_data(
        goa_dropdown_item,
        "label",
        /*month*/
        ctx[38]
      );
    },
    m(target, anchor) {
      insert(target, goa_dropdown_item, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(goa_dropdown_item);
      }
    }
  };
}
function create_each_block_3$1(ctx) {
  let goa_dropdown_item;
  let goa_dropdown_item_value_value;
  return {
    c() {
      goa_dropdown_item = element("goa-dropdown-item");
      set_custom_element_data(goa_dropdown_item, "value", goa_dropdown_item_value_value = /*year*/
      ctx[35]);
    },
    m(target, anchor) {
      insert(target, goa_dropdown_item, anchor);
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*_years*/
      32768 && goa_dropdown_item_value_value !== (goa_dropdown_item_value_value = /*year*/
      ctx2[35])) {
        set_custom_element_data(goa_dropdown_item, "value", goa_dropdown_item_value_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(goa_dropdown_item);
      }
    }
  };
}
function create_each_block_2$1(ctx) {
  let button;
  let div;
  let t_value = (
    /*d*/
    ctx[28].getDate() + ""
  );
  let t2;
  let button_aria_label_value;
  let button_data_date_value;
  let button_data_day_value;
  let button_tabindex_value;
  let mounted;
  let dispose;
  return {
    c() {
      button = element("button");
      div = element("div");
      t2 = text(t_value);
      attr(div, "class", "day-num svelte-r1rxhs");
      attr(div, "data-testid", "date");
      attr(button, "aria-label", button_aria_label_value = format(
        /*d*/
        ctx[28],
        "PPPP"
      ));
      attr(button, "data-date", button_data_date_value = format(
        /*d*/
        ctx[28],
        "T"
      ));
      attr(button, "data-day", button_data_day_value = format(
        /*d*/
        ctx[28],
        "eee"
      ));
      attr(button, "class", "day other-month svelte-r1rxhs");
      attr(button, "tabindex", button_tabindex_value = isSameDay(
        /*d*/
        ctx[28],
        /*_calendarDate*/
        ctx[9]
      ) ? 0 : -1);
      toggle_class(button, "disabled", isBefore(
        /*d*/
        ctx[28],
        /*_min*/
        ctx[10]
      ) || isAfter(
        /*d*/
        ctx[28],
        /*_max*/
        ctx[11]
      ));
    },
    m(target, anchor) {
      insert(target, button, anchor);
      append(button, div);
      append(div, t2);
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*onDateClick*/
          ctx[20]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*_previousMonthDays*/
      8192 && t_value !== (t_value = /*d*/
      ctx2[28].getDate() + "")) set_data(t2, t_value);
      if (dirty[0] & /*_previousMonthDays*/
      8192 && button_aria_label_value !== (button_aria_label_value = format(
        /*d*/
        ctx2[28],
        "PPPP"
      ))) {
        attr(button, "aria-label", button_aria_label_value);
      }
      if (dirty[0] & /*_previousMonthDays*/
      8192 && button_data_date_value !== (button_data_date_value = format(
        /*d*/
        ctx2[28],
        "T"
      ))) {
        attr(button, "data-date", button_data_date_value);
      }
      if (dirty[0] & /*_previousMonthDays*/
      8192 && button_data_day_value !== (button_data_day_value = format(
        /*d*/
        ctx2[28],
        "eee"
      ))) {
        attr(button, "data-day", button_data_day_value);
      }
      if (dirty[0] & /*_previousMonthDays, _calendarDate*/
      8704 && button_tabindex_value !== (button_tabindex_value = isSameDay(
        /*d*/
        ctx2[28],
        /*_calendarDate*/
        ctx2[9]
      ) ? 0 : -1)) {
        attr(button, "tabindex", button_tabindex_value);
      }
      if (dirty[0] & /*_previousMonthDays, _min, _max*/
      11264) {
        toggle_class(button, "disabled", isBefore(
          /*d*/
          ctx2[28],
          /*_min*/
          ctx2[10]
        ) || isAfter(
          /*d*/
          ctx2[28],
          /*_max*/
          ctx2[11]
        ));
      }
    },
    d(detaching) {
      if (detaching) {
        detach(button);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_each_block_1$2(ctx) {
  let button;
  let div;
  let t_value = (
    /*d*/
    ctx[28].getDate() + ""
  );
  let t2;
  let button_aria_label_value;
  let button_data_date_value;
  let button_data_day_value;
  let button_tabindex_value;
  let mounted;
  let dispose;
  return {
    c() {
      button = element("button");
      div = element("div");
      t2 = text(t_value);
      attr(div, "class", "day-num svelte-r1rxhs");
      attr(div, "data-testid", "date");
      attr(button, "aria-label", button_aria_label_value = format(
        /*d*/
        ctx[28],
        "PPPP"
      ));
      attr(button, "data-date", button_data_date_value = format(
        /*d*/
        ctx[28],
        "T"
      ));
      attr(button, "data-day", button_data_day_value = format(
        /*d*/
        ctx[28],
        "eee"
      ));
      attr(button, "class", "day svelte-r1rxhs");
      attr(button, "tabindex", button_tabindex_value = isSameDay(
        /*d*/
        ctx[28],
        /*_calendarDate*/
        ctx[9]
      ) ? 0 : -1);
      toggle_class(button, "today", isSameDay(
        /*d*/
        ctx[28],
        /* @__PURE__ */ new Date()
      ));
      toggle_class(
        button,
        "selected",
        /*value*/
        ctx[0] && /*_selectedDate*/
        ctx[8] && isSameDay(
          /*d*/
          ctx[28],
          /*_selectedDate*/
          ctx[8]
        )
      );
      toggle_class(button, "disabled", isBefore(
        /*d*/
        ctx[28],
        /*_min*/
        ctx[10]
      ) || isAfter(
        /*d*/
        ctx[28],
        /*_max*/
        ctx[11]
      ));
    },
    m(target, anchor) {
      insert(target, button, anchor);
      append(button, div);
      append(div, t2);
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*onDateClick*/
          ctx[20]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*_monthDays*/
      4096 && t_value !== (t_value = /*d*/
      ctx2[28].getDate() + "")) set_data(t2, t_value);
      if (dirty[0] & /*_monthDays*/
      4096 && button_aria_label_value !== (button_aria_label_value = format(
        /*d*/
        ctx2[28],
        "PPPP"
      ))) {
        attr(button, "aria-label", button_aria_label_value);
      }
      if (dirty[0] & /*_monthDays*/
      4096 && button_data_date_value !== (button_data_date_value = format(
        /*d*/
        ctx2[28],
        "T"
      ))) {
        attr(button, "data-date", button_data_date_value);
      }
      if (dirty[0] & /*_monthDays*/
      4096 && button_data_day_value !== (button_data_day_value = format(
        /*d*/
        ctx2[28],
        "eee"
      ))) {
        attr(button, "data-day", button_data_day_value);
      }
      if (dirty[0] & /*_monthDays, _calendarDate*/
      4608 && button_tabindex_value !== (button_tabindex_value = isSameDay(
        /*d*/
        ctx2[28],
        /*_calendarDate*/
        ctx2[9]
      ) ? 0 : -1)) {
        attr(button, "tabindex", button_tabindex_value);
      }
      if (dirty[0] & /*_monthDays*/
      4096) {
        toggle_class(button, "today", isSameDay(
          /*d*/
          ctx2[28],
          /* @__PURE__ */ new Date()
        ));
      }
      if (dirty[0] & /*value, _selectedDate, _monthDays*/
      4353) {
        toggle_class(
          button,
          "selected",
          /*value*/
          ctx2[0] && /*_selectedDate*/
          ctx2[8] && isSameDay(
            /*d*/
            ctx2[28],
            /*_selectedDate*/
            ctx2[8]
          )
        );
      }
      if (dirty[0] & /*_monthDays, _min, _max*/
      7168) {
        toggle_class(button, "disabled", isBefore(
          /*d*/
          ctx2[28],
          /*_min*/
          ctx2[10]
        ) || isAfter(
          /*d*/
          ctx2[28],
          /*_max*/
          ctx2[11]
        ));
      }
    },
    d(detaching) {
      if (detaching) {
        detach(button);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_each_block$8(ctx) {
  let button;
  let div;
  let t0_value = (
    /*d*/
    ctx[28].getDate() + ""
  );
  let t0;
  let t1;
  let button_aria_label_value;
  let button_data_date_value;
  let button_data_day_value;
  let button_tabindex_value;
  let mounted;
  let dispose;
  return {
    c() {
      button = element("button");
      div = element("div");
      t0 = text(t0_value);
      t1 = space();
      attr(div, "class", "day-num svelte-r1rxhs");
      attr(div, "data-testid", "date");
      attr(button, "aria-label", button_aria_label_value = format(
        /*d*/
        ctx[28],
        "PPPP"
      ));
      attr(button, "data-date", button_data_date_value = format(
        /*d*/
        ctx[28],
        "T"
      ));
      attr(button, "data-day", button_data_day_value = format(
        /*d*/
        ctx[28],
        "eee"
      ));
      attr(button, "class", "day other-month svelte-r1rxhs");
      attr(button, "tabindex", button_tabindex_value = isSameDay(
        /*d*/
        ctx[28],
        /*_calendarDate*/
        ctx[9]
      ) ? 0 : -1);
      toggle_class(button, "disabled", isBefore(
        /*d*/
        ctx[28],
        /*_min*/
        ctx[10]
      ) || isAfter(
        /*d*/
        ctx[28],
        /*_max*/
        ctx[11]
      ));
    },
    m(target, anchor) {
      insert(target, button, anchor);
      append(button, div);
      append(div, t0);
      append(button, t1);
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*onDateClick*/
          ctx[20]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*_nextMonthDays*/
      16384 && t0_value !== (t0_value = /*d*/
      ctx2[28].getDate() + "")) set_data(t0, t0_value);
      if (dirty[0] & /*_nextMonthDays*/
      16384 && button_aria_label_value !== (button_aria_label_value = format(
        /*d*/
        ctx2[28],
        "PPPP"
      ))) {
        attr(button, "aria-label", button_aria_label_value);
      }
      if (dirty[0] & /*_nextMonthDays*/
      16384 && button_data_date_value !== (button_data_date_value = format(
        /*d*/
        ctx2[28],
        "T"
      ))) {
        attr(button, "data-date", button_data_date_value);
      }
      if (dirty[0] & /*_nextMonthDays*/
      16384 && button_data_day_value !== (button_data_day_value = format(
        /*d*/
        ctx2[28],
        "eee"
      ))) {
        attr(button, "data-day", button_data_day_value);
      }
      if (dirty[0] & /*_nextMonthDays, _calendarDate*/
      16896 && button_tabindex_value !== (button_tabindex_value = isSameDay(
        /*d*/
        ctx2[28],
        /*_calendarDate*/
        ctx2[9]
      ) ? 0 : -1)) {
        attr(button, "tabindex", button_tabindex_value);
      }
      if (dirty[0] & /*_nextMonthDays, _min, _max*/
      19456) {
        toggle_class(button, "disabled", isBefore(
          /*d*/
          ctx2[28],
          /*_min*/
          ctx2[10]
        ) || isAfter(
          /*d*/
          ctx2[28],
          /*_max*/
          ctx2[11]
        ));
      }
    },
    d(detaching) {
      if (detaching) {
        detach(button);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_fragment$$(ctx) {
  let div1;
  let goa_block;
  let goa_form_item0;
  let goa_dropdown0;
  let goa_dropdown0_arialabel_value;
  let goa_dropdown0_value_value;
  let t0;
  let goa_form_item1;
  let goa_dropdown1;
  let goa_dropdown1_arialabel_value;
  let goa_dropdown1_value_value;
  let t1;
  let div0;
  let h50;
  let t3;
  let h51;
  let t5;
  let h52;
  let t7;
  let h53;
  let t9;
  let h54;
  let t11;
  let h55;
  let t13;
  let h56;
  let t15;
  let t16;
  let t17;
  let div1_style_value;
  let mounted;
  let dispose;
  let each_value_4 = ensure_array_like(
    /*_months*/
    ctx[17]
  );
  let each_blocks_4 = [];
  for (let i = 0; i < each_value_4.length; i += 1) {
    each_blocks_4[i] = create_each_block_4(get_each_context_4(ctx, each_value_4, i));
  }
  let each_value_3 = ensure_array_like(
    /*_years*/
    ctx[15]
  );
  let each_blocks_3 = [];
  for (let i = 0; i < each_value_3.length; i += 1) {
    each_blocks_3[i] = create_each_block_3$1(get_each_context_3$1(ctx, each_value_3, i));
  }
  let each_value_2 = ensure_array_like(
    /*_previousMonthDays*/
    ctx[13]
  );
  let each_blocks_2 = [];
  for (let i = 0; i < each_value_2.length; i += 1) {
    each_blocks_2[i] = create_each_block_2$1(get_each_context_2$1(ctx, each_value_2, i));
  }
  let each_value_1 = ensure_array_like(
    /*_monthDays*/
    ctx[12]
  );
  let each_blocks_1 = [];
  for (let i = 0; i < each_value_1.length; i += 1) {
    each_blocks_1[i] = create_each_block_1$2(get_each_context_1$2(ctx, each_value_1, i));
  }
  let each_value = ensure_array_like(
    /*_nextMonthDays*/
    ctx[14]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block$8(get_each_context$8(ctx, each_value, i));
  }
  return {
    c() {
      var _a, _b;
      div1 = element("div");
      goa_block = element("goa-block");
      goa_form_item0 = element("goa-form-item");
      goa_dropdown0 = element("goa-dropdown");
      for (let i = 0; i < each_blocks_4.length; i += 1) {
        each_blocks_4[i].c();
      }
      t0 = space();
      goa_form_item1 = element("goa-form-item");
      goa_dropdown1 = element("goa-dropdown");
      for (let i = 0; i < each_blocks_3.length; i += 1) {
        each_blocks_3[i].c();
      }
      t1 = space();
      div0 = element("div");
      h50 = element("h5");
      h50.textContent = "Sun";
      t3 = space();
      h51 = element("h5");
      h51.textContent = "Mon";
      t5 = space();
      h52 = element("h5");
      h52.textContent = "Tue";
      t7 = space();
      h53 = element("h5");
      h53.textContent = "Wed";
      t9 = space();
      h54 = element("h5");
      h54.textContent = "Thu";
      t11 = space();
      h55 = element("h5");
      h55.textContent = "Fri";
      t13 = space();
      h56 = element("h5");
      h56.textContent = "Sat";
      t15 = space();
      for (let i = 0; i < each_blocks_2.length; i += 1) {
        each_blocks_2[i].c();
      }
      t16 = space();
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        each_blocks_1[i].c();
      }
      t17 = space();
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      set_custom_element_data(goa_dropdown0, "name", "month");
      set_custom_element_data(goa_dropdown0, "arialabel", goa_dropdown0_arialabel_value = `${/*name*/
      ctx[1]} month`);
      set_custom_element_data(goa_dropdown0, "data-testid", "months");
      set_custom_element_data(goa_dropdown0, "width", "160px");
      set_custom_element_data(goa_dropdown0, "maxHeight", "240px");
      set_custom_element_data(goa_dropdown0, "relative", "true");
      set_custom_element_data(goa_dropdown0, "value", goa_dropdown0_value_value = /*_calendarDate*/
      (_a = ctx[9]) == null ? void 0 : _a.getMonth());
      set_custom_element_data(goa_form_item0, "label", "Month");
      set_custom_element_data(goa_form_item0, "mt", "0");
      set_custom_element_data(goa_dropdown1, "name", "year");
      set_custom_element_data(goa_dropdown1, "arialabel", goa_dropdown1_arialabel_value = `${/*name*/
      ctx[1]} year`);
      set_custom_element_data(goa_dropdown1, "data-testid", "years");
      set_custom_element_data(goa_dropdown1, "width", "104px");
      set_custom_element_data(goa_dropdown1, "maxHeight", "240px");
      set_custom_element_data(goa_dropdown1, "relative", "true");
      set_custom_element_data(goa_dropdown1, "value", goa_dropdown1_value_value = /*_calendarDate*/
      (_b = ctx[9]) == null ? void 0 : _b.getFullYear());
      set_custom_element_data(goa_form_item1, "label", "Year");
      set_custom_element_data(goa_form_item1, "mt", "0");
      set_custom_element_data(goa_block, "mb", "m");
      attr(h50, "class", "svelte-r1rxhs");
      attr(h51, "class", "svelte-r1rxhs");
      attr(h52, "class", "svelte-r1rxhs");
      attr(h53, "class", "svelte-r1rxhs");
      attr(h54, "class", "svelte-r1rxhs");
      attr(h55, "class", "svelte-r1rxhs");
      attr(h56, "class", "svelte-r1rxhs");
      attr(div0, "data-testid", "calendar");
      attr(div0, "class", "calendar svelte-r1rxhs");
      attr(div1, "style", div1_style_value = calculateMargin(
        /*mt*/
        ctx[3],
        /*mr*/
        ctx[4],
        /*mb*/
        ctx[5],
        /*ml*/
        ctx[6]
      ));
      attr(
        div1,
        "data-testid",
        /*testid*/
        ctx[2]
      );
      toggle_class(
        div1,
        "bordered",
        /*bordered*/
        ctx[7] === "true"
      );
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, goa_block);
      append(goa_block, goa_form_item0);
      append(goa_form_item0, goa_dropdown0);
      for (let i = 0; i < each_blocks_4.length; i += 1) {
        if (each_blocks_4[i]) {
          each_blocks_4[i].m(goa_dropdown0, null);
        }
      }
      append(goa_block, t0);
      append(goa_block, goa_form_item1);
      append(goa_form_item1, goa_dropdown1);
      for (let i = 0; i < each_blocks_3.length; i += 1) {
        if (each_blocks_3[i]) {
          each_blocks_3[i].m(goa_dropdown1, null);
        }
      }
      append(div1, t1);
      append(div1, div0);
      append(div0, h50);
      append(div0, t3);
      append(div0, h51);
      append(div0, t5);
      append(div0, h52);
      append(div0, t7);
      append(div0, h53);
      append(div0, t9);
      append(div0, h54);
      append(div0, t11);
      append(div0, h55);
      append(div0, t13);
      append(div0, h56);
      append(div0, t15);
      for (let i = 0; i < each_blocks_2.length; i += 1) {
        if (each_blocks_2[i]) {
          each_blocks_2[i].m(div0, null);
        }
      }
      append(div0, t16);
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        if (each_blocks_1[i]) {
          each_blocks_1[i].m(div0, null);
        }
      }
      append(div0, t17);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div0, null);
        }
      }
      ctx[23](div0);
      if (!mounted) {
        dispose = [
          listen(
            goa_dropdown0,
            "_change",
            /*setMonth*/
            ctx[18]
          ),
          listen(
            goa_dropdown1,
            "_change",
            /*setYear*/
            ctx[19]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      var _a, _b;
      if (dirty[0] & /*_months*/
      131072) {
        each_value_4 = ensure_array_like(
          /*_months*/
          ctx2[17]
        );
        let i;
        for (i = 0; i < each_value_4.length; i += 1) {
          const child_ctx = get_each_context_4(ctx2, each_value_4, i);
          if (each_blocks_4[i]) {
            each_blocks_4[i].p(child_ctx, dirty);
          } else {
            each_blocks_4[i] = create_each_block_4(child_ctx);
            each_blocks_4[i].c();
            each_blocks_4[i].m(goa_dropdown0, null);
          }
        }
        for (; i < each_blocks_4.length; i += 1) {
          each_blocks_4[i].d(1);
        }
        each_blocks_4.length = each_value_4.length;
      }
      if (dirty[0] & /*name*/
      2 && goa_dropdown0_arialabel_value !== (goa_dropdown0_arialabel_value = `${/*name*/
      ctx2[1]} month`)) {
        set_custom_element_data(goa_dropdown0, "arialabel", goa_dropdown0_arialabel_value);
      }
      if (dirty[0] & /*_calendarDate*/
      512 && goa_dropdown0_value_value !== (goa_dropdown0_value_value = /*_calendarDate*/
      (_a = ctx2[9]) == null ? void 0 : _a.getMonth())) {
        set_custom_element_data(goa_dropdown0, "value", goa_dropdown0_value_value);
      }
      if (dirty[0] & /*_years*/
      32768) {
        each_value_3 = ensure_array_like(
          /*_years*/
          ctx2[15]
        );
        let i;
        for (i = 0; i < each_value_3.length; i += 1) {
          const child_ctx = get_each_context_3$1(ctx2, each_value_3, i);
          if (each_blocks_3[i]) {
            each_blocks_3[i].p(child_ctx, dirty);
          } else {
            each_blocks_3[i] = create_each_block_3$1(child_ctx);
            each_blocks_3[i].c();
            each_blocks_3[i].m(goa_dropdown1, null);
          }
        }
        for (; i < each_blocks_3.length; i += 1) {
          each_blocks_3[i].d(1);
        }
        each_blocks_3.length = each_value_3.length;
      }
      if (dirty[0] & /*name*/
      2 && goa_dropdown1_arialabel_value !== (goa_dropdown1_arialabel_value = `${/*name*/
      ctx2[1]} year`)) {
        set_custom_element_data(goa_dropdown1, "arialabel", goa_dropdown1_arialabel_value);
      }
      if (dirty[0] & /*_calendarDate*/
      512 && goa_dropdown1_value_value !== (goa_dropdown1_value_value = /*_calendarDate*/
      (_b = ctx2[9]) == null ? void 0 : _b.getFullYear())) {
        set_custom_element_data(goa_dropdown1, "value", goa_dropdown1_value_value);
      }
      if (dirty[0] & /*_previousMonthDays, _calendarDate, _min, _max, onDateClick*/
      1060352) {
        each_value_2 = ensure_array_like(
          /*_previousMonthDays*/
          ctx2[13]
        );
        let i;
        for (i = 0; i < each_value_2.length; i += 1) {
          const child_ctx = get_each_context_2$1(ctx2, each_value_2, i);
          if (each_blocks_2[i]) {
            each_blocks_2[i].p(child_ctx, dirty);
          } else {
            each_blocks_2[i] = create_each_block_2$1(child_ctx);
            each_blocks_2[i].c();
            each_blocks_2[i].m(div0, t16);
          }
        }
        for (; i < each_blocks_2.length; i += 1) {
          each_blocks_2[i].d(1);
        }
        each_blocks_2.length = each_value_2.length;
      }
      if (dirty[0] & /*_monthDays, _calendarDate, value, _selectedDate, _min, _max, onDateClick*/
      1056513) {
        each_value_1 = ensure_array_like(
          /*_monthDays*/
          ctx2[12]
        );
        let i;
        for (i = 0; i < each_value_1.length; i += 1) {
          const child_ctx = get_each_context_1$2(ctx2, each_value_1, i);
          if (each_blocks_1[i]) {
            each_blocks_1[i].p(child_ctx, dirty);
          } else {
            each_blocks_1[i] = create_each_block_1$2(child_ctx);
            each_blocks_1[i].c();
            each_blocks_1[i].m(div0, t17);
          }
        }
        for (; i < each_blocks_1.length; i += 1) {
          each_blocks_1[i].d(1);
        }
        each_blocks_1.length = each_value_1.length;
      }
      if (dirty[0] & /*_nextMonthDays, _calendarDate, _min, _max, onDateClick*/
      1068544) {
        each_value = ensure_array_like(
          /*_nextMonthDays*/
          ctx2[14]
        );
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context$8(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block$8(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(div0, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
      if (dirty[0] & /*mt, mr, mb, ml*/
      120 && div1_style_value !== (div1_style_value = calculateMargin(
        /*mt*/
        ctx2[3],
        /*mr*/
        ctx2[4],
        /*mb*/
        ctx2[5],
        /*ml*/
        ctx2[6]
      ))) {
        attr(div1, "style", div1_style_value);
      }
      if (dirty[0] & /*testid*/
      4) {
        attr(
          div1,
          "data-testid",
          /*testid*/
          ctx2[2]
        );
      }
      if (dirty[0] & /*bordered*/
      128) {
        toggle_class(
          div1,
          "bordered",
          /*bordered*/
          ctx2[7] === "true"
        );
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      destroy_each(each_blocks_4, detaching);
      destroy_each(each_blocks_3, detaching);
      destroy_each(each_blocks_2, detaching);
      destroy_each(each_blocks_1, detaching);
      destroy_each(each_blocks, detaching);
      ctx[23](null);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$$($$self, $$props, $$invalidate) {
  let { name = "" } = $$props;
  let { value = "" } = $$props;
  let { min = "" } = $$props;
  let { max = "" } = $$props;
  let { testid = "" } = $$props;
  let { mt = null } = $$props;
  let { mr = null } = $$props;
  let { mb: mb2 = null } = $$props;
  let { ml: ml2 = null } = $$props;
  let { bordered = "true" } = $$props;
  let _selectedDate;
  let _calendarDate;
  let _min;
  let _max;
  let _monthDays = [];
  let _previousMonthDays = [];
  let _nextMonthDays = [];
  let _nextMonthDayCount;
  let _months = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  ];
  let _years = [];
  let _calendarEl;
  onMount(async () => {
    $$invalidate(9, _calendarDate = $$invalidate(8, _selectedDate = value ? startOfDay(new Date(value)) : startOfDay(/* @__PURE__ */ new Date())));
    $$invalidate(10, _min = min && new Date(min) || addYears(_selectedDate, -5));
    $$invalidate(11, _max = max && new Date(max) || addYears(_selectedDate, 5));
    const yearCount = _max.getFullYear() - _min.getFullYear() + 1;
    let yearStart = _min.getFullYear();
    $$invalidate(15, _years = new Array(yearCount).fill(void 0).map((_, i) => `${yearStart + i}`).sort());
    initKeybindings();
    await tick();
    renderCalendar({ type: "date", value: _selectedDate });
  });
  function renderCalendar(change) {
    switch (change.type) {
      case "date":
        $$invalidate(9, _calendarDate = change.value);
        break;
      case "month":
        _calendarDate.setMonth(change.value);
        break;
      case "year":
        _calendarDate.setFullYear(change.value);
        break;
    }
    if (!isValidDate(_calendarDate)) {
      return;
    }
    const dayCount = getDaysInMonth(_calendarDate);
    $$invalidate(12, _monthDays = new Array(dayCount).fill(void 0).map((_, i) => new Date(_calendarDate.getFullYear(), _calendarDate.getMonth(), i + 1)));
    const prevMonthEnd = lastDayOfMonth(addMonths(_calendarDate, -1));
    const selectedMonthStart = setDate(_calendarDate, 1);
    $$invalidate(13, _previousMonthDays = []);
    for (let i = 0; i < selectedMonthStart.getDay(); i++) {
      $$invalidate(13, _previousMonthDays = [..._previousMonthDays, addDays(prevMonthEnd, -i)]);
    }
    _previousMonthDays.reverse();
    $$invalidate(14, _nextMonthDays = []);
    _nextMonthDayCount = 7 - (_previousMonthDays.length + _monthDays.length) % 7;
    if (_nextMonthDayCount < 7) {
      const nextMonthStart = setDate(addMonths(_calendarDate, 1), 1);
      for (let i = 0; i < _nextMonthDayCount; i++) {
        $$invalidate(14, _nextMonthDays = [..._nextMonthDays, addDays(nextMonthStart, i)]);
      }
    }
  }
  function initKeybindings() {
    const handleKeyClick = async (e, newDate) => {
      e.stopPropagation();
      e.preventDefault();
      if (newDate < _min || newDate > _max) {
        return;
      }
      if (!isSameMonth(newDate, _calendarDate)) {
        renderCalendar({ type: "date", value: newDate });
      }
      $$invalidate(9, _calendarDate = newDate);
      await tick();
      const focusedDateEl = _calendarEl.querySelector(`[data-date="${newDate.getTime()}"]`);
      focusedDateEl == null ? void 0 : focusedDateEl.focus();
    };
    _calendarEl.addEventListener("keydown", (e) => {
      switch (e.key) {
        case "ArrowUp":
          handleKeyClick(e, addDays(_calendarDate, -7));
          break;
        case "ArrowDown":
          handleKeyClick(e, addDays(_calendarDate, 7));
          break;
        case "ArrowLeft":
          handleKeyClick(e, addDays(_calendarDate, -1));
          break;
        case "ArrowRight":
          handleKeyClick(e, addDays(_calendarDate, 1));
          break;
        case "Delete":
        case "Backspace":
          $$invalidate(8, _selectedDate = null);
          break;
        case "Home": {
          let homeDate = new Date(_calendarDate);
          homeDate.setDate(1);
          handleKeyClick(e, homeDate);
          break;
        }
        case "End":
          handleKeyClick(e, lastDayOfMonth(_calendarDate));
          break;
        case "PageUp":
          if (e.shiftKey) {
            handleKeyClick(e, addYears(_calendarDate, -1));
          } else {
            handleKeyClick(e, addMonths(_calendarDate, -1));
          }
          break;
        case "PageDown":
          if (e.shiftKey) {
            handleKeyClick(e, addYears(_calendarDate, 1));
          } else {
            handleKeyClick(e, addMonths(_calendarDate, 1));
          }
          break;
        case "Enter":
          $$invalidate(8, _selectedDate = _calendarDate);
          dispatchValue();
          e.stopPropagation();
          e.preventDefault();
          break;
        case "Escape":
          e.stopPropagation();
          e.preventDefault();
          break;
      }
    });
  }
  function dispatchValue() {
    if (!_selectedDate) return;
    if (!isValidDate(_selectedDate)) return;
    $$invalidate(0, value = _selectedDate.toISOString());
    _calendarEl.dispatchEvent(new CustomEvent(
      "_change",
      {
        composed: true,
        detail: { type: "date", name, value: _selectedDate }
      }
    ));
  }
  function setMonth(e) {
    renderCalendar({ type: "month", value: +e.detail.value });
    e.preventDefault();
    e.stopPropagation();
  }
  function setYear(e) {
    renderCalendar({ type: "year", value: +e.detail.value });
    e.preventDefault();
    e.stopPropagation();
  }
  function onDateClick(e) {
    const el2 = e.target;
    const raw = parseInt(el2.dataset["date"] || "0");
    if (!raw) return;
    const newDate = new Date(raw);
    if (newDate < _min || newDate > _max) {
      return;
    }
    if (!isSameMonth(newDate, _calendarDate)) {
      renderCalendar({ type: "date", value: newDate });
    }
    $$invalidate(8, _selectedDate = $$invalidate(9, _calendarDate = newDate));
    dispatchValue();
  }
  function div0_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _calendarEl = $$value;
      $$invalidate(16, _calendarEl);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("name" in $$props2) $$invalidate(1, name = $$props2.name);
    if ("value" in $$props2) $$invalidate(0, value = $$props2.value);
    if ("min" in $$props2) $$invalidate(21, min = $$props2.min);
    if ("max" in $$props2) $$invalidate(22, max = $$props2.max);
    if ("testid" in $$props2) $$invalidate(2, testid = $$props2.testid);
    if ("mt" in $$props2) $$invalidate(3, mt = $$props2.mt);
    if ("mr" in $$props2) $$invalidate(4, mr = $$props2.mr);
    if ("mb" in $$props2) $$invalidate(5, mb2 = $$props2.mb);
    if ("ml" in $$props2) $$invalidate(6, ml2 = $$props2.ml);
    if ("bordered" in $$props2) $$invalidate(7, bordered = $$props2.bordered);
  };
  return [
    value,
    name,
    testid,
    mt,
    mr,
    mb2,
    ml2,
    bordered,
    _selectedDate,
    _calendarDate,
    _min,
    _max,
    _monthDays,
    _previousMonthDays,
    _nextMonthDays,
    _years,
    _calendarEl,
    _months,
    setMonth,
    setYear,
    onDateClick,
    min,
    max,
    div0_binding
  ];
}
class Calendar extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$$,
      create_fragment$$,
      safe_not_equal,
      {
        name: 1,
        value: 0,
        min: 21,
        max: 22,
        testid: 2,
        mt: 3,
        mr: 4,
        mb: 5,
        ml: 6,
        bordered: 7
      },
      add_css$U,
      [-1, -1]
    );
  }
  get name() {
    return this.$$.ctx[1];
  }
  set name(name) {
    this.$$set({ name });
    flush();
  }
  get value() {
    return this.$$.ctx[0];
  }
  set value(value) {
    this.$$set({ value });
    flush();
  }
  get min() {
    return this.$$.ctx[21];
  }
  set min(min) {
    this.$$set({ min });
    flush();
  }
  get max() {
    return this.$$.ctx[22];
  }
  set max(max) {
    this.$$set({ max });
    flush();
  }
  get testid() {
    return this.$$.ctx[2];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
  get mt() {
    return this.$$.ctx[3];
  }
  set mt(mt) {
    this.$$set({ mt });
    flush();
  }
  get mr() {
    return this.$$.ctx[4];
  }
  set mr(mr) {
    this.$$set({ mr });
    flush();
  }
  get mb() {
    return this.$$.ctx[5];
  }
  set mb(mb2) {
    this.$$set({ mb: mb2 });
    flush();
  }
  get ml() {
    return this.$$.ctx[6];
  }
  set ml(ml2) {
    this.$$set({ ml: ml2 });
    flush();
  }
  get bordered() {
    return this.$$.ctx[7];
  }
  set bordered(bordered) {
    this.$$set({ bordered });
    flush();
  }
}
customElements.define("goa-calendar", create_custom_element(Calendar, { "name": {}, "value": {}, "min": {}, "max": {}, "testid": {}, "mt": {}, "mr": {}, "mb": {}, "ml": {}, "bordered": {} }, [], [], true));
function add_css$T(target) {
  append_styles(target, "svelte-us98jx", ":host{box-sizing:border-box;font-family:var(--goa-font-family-sans)}.notification.svelte-us98jx.svelte-us98jx{display:flex;align-items:stretch;overflow:hidden;font:var(--goa-typography-body-m)}h3.svelte-us98jx.svelte-us98jx{font:var(--goa-typography-heading-m);margin-top:var(--goa-space-none);margin-bottom:var(--goa-space-m)}.emergency.svelte-us98jx.svelte-us98jx{background-color:var(--goa-color-emergency-default)}.important.svelte-us98jx.svelte-us98jx{background-color:var(--goa-color-warning-default)}.information.svelte-us98jx.svelte-us98jx{background-color:var(--goa-color-info-default)}.event.svelte-us98jx.svelte-us98jx{background-color:var(--goa-color-info-default)}.success.svelte-us98jx.svelte-us98jx{background-color:var(--goa-color-success-default)}.icon.svelte-us98jx.svelte-us98jx{text-align:center;padding-top:var(--goa-space-l);padding-left:var(--goa-space-s);padding-right:var(--goa-space-s)}.content.svelte-us98jx.svelte-us98jx{flex:1 1 auto;background-color:var(--goa-color-greyscale-100);padding:var(--goa-space-l)}.notification.medium.svelte-us98jx.svelte-us98jx{font:var(--goa-typography-body-s)}h3.medium.svelte-us98jx.svelte-us98jx{font:var(--goa-typography-heading-xs);margin-bottom:var(--goa-space-2xs)}.notification.medium.svelte-us98jx .content.svelte-us98jx{padding:var(--goa-space-s);margin-top:calc(-1 * var(--goa-space-3xs))}.notification.medium.svelte-us98jx .icon.svelte-us98jx{padding-top:var(--goa-space-s);padding-left:var(--goa-space-2xs);padding-right:var(--goa-space-2xs)}");
}
function create_if_block$x(ctx) {
  let h3;
  let t2;
  return {
    c() {
      h3 = element("h3");
      t2 = text(
        /*heading*/
        ctx[5]
      );
      attr(h3, "class", "svelte-us98jx");
      toggle_class(
        h3,
        "medium",
        /*isMediumCallout*/
        ctx[11]
      );
    },
    m(target, anchor) {
      insert(target, h3, anchor);
      append(h3, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*heading*/
      32) set_data(
        t2,
        /*heading*/
        ctx2[5]
      );
      if (dirty & /*isMediumCallout*/
      2048) {
        toggle_class(
          h3,
          "medium",
          /*isMediumCallout*/
          ctx2[11]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(h3);
      }
    }
  };
}
function create_fragment$_(ctx) {
  let div;
  let span0;
  let goa_icon;
  let goa_icon_inverted_value;
  let span0_class_value;
  let t0;
  let span1;
  let t1;
  let div_style_value;
  let current;
  let mounted;
  let dispose;
  add_render_callback(
    /*onwindowresize*/
    ctx[16]
  );
  let if_block = (
    /*heading*/
    ctx[5] && create_if_block$x(ctx)
  );
  const default_slot_template = (
    /*#slots*/
    ctx[15].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[14],
    null
  );
  return {
    c() {
      div = element("div");
      span0 = element("span");
      goa_icon = element("goa-icon");
      t0 = space();
      span1 = element("span");
      if (if_block) if_block.c();
      t1 = space();
      if (default_slot) default_slot.c();
      set_custom_element_data(
        goa_icon,
        "type",
        /*iconType*/
        ctx[12]
      );
      set_custom_element_data(
        goa_icon,
        "size",
        /*iconSize*/
        ctx[10]
      );
      set_custom_element_data(goa_icon, "inverted", goa_icon_inverted_value = /*type*/
      ctx[4] === "important" ? "false" : "true");
      attr(span0, "class", span0_class_value = "icon " + /*type*/
      ctx[4] + " svelte-us98jx");
      attr(span1, "class", "content svelte-us98jx");
      attr(div, "role", "region");
      attr(div, "style", div_style_value = `
    ${calculateMargin(
        /*mt*/
        ctx[0],
        /*mr*/
        ctx[1],
        /*mb*/
        ctx[2],
        /*ml*/
        ctx[3]
      )};
    max-width: ${/*maxwidth*/
      ctx[6]};
  `);
      attr(div, "class", "notification svelte-us98jx");
      attr(
        div,
        "data-testid",
        /*testid*/
        ctx[7]
      );
      attr(
        div,
        "aria-live",
        /*arialive*/
        ctx[8]
      );
      toggle_class(
        div,
        "medium",
        /*isMediumCallout*/
        ctx[11]
      );
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, span0);
      append(span0, goa_icon);
      append(div, t0);
      append(div, span1);
      if (if_block) if_block.m(span1, null);
      append(span1, t1);
      if (default_slot) {
        default_slot.m(span1, null);
      }
      current = true;
      if (!mounted) {
        dispose = listen(
          window,
          "resize",
          /*onwindowresize*/
          ctx[16]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & /*iconType*/
      4096) {
        set_custom_element_data(
          goa_icon,
          "type",
          /*iconType*/
          ctx2[12]
        );
      }
      if (!current || dirty & /*iconSize*/
      1024) {
        set_custom_element_data(
          goa_icon,
          "size",
          /*iconSize*/
          ctx2[10]
        );
      }
      if (!current || dirty & /*type*/
      16 && goa_icon_inverted_value !== (goa_icon_inverted_value = /*type*/
      ctx2[4] === "important" ? "false" : "true")) {
        set_custom_element_data(goa_icon, "inverted", goa_icon_inverted_value);
      }
      if (!current || dirty & /*type*/
      16 && span0_class_value !== (span0_class_value = "icon " + /*type*/
      ctx2[4] + " svelte-us98jx")) {
        attr(span0, "class", span0_class_value);
      }
      if (
        /*heading*/
        ctx2[5]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block$x(ctx2);
          if_block.c();
          if_block.m(span1, t1);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        16384)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[14],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[14]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[14],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*mt, mr, mb, ml, maxwidth*/
      79 && div_style_value !== (div_style_value = `
    ${calculateMargin(
        /*mt*/
        ctx2[0],
        /*mr*/
        ctx2[1],
        /*mb*/
        ctx2[2],
        /*ml*/
        ctx2[3]
      )};
    max-width: ${/*maxwidth*/
      ctx2[6]};
  `)) {
        attr(div, "style", div_style_value);
      }
      if (!current || dirty & /*testid*/
      128) {
        attr(
          div,
          "data-testid",
          /*testid*/
          ctx2[7]
        );
      }
      if (!current || dirty & /*arialive*/
      256) {
        attr(
          div,
          "aria-live",
          /*arialive*/
          ctx2[8]
        );
      }
      if (!current || dirty & /*isMediumCallout*/
      2048) {
        toggle_class(
          div,
          "medium",
          /*isMediumCallout*/
          ctx2[11]
        );
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (if_block) if_block.d();
      if (default_slot) default_slot.d(detaching);
      mounted = false;
      dispose();
    }
  };
}
function instance$_($$self, $$props, $$invalidate) {
  let isMediumCallout;
  let iconType;
  let { $$slots: slots = {}, $$scope } = $$props;
  const [Types, validateType] = typeValidator("Callout type", ["emergency", "important", "information", "event", "success"], true);
  const [CalloutSizes, validateCalloutSize] = typeValidator("Callout size", ["medium", "large"]);
  const [AriaLive, validateAriaLive] = typeValidator("Aria live", ["off", "assertive", "polite"]);
  let { mt = null } = $$props;
  let { mr = null } = $$props;
  let { mb: mb2 = "l" } = $$props;
  let { ml: ml2 = null } = $$props;
  let { size = "large" } = $$props;
  let { type } = $$props;
  let { heading = "" } = $$props;
  let { maxwidth = "none" } = $$props;
  let { testid = "" } = $$props;
  let { arialive = "off" } = $$props;
  let screenSize = 0;
  let iconSize = "medium";
  onMount(() => {
    validateCalloutSize(size);
    validateAriaLive(arialive);
    setTimeout(() => {
      validateType(type);
      $$invalidate(10, iconSize = isMediumCallout ? "small" : "medium");
    });
  });
  function onwindowresize() {
    $$invalidate(9, screenSize = window.innerWidth);
  }
  $$self.$$set = ($$props2) => {
    if ("mt" in $$props2) $$invalidate(0, mt = $$props2.mt);
    if ("mr" in $$props2) $$invalidate(1, mr = $$props2.mr);
    if ("mb" in $$props2) $$invalidate(2, mb2 = $$props2.mb);
    if ("ml" in $$props2) $$invalidate(3, ml2 = $$props2.ml);
    if ("size" in $$props2) $$invalidate(13, size = $$props2.size);
    if ("type" in $$props2) $$invalidate(4, type = $$props2.type);
    if ("heading" in $$props2) $$invalidate(5, heading = $$props2.heading);
    if ("maxwidth" in $$props2) $$invalidate(6, maxwidth = $$props2.maxwidth);
    if ("testid" in $$props2) $$invalidate(7, testid = $$props2.testid);
    if ("arialive" in $$props2) $$invalidate(8, arialive = $$props2.arialive);
    if ("$$scope" in $$props2) $$invalidate(14, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*screenSize, size*/
    8704) {
      $$invalidate(11, isMediumCallout = screenSize < MOBILE_BP || size === "medium");
    }
    if ($$self.$$.dirty & /*type*/
    16) {
      $$invalidate(12, iconType = type === "emergency" ? "warning" : type === "important" ? "alert-circle" : type === "information" ? "information-circle" : type === "success" ? "checkmark-circle" : type === "event" ? "calendar" : "");
    }
  };
  return [
    mt,
    mr,
    mb2,
    ml2,
    type,
    heading,
    maxwidth,
    testid,
    arialive,
    screenSize,
    iconSize,
    isMediumCallout,
    iconType,
    size,
    $$scope,
    slots,
    onwindowresize
  ];
}
class Callout extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$_,
      create_fragment$_,
      safe_not_equal,
      {
        mt: 0,
        mr: 1,
        mb: 2,
        ml: 3,
        size: 13,
        type: 4,
        heading: 5,
        maxwidth: 6,
        testid: 7,
        arialive: 8
      },
      add_css$T
    );
  }
  get mt() {
    return this.$$.ctx[0];
  }
  set mt(mt) {
    this.$$set({ mt });
    flush();
  }
  get mr() {
    return this.$$.ctx[1];
  }
  set mr(mr) {
    this.$$set({ mr });
    flush();
  }
  get mb() {
    return this.$$.ctx[2];
  }
  set mb(mb2) {
    this.$$set({ mb: mb2 });
    flush();
  }
  get ml() {
    return this.$$.ctx[3];
  }
  set ml(ml2) {
    this.$$set({ ml: ml2 });
    flush();
  }
  get size() {
    return this.$$.ctx[13];
  }
  set size(size) {
    this.$$set({ size });
    flush();
  }
  get type() {
    return this.$$.ctx[4];
  }
  set type(type) {
    this.$$set({ type });
    flush();
  }
  get heading() {
    return this.$$.ctx[5];
  }
  set heading(heading) {
    this.$$set({ heading });
    flush();
  }
  get maxwidth() {
    return this.$$.ctx[6];
  }
  set maxwidth(maxwidth) {
    this.$$set({ maxwidth });
    flush();
  }
  get testid() {
    return this.$$.ctx[7];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
  get arialive() {
    return this.$$.ctx[8];
  }
  set arialive(arialive) {
    this.$$set({ arialive });
    flush();
  }
}
customElements.define("goa-callout", create_custom_element(Callout, { "mt": {}, "mr": {}, "mb": {}, "ml": {}, "size": {}, "type": {}, "heading": {}, "maxwidth": {}, "testid": {}, "arialive": {} }, ["default"], [], true));
function create_fragment$Z(ctx) {
  let goa_card_content;
  let goa_button_group;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[1].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[0],
    null
  );
  return {
    c() {
      goa_card_content = element("goa-card-content");
      goa_button_group = element("goa-button-group");
      if (default_slot) default_slot.c();
      set_custom_element_data(goa_button_group, "alignment", "end");
    },
    m(target, anchor) {
      insert(target, goa_card_content, anchor);
      append(goa_card_content, goa_button_group);
      if (default_slot) {
        default_slot.m(goa_button_group, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        1)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[0],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[0]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[0],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(goa_card_content);
      }
      if (default_slot) default_slot.d(detaching);
    }
  };
}
function instance$Z($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  $$self.$$set = ($$props2) => {
    if ("$$scope" in $$props2) $$invalidate(0, $$scope = $$props2.$$scope);
  };
  return [$$scope, slots];
}
class CardActions extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$Z, create_fragment$Z, safe_not_equal, {});
  }
}
customElements.define("goa-card-actions", create_custom_element(CardActions, {}, ["default"], [], true));
function add_css$S(target) {
  append_styles(target, "svelte-1r6ywx6", ":host{box-sizing:border-box;font-family:var(--goa-font-family-sans)}.card-content.svelte-1r6ywx6{padding:1rem}");
}
function create_fragment$Y(ctx) {
  let div;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[1].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[0],
    null
  );
  return {
    c() {
      div = element("div");
      if (default_slot) default_slot.c();
      attr(div, "class", "card-content svelte-1r6ywx6");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        1)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[0],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[0]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[0],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (default_slot) default_slot.d(detaching);
    }
  };
}
function instance$Y($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  $$self.$$set = ($$props2) => {
    if ("$$scope" in $$props2) $$invalidate(0, $$scope = $$props2.$$scope);
  };
  return [$$scope, slots];
}
class CardContent extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$Y, create_fragment$Y, safe_not_equal, {}, add_css$S);
  }
}
customElements.define("goa-card-content", create_custom_element(CardContent, {}, ["default"], [], true));
function add_css$R(target) {
  append_styles(target, "svelte-2vgflm", ":host{box-sizing:border-box;font-family:var(--goa-font-family-sans)}#container.svelte-2vgflm{container:self / inline-size}.card.svelte-2vgflm{background-color:var(--goa-color-greyscale-white);border-radius:4px;overflow:hidden;height:var(--height)}@container self (min-width: 624px){.card.svelte-2vgflm{margin:0 auto}}");
}
function create_fragment$X(ctx) {
  let div1;
  let div0;
  let div0_style_value;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[9].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[8],
    null
  );
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      if (default_slot) default_slot.c();
      attr(
        div0,
        "data-testid",
        /*testid*/
        ctx[7]
      );
      attr(div0, "class", "card svelte-2vgflm");
      attr(div0, "style", div0_style_value = "--width: " + /*width*/
      ctx[1] + "; --height: " + /*height*/
      (ctx[2] === "auto" ? "auto" : "100%") + "; " + calculateMargin(
        /*mt*/
        ctx[3],
        /*mr*/
        ctx[4],
        /*mb*/
        ctx[5],
        /*ml*/
        ctx[6]
      ) + " " + /*elevation*/
      (ctx[0] === 0 ? `border: 1px solid var(--goa-color-greyscale-200);` : `box-shadow: var(--shadow-${/*elevation*/
      ctx[0]});`));
      attr(div1, "id", "container");
      attr(div1, "class", "svelte-2vgflm");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      if (default_slot) {
        default_slot.m(div0, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        256)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[8],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[8]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[8],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*testid*/
      128) {
        attr(
          div0,
          "data-testid",
          /*testid*/
          ctx2[7]
        );
      }
      if (!current || dirty & /*width, height, mt, mr, mb, ml, elevation*/
      127 && div0_style_value !== (div0_style_value = "--width: " + /*width*/
      ctx2[1] + "; --height: " + /*height*/
      (ctx2[2] === "auto" ? "auto" : "100%") + "; " + calculateMargin(
        /*mt*/
        ctx2[3],
        /*mr*/
        ctx2[4],
        /*mb*/
        ctx2[5],
        /*ml*/
        ctx2[6]
      ) + " " + /*elevation*/
      (ctx2[0] === 0 ? `border: 1px solid var(--goa-color-greyscale-200);` : `box-shadow: var(--shadow-${/*elevation*/
      ctx2[0]});`))) {
        attr(div0, "style", div0_style_value);
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      if (default_slot) default_slot.d(detaching);
    }
  };
}
function instance$X($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { elevation = 0 } = $$props;
  let { width = "100%" } = $$props;
  let { height = "auto" } = $$props;
  let { mt = null } = $$props;
  let { mr = null } = $$props;
  let { mb: mb2 = null } = $$props;
  let { ml: ml2 = null } = $$props;
  let { testid = "" } = $$props;
  $$self.$$set = ($$props2) => {
    if ("elevation" in $$props2) $$invalidate(0, elevation = $$props2.elevation);
    if ("width" in $$props2) $$invalidate(1, width = $$props2.width);
    if ("height" in $$props2) $$invalidate(2, height = $$props2.height);
    if ("mt" in $$props2) $$invalidate(3, mt = $$props2.mt);
    if ("mr" in $$props2) $$invalidate(4, mr = $$props2.mr);
    if ("mb" in $$props2) $$invalidate(5, mb2 = $$props2.mb);
    if ("ml" in $$props2) $$invalidate(6, ml2 = $$props2.ml);
    if ("testid" in $$props2) $$invalidate(7, testid = $$props2.testid);
    if ("$$scope" in $$props2) $$invalidate(8, $$scope = $$props2.$$scope);
  };
  return [elevation, width, height, mt, mr, mb2, ml2, testid, $$scope, slots];
}
class Card extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$X,
      create_fragment$X,
      safe_not_equal,
      {
        elevation: 0,
        width: 1,
        height: 2,
        mt: 3,
        mr: 4,
        mb: 5,
        ml: 6,
        testid: 7
      },
      add_css$R
    );
  }
  get elevation() {
    return this.$$.ctx[0];
  }
  set elevation(elevation) {
    this.$$set({ elevation });
    flush();
  }
  get width() {
    return this.$$.ctx[1];
  }
  set width(width) {
    this.$$set({ width });
    flush();
  }
  get height() {
    return this.$$.ctx[2];
  }
  set height(height) {
    this.$$set({ height });
    flush();
  }
  get mt() {
    return this.$$.ctx[3];
  }
  set mt(mt) {
    this.$$set({ mt });
    flush();
  }
  get mr() {
    return this.$$.ctx[4];
  }
  set mr(mr) {
    this.$$set({ mr });
    flush();
  }
  get mb() {
    return this.$$.ctx[5];
  }
  set mb(mb2) {
    this.$$set({ mb: mb2 });
    flush();
  }
  get ml() {
    return this.$$.ctx[6];
  }
  set ml(ml2) {
    this.$$set({ ml: ml2 });
    flush();
  }
  get testid() {
    return this.$$.ctx[7];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
}
customElements.define("goa-card", create_custom_element(Card, { "elevation": {}, "width": {}, "height": {}, "mt": {}, "mr": {}, "mb": {}, "ml": {}, "testid": {} }, ["default"], [], true));
function add_css$Q(target) {
  append_styles(target, "svelte-i7mj8i", ":host{box-sizing:border-box;font-family:var(--goa-font-family-sans)}.card-group.svelte-i7mj8i{display:flex;flex-wrap:wrap;justify-content:space-around;gap:1rem;width:100%}");
}
function create_fragment$W(ctx) {
  let div;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[1].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[0],
    null
  );
  return {
    c() {
      div = element("div");
      if (default_slot) default_slot.c();
      attr(div, "class", "card-group svelte-i7mj8i");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        1)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[0],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[0]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[0],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (default_slot) default_slot.d(detaching);
    }
  };
}
function instance$W($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  $$self.$$set = ($$props2) => {
    if ("$$scope" in $$props2) $$invalidate(0, $$scope = $$props2.$$scope);
  };
  return [$$scope, slots];
}
class CardGroup extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$W, create_fragment$W, safe_not_equal, {}, add_css$Q);
  }
}
customElements.define("goa-card-group", create_custom_element(CardGroup, {}, ["default"], [], true));
function add_css$P(target) {
  append_styles(target, "svelte-1fm1ezr", ":host{box-sizing:border-box;font-family:var(--goa-font-family-sans)}");
}
function create_fragment$V(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      attr(div, "style", `
    background-image: url({src}); 
    height: {height}; 
    background-size: cover; 
    background-position: center;
  `);
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function instance$V($$self, $$props, $$invalidate) {
  let { src } = $$props;
  let { height = "100%" } = $$props;
  $$self.$$set = ($$props2) => {
    if ("src" in $$props2) $$invalidate(0, src = $$props2.src);
    if ("height" in $$props2) $$invalidate(1, height = $$props2.height);
  };
  return [src, height];
}
class CardImage extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$V, create_fragment$V, safe_not_equal, { src: 0, height: 1 }, add_css$P);
  }
  get src() {
    return this.$$.ctx[0];
  }
  set src(src) {
    this.$$set({ src });
    flush();
  }
  get height() {
    return this.$$.ctx[1];
  }
  set height(height) {
    this.$$set({ height });
    flush();
  }
}
customElements.define("goa-card-image", create_custom_element(CardImage, { "src": {}, "height": {} }, [], [], true));
const FormResetErrorsMsg = "form::reset:errors";
const FormSetFieldsetMsg = "form::set:fieldset";
const FormSetValueMsg = "form::set:value";
const FormDispatchStateMsg = "form::dispatch:state";
const FormToggleActiveMsg = "form::toggle:active";
const FieldsetResetErrorsMsg = "fieldset::reset:errors";
const FieldsetResetFieldsMsg = "fieldset::reset:fields";
const FieldsetBindMsg = "fieldset::bind";
const FieldsetSubmitMsg = "fieldset::submit";
const FieldsetSetErrorMsg = "fieldset::set:error";
const FieldsetChangeMsg = "fieldset::change";
const FieldsetMountFormItemMsg = "fieldset::bind:form-item";
const FormItemMountMsg = "form-item::bind";
const ExternalSetErrorMsg = "external::set:error";
const ExternalContinueMsg = "external::continue";
const ExternalAppendDataMsg = "external::append:state";
const ExternalAlterDataMsg = "external::alter:state";
const ExternalResetStateMsg = "external::reset:state";
const FormFieldMountMsg = "form-field::bind";
const FormSummaryBindMsg = "form-summary::bind";
const FormSummaryEditPageMsg = "form-summary::edit:page";
function add_css$O(target) {
  append_styles(target, "svelte-l6g6a3", ':host{--goa-checkbox-size:var(--goa-space-l);--goa-checkbox-border-radius:2px;--goa-checkbox-label-font-size:var(--goa-typography-body-m);--goa-checkbox-description-font-size:var(--goa-typography-body-xs);--goa-checkbox-gap:var(--goa-space-xs);--goa-checkbox-color-label:var(--goa-color-text-default);--goa-checkbox-color-label-disabled:var(--goa-color-greyscale-500);--goa-checkbox-border:var(--goa-border-width-s) solid var(--goa-color-greyscale-700);--goa-checkbox-border-hover:var(--goa-border-width-m) solid var(--goa-color-interactive-hover);--goa-checkbox-border-focus:var(--goa-border-width-l) solid var(--goa-color-interactive-focus);--goa-checkbox-border-error:var(--goa-border-width-m) solid var(--goa-color-interactive-error);--goa-checkbox-border-disabled:var(--goa-border-width-s) solid var(--goa-color-greyscale-400);--goa-checkbox-border-disabled-error:var(--goa-border-width-m) solid #F58185;--goa-checkbox-color-bg:var(--goa-color-greyscale-white);--goa-checkbox-color-bg-checked:var(--goa-color-interactive-default);--goa-checkbox-color-bg-checked-hover:var(--goa-color-interactive-hover);--goa-checkbox-color-bg-checked-disabled:var(--goa-color-interactive-disabled);--goa-checkbox-color-bg-checked-error:var(--goa-color-interactive-error);box-sizing:border-box;font-family:var(--goa-font-family-sans);display:block}.root.svelte-l6g6a3.svelte-l6g6a3{display:block;height:auto;min-height:0;padding:0}input[type="checkbox"].svelte-l6g6a3.svelte-l6g6a3{position:absolute;opacity:0;transform:scale(0);margin:0;cursor:pointer}input[type="checkbox"][disabled].svelte-l6g6a3.svelte-l6g6a3:hover{cursor:default}label.svelte-l6g6a3.svelte-l6g6a3{display:flex;cursor:pointer}label.svelte-l6g6a3:hover .container.svelte-l6g6a3{border:var(--goa-checkbox-border-hover)}label.svelte-l6g6a3:hover .container.selected.svelte-l6g6a3{background-color:var(--goa-checkbox-color-bg-checked-hover);border:none}.text.svelte-l6g6a3.svelte-l6g6a3{padding-left:var(--goa-checkbox-gap);-webkit-user-select:none;-moz-user-select:none;user-select:none;font:var(--goa-checkbox-label-font-size);color:var(--goa-checkbox-color-label)}.description.svelte-l6g6a3.svelte-l6g6a3{font:var(--goa-checkbox-description-font-size);margin-left:var(--goa-space-xl);margin-top:var(--goa-space-2xs)}.container.svelte-l6g6a3.svelte-l6g6a3{box-sizing:border-box;border:var(--goa-checkbox-border);border-radius:var(--goa-checkbox-border-radius);background-color:var(--goa-checkbox-color-bg);height:var(--goa-checkbox-size);width:var(--goa-checkbox-size);margin-top:3px;display:flex;justify-content:center;flex:0 0 auto}.container.svelte-l6g6a3.svelte-l6g6a3:hover{border:var(--goa-checkbox-border-hover)}.container.svelte-l6g6a3 svg.svelte-l6g6a3{fill:var(--goa-checkbox-color-bg);margin:3px}.container.selected.svelte-l6g6a3.svelte-l6g6a3{background-color:var(--goa-checkbox-color-bg-checked);border:none}.container.selected.svelte-l6g6a3.svelte-l6g6a3:hover{background-color:var(--goa-checkbox-color-bg-checked-hover)}.error.svelte-l6g6a3 .container.svelte-l6g6a3,.error.svelte-l6g6a3 .container.svelte-l6g6a3:hover{border:var(--goa-checkbox-border-error);background-color:var(--goa-checkbox-color-bg);box-shadow:none}.error.svelte-l6g6a3 .container.selected.svelte-l6g6a3,.error.svelte-l6g6a3 .container.selected.svelte-l6g6a3:hover{border:var(--goa-checkbox-border-error);background-color:var(--goa-checkbox-color-bg)}label:hover.error.svelte-l6g6a3 .container.svelte-l6g6a3{border:var(--goa-checkbox-border-error)}label:hover.error.svelte-l6g6a3 .container.selected.svelte-l6g6a3{border:var(--goa-checkbox-border-error);background-color:var(--goa-checkbox-color-bg)}.error.svelte-l6g6a3 .container svg.svelte-l6g6a3{fill:var(--goa-checkbox-color-bg-checked-error);margin:1px}.error.svelte-l6g6a3 .container.svelte-l6g6a3:has(:focus-visible){outline:none;box-shadow:0 0 0 3px var(--goa-color-interactive-focus)}.error.svelte-l6g6a3 .container.svelte-l6g6a3:has(:focus-visible):hover{outline:none;border:var(--goa-checkbox-border-error)}.error.svelte-l6g6a3 .container.selected.svelte-l6g6a3:has(:focus-visible):hover{outline:none;border:none;background-color:var(--goa-checkbox-color-bg)}label:hover.error.svelte-l6g6a3 .container.selected.svelte-l6g6a3:has(:focus-visible){outline:none;border:var(--goa-checkbox-border-error);background-color:var(--goa-checkbox-color-bg)}label:hover.error.svelte-l6g6a3 .container.svelte-l6g6a3:has(:focus-visible){outline:none;border:var(--goa-checkbox-border-error)}.container.svelte-l6g6a3.svelte-l6g6a3:has(:focus-visible){outline:none;box-shadow:0 0 0 3px var(--goa-color-interactive-focus)}.container.svelte-l6g6a3.svelte-l6g6a3:has(:focus-visible):hover{outline:none;border:var(--goa-checkbox-border)}.container.selected.svelte-l6g6a3.svelte-l6g6a3:has(:focus-visible):hover{outline:none;border:none;background-color:var(--goa-checkbox-color-bg-checked)}label.svelte-l6g6a3:hover .container.selected.svelte-l6g6a3:has(:focus-visible){outline:none;border:none;background-color:var(--goa-checkbox-color-bg-checked)}label.svelte-l6g6a3:hover .container.svelte-l6g6a3:has(:focus-visible){outline:none;border:var(--goa-checkbox-border)}.disabled.svelte-l6g6a3.svelte-l6g6a3{cursor:default}.disabled.svelte-l6g6a3 .text.svelte-l6g6a3{color:var(--goa-checkbox-color-label-disabled)}label.disabled.svelte-l6g6a3+.description.svelte-l6g6a3{color:var(--goa-checkbox-color-label-disabled);cursor:default}.disabled.svelte-l6g6a3:not(.error) .container.svelte-l6g6a3{border:var(--goa-checkbox-border-disabled);box-shadow:none}.disabled.svelte-l6g6a3:not(.error) .container.selected.svelte-l6g6a3{border:none;background-color:var(--goa-checkbox-color-bg-checked-disabled)}.disabled.error.svelte-l6g6a3 .container.selected.svelte-l6g6a3{border:var(--goa-checkbox-border-disabled-error)}.disabled.error.svelte-l6g6a3 .container.svelte-l6g6a3{border:var(--goa-checkbox-border-disabled-error)}label:hover.disabled.error.svelte-l6g6a3 .container.svelte-l6g6a3{border:var(--goa-checkbox-border-disabled-error)}.disabled.error.svelte-l6g6a3 .container svg.svelte-l6g6a3{fill:#F58185}');
}
const get_description_slot_changes$1 = (dirty) => ({});
const get_description_slot_context$1 = (ctx) => ({});
function create_if_block_2$d(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "d", "M5.09,9.64,1.27,5.82,0,7.09l5.09,5.09L16,1.27,14.73,0Z");
      attr(svg, "id", "checkmark");
      attr(svg, "data-testid", "checkmark");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "viewBox", "0 0 16 12.18");
      attr(svg, "class", "svelte-l6g6a3");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    d(detaching) {
      if (detaching) {
        detach(svg);
      }
    }
  };
}
function create_if_block_1$k(ctx) {
  let svg;
  let rect;
  return {
    c() {
      svg = svg_element("svg");
      rect = svg_element("rect");
      attr(rect, "width", "15");
      attr(rect, "height", "2");
      attr(svg, "id", "dashmark");
      attr(svg, "data-testid", "dashmark");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "viewBox", "0 0 15 2");
      attr(svg, "class", "svelte-l6g6a3");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, rect);
    },
    d(detaching) {
      if (detaching) {
        detach(svg);
      }
    }
  };
}
function fallback_block$3(ctx) {
  let t2;
  return {
    c() {
      t2 = text(
        /*text*/
        ctx[2]
      );
    },
    m(target, anchor) {
      insert(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*text*/
      4) set_data(
        t2,
        /*text*/
        ctx2[2]
      );
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_if_block$w(ctx) {
  let div;
  let t0;
  let t1;
  let current;
  const description_slot_template = (
    /*#slots*/
    ctx[23].description
  );
  const description_slot = create_slot(
    description_slot_template,
    ctx,
    /*$$scope*/
    ctx[22],
    get_description_slot_context$1
  );
  return {
    c() {
      div = element("div");
      if (description_slot) description_slot.c();
      t0 = space();
      t1 = text(
        /*description*/
        ctx[5]
      );
      attr(div, "class", "description svelte-l6g6a3");
      attr(
        div,
        "id",
        /*_descriptionId*/
        ctx[12]
      );
      attr(div, "data-testid", "description");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (description_slot) {
        description_slot.m(div, null);
      }
      append(div, t0);
      append(div, t1);
      current = true;
    },
    p(ctx2, dirty) {
      if (description_slot) {
        if (description_slot.p && (!current || dirty & /*$$scope*/
        4194304)) {
          update_slot_base(
            description_slot,
            description_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[22],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[22]
            ) : get_slot_changes(
              description_slot_template,
              /*$$scope*/
              ctx2[22],
              dirty,
              get_description_slot_changes$1
            ),
            get_description_slot_context$1
          );
        }
      }
      if (!current || dirty & /*description*/
      32) set_data(
        t1,
        /*description*/
        ctx2[5]
      );
      if (!current || dirty & /*_descriptionId*/
      4096) {
        attr(
          div,
          "id",
          /*_descriptionId*/
          ctx2[12]
        );
      }
    },
    i(local) {
      if (current) return;
      transition_in(description_slot, local);
      current = true;
    },
    o(local) {
      transition_out(description_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (description_slot) description_slot.d(detaching);
    }
  };
}
function create_fragment$U(ctx) {
  let div2;
  let label;
  let div0;
  let input;
  let input_value_value;
  let input_aria_label_value;
  let input_aria_describedby_value;
  let t0;
  let t1;
  let div1;
  let t2;
  let div2_style_value;
  let current;
  let mounted;
  let dispose;
  function select_block_type(ctx2, dirty) {
    if (
      /*isIndeterminate*/
      ctx2[14]
    ) return create_if_block_1$k;
    if (
      /*isChecked*/
      ctx2[13]
    ) return create_if_block_2$d;
  }
  let current_block_type = select_block_type(ctx);
  let if_block0 = current_block_type && current_block_type(ctx);
  const default_slot_template = (
    /*#slots*/
    ctx[23].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[22],
    null
  );
  const default_slot_or_fallback = default_slot || fallback_block$3(ctx);
  let if_block1 = (
    /*$$slots*/
    (ctx[18].description || /*description*/
    ctx[5]) && create_if_block$w(ctx)
  );
  return {
    c() {
      div2 = element("div");
      label = element("label");
      div0 = element("div");
      input = element("input");
      t0 = space();
      if (if_block0) if_block0.c();
      t1 = space();
      div1 = element("div");
      if (default_slot_or_fallback) default_slot_or_fallback.c();
      t2 = space();
      if (if_block1) if_block1.c();
      attr(
        input,
        "id",
        /*name*/
        ctx[1]
      );
      attr(
        input,
        "name",
        /*name*/
        ctx[1]
      );
      input.checked = /*isChecked*/
      ctx[13];
      input.disabled = /*isDisabled*/
      ctx[16];
      attr(input, "type", "checkbox");
      input.value = input_value_value = `${/*value*/
      ctx[0]}`;
      attr(input, "aria-label", input_aria_label_value = /*arialabel*/
      ctx[4] || /*text*/
      ctx[2] || /*name*/
      ctx[1]);
      attr(input, "aria-describedby", input_aria_describedby_value = /*description*/
      ctx[5] ? (
        /*_descriptionId*/
        ctx[12]
      ) : null);
      attr(input, "class", "svelte-l6g6a3");
      attr(div0, "class", "container svelte-l6g6a3");
      toggle_class(
        div0,
        "selected",
        /*isChecked*/
        ctx[13]
      );
      attr(div1, "class", "text svelte-l6g6a3");
      attr(div1, "data-testid", "text");
      attr(
        label,
        "data-testid",
        /*testid*/
        ctx[3]
      );
      attr(
        label,
        "for",
        /*name*/
        ctx[1]
      );
      attr(label, "class", "svelte-l6g6a3");
      toggle_class(
        label,
        "disabled",
        /*isDisabled*/
        ctx[16]
      );
      toggle_class(
        label,
        "error",
        /*isError*/
        ctx[15]
      );
      attr(div2, "class", "root svelte-l6g6a3");
      attr(div2, "style", div2_style_value = `
    ${calculateMargin(
        /*mt*/
        ctx[7],
        /*mr*/
        ctx[8],
        /*mb*/
        ctx[9],
        /*ml*/
        ctx[10]
      )}
    max-width: ${/*maxwidth*/
      ctx[6]};
  `);
    },
    m(target, anchor) {
      insert(target, div2, anchor);
      append(div2, label);
      append(label, div0);
      append(div0, input);
      ctx[24](input);
      append(div0, t0);
      if (if_block0) if_block0.m(div0, null);
      append(label, t1);
      append(label, div1);
      if (default_slot_or_fallback) {
        default_slot_or_fallback.m(div1, null);
      }
      append(div2, t2);
      if (if_block1) if_block1.m(div2, null);
      current = true;
      if (!mounted) {
        dispose = listen(
          input,
          "change",
          /*onChange*/
          ctx[17]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & /*name*/
      2) {
        attr(
          input,
          "id",
          /*name*/
          ctx2[1]
        );
      }
      if (!current || dirty & /*name*/
      2) {
        attr(
          input,
          "name",
          /*name*/
          ctx2[1]
        );
      }
      if (!current || dirty & /*isChecked*/
      8192) {
        input.checked = /*isChecked*/
        ctx2[13];
      }
      if (!current || dirty & /*isDisabled*/
      65536) {
        input.disabled = /*isDisabled*/
        ctx2[16];
      }
      if (!current || dirty & /*value*/
      1 && input_value_value !== (input_value_value = `${/*value*/
      ctx2[0]}`)) {
        input.value = input_value_value;
      }
      if (!current || dirty & /*arialabel, text, name*/
      22 && input_aria_label_value !== (input_aria_label_value = /*arialabel*/
      ctx2[4] || /*text*/
      ctx2[2] || /*name*/
      ctx2[1])) {
        attr(input, "aria-label", input_aria_label_value);
      }
      if (!current || dirty & /*description, _descriptionId*/
      4128 && input_aria_describedby_value !== (input_aria_describedby_value = /*description*/
      ctx2[5] ? (
        /*_descriptionId*/
        ctx2[12]
      ) : null)) {
        attr(input, "aria-describedby", input_aria_describedby_value);
      }
      if (current_block_type !== (current_block_type = select_block_type(ctx2))) {
        if (if_block0) if_block0.d(1);
        if_block0 = current_block_type && current_block_type(ctx2);
        if (if_block0) {
          if_block0.c();
          if_block0.m(div0, null);
        }
      }
      if (!current || dirty & /*isChecked*/
      8192) {
        toggle_class(
          div0,
          "selected",
          /*isChecked*/
          ctx2[13]
        );
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        4194304)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[22],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[22]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[22],
              dirty,
              null
            ),
            null
          );
        }
      } else {
        if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*text*/
        4)) {
          default_slot_or_fallback.p(ctx2, !current ? -1 : dirty);
        }
      }
      if (!current || dirty & /*testid*/
      8) {
        attr(
          label,
          "data-testid",
          /*testid*/
          ctx2[3]
        );
      }
      if (!current || dirty & /*name*/
      2) {
        attr(
          label,
          "for",
          /*name*/
          ctx2[1]
        );
      }
      if (!current || dirty & /*isDisabled*/
      65536) {
        toggle_class(
          label,
          "disabled",
          /*isDisabled*/
          ctx2[16]
        );
      }
      if (!current || dirty & /*isError*/
      32768) {
        toggle_class(
          label,
          "error",
          /*isError*/
          ctx2[15]
        );
      }
      if (
        /*$$slots*/
        ctx2[18].description || /*description*/
        ctx2[5]
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & /*$$slots, description*/
          262176) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block$w(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(div2, null);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      if (!current || dirty & /*mt, mr, mb, ml, maxwidth*/
      1984 && div2_style_value !== (div2_style_value = `
    ${calculateMargin(
        /*mt*/
        ctx2[7],
        /*mr*/
        ctx2[8],
        /*mb*/
        ctx2[9],
        /*ml*/
        ctx2[10]
      )}
    max-width: ${/*maxwidth*/
      ctx2[6]};
  `)) {
        attr(div2, "style", div2_style_value);
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot_or_fallback, local);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(default_slot_or_fallback, local);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div2);
      }
      ctx[24](null);
      if (if_block0) {
        if_block0.d();
      }
      if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
      if (if_block1) if_block1.d();
      mounted = false;
      dispose();
    }
  };
}
function instance$U($$self, $$props, $$invalidate) {
  let isDisabled;
  let isError;
  let isChecked;
  let isIndeterminate;
  let { $$slots: slots = {}, $$scope } = $$props;
  const $$slots = compute_slots(slots);
  let { name } = $$props;
  let { checked = "false" } = $$props;
  let { text: text2 = "" } = $$props;
  let { value = "" } = $$props;
  let { disabled = "false" } = $$props;
  let { error = "false" } = $$props;
  let { testid = "" } = $$props;
  let { arialabel = "" } = $$props;
  let { description = "" } = $$props;
  let { maxwidth = "none" } = $$props;
  let { mt = null } = $$props;
  let { mr = null } = $$props;
  let { mb: mb2 = "m" } = $$props;
  let { ml: ml2 = null } = $$props;
  let _value;
  let _checkboxRef;
  let _descriptionId;
  onMount(() => {
    _value = value;
    $$invalidate(12, _descriptionId = `description_${name}`);
    addRelayListener();
    sendMountedMessage();
  });
  function addRelayListener() {
    receive(_checkboxRef, (action, data) => {
      switch (action) {
        case FormSetValueMsg:
          onSetValue(data);
          break;
        case FieldsetSetErrorMsg:
          $$invalidate(20, error = "true");
          break;
        case FieldsetResetErrorsMsg:
          $$invalidate(20, error = "false");
          break;
      }
    });
  }
  function onSetValue(detail) {
    $$invalidate(0, value = detail.value);
    $$invalidate(19, checked = detail.value ? "true" : "false");
    dispatch$1(_checkboxRef, "_change", { name, value }, { bubbles: true });
  }
  function sendMountedMessage() {
    relay(_checkboxRef, FormFieldMountMsg, { name, el: _checkboxRef }, { bubbles: true, timeout: 10 });
  }
  function onChange2(e) {
    var _a;
    _checkboxRef.focus();
    const newCheckStatus = !isChecked;
    const newValue = newCheckStatus ? `${_value || "checked"}` : "";
    $$invalidate(19, checked = fromBoolean(newCheckStatus));
    (_a = e.target) == null ? void 0 : _a.dispatchEvent(new CustomEvent(
      "_change",
      {
        composed: true,
        detail: {
          name,
          checked: newCheckStatus,
          value: newValue
        },
        bubbles: true
      }
    ));
  }
  function input_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _checkboxRef = $$value;
      $$invalidate(11, _checkboxRef);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("name" in $$props2) $$invalidate(1, name = $$props2.name);
    if ("checked" in $$props2) $$invalidate(19, checked = $$props2.checked);
    if ("text" in $$props2) $$invalidate(2, text2 = $$props2.text);
    if ("value" in $$props2) $$invalidate(0, value = $$props2.value);
    if ("disabled" in $$props2) $$invalidate(21, disabled = $$props2.disabled);
    if ("error" in $$props2) $$invalidate(20, error = $$props2.error);
    if ("testid" in $$props2) $$invalidate(3, testid = $$props2.testid);
    if ("arialabel" in $$props2) $$invalidate(4, arialabel = $$props2.arialabel);
    if ("description" in $$props2) $$invalidate(5, description = $$props2.description);
    if ("maxwidth" in $$props2) $$invalidate(6, maxwidth = $$props2.maxwidth);
    if ("mt" in $$props2) $$invalidate(7, mt = $$props2.mt);
    if ("mr" in $$props2) $$invalidate(8, mr = $$props2.mr);
    if ("mb" in $$props2) $$invalidate(9, mb2 = $$props2.mb);
    if ("ml" in $$props2) $$invalidate(10, ml2 = $$props2.ml);
    if ("$$scope" in $$props2) $$invalidate(22, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*disabled*/
    2097152) {
      $$invalidate(16, isDisabled = toBoolean(disabled));
    }
    if ($$self.$$.dirty & /*error*/
    1048576) {
      $$invalidate(15, isError = toBoolean(error));
    }
    if ($$self.$$.dirty & /*checked*/
    524288) {
      $$invalidate(13, isChecked = toBoolean(checked));
    }
  };
  $$invalidate(14, isIndeterminate = false);
  return [
    value,
    name,
    text2,
    testid,
    arialabel,
    description,
    maxwidth,
    mt,
    mr,
    mb2,
    ml2,
    _checkboxRef,
    _descriptionId,
    isChecked,
    isIndeterminate,
    isError,
    isDisabled,
    onChange2,
    $$slots,
    checked,
    error,
    disabled,
    $$scope,
    slots,
    input_binding
  ];
}
class Checkbox extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$U,
      create_fragment$U,
      safe_not_equal,
      {
        name: 1,
        checked: 19,
        text: 2,
        value: 0,
        disabled: 21,
        error: 20,
        testid: 3,
        arialabel: 4,
        description: 5,
        maxwidth: 6,
        mt: 7,
        mr: 8,
        mb: 9,
        ml: 10
      },
      add_css$O
    );
  }
  get name() {
    return this.$$.ctx[1];
  }
  set name(name) {
    this.$$set({ name });
    flush();
  }
  get checked() {
    return this.$$.ctx[19];
  }
  set checked(checked) {
    this.$$set({ checked });
    flush();
  }
  get text() {
    return this.$$.ctx[2];
  }
  set text(text2) {
    this.$$set({ text: text2 });
    flush();
  }
  get value() {
    return this.$$.ctx[0];
  }
  set value(value) {
    this.$$set({ value });
    flush();
  }
  get disabled() {
    return this.$$.ctx[21];
  }
  set disabled(disabled) {
    this.$$set({ disabled });
    flush();
  }
  get error() {
    return this.$$.ctx[20];
  }
  set error(error) {
    this.$$set({ error });
    flush();
  }
  get testid() {
    return this.$$.ctx[3];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
  get arialabel() {
    return this.$$.ctx[4];
  }
  set arialabel(arialabel) {
    this.$$set({ arialabel });
    flush();
  }
  get description() {
    return this.$$.ctx[5];
  }
  set description(description) {
    this.$$set({ description });
    flush();
  }
  get maxwidth() {
    return this.$$.ctx[6];
  }
  set maxwidth(maxwidth) {
    this.$$set({ maxwidth });
    flush();
  }
  get mt() {
    return this.$$.ctx[7];
  }
  set mt(mt) {
    this.$$set({ mt });
    flush();
  }
  get mr() {
    return this.$$.ctx[8];
  }
  set mr(mr) {
    this.$$set({ mr });
    flush();
  }
  get mb() {
    return this.$$.ctx[9];
  }
  set mb(mb2) {
    this.$$set({ mb: mb2 });
    flush();
  }
  get ml() {
    return this.$$.ctx[10];
  }
  set ml(ml2) {
    this.$$set({ ml: ml2 });
    flush();
  }
}
customElements.define("goa-checkbox", create_custom_element(Checkbox, { "name": {}, "checked": {}, "text": {}, "value": {}, "disabled": {}, "error": {}, "testid": {}, "arialabel": {}, "description": {}, "maxwidth": {}, "mt": {}, "mr": {}, "mb": {}, "ml": {} }, ["default", "description"], [], true));
function add_css$N(target) {
  append_styles(target, "svelte-vpqbh0", ".leading-icon.svelte-vpqbh0{margin-left:-0.25rem}.chip.svelte-vpqbh0{vertical-align:middle;align-items:center;background-color:var(--goa-color-greyscale-white);border-radius:1rem;border:var(--goa-border-width-s) solid var(--goa-color-greyscale-500);box-sizing:border-box;color:var(--goa-color-text-default);display:inline-flex;flex-direction:row;font-size:var(--goa-font-size-3);font-weight:var(--goa-font-weight-regular);gap:0.25rem;min-height:2rem;justify-content:center;padding:0 0.75rem;cursor:default;white-space:normal;word-wrap:break-word}.text.svelte-vpqbh0{padding-bottom:var(\n      --font-valign-fix,\n      0\n    )}.chip.svelte-vpqbh0:focus{outline:var(--goa-border-width-m) solid var(--goa-color-interactive-focus);background-color:var(--goa-color-greyscale-white)}.chip.svelte-vpqbh0:hover{background-color:var(--goa-color-greyscale-200)}.deletable.svelte-vpqbh0{cursor:pointer}.delete-icon.svelte-vpqbh0{margin-right:-0.25rem}.error.svelte-vpqbh0,.error.svelte-vpqbh0:hover{background-color:var(--goa-color-emergency-light)}");
}
function create_if_block_1$j(ctx) {
  let goa_icon;
  return {
    c() {
      goa_icon = element("goa-icon");
      set_custom_element_data(goa_icon, "class", "leading-icon svelte-vpqbh0");
      set_custom_element_data(goa_icon, "size", "medium");
      set_custom_element_data(
        goa_icon,
        "type",
        /*leadingicon*/
        ctx[4]
      );
      set_custom_element_data(
        goa_icon,
        "theme",
        /*icontheme*/
        ctx[5]
      );
    },
    m(target, anchor) {
      insert(target, goa_icon, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*leadingicon*/
      16) {
        set_custom_element_data(
          goa_icon,
          "type",
          /*leadingicon*/
          ctx2[4]
        );
      }
      if (dirty & /*icontheme*/
      32) {
        set_custom_element_data(
          goa_icon,
          "theme",
          /*icontheme*/
          ctx2[5]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(goa_icon);
      }
    }
  };
}
function create_if_block$v(ctx) {
  let goa_icon;
  let goa_icon_fillcolor_value;
  let goa_icon_opacity_value;
  return {
    c() {
      goa_icon = element("goa-icon");
      set_custom_element_data(goa_icon, "class", "delete-icon svelte-vpqbh0");
      set_custom_element_data(goa_icon, "size", "medium");
      set_custom_element_data(goa_icon, "theme", "filled");
      set_custom_element_data(goa_icon, "type", "close-circle");
      set_custom_element_data(goa_icon, "fillcolor", goa_icon_fillcolor_value = /*_error*/
      ctx[11] ? "var(--goa-color-emergency-default)" : (
        /*_hovering*/
        ctx[10] ? "var(--goa-color-interactive-hover)" : "var(--goa-color-greyscale-700)"
      ));
      set_custom_element_data(goa_icon, "opacity", goa_icon_opacity_value = /*_error*/
      ctx[11] ? (
        /*_hovering*/
        ctx[10] ? 1 : 0.5
      ) : 1);
    },
    m(target, anchor) {
      insert(target, goa_icon, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*_error, _hovering*/
      3072 && goa_icon_fillcolor_value !== (goa_icon_fillcolor_value = /*_error*/
      ctx2[11] ? "var(--goa-color-emergency-default)" : (
        /*_hovering*/
        ctx2[10] ? "var(--goa-color-interactive-hover)" : "var(--goa-color-greyscale-700)"
      ))) {
        set_custom_element_data(goa_icon, "fillcolor", goa_icon_fillcolor_value);
      }
      if (dirty & /*_error, _hovering*/
      3072 && goa_icon_opacity_value !== (goa_icon_opacity_value = /*_error*/
      ctx2[11] ? (
        /*_hovering*/
        ctx2[10] ? 1 : 0.5
      ) : 1)) {
        set_custom_element_data(goa_icon, "opacity", goa_icon_opacity_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(goa_icon);
      }
    }
  };
}
function create_fragment$T(ctx) {
  let div1;
  let t0;
  let div0;
  let t1;
  let t2;
  let div1_style_value;
  let mounted;
  let dispose;
  let if_block0 = (
    /*leadingicon*/
    ctx[4] && create_if_block_1$j(ctx)
  );
  let if_block1 = (
    /*_deletable*/
    ctx[12] && create_if_block$v(ctx)
  );
  return {
    c() {
      div1 = element("div");
      if (if_block0) if_block0.c();
      t0 = space();
      div0 = element("div");
      t1 = text(
        /*content*/
        ctx[6]
      );
      t2 = space();
      if (if_block1) if_block1.c();
      attr(div0, "class", "text svelte-vpqbh0");
      attr(
        div1,
        "data-testid",
        /*testid*/
        ctx[8]
      );
      attr(div1, "class", "chip svelte-vpqbh0");
      attr(div1, "style", div1_style_value = calculateMargin(
        /*mt*/
        ctx[0],
        /*mr*/
        ctx[1],
        /*mb*/
        ctx[2],
        /*ml*/
        ctx[3]
      ));
      attr(div1, "tabindex", "0");
      toggle_class(
        div1,
        "deletable",
        /*_deletable*/
        ctx[12]
      );
      toggle_class(
        div1,
        "error",
        /*_error*/
        ctx[11]
      );
      toggle_class(
        div1,
        "variant",
        /*variant*/
        ctx[7]
      );
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      if (if_block0) if_block0.m(div1, null);
      append(div1, t0);
      append(div1, div0);
      append(div0, t1);
      append(div1, t2);
      if (if_block1) if_block1.m(div1, null);
      ctx[16](div1);
      if (!mounted) {
        dispose = [
          listen(
            div1,
            "click",
            /*click_handler*/
            ctx[17]
          ),
          listen(
            div1,
            "mouseover",
            /*mouseover_handler*/
            ctx[18]
          ),
          listen(
            div1,
            "mouseout",
            /*mouseout_handler*/
            ctx[19]
          ),
          listen(
            div1,
            "focus",
            /*focus_handler*/
            ctx[20]
          ),
          listen(
            div1,
            "blur",
            /*blur_handler*/
            ctx[21]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (
        /*leadingicon*/
        ctx2[4]
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_1$j(ctx2);
          if_block0.c();
          if_block0.m(div1, t0);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (dirty & /*content*/
      64) set_data(
        t1,
        /*content*/
        ctx2[6]
      );
      if (
        /*_deletable*/
        ctx2[12]
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block$v(ctx2);
          if_block1.c();
          if_block1.m(div1, null);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (dirty & /*testid*/
      256) {
        attr(
          div1,
          "data-testid",
          /*testid*/
          ctx2[8]
        );
      }
      if (dirty & /*mt, mr, mb, ml*/
      15 && div1_style_value !== (div1_style_value = calculateMargin(
        /*mt*/
        ctx2[0],
        /*mr*/
        ctx2[1],
        /*mb*/
        ctx2[2],
        /*ml*/
        ctx2[3]
      ))) {
        attr(div1, "style", div1_style_value);
      }
      if (dirty & /*_deletable*/
      4096) {
        toggle_class(
          div1,
          "deletable",
          /*_deletable*/
          ctx2[12]
        );
      }
      if (dirty & /*_error*/
      2048) {
        toggle_class(
          div1,
          "error",
          /*_error*/
          ctx2[11]
        );
      }
      if (dirty & /*variant*/
      128) {
        toggle_class(
          div1,
          "variant",
          /*variant*/
          ctx2[7]
        );
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      if (if_block0) if_block0.d();
      if (if_block1) if_block1.d();
      ctx[16](null);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$T($$self, $$props, $$invalidate) {
  let { mt = null } = $$props;
  let { mr = null } = $$props;
  let { mb: mb2 = null } = $$props;
  let { ml: ml2 = null } = $$props;
  let { leadingicon = null } = $$props;
  let { icontheme = "outline" } = $$props;
  let { error = "false" } = $$props;
  let { deletable = "false" } = $$props;
  let { content } = $$props;
  let { variant } = $$props;
  let { testid = "" } = $$props;
  let el2;
  let _hovering = false;
  let _error;
  let _deletable;
  function onDelete(e) {
    el2.dispatchEvent(new CustomEvent("_click", { composed: true, bubbles: true }));
    e.stopPropagation();
  }
  function div1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      el2 = $$value;
      $$invalidate(9, el2);
    });
  }
  const click_handler = (e) => _deletable && onDelete(e);
  const mouseover_handler = () => $$invalidate(10, _hovering = true);
  const mouseout_handler = () => $$invalidate(10, _hovering = false);
  const focus_handler = () => $$invalidate(10, _hovering = false);
  const blur_handler = () => $$invalidate(10, _hovering = false);
  $$self.$$set = ($$props2) => {
    if ("mt" in $$props2) $$invalidate(0, mt = $$props2.mt);
    if ("mr" in $$props2) $$invalidate(1, mr = $$props2.mr);
    if ("mb" in $$props2) $$invalidate(2, mb2 = $$props2.mb);
    if ("ml" in $$props2) $$invalidate(3, ml2 = $$props2.ml);
    if ("leadingicon" in $$props2) $$invalidate(4, leadingicon = $$props2.leadingicon);
    if ("icontheme" in $$props2) $$invalidate(5, icontheme = $$props2.icontheme);
    if ("error" in $$props2) $$invalidate(14, error = $$props2.error);
    if ("deletable" in $$props2) $$invalidate(15, deletable = $$props2.deletable);
    if ("content" in $$props2) $$invalidate(6, content = $$props2.content);
    if ("variant" in $$props2) $$invalidate(7, variant = $$props2.variant);
    if ("testid" in $$props2) $$invalidate(8, testid = $$props2.testid);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*error*/
    16384) {
      $$invalidate(11, _error = toBoolean(error));
    }
    if ($$self.$$.dirty & /*deletable*/
    32768) {
      $$invalidate(12, _deletable = toBoolean(deletable));
    }
  };
  return [
    mt,
    mr,
    mb2,
    ml2,
    leadingicon,
    icontheme,
    content,
    variant,
    testid,
    el2,
    _hovering,
    _error,
    _deletable,
    onDelete,
    error,
    deletable,
    div1_binding,
    click_handler,
    mouseover_handler,
    mouseout_handler,
    focus_handler,
    blur_handler
  ];
}
class Chip extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$T,
      create_fragment$T,
      safe_not_equal,
      {
        mt: 0,
        mr: 1,
        mb: 2,
        ml: 3,
        leadingicon: 4,
        icontheme: 5,
        error: 14,
        deletable: 15,
        content: 6,
        variant: 7,
        testid: 8
      },
      add_css$N
    );
  }
  get mt() {
    return this.$$.ctx[0];
  }
  set mt(mt) {
    this.$$set({ mt });
    flush();
  }
  get mr() {
    return this.$$.ctx[1];
  }
  set mr(mr) {
    this.$$set({ mr });
    flush();
  }
  get mb() {
    return this.$$.ctx[2];
  }
  set mb(mb2) {
    this.$$set({ mb: mb2 });
    flush();
  }
  get ml() {
    return this.$$.ctx[3];
  }
  set ml(ml2) {
    this.$$set({ ml: ml2 });
    flush();
  }
  get leadingicon() {
    return this.$$.ctx[4];
  }
  set leadingicon(leadingicon) {
    this.$$set({ leadingicon });
    flush();
  }
  get icontheme() {
    return this.$$.ctx[5];
  }
  set icontheme(icontheme) {
    this.$$set({ icontheme });
    flush();
  }
  get error() {
    return this.$$.ctx[14];
  }
  set error(error) {
    this.$$set({ error });
    flush();
  }
  get deletable() {
    return this.$$.ctx[15];
  }
  set deletable(deletable) {
    this.$$set({ deletable });
    flush();
  }
  get content() {
    return this.$$.ctx[6];
  }
  set content(content) {
    this.$$set({ content });
    flush();
  }
  get variant() {
    return this.$$.ctx[7];
  }
  set variant(variant) {
    this.$$set({ variant });
    flush();
  }
  get testid() {
    return this.$$.ctx[8];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
}
customElements.define("goa-chip", create_custom_element(Chip, { "mt": {}, "mr": {}, "mb": {}, "ml": {}, "leadingicon": {}, "icontheme": {}, "error": {}, "deletable": {}, "content": {}, "variant": {}, "testid": {} }, [], [], true));
function cubicOut(t2) {
  const f2 = t2 - 1;
  return f2 * f2 * f2 + 1;
}
function quartOut(t2) {
  return Math.pow(t2 - 1, 3) * (1 - t2) + 1;
}
function fade(node, { delay = 0, duration = 400, easing = identity } = {}) {
  const o = +getComputedStyle(node).opacity;
  return {
    delay,
    duration,
    easing,
    css: (t2) => `opacity: ${t2 * o}`
  };
}
function fly(node, { delay = 0, duration = 400, easing = cubicOut, x: x2 = 0, y: y2 = 0, opacity = 0 } = {}) {
  const style2 = getComputedStyle(node);
  const target_opacity = +style2.opacity;
  const transform = style2.transform === "none" ? "" : style2.transform;
  const od2 = target_opacity * (1 - opacity);
  const [xValue, xUnit] = split_css_unit(x2);
  const [yValue, yUnit] = split_css_unit(y2);
  return {
    delay,
    duration,
    easing,
    css: (t2, u2) => `
			transform: ${transform} translate(${(1 - t2) * xValue}${xUnit}, ${(1 - t2) * yValue}${yUnit});
			opacity: ${target_opacity - od2 * u2}`
  };
}
function noscroll(_node, opts) {
  let toggledScrolling = false;
  function isScrollable() {
    return document.body.style.overflow !== "hidden";
  }
  function resetScrollbars() {
    if (!toggledScrolling) {
      return;
    }
    toggledScrolling = false;
    setTimeout(() => {
      document.body.style.overflow = "";
      document.body.style.borderRight = "";
    }, 200);
  }
  function hideScrollbars() {
    if (!isScrollable()) {
      return;
    }
    const scrollbarWidth = calculateScrollbarWidth();
    toggledScrolling = true;
    document.body.style.overflow = "hidden";
    document.body.style.borderRight = `${scrollbarWidth}px solid #eee`;
  }
  function calculateScrollbarWidth() {
    var _a;
    if (document.body.clientHeight <= document.documentElement.clientHeight) {
      return 0;
    }
    const outer = document.createElement("div");
    outer.style.visibility = "hidden";
    outer.style.overflow = "scroll";
    document.body.appendChild(outer);
    const inner = document.createElement("div");
    outer.appendChild(inner);
    const scrollbarWidth = outer.offsetWidth - inner.offsetWidth;
    (_a = outer.parentNode) == null ? void 0 : _a.removeChild(outer);
    return scrollbarWidth;
  }
  if (opts.enable) {
    hideScrollbars();
  }
  return {
    update() {
      if (!opts.enable) {
        resetScrollbars();
      }
    },
    destroy() {
      resetScrollbars();
    }
  };
}
function add_css$M(target) {
  append_styles(target, "svelte-1uuvcgf", ":host{--goa-circular-progress-color-background:rgba(255, 255, 255, 0.9);--goa-circular-progress-small-text:var(--goa-typography-body-m);--goa-circular-progress-large-text:var(--goa-typography-body-l);--goa-circular-progress-small-margin-top:var(--goa-space-l);--goa-circular-progress-large-margin-top:var(--goa-space-xl);box-sizing:border-box;font-family:var(--goa-font-family-sans)}.fullscreen.svelte-1uuvcgf.svelte-1uuvcgf{position:fixed;inset:0;z-index:9999;display:flex;align-items:center;justify-content:center;flex-direction:column;background-color:var(--goa-circular-progress-color-background)}.inline.svelte-1uuvcgf.svelte-1uuvcgf{margin:3.5rem;display:inline-flex;flex-direction:column;align-items:center;justify-content:center}.spinner-large.svelte-1uuvcgf .message.svelte-1uuvcgf{margin-top:var(--goa-circular-progress-small-margin-top);font:var(--goa-circular-progress-medium-text)}.spinner-xlarge.svelte-1uuvcgf .message.svelte-1uuvcgf{margin-top:var(--goa-circular-progress-large-margin-top);font:var(--goa-circular-progress-large-text)}");
}
function create_if_block$u(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  const if_block_creators = [create_if_block_1$i, create_if_block_3$c];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*fullscreen*/
      ctx2[4]
    ) return 0;
    if (
      /*inline*/
      ctx2[5]
    ) return 1;
    return -1;
  }
  if (~(current_block_type_index = select_block_type(ctx))) {
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  }
  return {
    c() {
      if (if_block) if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].m(target, anchor);
      }
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        }
      } else {
        if (if_block) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
        }
        if (~current_block_type_index) {
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        } else {
          if_block = null;
        }
      }
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].d(detaching);
      }
    }
  };
}
function create_if_block_3$c(ctx) {
  let div;
  let goa_spinner;
  let t2;
  let div_class_value;
  let if_block = (
    /*message*/
    ctx[0] && create_if_block_4$5(ctx)
  );
  return {
    c() {
      div = element("div");
      goa_spinner = element("goa-spinner");
      t2 = space();
      if (if_block) if_block.c();
      set_custom_element_data(
        goa_spinner,
        "size",
        /*spinnerSize*/
        ctx[3]
      );
      set_custom_element_data(
        goa_spinner,
        "progress",
        /*progress*/
        ctx[1]
      );
      attr(div, "class", div_class_value = null_to_empty("spinner-" + /*spinnerSize*/
      ctx[3]) + " svelte-1uuvcgf");
      attr(
        div,
        "data-testid",
        /*testid*/
        ctx[2]
      );
      toggle_class(
        div,
        "inline",
        /*inline*/
        ctx[5]
      );
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, goa_spinner);
      append(div, t2);
      if (if_block) if_block.m(div, null);
    },
    p(ctx2, dirty) {
      if (dirty & /*spinnerSize*/
      8) {
        set_custom_element_data(
          goa_spinner,
          "size",
          /*spinnerSize*/
          ctx2[3]
        );
      }
      if (dirty & /*progress*/
      2) {
        set_custom_element_data(
          goa_spinner,
          "progress",
          /*progress*/
          ctx2[1]
        );
      }
      if (
        /*message*/
        ctx2[0]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block_4$5(ctx2);
          if_block.c();
          if_block.m(div, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (dirty & /*spinnerSize*/
      8 && div_class_value !== (div_class_value = null_to_empty("spinner-" + /*spinnerSize*/
      ctx2[3]) + " svelte-1uuvcgf")) {
        attr(div, "class", div_class_value);
      }
      if (dirty & /*testid*/
      4) {
        attr(
          div,
          "data-testid",
          /*testid*/
          ctx2[2]
        );
      }
      if (dirty & /*spinnerSize, inline*/
      40) {
        toggle_class(
          div,
          "inline",
          /*inline*/
          ctx2[5]
        );
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (if_block) if_block.d();
    }
  };
}
function create_if_block_1$i(ctx) {
  let div;
  let goa_spinner;
  let t2;
  let div_transition;
  let current;
  let mounted;
  let dispose;
  let if_block = (
    /*message*/
    ctx[0] && create_if_block_2$c(ctx)
  );
  return {
    c() {
      div = element("div");
      goa_spinner = element("goa-spinner");
      t2 = space();
      if (if_block) if_block.c();
      set_custom_element_data(
        goa_spinner,
        "size",
        /*spinnerSize*/
        ctx[3]
      );
      set_custom_element_data(
        goa_spinner,
        "progress",
        /*progress*/
        ctx[1]
      );
      attr(
        div,
        "data-testid",
        /*testid*/
        ctx[2]
      );
      attr(div, "class", "svelte-1uuvcgf");
      toggle_class(
        div,
        "fullscreen",
        /*fullscreen*/
        ctx[4]
      );
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, goa_spinner);
      append(div, t2);
      if (if_block) if_block.m(div, null);
      current = true;
      if (!mounted) {
        dispose = action_destroyer(noscroll.call(null, div, { enable: true }));
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (!current || dirty & /*spinnerSize*/
      8) {
        set_custom_element_data(
          goa_spinner,
          "size",
          /*spinnerSize*/
          ctx2[3]
        );
      }
      if (!current || dirty & /*progress*/
      2) {
        set_custom_element_data(
          goa_spinner,
          "progress",
          /*progress*/
          ctx2[1]
        );
      }
      if (
        /*message*/
        ctx2[0]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block_2$c(ctx2);
          if_block.c();
          if_block.m(div, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (!current || dirty & /*testid*/
      4) {
        attr(
          div,
          "data-testid",
          /*testid*/
          ctx2[2]
        );
      }
      if (!current || dirty & /*fullscreen*/
      16) {
        toggle_class(
          div,
          "fullscreen",
          /*fullscreen*/
          ctx2[4]
        );
      }
    },
    i(local) {
      if (current) return;
      if (local) {
        add_render_callback(() => {
          if (!current) return;
          if (!div_transition) div_transition = create_bidirectional_transition(div, fade, { duration: 300 }, true);
          div_transition.run(1);
        });
      }
      current = true;
    },
    o(local) {
      if (local) {
        if (!div_transition) div_transition = create_bidirectional_transition(div, fade, { duration: 300 }, false);
        div_transition.run(0);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (if_block) if_block.d();
      if (detaching && div_transition) div_transition.end();
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_4$5(ctx) {
  let div;
  let t2;
  return {
    c() {
      div = element("div");
      t2 = text(
        /*message*/
        ctx[0]
      );
      attr(div, "class", "message svelte-1uuvcgf");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*message*/
      1) set_data(
        t2,
        /*message*/
        ctx2[0]
      );
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_if_block_2$c(ctx) {
  let div;
  let t2;
  return {
    c() {
      div = element("div");
      t2 = text(
        /*message*/
        ctx[0]
      );
      attr(div, "class", "message");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*message*/
      1) set_data(
        t2,
        /*message*/
        ctx2[0]
      );
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_fragment$S(ctx) {
  let if_block_anchor;
  let if_block = (
    /*isVisible*/
    ctx[6] && create_if_block$u(ctx)
  );
  return {
    c() {
      if (if_block) if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block) if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, [dirty]) {
      if (
        /*isVisible*/
        ctx2[6]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block$u(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block) if_block.d(detaching);
    }
  };
}
function instance$S($$self, $$props, $$invalidate) {
  let isVisible;
  const [Variants, validateVariant] = typeValidator("Circular progress variant", ["fullscreen", "inline"]);
  const [Sizes, validateSize] = typeValidator("Button size", ["small", "large"]);
  let { variant = "inline" } = $$props;
  let { size = "large" } = $$props;
  let { message: message2 = "" } = $$props;
  let { progress = -1 } = $$props;
  let { visible = "false" } = $$props;
  let { testid = "" } = $$props;
  let spinnerSize;
  let fullscreen;
  let inline;
  onMount(async () => {
    validateVariant(variant);
    validateSize(size);
    $$invalidate(3, spinnerSize = size === "small" ? "large" : "xlarge");
    $$invalidate(4, fullscreen = variant === "fullscreen");
    $$invalidate(5, inline = variant === "inline");
  });
  $$self.$$set = ($$props2) => {
    if ("variant" in $$props2) $$invalidate(7, variant = $$props2.variant);
    if ("size" in $$props2) $$invalidate(8, size = $$props2.size);
    if ("message" in $$props2) $$invalidate(0, message2 = $$props2.message);
    if ("progress" in $$props2) $$invalidate(1, progress = $$props2.progress);
    if ("visible" in $$props2) $$invalidate(9, visible = $$props2.visible);
    if ("testid" in $$props2) $$invalidate(2, testid = $$props2.testid);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*visible*/
    512) {
      $$invalidate(6, isVisible = toBoolean(visible));
    }
  };
  return [
    message2,
    progress,
    testid,
    spinnerSize,
    fullscreen,
    inline,
    isVisible,
    variant,
    size,
    visible
  ];
}
class CircularProgress extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$S,
      create_fragment$S,
      safe_not_equal,
      {
        variant: 7,
        size: 8,
        message: 0,
        progress: 1,
        visible: 9,
        testid: 2
      },
      add_css$M
    );
  }
  get variant() {
    return this.$$.ctx[7];
  }
  set variant(variant) {
    this.$$set({ variant });
    flush();
  }
  get size() {
    return this.$$.ctx[8];
  }
  set size(size) {
    this.$$set({ size });
    flush();
  }
  get message() {
    return this.$$.ctx[0];
  }
  set message(message2) {
    this.$$set({ message: message2 });
    flush();
  }
  get progress() {
    return this.$$.ctx[1];
  }
  set progress(progress) {
    this.$$set({ progress });
    flush();
  }
  get visible() {
    return this.$$.ctx[9];
  }
  set visible(visible) {
    this.$$set({ visible });
    flush();
  }
  get testid() {
    return this.$$.ctx[2];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
}
customElements.define("goa-circular-progress", create_custom_element(CircularProgress, { "variant": {}, "size": {}, "message": {}, "progress": {}, "visible": {}, "testid": {} }, [], [], true));
function add_css$L(target) {
  append_styles(target, "svelte-f8adou", ":host{--goa-container-border-radius:var(--goa-border-radius-m);--goa-container-relaxed-padding:var(--goa-space-xl);--goa-container-compact-padding:var(--goa-space-m);--goa-container-heading:var(--goa-typography-heading-s);--goa-container-heading-padding:var(--goa-space-xs);--goa-container-heading-gap:var(--goa-space-l);--goa-container-border:var(--goa-border-width-s) solid var(--goa-color-greyscale-200);--goa-container-accent-thick-height:var(--goa-space-m);--goa-container-accent-thin-height:var(--goa-space-xs);--goa-container-interactive-bg-color:var(--goa-color-greyscale-white);--goa-container-interactive-heading-bg-color:var(--goa-color-brand-default);--goa-container-interactive-heading-text-color:var(--goa-color-text-light);--goa-container-interactive-border:var(--goa-border-width-s) solid var(--goa-color-brand-default);--goa-container-non-interactive-bg-color:var(--goa-color-greyscale-100);--goa-container-non-interactive-heading-bg-color:var(--goa-color-greyscale-100);--goa-container-non-interactive-heading-text-color:var(--goa-color-text-default);--goa-container-non-interactive-border:var(--goa-border-width-s) solid var(--goa-color-greyscale-200);--goa-container-info-bg-color:var(--goa-color-info-background);--goa-container-info-heading-bg-color:var(--goa-color-info-default);--goa-container-info-heading-text-color:var(--goa-color-text-light);--goa-container-info-border:var(--goa-border-width-s) solid var(--goa-color-info-default);--goa-container-error-bg-color:var(--goa-color-emergency-background);--goa-container-error-heading-bg-color:var(--goa-color-emergency-default);--goa-container-error-heading-text-color:var(--goa-color-text-light);--goa-container-error-border:var(--goa-border-width-s) solid var(--goa-color-emergency-default);--goa-container-success-bg-color:var(--goa-color-success-background);--goa-container-success-heading-bg-color:var(--goa-color-success-default);--goa-container-success-heading-text-color:var(--goa-color-text-light);--goa-container-success-border:var(--goa-border-width-s) solid var(--goa-color-success-default);--goa-container-important-bg-color:var(--goa-color-warning-background);--goa-container-important-heading-bg-color:var(--goa-color-warning-default);--goa-container-important-heading-text-color:var(--goa-color-text-default);--goa-container-important-border:var(--goa-border-width-s) solid var(--goa-color-warning-default);display:flex;flex:1 1 auto}.goa-container.svelte-f8adou.svelte-f8adou{box-sizing:border-box;display:flex;flex:1 1 auto;flex-direction:column}.goa-container.svelte-f8adou .svelte-f8adou{box-sizing:border-box}header.svelte-f8adou.svelte-f8adou{display:flex;align-items:center;justify-content:space-between;gap:var(--goa-container-heading-gap);font:var(--goa-container-heading);border:var(--goa-container-border);border-top-left-radius:var(--goa-container-border-radius);border-top-right-radius:var(--goa-container-border-radius)}.content.svelte-f8adou.svelte-f8adou{border-bottom:var(--goa-container-border);border-left:var(--goa-container-border);border-right:var(--goa-container-border);border-bottom-left-radius:var(--goa-container-border-radius);border-bottom-right-radius:var(--goa-container-border-radius);display:flex;flex:1 1 auto;flex-direction:column}.content.svelte-f8adou ::slotted(*:last-child){margin-bottom:0 !important}.title.svelte-f8adou.svelte-f8adou,.actions.svelte-f8adou.svelte-f8adou{padding:var(--goa-container-heading-padding) 0}.actions.svelte-f8adou ::slotted(div){display:flex;align-items:center;gap:var(--goa-space-m)}.padding--relaxed.svelte-f8adou header.svelte-f8adou{padding:0 var(--goa-container-relaxed-padding)}.padding--relaxed.svelte-f8adou .content.svelte-f8adou{padding:var(--goa-container-relaxed-padding)}.padding--compact.svelte-f8adou header.svelte-f8adou,.padding--compact.svelte-f8adou .content.svelte-f8adou{padding:0 var(--goa-container-compact-padding)}.padding--compact.svelte-f8adou header.svelte-f8adou{padding:0 var(--goa-container-compact-padding)}.padding--compact.svelte-f8adou .content.svelte-f8adou{padding:var(--goa-container-compact-padding)}@media(max-width: 623px){.padding--relaxed.svelte-f8adou header.svelte-f8adou{padding:0 var(--goa-container-compact-padding)}.padding--relaxed.svelte-f8adou .content.svelte-f8adou{padding:var(--goa-container-compact-padding)}}.goa-container--interactive.svelte-f8adou header.svelte-f8adou{background-color:var(--goa-container-interactive-heading-bg-color);border:var(--goa-container-interactive-border);color:var(--goa-container-interactive-heading-text-color)}.goa-container--non-interactive.svelte-f8adou header.svelte-f8adou{background-color:var(--goa-container-non-interactive-heading-bg-color);border:var(--goa-container-non-interactive-border);color:var(--goa-container-non-interactive-heading-text-color)}.goa-container--non-interactive.accent--filled.svelte-f8adou .content.svelte-f8adou{border:var(--goa-container-non-interactive-border);background-color:var(--goa-container-non-interactive-bg-color)}.goa-container--info.svelte-f8adou header.svelte-f8adou{background-color:var(--goa-container-info-heading-bg-color);border:var(--goa-container-info-border);color:var(--goa-container-info-heading-text-color)}.goa-container--info.accent--filled.svelte-f8adou .content.svelte-f8adou{border:var(--goa-container-info-border);background-color:var(--goa-container-info-bg-color)}.goa-container--error.svelte-f8adou header.svelte-f8adou{background-color:var(--goa-container-error-heading-bg-color);border:var(--goa-container-error-border);color:var(--goa-container-error-heading-text-color)}.goa-container--error.accent--filled.svelte-f8adou .content.svelte-f8adou{border:var(--goa-container-error-border);background-color:var(--goa-container-error-bg-color)}.goa-container--success.svelte-f8adou header.svelte-f8adou{background-color:var(--goa-container-success-heading-bg-color);border:var(--goa-container-success-border);color:var(--goa-container-success-heading-text-color)}.goa-container--success.accent--filled.svelte-f8adou .content.svelte-f8adou{border:var(--goa-container-success-border);background-color:var(--goa-container-success-bg-color)}.goa-container--important.svelte-f8adou header.svelte-f8adou{background-color:var(--goa-container-important-heading-bg-color);border:var(--goa-container-important-border);color:var(--goa-container-important-heading-text-color)}.goa-container--important.accent--filled.svelte-f8adou .content.svelte-f8adou{border:var(--goa-container-important-border);background-color:var(--goa-container-important-bg-color)}.heading--thick.svelte-f8adou.svelte-f8adou{min-height:var(--goa-container-accent-thick-height)}.heading--thin.svelte-f8adou.svelte-f8adou{height:var(--goa-container-accent-thin-height)}.heading--filled.svelte-f8adou.svelte-f8adou{display:none}.heading--filled.svelte-f8adou~.content.svelte-f8adou{border-top:var(--goa-container-border);border-top-left-radius:var(--goa-container-border-radius);border-top-right-radius:var(--goa-container-border-radius)}.heading--thin.svelte-f8adou .title.svelte-f8adou,.heading--thin.svelte-f8adou .actions.svelte-f8adou{display:none}.actions.svelte-f8adou.svelte-f8adou{display:flex;align-items:center}.width--content.svelte-f8adou.svelte-f8adou{flex-grow:0}");
}
const get_actions_slot_changes$2 = (dirty) => ({});
const get_actions_slot_context$2 = (ctx) => ({});
const get_title_slot_changes = (dirty) => ({});
const get_title_slot_context = (ctx) => ({});
function create_if_block_1$h(ctx) {
  let div;
  let current;
  const title_slot_template = (
    /*#slots*/
    ctx[12].title
  );
  const title_slot = create_slot(
    title_slot_template,
    ctx,
    /*$$scope*/
    ctx[11],
    get_title_slot_context
  );
  return {
    c() {
      div = element("div");
      if (title_slot) title_slot.c();
      attr(div, "class", "title svelte-f8adou");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (title_slot) {
        title_slot.m(div, null);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (title_slot) {
        if (title_slot.p && (!current || dirty & /*$$scope*/
        2048)) {
          update_slot_base(
            title_slot,
            title_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[11],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[11]
            ) : get_slot_changes(
              title_slot_template,
              /*$$scope*/
              ctx2[11],
              dirty,
              get_title_slot_changes
            ),
            get_title_slot_context
          );
        }
      }
    },
    i(local) {
      if (current) return;
      transition_in(title_slot, local);
      current = true;
    },
    o(local) {
      transition_out(title_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (title_slot) title_slot.d(detaching);
    }
  };
}
function create_if_block$t(ctx) {
  let div;
  let current;
  const actions_slot_template = (
    /*#slots*/
    ctx[12].actions
  );
  const actions_slot = create_slot(
    actions_slot_template,
    ctx,
    /*$$scope*/
    ctx[11],
    get_actions_slot_context$2
  );
  return {
    c() {
      div = element("div");
      if (actions_slot) actions_slot.c();
      attr(div, "class", "actions svelte-f8adou");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (actions_slot) {
        actions_slot.m(div, null);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (actions_slot) {
        if (actions_slot.p && (!current || dirty & /*$$scope*/
        2048)) {
          update_slot_base(
            actions_slot,
            actions_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[11],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[11]
            ) : get_slot_changes(
              actions_slot_template,
              /*$$scope*/
              ctx2[11],
              dirty,
              get_actions_slot_changes$2
            ),
            get_actions_slot_context$2
          );
        }
      }
    },
    i(local) {
      if (current) return;
      transition_in(actions_slot, local);
      current = true;
    },
    o(local) {
      transition_out(actions_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (actions_slot) actions_slot.d(detaching);
    }
  };
}
function create_fragment$R(ctx) {
  let div1;
  let header;
  let t0;
  let header_class_value;
  let t1;
  let div0;
  let div1_style_value;
  let div1_class_value;
  let current;
  let if_block0 = (
    /*$$slots*/
    ctx[10].title && create_if_block_1$h(ctx)
  );
  let if_block1 = (
    /*$$slots*/
    ctx[10].actions && create_if_block$t(ctx)
  );
  const default_slot_template = (
    /*#slots*/
    ctx[12].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[11],
    null
  );
  return {
    c() {
      div1 = element("div");
      header = element("header");
      if (if_block0) if_block0.c();
      t0 = space();
      if (if_block1) if_block1.c();
      t1 = space();
      div0 = element("div");
      if (default_slot) default_slot.c();
      attr(header, "class", header_class_value = "heading--" + /*accent*/
      ctx[1] + " svelte-f8adou");
      attr(div0, "class", "content svelte-f8adou");
      attr(
        div1,
        "data-testid",
        /*testid*/
        ctx[5]
      );
      attr(div1, "style", div1_style_value = `
    ${calculateMargin(
        /*mt*/
        ctx[6],
        /*mr*/
        ctx[7],
        /*mb*/
        ctx[8],
        /*ml*/
        ctx[9]
      )}
    max-width: ${/*maxwidth*/
      ctx[4]};
  `);
      attr(div1, "class", div1_class_value = null_to_empty(`
    goa-container
    goa-container--${/*type*/
      ctx[0]}
    padding--${/*padding*/
      ctx[2]}
    accent--${/*accent*/
      ctx[1]}
    width--${/*width*/
      ctx[3]}
  `) + " svelte-f8adou");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, header);
      if (if_block0) if_block0.m(header, null);
      append(header, t0);
      if (if_block1) if_block1.m(header, null);
      append(div1, t1);
      append(div1, div0);
      if (default_slot) {
        default_slot.m(div0, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*$$slots*/
        ctx2[10].title
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*$$slots*/
          1024) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_1$h(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(header, t0);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (
        /*$$slots*/
        ctx2[10].actions
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & /*$$slots*/
          1024) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block$t(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(header, null);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      if (!current || dirty & /*accent*/
      2 && header_class_value !== (header_class_value = "heading--" + /*accent*/
      ctx2[1] + " svelte-f8adou")) {
        attr(header, "class", header_class_value);
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        2048)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[11],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[11]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[11],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*testid*/
      32) {
        attr(
          div1,
          "data-testid",
          /*testid*/
          ctx2[5]
        );
      }
      if (!current || dirty & /*mt, mr, mb, ml, maxwidth*/
      976 && div1_style_value !== (div1_style_value = `
    ${calculateMargin(
        /*mt*/
        ctx2[6],
        /*mr*/
        ctx2[7],
        /*mb*/
        ctx2[8],
        /*ml*/
        ctx2[9]
      )}
    max-width: ${/*maxwidth*/
      ctx2[4]};
  `)) {
        attr(div1, "style", div1_style_value);
      }
      if (!current || dirty & /*type, padding, accent, width*/
      15 && div1_class_value !== (div1_class_value = null_to_empty(`
    goa-container
    goa-container--${/*type*/
      ctx2[0]}
    padding--${/*padding*/
      ctx2[2]}
    accent--${/*accent*/
      ctx2[1]}
    width--${/*width*/
      ctx2[3]}
  `) + " svelte-f8adou")) {
        attr(div1, "class", div1_class_value);
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block0);
      transition_in(if_block1);
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block1);
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      if (if_block0) if_block0.d();
      if (if_block1) if_block1.d();
      if (default_slot) default_slot.d(detaching);
    }
  };
}
function instance$R($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  const $$slots = compute_slots(slots);
  const [Types, validateType] = typeValidator("Container type", ["interactive", "info", "error", "success", "important", "non-interactive"]);
  const [Accents, validateAccent] = typeValidator("Container accent", ["thick", "thin", "filled"]);
  const [Paddings, validatePadding] = typeValidator("Container padding", ["relaxed", "compact"]);
  const [Widths, validateWidth] = typeValidator("Container width", ["full", "content"]);
  let { type = "interactive" } = $$props;
  let { accent = "filled" } = $$props;
  let { padding = "relaxed" } = $$props;
  let { width = "full" } = $$props;
  let { maxwidth = "none" } = $$props;
  let { testid = "" } = $$props;
  let { mt = null } = $$props;
  let { mr = null } = $$props;
  let { mb: mb2 = "m" } = $$props;
  let { ml: ml2 = null } = $$props;
  onMount(() => {
    validateType(type);
    validateAccent(accent);
    validatePadding(padding);
    validateWidth(width);
  });
  $$self.$$set = ($$props2) => {
    if ("type" in $$props2) $$invalidate(0, type = $$props2.type);
    if ("accent" in $$props2) $$invalidate(1, accent = $$props2.accent);
    if ("padding" in $$props2) $$invalidate(2, padding = $$props2.padding);
    if ("width" in $$props2) $$invalidate(3, width = $$props2.width);
    if ("maxwidth" in $$props2) $$invalidate(4, maxwidth = $$props2.maxwidth);
    if ("testid" in $$props2) $$invalidate(5, testid = $$props2.testid);
    if ("mt" in $$props2) $$invalidate(6, mt = $$props2.mt);
    if ("mr" in $$props2) $$invalidate(7, mr = $$props2.mr);
    if ("mb" in $$props2) $$invalidate(8, mb2 = $$props2.mb);
    if ("ml" in $$props2) $$invalidate(9, ml2 = $$props2.ml);
    if ("$$scope" in $$props2) $$invalidate(11, $$scope = $$props2.$$scope);
  };
  return [
    type,
    accent,
    padding,
    width,
    maxwidth,
    testid,
    mt,
    mr,
    mb2,
    ml2,
    $$slots,
    $$scope,
    slots
  ];
}
class Container extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$R,
      create_fragment$R,
      safe_not_equal,
      {
        type: 0,
        accent: 1,
        padding: 2,
        width: 3,
        maxwidth: 4,
        testid: 5,
        mt: 6,
        mr: 7,
        mb: 8,
        ml: 9
      },
      add_css$L
    );
  }
  get type() {
    return this.$$.ctx[0];
  }
  set type(type) {
    this.$$set({ type });
    flush();
  }
  get accent() {
    return this.$$.ctx[1];
  }
  set accent(accent) {
    this.$$set({ accent });
    flush();
  }
  get padding() {
    return this.$$.ctx[2];
  }
  set padding(padding) {
    this.$$set({ padding });
    flush();
  }
  get width() {
    return this.$$.ctx[3];
  }
  set width(width) {
    this.$$set({ width });
    flush();
  }
  get maxwidth() {
    return this.$$.ctx[4];
  }
  set maxwidth(maxwidth) {
    this.$$set({ maxwidth });
    flush();
  }
  get testid() {
    return this.$$.ctx[5];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
  get mt() {
    return this.$$.ctx[6];
  }
  set mt(mt) {
    this.$$set({ mt });
    flush();
  }
  get mr() {
    return this.$$.ctx[7];
  }
  set mr(mr) {
    this.$$set({ mr });
    flush();
  }
  get mb() {
    return this.$$.ctx[8];
  }
  set mb(mb2) {
    this.$$set({ mb: mb2 });
    flush();
  }
  get ml() {
    return this.$$.ctx[9];
  }
  set ml(ml2) {
    this.$$set({ ml: ml2 });
    flush();
  }
}
customElements.define("goa-container", create_custom_element(Container, { "type": {}, "accent": {}, "padding": {}, "width": {}, "maxwidth": {}, "testid": {}, "mt": {}, "mr": {}, "mb": {}, "ml": {} }, ["title", "actions", "default"], [], true));
function create_fragment$Q(ctx) {
  let goa_popover;
  let goa_input;
  let goa_input_value_value;
  let t2;
  let goa_calendar;
  let mounted;
  let dispose;
  return {
    c() {
      goa_popover = element("goa-popover");
      goa_input = element("goa-input");
      t2 = space();
      goa_calendar = element("goa-calendar");
      set_custom_element_data(goa_input, "slot", "target");
      set_custom_element_data(goa_input, "width", "160px");
      set_custom_element_data(goa_input, "readonly", "true");
      set_custom_element_data(goa_input, "trailingicon", "calendar");
      set_custom_element_data(goa_input, "value", goa_input_value_value = /*formatDate*/
      ctx[17](
        /*_date*/
        ctx[12]
      ));
      set_custom_element_data(
        goa_input,
        "error",
        /*error*/
        ctx[1]
      );
      set_custom_element_data(
        goa_input,
        "disabled",
        /*isDisabled*/
        ctx[14]
      );
      set_custom_element_data(
        goa_calendar,
        "name",
        /*name*/
        ctx[2]
      );
      set_custom_element_data(
        goa_calendar,
        "value",
        /*value*/
        ctx[0]
      );
      set_custom_element_data(
        goa_calendar,
        "min",
        /*min*/
        ctx[3]
      );
      set_custom_element_data(
        goa_calendar,
        "max",
        /*max*/
        ctx[4]
      );
      set_custom_element_data(goa_calendar, "bordered", "false");
      set_custom_element_data(goa_popover, "tabindex", "-1");
      set_custom_element_data(
        goa_popover,
        "testid",
        /*testid*/
        ctx[6]
      );
      set_custom_element_data(
        goa_popover,
        "relative",
        /*relative*/
        ctx[5]
      );
      set_custom_element_data(
        goa_popover,
        "mt",
        /*mt*/
        ctx[7]
      );
      set_custom_element_data(
        goa_popover,
        "mb",
        /*mb*/
        ctx[9]
      );
      set_custom_element_data(
        goa_popover,
        "ml",
        /*ml*/
        ctx[10]
      );
      set_custom_element_data(
        goa_popover,
        "mr",
        /*mr*/
        ctx[8]
      );
      set_custom_element_data(
        goa_popover,
        "disabled",
        /*isDisabled*/
        ctx[14]
      );
      set_custom_element_data(
        goa_popover,
        "open",
        /*_showPopover*/
        ctx[13]
      );
    },
    m(target, anchor) {
      insert(target, goa_popover, anchor);
      append(goa_popover, goa_input);
      append(goa_popover, t2);
      append(goa_popover, goa_calendar);
      ctx[21](goa_popover);
      if (!mounted) {
        dispose = [
          listen(
            goa_input,
            "click",
            /*showCalendar*/
            ctx[18]
          ),
          listen(
            goa_input,
            "keydown",
            /*handleKeyDown*/
            ctx[19]
          ),
          listen(
            goa_calendar,
            "_change",
            /*onCalendarChange*/
            ctx[15]
          ),
          listen(
            goa_popover,
            "_close",
            /*close_handler*/
            ctx[22]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*_date*/
      4096 && goa_input_value_value !== (goa_input_value_value = /*formatDate*/
      ctx2[17](
        /*_date*/
        ctx2[12]
      ))) {
        set_custom_element_data(goa_input, "value", goa_input_value_value);
      }
      if (dirty & /*error*/
      2) {
        set_custom_element_data(
          goa_input,
          "error",
          /*error*/
          ctx2[1]
        );
      }
      if (dirty & /*isDisabled*/
      16384) {
        set_custom_element_data(
          goa_input,
          "disabled",
          /*isDisabled*/
          ctx2[14]
        );
      }
      if (dirty & /*name*/
      4) {
        set_custom_element_data(
          goa_calendar,
          "name",
          /*name*/
          ctx2[2]
        );
      }
      if (dirty & /*value*/
      1) {
        set_custom_element_data(
          goa_calendar,
          "value",
          /*value*/
          ctx2[0]
        );
      }
      if (dirty & /*min*/
      8) {
        set_custom_element_data(
          goa_calendar,
          "min",
          /*min*/
          ctx2[3]
        );
      }
      if (dirty & /*max*/
      16) {
        set_custom_element_data(
          goa_calendar,
          "max",
          /*max*/
          ctx2[4]
        );
      }
      if (dirty & /*testid*/
      64) {
        set_custom_element_data(
          goa_popover,
          "testid",
          /*testid*/
          ctx2[6]
        );
      }
      if (dirty & /*relative*/
      32) {
        set_custom_element_data(
          goa_popover,
          "relative",
          /*relative*/
          ctx2[5]
        );
      }
      if (dirty & /*mt*/
      128) {
        set_custom_element_data(
          goa_popover,
          "mt",
          /*mt*/
          ctx2[7]
        );
      }
      if (dirty & /*mb*/
      512) {
        set_custom_element_data(
          goa_popover,
          "mb",
          /*mb*/
          ctx2[9]
        );
      }
      if (dirty & /*ml*/
      1024) {
        set_custom_element_data(
          goa_popover,
          "ml",
          /*ml*/
          ctx2[10]
        );
      }
      if (dirty & /*mr*/
      256) {
        set_custom_element_data(
          goa_popover,
          "mr",
          /*mr*/
          ctx2[8]
        );
      }
      if (dirty & /*isDisabled*/
      16384) {
        set_custom_element_data(
          goa_popover,
          "disabled",
          /*isDisabled*/
          ctx2[14]
        );
      }
      if (dirty & /*_showPopover*/
      8192) {
        set_custom_element_data(
          goa_popover,
          "open",
          /*_showPopover*/
          ctx2[13]
        );
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(goa_popover);
      }
      ctx[21](null);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$Q($$self, $$props, $$invalidate) {
  let isDisabled;
  let { name = "" } = $$props;
  let { value = "" } = $$props;
  let { error = "false" } = $$props;
  let { min = "" } = $$props;
  let { max = "" } = $$props;
  let { relative = "false" } = $$props;
  let { disabled = "false" } = $$props;
  let { testid = "" } = $$props;
  let { mt = null } = $$props;
  let { mr = null } = $$props;
  let { mb: mb2 = null } = $$props;
  let { ml: ml2 = null } = $$props;
  let _oldValue;
  let _rootEl;
  let _date;
  let _showPopover = false;
  onMount(async () => {
    await tick();
    await initDate();
    addRelayListener();
    sendMountedMessage();
  });
  afterUpdate(() => {
    if (_oldValue != value) {
      initDate();
    }
  });
  function addRelayListener() {
    receive(_rootEl, (action, data) => {
      switch (action) {
        case FormSetValueMsg:
          onSetValue(data);
          break;
        case FieldsetSetErrorMsg:
          $$invalidate(1, error = "true");
          break;
        case FieldsetResetErrorsMsg:
          $$invalidate(1, error = "false");
          break;
      }
    });
  }
  function onSetValue(detail) {
    $$invalidate(0, value = detail.value);
    dispatch$1(_rootEl, "_change", { name, value: detail.value }, { bubbles: true });
  }
  function sendMountedMessage() {
    relay(_rootEl, FormFieldMountMsg, { name, el: _rootEl }, { bubbles: true, timeout: 10 });
  }
  async function initDate() {
    $$invalidate(12, _date = value && value !== "" ? startOfDay(new Date(value)) : null);
    if (value && value !== "" && !isValid(_date)) {
      console.error(`${value} is not a valid date`);
    }
  }
  function onCalendarChange(e) {
    $$invalidate(12, _date = e.detail.value);
    if (_date) {
      $$invalidate(0, value = _date.toISOString());
    } else {
      $$invalidate(0, value = "");
    }
    hideCalendar();
    dispatchValue(_date);
    e.stopPropagation();
    e.preventDefault();
  }
  function dispatchValue(date) {
    if (!date) {
      _oldValue = null;
      $$invalidate(0, value = "");
    } else {
      _oldValue = date;
      $$invalidate(0, value = date.toISOString());
    }
    _rootEl.dispatchEvent(new CustomEvent(
      "_change",
      {
        composed: true,
        bubbles: true,
        detail: { name, type: "date", value: date }
      }
    ));
  }
  function formatDate(d) {
    if (!d) return "";
    if (typeof d === "string") {
      return format(new Date(d), "PPP");
    }
    return format(d, "PPP");
  }
  function hideCalendar() {
    $$invalidate(13, _showPopover = false);
  }
  function showCalendar() {
    $$invalidate(13, _showPopover = !isDisabled);
  }
  function handleKeyDown(e) {
    if (["Space", "Enter"].includes(e.key)) {
      showCalendar();
      return;
    }
    switch (e.key) {
      case "ArrowLeft":
        $$invalidate(12, _date || (_date = addDays(
          /* @__PURE__ */ new Date(),
          1
        )));
        $$invalidate(12, _date = addDays(_date, -1));
        break;
      case "ArrowRight":
        $$invalidate(12, _date || (_date = addDays(
          /* @__PURE__ */ new Date(),
          -1
        )));
        $$invalidate(12, _date = addDays(_date, 1));
        break;
      case "ArrowDown":
        $$invalidate(12, _date || (_date = addDays(
          /* @__PURE__ */ new Date(),
          -7
        )));
        $$invalidate(12, _date = addDays(_date, 7));
        break;
      case "ArrowUp":
        $$invalidate(12, _date || (_date = addDays(
          /* @__PURE__ */ new Date(),
          7
        )));
        $$invalidate(12, _date = addDays(_date, -7));
        break;
      case "PageUp":
        $$invalidate(12, _date || (_date = e.shiftKey ? addYears(/* @__PURE__ */ new Date(), 1) : addMonths(
          /* @__PURE__ */ new Date(),
          1
        )));
        $$invalidate(12, _date = e.shiftKey ? addYears(_date, -1) : addMonths(_date, -1));
        break;
      case "PageDown":
        $$invalidate(12, _date || (_date = e.shiftKey ? addYears(/* @__PURE__ */ new Date(), -1) : addMonths(/* @__PURE__ */ new Date(), -1)));
        $$invalidate(12, _date = e.shiftKey ? addYears(_date, 1) : addMonths(_date, 1));
        break;
      default:
        return;
    }
    dispatchValue(_date);
    e.preventDefault();
    e.stopPropagation();
  }
  function goa_popover_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _rootEl = $$value;
      $$invalidate(11, _rootEl);
    });
  }
  const close_handler = () => dispatchValue(_date);
  $$self.$$set = ($$props2) => {
    if ("name" in $$props2) $$invalidate(2, name = $$props2.name);
    if ("value" in $$props2) $$invalidate(0, value = $$props2.value);
    if ("error" in $$props2) $$invalidate(1, error = $$props2.error);
    if ("min" in $$props2) $$invalidate(3, min = $$props2.min);
    if ("max" in $$props2) $$invalidate(4, max = $$props2.max);
    if ("relative" in $$props2) $$invalidate(5, relative = $$props2.relative);
    if ("disabled" in $$props2) $$invalidate(20, disabled = $$props2.disabled);
    if ("testid" in $$props2) $$invalidate(6, testid = $$props2.testid);
    if ("mt" in $$props2) $$invalidate(7, mt = $$props2.mt);
    if ("mr" in $$props2) $$invalidate(8, mr = $$props2.mr);
    if ("mb" in $$props2) $$invalidate(9, mb2 = $$props2.mb);
    if ("ml" in $$props2) $$invalidate(10, ml2 = $$props2.ml);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*disabled*/
    1048576) {
      $$invalidate(14, isDisabled = toBoolean(disabled));
    }
    if ($$self.$$.dirty & /*value*/
    1) {
      if (value === "") {
        $$invalidate(12, _date = null);
      }
    }
  };
  return [
    value,
    error,
    name,
    min,
    max,
    relative,
    testid,
    mt,
    mr,
    mb2,
    ml2,
    _rootEl,
    _date,
    _showPopover,
    isDisabled,
    onCalendarChange,
    dispatchValue,
    formatDate,
    showCalendar,
    handleKeyDown,
    disabled,
    goa_popover_binding,
    close_handler
  ];
}
class DatePicker extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$Q, create_fragment$Q, safe_not_equal, {
      name: 2,
      value: 0,
      error: 1,
      min: 3,
      max: 4,
      relative: 5,
      disabled: 20,
      testid: 6,
      mt: 7,
      mr: 8,
      mb: 9,
      ml: 10
    });
  }
  get name() {
    return this.$$.ctx[2];
  }
  set name(name) {
    this.$$set({ name });
    flush();
  }
  get value() {
    return this.$$.ctx[0];
  }
  set value(value) {
    this.$$set({ value });
    flush();
  }
  get error() {
    return this.$$.ctx[1];
  }
  set error(error) {
    this.$$set({ error });
    flush();
  }
  get min() {
    return this.$$.ctx[3];
  }
  set min(min) {
    this.$$set({ min });
    flush();
  }
  get max() {
    return this.$$.ctx[4];
  }
  set max(max) {
    this.$$set({ max });
    flush();
  }
  get relative() {
    return this.$$.ctx[5];
  }
  set relative(relative) {
    this.$$set({ relative });
    flush();
  }
  get disabled() {
    return this.$$.ctx[20];
  }
  set disabled(disabled) {
    this.$$set({ disabled });
    flush();
  }
  get testid() {
    return this.$$.ctx[6];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
  get mt() {
    return this.$$.ctx[7];
  }
  set mt(mt) {
    this.$$set({ mt });
    flush();
  }
  get mr() {
    return this.$$.ctx[8];
  }
  set mr(mr) {
    this.$$set({ mr });
    flush();
  }
  get mb() {
    return this.$$.ctx[9];
  }
  set mb(mb2) {
    this.$$set({ mb: mb2 });
    flush();
  }
  get ml() {
    return this.$$.ctx[10];
  }
  set ml(ml2) {
    this.$$set({ ml: ml2 });
    flush();
  }
}
customElements.define("goa-date-picker", create_custom_element(DatePicker, { "name": {}, "value": {}, "error": {}, "min": {}, "max": {}, "relative": {}, "disabled": {}, "testid": {}, "mt": {}, "mr": {}, "mb": {}, "ml": {} }, [], [], true));
function add_css$K(target) {
  append_styles(target, "svelte-11dawr2", ":host{--goa-details-border-radius:var(--goa-border-radius-m);--goa-details-margin-bottom:var(--goa-space-xs);--goa-details-typography:var(--goa-typography-body-m);--goa-details-text-decoration:underline;--goa-details-color-text:var(--goa-color-interactive-default);--goa-details-color-text-hover:var(--goa-color-interactive-hover);--goa-details-color-bg-hover:var(--goa-color-greyscale-100);--goa-details-padding-top:6px;--goa-details-padding-right:var(--goa-space-s);--goa-details-padding-bottom:var(--goa-space-xs);--goa-details-padding-left:var(--goa-space-xs);--goa-details-content-left-border:4px solid var(--goa-color-greyscale-200);--goa-details-content-padding-top:var(--goa-space-s);--goa-details-content-padding-right:var(--goa-space-m);--goa-details-content-padding-bottom:var(--goa-space-s);--goa-details-content-padding-left:19px;--goa-details-content-margin-left:17px;--goa-details-focus-border:var(--goa-border-width-l) solid var(--goa-color-interactive-focus);font-family:var(--goa-font-family-serif)}details.svelte-11dawr2.svelte-11dawr2{position:relative}details.svelte-11dawr2 ::slotted(*){font:var(--goa-typography-body-m)}details[open].svelte-11dawr2 goa-icon.svelte-11dawr2{transform:translateX(-1px) translateY(-0px) rotate(90deg);margin-top:var(--goa-space-2xs)}details.svelte-11dawr2 summary.svelte-11dawr2::-webkit-details-marker{display:none}summary.svelte-11dawr2.svelte-11dawr2{padding-top:var(--goa-details-padding-top);padding-right:var(--goa-details-padding-right);padding-left:var(--goa-details-padding-left);padding-bottom:var(--goa-details-padding-bottom);margin-bottom:var(--goa-details-margin-bottom);cursor:pointer;list-style:none;display:flex;align-items:flex-start;border-radius:var(--goa-details-border-radius)}summary.svelte-11dawr2.svelte-11dawr2:focus-visible{outline:var(--goa-details-focus-border);color:var(--goa-color-interactive-hover)}summary.svelte-11dawr2.svelte-11dawr2:focus,summary.svelte-11dawr2.svelte-11dawr2:active{border-radius:var(--goa-details-border-radius);color:var(--goa-details-color-text-hover);background-color:var(--goa-details-color-bg-hover)}summary.svelte-11dawr2.svelte-11dawr2:hover{background-color:var(--goa-details-color-bg-hover)}summary.svelte-11dawr2 span.svelte-11dawr2{margin-left:var(--goa-space-xl);-webkit-text-decoration:var(--goa-details-text-decoration);text-decoration:var(--goa-details-text-decoration);color:var(--goa-details-color-text);font:var(--goa-details-typeface)}summary.svelte-11dawr2:hover span.svelte-11dawr2{color:var(--goa-details-color-text-hover)}.content.svelte-11dawr2.svelte-11dawr2{border-left:var(--goa-details-content-left-border);padding-left:var(--goa-details-content-padding-left);padding-top:var(--goa-details-content-padding-top);padding-bottom:var(--goa-details-content-padding-bottom);padding-right:var(--goa-details-content-padding-right);margin-left:var(--goa-details-content-margin-left);margin-bottom:var(--goa-details-margin-bottom)}.content.svelte-11dawr2 ::slotted(p:last-child){margin-bottom:0 !important}goa-icon.svelte-11dawr2.svelte-11dawr2{position:absolute}");
}
function create_fragment$P(ctx) {
  let details;
  let summary;
  let goa_icon;
  let goa_icon_fillcolor_value;
  let t0;
  let span;
  let t1;
  let span_id_value;
  let summary_aria_expanded_value;
  let summary_aria_controls_value;
  let t2;
  let div;
  let div_aria_labelledby_value;
  let div_id_value;
  let details_style_value;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = (
    /*#slots*/
    ctx[13].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[12],
    null
  );
  return {
    c() {
      details = element("details");
      summary = element("summary");
      goa_icon = element("goa-icon");
      t0 = space();
      span = element("span");
      t1 = text(
        /*heading*/
        ctx[1]
      );
      t2 = space();
      div = element("div");
      if (default_slot) default_slot.c();
      set_custom_element_data(goa_icon, "mt", "2");
      set_custom_element_data(goa_icon, "mr", "2");
      set_custom_element_data(goa_icon, "type", "chevron-forward");
      set_custom_element_data(goa_icon, "fillcolor", goa_icon_fillcolor_value = /*_isMouseOver*/
      ctx[8] ? "var(--goa-color-interactive-hover)" : "var(--goa-color-interactive-default)");
      set_custom_element_data(goa_icon, "class", "svelte-11dawr2");
      attr(span, "id", span_id_value = `${/*_detailsId*/
      ctx[10]}-heading`);
      attr(span, "class", "svelte-11dawr2");
      attr(summary, "aria-expanded", summary_aria_expanded_value = /*open*/
      ctx[0] === "true");
      attr(summary, "aria-controls", summary_aria_controls_value = `${/*_detailsId*/
      ctx[10]}-content`);
      attr(summary, "class", "svelte-11dawr2");
      attr(div, "class", "content svelte-11dawr2");
      attr(div, "role", "region");
      attr(div, "aria-labelledby", div_aria_labelledby_value = `${/*_detailsId*/
      ctx[10]}-heading`);
      attr(div, "id", div_id_value = `${/*_detailsId*/
      ctx[10]}-content`);
      details.open = /*_isOpen*/
      ctx[11];
      attr(details, "style", details_style_value = `
    ${calculateMargin(
        /*mt*/
        ctx[3],
        /*mr*/
        ctx[4],
        /*mb*/
        ctx[5],
        /*ml*/
        ctx[6]
      )}
    max-width: ${/*maxwidth*/
      ctx[2]};
  `);
      attr(
        details,
        "data-testid",
        /*testid*/
        ctx[7]
      );
      attr(details, "class", "svelte-11dawr2");
    },
    m(target, anchor) {
      insert(target, details, anchor);
      append(details, summary);
      append(summary, goa_icon);
      append(summary, t0);
      append(summary, span);
      append(span, t1);
      ctx[14](summary);
      append(details, t2);
      append(details, div);
      if (default_slot) {
        default_slot.m(div, null);
      }
      current = true;
      if (!mounted) {
        dispose = listen(
          details,
          "toggle",
          /*toggle_handler*/
          ctx[15]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & /*_isMouseOver*/
      256 && goa_icon_fillcolor_value !== (goa_icon_fillcolor_value = /*_isMouseOver*/
      ctx2[8] ? "var(--goa-color-interactive-hover)" : "var(--goa-color-interactive-default)")) {
        set_custom_element_data(goa_icon, "fillcolor", goa_icon_fillcolor_value);
      }
      if (!current || dirty & /*heading*/
      2) set_data(
        t1,
        /*heading*/
        ctx2[1]
      );
      if (!current || dirty & /*_detailsId*/
      1024 && span_id_value !== (span_id_value = `${/*_detailsId*/
      ctx2[10]}-heading`)) {
        attr(span, "id", span_id_value);
      }
      if (!current || dirty & /*open*/
      1 && summary_aria_expanded_value !== (summary_aria_expanded_value = /*open*/
      ctx2[0] === "true")) {
        attr(summary, "aria-expanded", summary_aria_expanded_value);
      }
      if (!current || dirty & /*_detailsId*/
      1024 && summary_aria_controls_value !== (summary_aria_controls_value = `${/*_detailsId*/
      ctx2[10]}-content`)) {
        attr(summary, "aria-controls", summary_aria_controls_value);
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        4096)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[12],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[12]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[12],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*_detailsId*/
      1024 && div_aria_labelledby_value !== (div_aria_labelledby_value = `${/*_detailsId*/
      ctx2[10]}-heading`)) {
        attr(div, "aria-labelledby", div_aria_labelledby_value);
      }
      if (!current || dirty & /*_detailsId*/
      1024 && div_id_value !== (div_id_value = `${/*_detailsId*/
      ctx2[10]}-content`)) {
        attr(div, "id", div_id_value);
      }
      if (!current || dirty & /*_isOpen*/
      2048) {
        details.open = /*_isOpen*/
        ctx2[11];
      }
      if (!current || dirty & /*mt, mr, mb, ml, maxwidth*/
      124 && details_style_value !== (details_style_value = `
    ${calculateMargin(
        /*mt*/
        ctx2[3],
        /*mr*/
        ctx2[4],
        /*mb*/
        ctx2[5],
        /*ml*/
        ctx2[6]
      )}
    max-width: ${/*maxwidth*/
      ctx2[2]};
  `)) {
        attr(details, "style", details_style_value);
      }
      if (!current || dirty & /*testid*/
      128) {
        attr(
          details,
          "data-testid",
          /*testid*/
          ctx2[7]
        );
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(details);
      }
      ctx[14](null);
      if (default_slot) default_slot.d(detaching);
      mounted = false;
      dispose();
    }
  };
}
function instance$P($$self, $$props, $$invalidate) {
  let _isOpen;
  let { $$slots: slots = {}, $$scope } = $$props;
  let { heading } = $$props;
  let { maxwidth = "75ch" } = $$props;
  let { mt = null } = $$props;
  let { mr = null } = $$props;
  let { mb: mb2 = null } = $$props;
  let { ml: ml2 = null } = $$props;
  let { open = "false" } = $$props;
  let { testid = "" } = $$props;
  let _isMouseOver = false;
  let _summaryEl;
  let _detailsId = "";
  onMount(() => {
    validateRequired("Details", { heading });
    $$invalidate(10, _detailsId = `details-${generateRandomId()}`);
    _summaryEl.addEventListener("mouseover", () => {
      $$invalidate(8, _isMouseOver = true);
    });
    _summaryEl.addEventListener("mouseout", () => {
      $$invalidate(8, _isMouseOver = false);
    });
  });
  function summary_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _summaryEl = $$value;
      $$invalidate(9, _summaryEl);
    });
  }
  const toggle_handler = ({ target }) => $$invalidate(0, open = `${target == null ? void 0 : target.open}`);
  $$self.$$set = ($$props2) => {
    if ("heading" in $$props2) $$invalidate(1, heading = $$props2.heading);
    if ("maxwidth" in $$props2) $$invalidate(2, maxwidth = $$props2.maxwidth);
    if ("mt" in $$props2) $$invalidate(3, mt = $$props2.mt);
    if ("mr" in $$props2) $$invalidate(4, mr = $$props2.mr);
    if ("mb" in $$props2) $$invalidate(5, mb2 = $$props2.mb);
    if ("ml" in $$props2) $$invalidate(6, ml2 = $$props2.ml);
    if ("open" in $$props2) $$invalidate(0, open = $$props2.open);
    if ("testid" in $$props2) $$invalidate(7, testid = $$props2.testid);
    if ("$$scope" in $$props2) $$invalidate(12, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*open*/
    1) {
      $$invalidate(11, _isOpen = toBoolean(open));
    }
  };
  return [
    open,
    heading,
    maxwidth,
    mt,
    mr,
    mb2,
    ml2,
    testid,
    _isMouseOver,
    _summaryEl,
    _detailsId,
    _isOpen,
    $$scope,
    slots,
    summary_binding,
    toggle_handler
  ];
}
class Details extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$P,
      create_fragment$P,
      safe_not_equal,
      {
        heading: 1,
        maxwidth: 2,
        mt: 3,
        mr: 4,
        mb: 5,
        ml: 6,
        open: 0,
        testid: 7
      },
      add_css$K
    );
  }
  get heading() {
    return this.$$.ctx[1];
  }
  set heading(heading) {
    this.$$set({ heading });
    flush();
  }
  get maxwidth() {
    return this.$$.ctx[2];
  }
  set maxwidth(maxwidth) {
    this.$$set({ maxwidth });
    flush();
  }
  get mt() {
    return this.$$.ctx[3];
  }
  set mt(mt) {
    this.$$set({ mt });
    flush();
  }
  get mr() {
    return this.$$.ctx[4];
  }
  set mr(mr) {
    this.$$set({ mr });
    flush();
  }
  get mb() {
    return this.$$.ctx[5];
  }
  set mb(mb2) {
    this.$$set({ mb: mb2 });
    flush();
  }
  get ml() {
    return this.$$.ctx[6];
  }
  set ml(ml2) {
    this.$$set({ ml: ml2 });
    flush();
  }
  get open() {
    return this.$$.ctx[0];
  }
  set open(open) {
    this.$$set({ open });
    flush();
  }
  get testid() {
    return this.$$.ctx[7];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
}
customElements.define("goa-details", create_custom_element(Details, { "heading": {}, "maxwidth": {}, "mt": {}, "mr": {}, "mb": {}, "ml": {}, "open": {}, "testid": {} }, ["default"], [], true));
function add_css$J(target) {
  append_styles(target, "svelte-1lozblp", ":host{--goa-divider-color:var(--goa-color-greyscale-200)}hr.svelte-1lozblp{padding:0;margin:0;height:1px;background-color:var(--goa-divider-color);border:none}");
}
function create_fragment$O(ctx) {
  let hr;
  let hr_style_value;
  return {
    c() {
      hr = element("hr");
      attr(
        hr,
        "data-testid",
        /*testid*/
        ctx[0]
      );
      attr(hr, "style", hr_style_value = calculateMargin(
        /*mt*/
        ctx[1],
        /*mr*/
        ctx[2],
        /*mb*/
        ctx[3],
        /*ml*/
        ctx[4]
      ));
      attr(hr, "class", "svelte-1lozblp");
    },
    m(target, anchor) {
      insert(target, hr, anchor);
    },
    p(ctx2, [dirty]) {
      if (dirty & /*testid*/
      1) {
        attr(
          hr,
          "data-testid",
          /*testid*/
          ctx2[0]
        );
      }
      if (dirty & /*mt, mr, mb, ml*/
      30 && hr_style_value !== (hr_style_value = calculateMargin(
        /*mt*/
        ctx2[1],
        /*mr*/
        ctx2[2],
        /*mb*/
        ctx2[3],
        /*ml*/
        ctx2[4]
      ))) {
        attr(hr, "style", hr_style_value);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(hr);
      }
    }
  };
}
function instance$O($$self, $$props, $$invalidate) {
  let { testid = "" } = $$props;
  let { mt = null } = $$props;
  let { mr = null } = $$props;
  let { mb: mb2 = null } = $$props;
  let { ml: ml2 = null } = $$props;
  $$self.$$set = ($$props2) => {
    if ("testid" in $$props2) $$invalidate(0, testid = $$props2.testid);
    if ("mt" in $$props2) $$invalidate(1, mt = $$props2.mt);
    if ("mr" in $$props2) $$invalidate(2, mr = $$props2.mr);
    if ("mb" in $$props2) $$invalidate(3, mb2 = $$props2.mb);
    if ("ml" in $$props2) $$invalidate(4, ml2 = $$props2.ml);
  };
  return [testid, mt, mr, mb2, ml2];
}
class Divider extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$O, create_fragment$O, safe_not_equal, { testid: 0, mt: 1, mr: 2, mb: 3, ml: 4 }, add_css$J);
  }
  get testid() {
    return this.$$.ctx[0];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
  get mt() {
    return this.$$.ctx[1];
  }
  set mt(mt) {
    this.$$set({ mt });
    flush();
  }
  get mr() {
    return this.$$.ctx[2];
  }
  set mr(mr) {
    this.$$set({ mr });
    flush();
  }
  get mb() {
    return this.$$.ctx[3];
  }
  set mb(mb2) {
    this.$$set({ mb: mb2 });
    flush();
  }
  get ml() {
    return this.$$.ctx[4];
  }
  set ml(ml2) {
    this.$$set({ ml: ml2 });
    flush();
  }
}
customElements.define("goa-divider", create_custom_element(Divider, { "testid": {}, "mt": {}, "mr": {}, "mb": {}, "ml": {} }, [], [], true));
function add_css$I(target) {
  append_styles(target, "svelte-1hq030r", `:host{--goa-dropdown-transition:box-shadow 0.05s ease-in;--goa-dropdown-typography:var(--goa-typography-body-m);--goa-dropdown-space-icon-text:var(--goa-space-s);--goa-dropdown-color-bg:var(--goa-color-greyscale-white);--goa-dropdown-color-text:var(--goa-color-text-default);--goa-dropdown-color-text-placeholder:var(--goa-color-text-secondary);--goa-dropdown-color-text-disabled:var(--goa-color-text-disabled);--goa-dropdown-color-bg-disabled:var(--goa-color-greyscale-100);--goa-dropdown-border-radius:var(--goa-border-radius-m);--goa-dropdown-border:inset 0 0 0 var(--goa-border-width-s) var(--goa-color-greyscale-700);--goa-dropdown-border-hover:inset 0 0 0 var(--goa-border-width-m) var(--goa-color-interactive-hover);--goa-dropdown-border-focus:0 0 0 var(--goa-border-width-l) var(--goa-color-interactive-focus);--goa-dropdown-border-error:inset 0 0 0 var(--goa-border-width-m) var(--goa-color-interactive-error);--goa-dropdown-border-disabled:0 0 0 var(--goa-border-width-s) var(--goa-color-greyscale-200);--goa-dropdown-padding-lr:var(--goa-space-s);--goa-dropdown-padding:6px var(--goa-dropdown-padding-lr) 8px;--goa-dropdown-item-padding:7px var(--goa-dropdown-padding-lr) 9px;--goa-dropdown-item-color-text:var(--goa-color-text-default);--goa-dropdown-item-color-bg:var(--goa-color-greyscale-white);--goa-dropdown-item-color-text-hover:var(--goa-color-interactive-hover);--goa-dropdown-item-color-bg-hover:var(--goa-color-greyscale-100);--goa-dropdown-item-color-text-selected:var(--goa-color-greyscale-white);--goa-dropdown-item-color-bg-selected:var(--goa-color-interactive-default);--goa-dropdown-item-color-text-selected-hover:var(--goa-color-greyscale-white);--goa-dropdown-item-color-bg-selected-hover:var(--goa-color-interactive-hover);--goa-dropdown-item-color-text-disabled: ;--goa-dropdown-item-color-bg-disabled: ;box-sizing:border-box;font-family:var(--goa-font-family-sans)}.dropdown.svelte-1hq030r.svelte-1hq030r{cursor:pointer;width:var(--width, 100%);max-width:100%}.dropdown-input-group.svelte-1hq030r.svelte-1hq030r{box-sizing:border-box;outline:none;transition:var(--goa-dropdown-transition);box-shadow:var(--goa-dropdown-border);border-radius:var(--goa-dropdown-border-radius);display:inline-flex;align-items:stretch;vertical-align:middle;background-color:var(--goa-dropdown-color-bg);cursor:pointer;width:100%}.dropdown-input-group.svelte-1hq030r.svelte-1hq030r:hover{box-shadow:var( --goa-dropdown-border-hover);border:none}.dropdown-input-group.svelte-1hq030r.svelte-1hq030r:has(input:focus-visible){box-shadow:var(--goa-dropdown-border),
      var(--goa-dropdown-border-focus)}.dropdown-input-group.error.svelte-1hq030r.svelte-1hq030r,.dropdown-input-group.error.svelte-1hq030r.svelte-1hq030r:hover{box-shadow:var(--goa-dropdown-border-error)}.dropdown-input-group.error.svelte-1hq030r.svelte-1hq030r:has(:focus-visible){box-shadow:var(--goa-dropdown-border),
      var(--goa-dropdown-border-focus)}@container not (max-width: 623px){.dropdown-input-group.svelte-1hq030r.svelte-1hq030r{width:var(--width, 100%)}}.dropdown-icon--arrow.svelte-1hq030r.svelte-1hq030r,.dropdown-icon--clear.svelte-1hq030r.svelte-1hq030r{margin-right:var(--goa-dropdown-space-icon-text)}.dropdown-icon--clear.svelte-1hq030r.svelte-1hq030r:focus:not(.disabled),.dropdown-icon--clear.svelte-1hq030r.svelte-1hq030r:active:not(.disabled){outline:none}.dropdown-input--leading-icon.svelte-1hq030r.svelte-1hq030r{margin-left:var(--goa-dropdown-padding-lr)}.dropdown-input--leading-icon.svelte-1hq030r+input.svelte-1hq030r{padding-left:var(--goa-space-xs)}input.svelte-1hq030r.svelte-1hq030r{display:inline-block;font:var(--goa-dropdown-typography);color:var(--goa-dropdown-color-text);padding:var(--goa-dropdown-padding);background-color:transparent;width:100%;flex:1 1 auto;z-index:1;text-overflow:ellipsis}input.svelte-1hq030r.svelte-1hq030r,input.svelte-1hq030r.svelte-1hq030r:focus,input.svelte-1hq030r.svelte-1hq030r:hover,input.svelte-1hq030r.svelte-1hq030r:active{outline:none;border:none}input[aria-disabled="true"].svelte-1hq030r.svelte-1hq030r{color:var(--goa-dropdown-color-text-disabled)}.dropdown-input-group--disabled.svelte-1hq030r.svelte-1hq030r,.dropdown-input-group--disabled.svelte-1hq030r.svelte-1hq030r:hover,.dropdown-input-group--disabled.svelte-1hq030r.svelte-1hq030r:active,.dropdown-input-group--disabled.svelte-1hq030r.svelte-1hq030r:focus{background-color:var(--goa-dropdown-color-bg-disabled);box-shadow:var(--goa-dropdown-border-disabled);cursor:default}.dropdown-input-group--disabled.svelte-1hq030r goa-icon.svelte-1hq030r{outline:none;color:var(--goa-dropdown-color-text-disabled)}ul[role="listbox"].svelte-1hq030r.svelte-1hq030r{border-radius:var(--goa-dropdown-border-radius);padding:0;margin:0}.dropdown-item.svelte-1hq030r.svelte-1hq030r{margin:0;padding:var(--goa-dropdown-item-padding);cursor:pointer;color:var(--goa-dropdown-item-color-text);overflow:hidden;white-space:normal;word-break:break-word;overflow-wrap:break-word}.dropdown-item.svelte-1hq030r.svelte-1hq030r:hover,.dropdown-item--highlighted.svelte-1hq030r.svelte-1hq030r{background:var(--goa-dropdown-item-color-bg-hover);color:var(--goa-dropdown-item-color-text-hover)}.dropdown-item[aria-selected="true"].svelte-1hq030r.svelte-1hq030r{background:var(--goa-dropdown-item-color-bg-selected);color:var(--goa-dropdown-item-color-text-selected)}.dropdown-item[aria-selected="true"].svelte-1hq030r.svelte-1hq030r:hover,.dropdown-item[aria-selected="true"].dropdown-item--highlighted.svelte-1hq030r.svelte-1hq030r{background:var(--goa-dropdown-item-color-bg-selected-hover);color:var(--goa-dropdown-item-color-text-selected-hover)}.dropdown-native.svelte-1hq030r.svelte-1hq030r{position:relative;box-shadow:var(--goa-dropdown-border);border-radius:var(--goa-dropdown-border-radius);background-color:var(--goa-dropdown-color-bg);transition:var(--goa-dropdown-transition)}.dropdown-native.svelte-1hq030r.svelte-1hq030r:has(select:disabled){background-color:var(--goa-dropdown-color-bg-disabled);box-shadow:var(--goa-dropdown-border-disabled);color:var(--goa-color-text-secondary);cursor:default}.dropdown-native.svelte-1hq030r.svelte-1hq030r:has(select.error){box-shadow:var(--goa-dropdown-border-error)}.dropdown-native.svelte-1hq030r.svelte-1hq030r:hover{box-shadow:var(--goa-dropdown-border-hover)}select.svelte-1hq030r.svelte-1hq030r{border:none;font:var(--goa-dropdown-typography);background-color:transparent;color:var(--goa-dropdown-color-text);-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:calc(var(--goa-space-xs) + 1px);padding-left:var(--goa-space-s);padding-right:3rem;outline:none;width:100%}.dropdown-native.svelte-1hq030r.svelte-1hq030r::after{content:"";position:absolute;right:0.6rem;top:0.6rem;pointer-events:none;width:1.5rem;height:1.5rem;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='none' stroke='%23333333' stroke-linecap='round' stroke-linejoin='round' stroke-width='48' d='M112 184l144 144 144-144' /%3E%3C/svg%3E");background-repeat:none}.dropdown-native.svelte-1hq030r.svelte-1hq030r:has(:focus-visible){box-shadow:var(--goa-dropdown-border),
      var(--goa-dropdown-border-focus)}goa-icon.svelte-1hq030r.svelte-1hq030r:focus-visible{outline:none}.svelte-1hq030r.svelte-1hq030r::-moz-placeholder{color:var(--goa-dropdown-color-text-placeholder);opacity:1}.svelte-1hq030r.svelte-1hq030r::placeholder{color:var(--goa-dropdown-color-text-placeholder);opacity:1}`);
}
function get_each_context_1$1(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[73] = list[i];
  child_ctx[77] = i;
  return child_ctx;
}
function get_each_context$7(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[73] = list[i];
  return child_ctx;
}
function create_else_block$b(ctx) {
  let t0;
  let goa_popover;
  let div;
  let t1;
  let input;
  let input_style_value;
  let input_value_value;
  let input_aria_controls_value;
  let input_aria_label_value;
  let input_aria_owns_value;
  let input_readonly_value;
  let t2;
  let t3;
  let ul2;
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let ul_id_value;
  let ul_aria_label_value;
  let ul_style_value;
  let goa_popover_width_value;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = (
    /*#slots*/
    ctx[46].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[45],
    null
  );
  let if_block0 = (
    /*leadingicon*/
    ctx[4] && create_if_block_3$b(ctx)
  );
  function select_block_type_1(ctx2, dirty) {
    var _a;
    if (
      /*_inputEl*/
      ((_a = ctx2[24]) == null ? void 0 : _a.value) && /*_filterable*/
      ctx2[26]
    ) return create_if_block_2$b;
    return create_else_block_2$1;
  }
  let current_block_type = select_block_type_1(ctx);
  let if_block1 = current_block_type(ctx);
  let each_value_1 = ensure_array_like(
    /*_filteredOptions*/
    ctx[15]
  );
  const get_key = (ctx2) => (
    /*index*/
    ctx2[77]
  );
  for (let i = 0; i < each_value_1.length; i += 1) {
    let child_ctx = get_each_context_1$1(ctx, each_value_1, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block_1$1(key, child_ctx));
  }
  let each_1_else = null;
  if (!each_value_1.length) {
    each_1_else = create_else_block_1$1(ctx);
  }
  return {
    c() {
      var _a, _b;
      if (default_slot) default_slot.c();
      t0 = space();
      goa_popover = element("goa-popover");
      div = element("div");
      if (if_block0) if_block0.c();
      t1 = space();
      input = element("input");
      t2 = space();
      if_block1.c();
      t3 = space();
      ul2 = element("ul");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      if (each_1_else) {
        each_1_else.c();
      }
      attr(input, "style", input_style_value = `
            cursor: ${!/*_disabled*/
      ctx[28] ? (
        /*_filterable*/
        ctx[26] ? "auto" : "pointer"
      ) : "default"};
          `);
      attr(input, "data-testid", "input");
      input.value = input_value_value = /*_selectedOption*/
      ((_a = ctx[18]) == null ? void 0 : _a.label) || /*_selectedOption*/
      ((_b = ctx[18]) == null ? void 0 : _b.value) || "";
      attr(input, "type", "text");
      attr(input, "role", "combobox");
      attr(input, "autocomplete", "off");
      attr(input, "aria-autocomplete", "list");
      attr(input, "aria-controls", input_aria_controls_value = `menu-${/*name*/
      ctx[1]}`);
      attr(
        input,
        "aria-expanded",
        /*_isMenuVisible*/
        ctx[19]
      );
      attr(input, "aria-label", input_aria_label_value = /*arialabel*/
      ctx[2] || /*name*/
      ctx[1]);
      attr(
        input,
        "aria-labelledby",
        /*arialabelledby*/
        ctx[3]
      );
      attr(
        input,
        "id",
        /*name*/
        ctx[1]
      );
      attr(
        input,
        "aria-activedescendant",
        /*_activeDescendantId*/
        ctx[27]
      );
      attr(
        input,
        "aria-disabled",
        /*_disabled*/
        ctx[28]
      );
      attr(input, "aria-owns", input_aria_owns_value = /*_isMenuVisible*/
      ctx[19] ? `menu-${/*name*/
      ctx[1]}` : void 0);
      attr(input, "aria-haspopup", "listbox");
      input.disabled = /*_disabled*/
      ctx[28];
      input.readOnly = input_readonly_value = !/*_filterable*/
      ctx[26];
      attr(
        input,
        "placeholder",
        /*placeholder*/
        ctx[6]
      );
      attr(
        input,
        "name",
        /*name*/
        ctx[1]
      );
      attr(input, "class", "svelte-1hq030r");
      attr(div, "slot", "target");
      attr(div, "class", "dropdown-input-group svelte-1hq030r");
      toggle_class(
        div,
        "dropdown-input-group--disabled",
        /*_disabled*/
        ctx[28]
      );
      toggle_class(
        div,
        "error",
        /*_error*/
        ctx[29]
      );
      attr(ul2, "id", ul_id_value = `menu-${/*name*/
      ctx[1]}`);
      attr(ul2, "role", "listbox");
      attr(ul2, "tabindex", "-1");
      attr(ul2, "data-testid", "dropdown-menu");
      attr(ul2, "aria-label", ul_aria_label_value = /*arialabel*/
      ctx[2] || /*name*/
      ctx[1]);
      attr(
        ul2,
        "aria-labelledby",
        /*arialabelledby*/
        ctx[3]
      );
      attr(ul2, "style", ul_style_value = `
            outline: none;
            overflow-y: auto;
            max-height: ${/*maxheight*/
      ctx[5]};
          `);
      attr(ul2, "class", "svelte-1hq030r");
      set_custom_element_data(
        goa_popover,
        "disabled",
        /*disabled*/
        ctx[7]
      );
      set_custom_element_data(
        goa_popover,
        "relative",
        /*relative*/
        ctx[8]
      );
      set_custom_element_data(goa_popover, "data-testid", "option-list");
      set_custom_element_data(goa_popover, "width", goa_popover_width_value = `${/*_popoverMaxWidth*/
      ctx[21] || 0}px`);
      set_custom_element_data(
        goa_popover,
        "open",
        /*_isMenuVisible*/
        ctx[19]
      );
      set_custom_element_data(goa_popover, "padded", "false");
      set_custom_element_data(goa_popover, "tabindex", "-1");
      set_custom_element_data(goa_popover, "maxwidth", "100%");
      set_custom_element_data(goa_popover, "class", "svelte-1hq030r");
    },
    m(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      insert(target, t0, anchor);
      insert(target, goa_popover, anchor);
      append(goa_popover, div);
      if (if_block0) if_block0.m(div, null);
      append(div, t1);
      append(div, input);
      ctx[47](input);
      append(div, t2);
      if_block1.m(div, null);
      append(goa_popover, t3);
      append(goa_popover, ul2);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(ul2, null);
        }
      }
      if (each_1_else) {
        each_1_else.m(ul2, null);
      }
      ctx[49](ul2);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            input,
            "keydown",
            /*onInputKeyDown*/
            ctx[35]
          ),
          listen(
            input,
            "keyup",
            /*onInputKeyUp*/
            ctx[34]
          ),
          listen(
            input,
            "change",
            /*onChange*/
            ctx[33]
          ),
          listen(
            goa_popover,
            "_open",
            /*showMenu*/
            ctx[30]
          ),
          listen(
            goa_popover,
            "_close",
            /*hideMenu*/
            ctx[31]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      var _a, _b;
      if (default_slot) {
        if (default_slot.p && (!current || dirty[1] & /*$$scope*/
        16384)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[45],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[45]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[45],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (
        /*leadingicon*/
        ctx2[4]
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_3$b(ctx2);
          if_block0.c();
          if_block0.m(div, t1);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (!current || dirty[0] & /*_disabled, _filterable*/
      335544320 && input_style_value !== (input_style_value = `
            cursor: ${!/*_disabled*/
      ctx2[28] ? (
        /*_filterable*/
        ctx2[26] ? "auto" : "pointer"
      ) : "default"};
          `)) {
        attr(input, "style", input_style_value);
      }
      if (!current || dirty[0] & /*_selectedOption*/
      262144 && input_value_value !== (input_value_value = /*_selectedOption*/
      ((_a = ctx2[18]) == null ? void 0 : _a.label) || /*_selectedOption*/
      ((_b = ctx2[18]) == null ? void 0 : _b.value) || "") && input.value !== input_value_value) {
        input.value = input_value_value;
      }
      if (!current || dirty[0] & /*name*/
      2 && input_aria_controls_value !== (input_aria_controls_value = `menu-${/*name*/
      ctx2[1]}`)) {
        attr(input, "aria-controls", input_aria_controls_value);
      }
      if (!current || dirty[0] & /*_isMenuVisible*/
      524288) {
        attr(
          input,
          "aria-expanded",
          /*_isMenuVisible*/
          ctx2[19]
        );
      }
      if (!current || dirty[0] & /*arialabel, name*/
      6 && input_aria_label_value !== (input_aria_label_value = /*arialabel*/
      ctx2[2] || /*name*/
      ctx2[1])) {
        attr(input, "aria-label", input_aria_label_value);
      }
      if (!current || dirty[0] & /*arialabelledby*/
      8) {
        attr(
          input,
          "aria-labelledby",
          /*arialabelledby*/
          ctx2[3]
        );
      }
      if (!current || dirty[0] & /*name*/
      2) {
        attr(
          input,
          "id",
          /*name*/
          ctx2[1]
        );
      }
      if (!current || dirty[0] & /*_activeDescendantId*/
      134217728) {
        attr(
          input,
          "aria-activedescendant",
          /*_activeDescendantId*/
          ctx2[27]
        );
      }
      if (!current || dirty[0] & /*_disabled*/
      268435456) {
        attr(
          input,
          "aria-disabled",
          /*_disabled*/
          ctx2[28]
        );
      }
      if (!current || dirty[0] & /*_isMenuVisible, name*/
      524290 && input_aria_owns_value !== (input_aria_owns_value = /*_isMenuVisible*/
      ctx2[19] ? `menu-${/*name*/
      ctx2[1]}` : void 0)) {
        attr(input, "aria-owns", input_aria_owns_value);
      }
      if (!current || dirty[0] & /*_disabled*/
      268435456) {
        input.disabled = /*_disabled*/
        ctx2[28];
      }
      if (!current || dirty[0] & /*_filterable*/
      67108864 && input_readonly_value !== (input_readonly_value = !/*_filterable*/
      ctx2[26])) {
        input.readOnly = input_readonly_value;
      }
      if (!current || dirty[0] & /*placeholder*/
      64) {
        attr(
          input,
          "placeholder",
          /*placeholder*/
          ctx2[6]
        );
      }
      if (!current || dirty[0] & /*name*/
      2) {
        attr(
          input,
          "name",
          /*name*/
          ctx2[1]
        );
      }
      if (current_block_type === (current_block_type = select_block_type_1(ctx2)) && if_block1) {
        if_block1.p(ctx2, dirty);
      } else {
        if_block1.d(1);
        if_block1 = current_block_type(ctx2);
        if (if_block1) {
          if_block1.c();
          if_block1.m(div, null);
        }
      }
      if (!current || dirty[0] & /*_disabled*/
      268435456) {
        toggle_class(
          div,
          "dropdown-input-group--disabled",
          /*_disabled*/
          ctx2[28]
        );
      }
      if (!current || dirty[0] & /*_error*/
      536870912) {
        toggle_class(
          div,
          "error",
          /*_error*/
          ctx2[29]
        );
      }
      if (dirty[0] & /*_filteredOptions, _selectedOption, _highlightedIndex, _isDirty, _filterable*/
      100974592 | dirty[1] & /*onSelect*/
      2) {
        each_value_1 = ensure_array_like(
          /*_filteredOptions*/
          ctx2[15]
        );
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value_1, each_1_lookup, ul2, destroy_block, create_each_block_1$1, null, get_each_context_1$1);
        if (!each_value_1.length && each_1_else) {
          each_1_else.p(ctx2, dirty);
        } else if (!each_value_1.length) {
          each_1_else = create_else_block_1$1(ctx2);
          each_1_else.c();
          each_1_else.m(ul2, null);
        } else if (each_1_else) {
          each_1_else.d(1);
          each_1_else = null;
        }
      }
      if (!current || dirty[0] & /*name*/
      2 && ul_id_value !== (ul_id_value = `menu-${/*name*/
      ctx2[1]}`)) {
        attr(ul2, "id", ul_id_value);
      }
      if (!current || dirty[0] & /*arialabel, name*/
      6 && ul_aria_label_value !== (ul_aria_label_value = /*arialabel*/
      ctx2[2] || /*name*/
      ctx2[1])) {
        attr(ul2, "aria-label", ul_aria_label_value);
      }
      if (!current || dirty[0] & /*arialabelledby*/
      8) {
        attr(
          ul2,
          "aria-labelledby",
          /*arialabelledby*/
          ctx2[3]
        );
      }
      if (!current || dirty[0] & /*maxheight*/
      32 && ul_style_value !== (ul_style_value = `
            outline: none;
            overflow-y: auto;
            max-height: ${/*maxheight*/
      ctx2[5]};
          `)) {
        attr(ul2, "style", ul_style_value);
      }
      if (!current || dirty[0] & /*disabled*/
      128) {
        set_custom_element_data(
          goa_popover,
          "disabled",
          /*disabled*/
          ctx2[7]
        );
      }
      if (!current || dirty[0] & /*relative*/
      256) {
        set_custom_element_data(
          goa_popover,
          "relative",
          /*relative*/
          ctx2[8]
        );
      }
      if (!current || dirty[0] & /*_popoverMaxWidth*/
      2097152 && goa_popover_width_value !== (goa_popover_width_value = `${/*_popoverMaxWidth*/
      ctx2[21] || 0}px`)) {
        set_custom_element_data(goa_popover, "width", goa_popover_width_value);
      }
      if (!current || dirty[0] & /*_isMenuVisible*/
      524288) {
        set_custom_element_data(
          goa_popover,
          "open",
          /*_isMenuVisible*/
          ctx2[19]
        );
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(goa_popover);
      }
      if (default_slot) default_slot.d(detaching);
      if (if_block0) if_block0.d();
      ctx[47](null);
      if_block1.d();
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }
      if (each_1_else) each_1_else.d();
      ctx[49](null);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_if_block$s(ctx) {
  let select;
  let select_aria_label_value;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = (
    /*#slots*/
    ctx[46].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[45],
    null
  );
  let each_value = ensure_array_like(
    /*_options*/
    ctx[17]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block$7(get_each_context$7(ctx, each_value, i));
  }
  return {
    c() {
      select = element("select");
      if (default_slot) default_slot.c();
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(
        select,
        "name",
        /*name*/
        ctx[1]
      );
      attr(select, "aria-label", select_aria_label_value = /*arialabel*/
      ctx[2] || /*name*/
      ctx[1]);
      attr(
        select,
        "aria-labelledby",
        /*arialabelledby*/
        ctx[3]
      );
      select.disabled = /*_disabled*/
      ctx[28];
      attr(
        select,
        "id",
        /*name*/
        ctx[1]
      );
      attr(select, "class", "svelte-1hq030r");
      toggle_class(
        select,
        "error",
        /*_error*/
        ctx[29]
      );
    },
    m(target, anchor) {
      insert(target, select, anchor);
      if (default_slot) {
        default_slot.m(select, null);
      }
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(select, null);
        }
      }
      current = true;
      if (!mounted) {
        dispose = listen(
          select,
          "change",
          /*onNativeSelect*/
          ctx[38]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty[1] & /*$$scope*/
        16384)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[45],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[45]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[45],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (dirty[0] & /*value, _options*/
      131073) {
        each_value = ensure_array_like(
          /*_options*/
          ctx2[17]
        );
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context$7(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block$7(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(select, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
      if (!current || dirty[0] & /*name*/
      2) {
        attr(
          select,
          "name",
          /*name*/
          ctx2[1]
        );
      }
      if (!current || dirty[0] & /*arialabel, name*/
      6 && select_aria_label_value !== (select_aria_label_value = /*arialabel*/
      ctx2[2] || /*name*/
      ctx2[1])) {
        attr(select, "aria-label", select_aria_label_value);
      }
      if (!current || dirty[0] & /*arialabelledby*/
      8) {
        attr(
          select,
          "aria-labelledby",
          /*arialabelledby*/
          ctx2[3]
        );
      }
      if (!current || dirty[0] & /*_disabled*/
      268435456) {
        select.disabled = /*_disabled*/
        ctx2[28];
      }
      if (!current || dirty[0] & /*name*/
      2) {
        attr(
          select,
          "id",
          /*name*/
          ctx2[1]
        );
      }
      if (!current || dirty[0] & /*_error*/
      536870912) {
        toggle_class(
          select,
          "error",
          /*_error*/
          ctx2[29]
        );
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(select);
      }
      if (default_slot) default_slot.d(detaching);
      destroy_each(each_blocks, detaching);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_3$b(ctx) {
  let goa_icon;
  return {
    c() {
      goa_icon = element("goa-icon");
      set_custom_element_data(goa_icon, "class", "dropdown-input--leading-icon svelte-1hq030r");
      set_custom_element_data(goa_icon, "data-testid", "leading-icon");
      set_custom_element_data(
        goa_icon,
        "type",
        /*leadingicon*/
        ctx[4]
      );
    },
    m(target, anchor) {
      insert(target, goa_icon, anchor);
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*leadingicon*/
      16) {
        set_custom_element_data(
          goa_icon,
          "type",
          /*leadingicon*/
          ctx2[4]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(goa_icon);
      }
    }
  };
}
function create_else_block_2$1(ctx) {
  let goa_icon;
  let goa_icon_arialabel_value;
  let goa_icon_ariacontrols_value;
  let goa_icon_ariaexpanded_value;
  let goa_icon_type_value;
  let mounted;
  let dispose;
  return {
    c() {
      goa_icon = element("goa-icon");
      set_custom_element_data(goa_icon, "role", "button");
      set_custom_element_data(goa_icon, "tabindex", "0");
      set_custom_element_data(
        goa_icon,
        "id",
        /*name*/
        ctx[1]
      );
      set_custom_element_data(goa_icon, "arialabel", goa_icon_arialabel_value = /*arialabel*/
      ctx[2] || /*name*/
      ctx[1]);
      set_custom_element_data(goa_icon, "ariacontrols", goa_icon_ariacontrols_value = `menu-${/*name*/
      ctx[1]}`);
      set_custom_element_data(goa_icon, "ariaexpanded", goa_icon_ariaexpanded_value = fromBoolean(
        /*_isMenuVisible*/
        ctx[19]
      ));
      set_custom_element_data(goa_icon, "class", "dropdown-icon--arrow svelte-1hq030r");
      set_custom_element_data(goa_icon, "size", "medium");
      set_custom_element_data(goa_icon, "type", goa_icon_type_value = /*_isMenuVisible*/
      ctx[19] ? "chevron-up" : "chevron-down");
    },
    m(target, anchor) {
      insert(target, goa_icon, anchor);
      if (!mounted) {
        dispose = listen(
          goa_icon,
          "click",
          /*onChevronClick*/
          ctx[39]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*name*/
      2) {
        set_custom_element_data(
          goa_icon,
          "id",
          /*name*/
          ctx2[1]
        );
      }
      if (dirty[0] & /*arialabel, name*/
      6 && goa_icon_arialabel_value !== (goa_icon_arialabel_value = /*arialabel*/
      ctx2[2] || /*name*/
      ctx2[1])) {
        set_custom_element_data(goa_icon, "arialabel", goa_icon_arialabel_value);
      }
      if (dirty[0] & /*name*/
      2 && goa_icon_ariacontrols_value !== (goa_icon_ariacontrols_value = `menu-${/*name*/
      ctx2[1]}`)) {
        set_custom_element_data(goa_icon, "ariacontrols", goa_icon_ariacontrols_value);
      }
      if (dirty[0] & /*_isMenuVisible*/
      524288 && goa_icon_ariaexpanded_value !== (goa_icon_ariaexpanded_value = fromBoolean(
        /*_isMenuVisible*/
        ctx2[19]
      ))) {
        set_custom_element_data(goa_icon, "ariaexpanded", goa_icon_ariaexpanded_value);
      }
      if (dirty[0] & /*_isMenuVisible*/
      524288 && goa_icon_type_value !== (goa_icon_type_value = /*_isMenuVisible*/
      ctx2[19] ? "chevron-up" : "chevron-down")) {
        set_custom_element_data(goa_icon, "type", goa_icon_type_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(goa_icon);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_2$b(ctx) {
  let goa_icon;
  let goa_icon_tabindex_value;
  let goa_icon_arialabel_value;
  let goa_icon_ariacontrols_value;
  let goa_icon_ariaexpanded_value;
  let mounted;
  let dispose;
  return {
    c() {
      goa_icon = element("goa-icon");
      set_custom_element_data(
        goa_icon,
        "id",
        /*name*/
        ctx[1]
      );
      set_custom_element_data(goa_icon, "data-testid", "clear-icon");
      set_custom_element_data(goa_icon, "tabindex", goa_icon_tabindex_value = /*_disabled*/
      ctx[28] ? -1 : 0);
      set_custom_element_data(goa_icon, "role", "button");
      set_custom_element_data(goa_icon, "arialabel", goa_icon_arialabel_value = `clear ${/*arialabel*/
      ctx[2] || /*name*/
      ctx[1]}`);
      set_custom_element_data(goa_icon, "ariacontrols", goa_icon_ariacontrols_value = `menu-${/*name*/
      ctx[1]}`);
      set_custom_element_data(goa_icon, "ariaexpanded", goa_icon_ariaexpanded_value = fromBoolean(
        /*_isMenuVisible*/
        ctx[19]
      ));
      set_custom_element_data(goa_icon, "class", "dropdown-icon--clear svelte-1hq030r");
      set_custom_element_data(goa_icon, "size", "medium");
      set_custom_element_data(goa_icon, "type", "close");
      set_custom_element_data(goa_icon, "theme", "filled");
      toggle_class(
        goa_icon,
        "disabled",
        /*_disabled*/
        ctx[28]
      );
    },
    m(target, anchor) {
      insert(target, goa_icon, anchor);
      if (!mounted) {
        dispose = [
          listen(
            goa_icon,
            "click",
            /*onClearIconClick*/
            ctx[37]
          ),
          listen(
            goa_icon,
            "keydown",
            /*onClearIconKeyDown*/
            ctx[36]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*name*/
      2) {
        set_custom_element_data(
          goa_icon,
          "id",
          /*name*/
          ctx2[1]
        );
      }
      if (dirty[0] & /*_disabled*/
      268435456 && goa_icon_tabindex_value !== (goa_icon_tabindex_value = /*_disabled*/
      ctx2[28] ? -1 : 0)) {
        set_custom_element_data(goa_icon, "tabindex", goa_icon_tabindex_value);
      }
      if (dirty[0] & /*arialabel, name*/
      6 && goa_icon_arialabel_value !== (goa_icon_arialabel_value = `clear ${/*arialabel*/
      ctx2[2] || /*name*/
      ctx2[1]}`)) {
        set_custom_element_data(goa_icon, "arialabel", goa_icon_arialabel_value);
      }
      if (dirty[0] & /*name*/
      2 && goa_icon_ariacontrols_value !== (goa_icon_ariacontrols_value = `menu-${/*name*/
      ctx2[1]}`)) {
        set_custom_element_data(goa_icon, "ariacontrols", goa_icon_ariacontrols_value);
      }
      if (dirty[0] & /*_isMenuVisible*/
      524288 && goa_icon_ariaexpanded_value !== (goa_icon_ariaexpanded_value = fromBoolean(
        /*_isMenuVisible*/
        ctx2[19]
      ))) {
        set_custom_element_data(goa_icon, "ariaexpanded", goa_icon_ariaexpanded_value);
      }
      if (dirty[0] & /*_disabled*/
      268435456) {
        toggle_class(
          goa_icon,
          "disabled",
          /*_disabled*/
          ctx2[28]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(goa_icon);
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_else_block_1$1(ctx) {
  let if_block_anchor;
  let if_block = (
    /*_filterable*/
    ctx[26] && create_if_block_1$g()
  );
  return {
    c() {
      if (if_block) if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block) if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (
        /*_filterable*/
        ctx2[26]
      ) {
        if (if_block) ;
        else {
          if_block = create_if_block_1$g();
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block) if_block.d(detaching);
    }
  };
}
function create_if_block_1$g(ctx) {
  let li2;
  return {
    c() {
      li2 = element("li");
      li2.textContent = "No matches found\n            ";
      attr(li2, "class", "dropdown-item svelte-1hq030r");
      attr(li2, "data-testid", "dropdown-item-not-found");
    },
    m(target, anchor) {
      insert(target, li2, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(li2);
      }
    }
  };
}
function create_each_block_1$1(key_1, ctx) {
  let li2;
  let t0_value = (
    /*option*/
    (ctx[73].label || /*option*/
    ctx[73].value) + ""
  );
  let t0;
  let t1;
  let li_id_value;
  let li_aria_selected_value;
  let li_data_index_value;
  let li_data_testid_value;
  let li_data_value_value;
  let mounted;
  let dispose;
  function click_handler() {
    return (
      /*click_handler*/
      ctx[48](
        /*option*/
        ctx[73]
      )
    );
  }
  return {
    key: key_1,
    first: null,
    c() {
      var _a, _b;
      li2 = element("li");
      t0 = text(t0_value);
      t1 = space();
      attr(li2, "id", li_id_value = /*option*/
      ctx[73].value);
      attr(li2, "aria-selected", li_aria_selected_value = /*_selectedOption*/
      ((_a = ctx[18]) == null ? void 0 : _a.value) === /*option*/
      (ctx[73].label || /*option*/
      ctx[73].value));
      attr(li2, "class", "dropdown-item svelte-1hq030r");
      attr(li2, "data-index", li_data_index_value = /*index*/
      ctx[77]);
      attr(li2, "data-testid", li_data_testid_value = `dropdown-item-${/*option*/
      ctx[73].value}`);
      attr(li2, "data-value", li_data_value_value = /*option*/
      ctx[73].value);
      attr(li2, "role", "option");
      set_style(li2, "display", "block");
      toggle_class(
        li2,
        "selected",
        /*_selectedOption*/
        ((_b = ctx[18]) == null ? void 0 : _b.value) === /*option*/
        (ctx[73].label || /*option*/
        ctx[73].value)
      );
      toggle_class(
        li2,
        "dropdown-item--highlighted",
        /*index*/
        ctx[77] === /*_highlightedIndex*/
        ctx[14]
      );
      this.first = li2;
    },
    m(target, anchor) {
      insert(target, li2, anchor);
      append(li2, t0);
      append(li2, t1);
      if (!mounted) {
        dispose = listen(li2, "click", click_handler);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      var _a, _b;
      ctx = new_ctx;
      if (dirty[0] & /*_filteredOptions*/
      32768 && t0_value !== (t0_value = /*option*/
      (ctx[73].label || /*option*/
      ctx[73].value) + "")) set_data(t0, t0_value);
      if (dirty[0] & /*_filteredOptions*/
      32768 && li_id_value !== (li_id_value = /*option*/
      ctx[73].value)) {
        attr(li2, "id", li_id_value);
      }
      if (dirty[0] & /*_selectedOption, _filteredOptions*/
      294912 && li_aria_selected_value !== (li_aria_selected_value = /*_selectedOption*/
      ((_a = ctx[18]) == null ? void 0 : _a.value) === /*option*/
      (ctx[73].label || /*option*/
      ctx[73].value))) {
        attr(li2, "aria-selected", li_aria_selected_value);
      }
      if (dirty[0] & /*_filteredOptions*/
      32768 && li_data_index_value !== (li_data_index_value = /*index*/
      ctx[77])) {
        attr(li2, "data-index", li_data_index_value);
      }
      if (dirty[0] & /*_filteredOptions*/
      32768 && li_data_testid_value !== (li_data_testid_value = `dropdown-item-${/*option*/
      ctx[73].value}`)) {
        attr(li2, "data-testid", li_data_testid_value);
      }
      if (dirty[0] & /*_filteredOptions*/
      32768 && li_data_value_value !== (li_data_value_value = /*option*/
      ctx[73].value)) {
        attr(li2, "data-value", li_data_value_value);
      }
      if (dirty[0] & /*_selectedOption, _filteredOptions*/
      294912) {
        toggle_class(
          li2,
          "selected",
          /*_selectedOption*/
          ((_b = ctx[18]) == null ? void 0 : _b.value) === /*option*/
          (ctx[73].label || /*option*/
          ctx[73].value)
        );
      }
      if (dirty[0] & /*_filteredOptions, _highlightedIndex*/
      49152) {
        toggle_class(
          li2,
          "dropdown-item--highlighted",
          /*index*/
          ctx[77] === /*_highlightedIndex*/
          ctx[14]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(li2);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_each_block$7(ctx) {
  let option_1;
  let t0_value = (
    /*option*/
    ctx[73].label + ""
  );
  let t0;
  let t1;
  let option_1_selected_value;
  let option_1_value_value;
  return {
    c() {
      option_1 = element("option");
      t0 = text(t0_value);
      t1 = space();
      option_1.selected = option_1_selected_value = /*value*/
      ctx[0] === /*option*/
      ctx[73].value;
      option_1.__value = option_1_value_value = /*option*/
      ctx[73].value;
      set_input_value(option_1, option_1.__value);
      attr(option_1, "class", "svelte-1hq030r");
    },
    m(target, anchor) {
      insert(target, option_1, anchor);
      append(option_1, t0);
      append(option_1, t1);
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*_options*/
      131072 && t0_value !== (t0_value = /*option*/
      ctx2[73].label + "")) set_data(t0, t0_value);
      if (dirty[0] & /*value, _options*/
      131073 && option_1_selected_value !== (option_1_selected_value = /*value*/
      ctx2[0] === /*option*/
      ctx2[73].value)) {
        option_1.selected = option_1_selected_value;
      }
      if (dirty[0] & /*_options*/
      131072 && option_1_value_value !== (option_1_value_value = /*option*/
      ctx2[73].value)) {
        option_1.__value = option_1_value_value;
        set_input_value(option_1, option_1.__value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(option_1);
      }
    }
  };
}
function create_fragment$N(ctx) {
  let div;
  let current_block_type_index;
  let if_block;
  let div_data_testid_value;
  let div_style_value;
  let div_resize_listener;
  let current;
  const if_block_creators = [create_if_block$s, create_else_block$b];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*_native*/
      ctx2[16]
    ) return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      div = element("div");
      if_block.c();
      attr(div, "data-testid", div_data_testid_value = /*testid*/
      ctx[13] || `${/*name*/
      ctx[1]}-dropdown`);
      attr(div, "class", "dropdown svelte-1hq030r");
      attr(div, "style", div_style_value = `
      ${calculateMargin(
        /*mt*/
        ctx[9],
        /*mr*/
        ctx[10],
        /*mb*/
        ctx[11],
        /*ml*/
        ctx[12]
      )};
      --width: ${/*_width*/
      ctx[20]};
    `);
      add_render_callback(() => (
        /*div_elementresize_handler*/
        ctx[51].call(div)
      ));
      toggle_class(
        div,
        "dropdown-native",
        /*_native*/
        ctx[16]
      );
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if_blocks[current_block_type_index].m(div, null);
      ctx[50](div);
      div_resize_listener = add_iframe_resize_listener(
        div,
        /*div_elementresize_handler*/
        ctx[51].bind(div)
      );
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(div, null);
      }
      if (!current || dirty[0] & /*testid, name*/
      8194 && div_data_testid_value !== (div_data_testid_value = /*testid*/
      ctx2[13] || `${/*name*/
      ctx2[1]}-dropdown`)) {
        attr(div, "data-testid", div_data_testid_value);
      }
      if (!current || dirty[0] & /*mt, mr, mb, ml, _width*/
      1056256 && div_style_value !== (div_style_value = `
      ${calculateMargin(
        /*mt*/
        ctx2[9],
        /*mr*/
        ctx2[10],
        /*mb*/
        ctx2[11],
        /*ml*/
        ctx2[12]
      )};
      --width: ${/*_width*/
      ctx2[20]};
    `)) {
        attr(div, "style", div_style_value);
      }
      if (!current || dirty[0] & /*_native*/
      65536) {
        toggle_class(
          div,
          "dropdown-native",
          /*_native*/
          ctx2[16]
        );
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if_blocks[current_block_type_index].d();
      ctx[50](null);
      div_resize_listener();
    }
  };
}
function parseValues(selectedValue) {
  let rawValue;
  try {
    rawValue = JSON.parse(selectedValue || `[""]`);
  } catch (e) {
    rawValue = [selectedValue];
  }
  const rawValues = typeof rawValue === "object" ? rawValue : [rawValue];
  return rawValues.map((val) => `${val}`);
}
function isFilterMatch(option, filter) {
  if (filter.length === 0) return true;
  let value2 = option.filter || option.label || option.value;
  value2 = value2.toLowerCase();
  filter = filter.toLowerCase().trim();
  return value2.startsWith(filter) || value2.includes(" " + filter);
}
function instance$N($$self, $$props, $$invalidate) {
  let _disabled;
  let _error;
  let _multiselect;
  let _native;
  let _activeDescendantId;
  let { $$slots: slots = {}, $$scope } = $$props;
  let { name } = $$props;
  let { arialabel = "" } = $$props;
  let { arialabelledby = "" } = $$props;
  let { value = "" } = $$props;
  let { filterable = "false" } = $$props;
  let { leadingicon = null } = $$props;
  let { maxheight = "276px" } = $$props;
  let { placeholder = "" } = $$props;
  let { width = "" } = $$props;
  let { disabled = "false" } = $$props;
  let { error = "false" } = $$props;
  let { multiselect = "false" } = $$props;
  let { native = "false" } = $$props;
  let { relative = "false" } = $$props;
  let { mt = null } = $$props;
  let { mr = null } = $$props;
  let { mb: mb2 = null } = $$props;
  let { ml: ml2 = null } = $$props;
  let { testid = "" } = $$props;
  let _options = [];
  let _selectedOption;
  let _isMenuVisible = false;
  let _highlightedIndex = -1;
  let _width;
  let _popoverMaxWidth;
  let _rootEl;
  let _menuEl;
  let _inputEl;
  let _eventHandler;
  let _isDirty = false;
  let _filteredOptions = [];
  let _values = [];
  let _bindTimeoutId;
  let _mountStatus = "ready";
  let _mountTimeoutId = void 0;
  let _filterable = toBoolean(filterable) && !toBoolean(native);
  onMount(() => {
    getChildren();
    addRelayListener();
    sendMountedMessage();
    _eventHandler = _filterable ? new ComboboxKeyUpHandler(_inputEl) : new DropdownKeyUpHandler(_inputEl);
  });
  function addRelayListener() {
    receive(_rootEl, (action, data) => {
      switch (action) {
        case FormSetValueMsg:
          onSetValue(data);
          break;
        case FieldsetSetErrorMsg:
          $$invalidate(40, error = "true");
          break;
        case FieldsetResetErrorsMsg:
          $$invalidate(40, error = "false");
          break;
      }
    });
  }
  function onSetValue(detail) {
    $$invalidate(0, value = detail.value);
    dispatch$1(_rootEl, "_change", { name, value }, { bubbles: true });
  }
  function sendMountedMessage() {
    relay(_rootEl, FormFieldMountMsg, { name, el: _rootEl }, { bubbles: true, timeout: 10 });
  }
  function getChildren() {
    _rootEl == null ? void 0 : _rootEl.addEventListener("dropdown-item:mounted", (e) => {
      const detail = e.detail;
      if (_mountStatus === "ready") {
        if (detail.mountType === "reset") {
          $$invalidate(17, _options = []);
        }
        _mountStatus = "active";
      }
      switch (detail.mountType) {
        case "append":
          $$invalidate(17, _options = [..._options, detail]);
          break;
        case "prepend":
          $$invalidate(17, _options = [detail, ..._options]);
          break;
        case "reset":
          $$invalidate(17, _options = [..._options, detail]);
          break;
      }
      if (_mountTimeoutId) {
        clearTimeout(_mountTimeoutId);
      }
      _mountTimeoutId = setTimeout(
        () => {
          _mountStatus = "ready";
          _mountTimeoutId = void 0;
        },
        10
      );
      if (_bindTimeoutId) {
        clearTimeout(_bindTimeoutId);
      }
      _bindTimeoutId = setTimeout(bind, 1);
    });
  }
  function bind() {
    syncFilteredOptions();
    if (!width) {
      $$invalidate(20, _width = getLongestChildWidth(_options));
    }
    if (_native) return;
    setSelected();
    if (width) {
      $$invalidate(20, _width = width);
    }
    if (!width && _options.length > 0) {
      $$invalidate(20, _width = getLongestChildWidth(_options));
    }
  }
  function setSelected() {
    $$invalidate(18, _selectedOption = _options.find((o) => o.value == _values[0]));
  }
  function getLongestChildWidth(options) {
    const optionsWidth = options.map((option) => {
      const label = `${option.label}` || `${option.value}` || "";
      return label.length;
    }).sort((a, b) => a > b ? 1 : -1).pop();
    let maxWidth = Math.max(optionsWidth || 0, placeholder.length) + 7;
    if (leadingicon) {
      maxWidth += 4;
    }
    return `${maxWidth}ch`;
  }
  function changeHighlightedOption(offset) {
    let index = _highlightedIndex + offset;
    let items = !(_filteredOptions == null ? void 0 : _filteredOptions.length) ? _options : _filteredOptions;
    if (items.length === 0) return;
    if (index < 0) {
      index = _filterable ? items.length - 1 : 0;
    } else if (index >= items.length) {
      index = _filterable ? 0 : items.length - 1;
    }
    $$invalidate(14, _highlightedIndex = index);
    scrollToOption(index);
  }
  function scrollToOption(index) {
    const liNode = _menuEl.querySelector(`li[data-index="${index}"]`);
    if (!liNode) return;
    const liOptionRect = liNode.getBoundingClientRect();
    const ulRect = _menuEl.getBoundingClientRect();
    const isInView = liOptionRect.top >= 0 && liOptionRect.left >= 0 && liOptionRect.bottom <= ulRect.height && liOptionRect.right <= ulRect.width;
    if (isInView) return;
    liNode.scrollIntoView({ behavior: "smooth", block: "nearest" });
  }
  function syncFilteredOptions() {
    $$invalidate(15, _filteredOptions = _filterable ? _options.filter((option) => isFilterMatch(option, (_inputEl == null ? void 0 : _inputEl.value) || "")) : _options);
  }
  function showMenu() {
    if (_disabled) {
      return;
    }
    setTimeout(
      async () => {
        syncFilteredOptions();
        $$invalidate(19, _isMenuVisible = true);
      },
      0
    );
  }
  function hideMenu() {
    $$invalidate(19, _isMenuVisible = false);
  }
  function setDisplayedValue() {
    $$invalidate(24, _inputEl.value = (_selectedOption == null ? void 0 : _selectedOption.label) || (_selectedOption == null ? void 0 : _selectedOption.value) || "", _inputEl);
  }
  function dispatchValue(newValue) {
    const detail = _multiselect ? { name, values: [newValue, ..._values] } : { name, value: newValue };
    if (!_isDirty) {
      return;
    }
    setTimeout(
      () => {
        _rootEl == null ? void 0 : _rootEl.dispatchEvent(new CustomEvent("_change", { composed: true, detail, bubbles: true }));
        $$invalidate(25, _isDirty = false);
      },
      1
    );
  }
  function onSelect(option) {
    if (_disabled) return;
    $$invalidate(25, _isDirty = option.value !== (_selectedOption == null ? void 0 : _selectedOption.value));
    $$invalidate(18, _selectedOption = option);
    if (!_native) {
      hideMenu();
      syncFilteredOptions();
      setDisplayedValue();
    }
    dispatchValue(option.value);
  }
  async function onChange2(_e) {
    if (!_filterable) return;
    await tick();
    syncFilteredOptions();
    if (_filteredOptions.length === 1) {
      const option = _filteredOptions[0];
      $$invalidate(18, _selectedOption = option);
      dispatchValue(option.value);
      setDisplayedValue();
      setTimeout(
        () => {
          hideMenu();
        },
        10
      );
    } else {
      $$invalidate(18, _selectedOption = void 0);
      setDisplayedValue();
      dispatchValue("");
    }
  }
  function onInputKeyUp(e) {
    if (_disabled) return;
    $$invalidate(25, _isDirty = true);
    _eventHandler.handleKeyUp(e);
  }
  function onInputKeyDown(e) {
    if (_disabled) return;
    $$invalidate(25, _isDirty = true);
    _eventHandler.handleKeyDown(e);
  }
  function onClearIconKeyDown(e) {
    if (e.key === "Enter" || e.key === " ") {
      e.stopPropagation();
      reset();
      showMenu();
    }
  }
  function onClearIconClick(e) {
    reset();
    showMenu();
    e.stopPropagation();
  }
  function onNativeSelect(e) {
    const target = e.currentTarget;
    const option = _options[target.selectedIndex];
    $$invalidate(25, _isDirty = true);
    onSelect(option);
  }
  function reset() {
    if (_disabled) return;
    $$invalidate(27, _activeDescendantId = void 0);
    $$invalidate(14, _highlightedIndex = -1);
    $$invalidate(18, _selectedOption = void 0);
    $$invalidate(25, _isDirty = true);
    syncFilteredOptions();
    dispatchValue("");
    setDisplayedValue();
  }
  async function onChevronClick(e) {
    await tick();
    showMenu();
    e.stopPropagation();
  }
  class ComboboxKeyUpHandler {
    constructor(input) {
      this.input = input;
    }
    onEscape(_e) {
      reset();
    }
    onEnter(e) {
      const option = _filteredOptions[_highlightedIndex];
      if (option) {
        $$invalidate(25, _isDirty = option.value !== (_selectedOption == null ? void 0 : _selectedOption.value));
        onSelect(option);
      }
      if (_selectedOption) {
        hideMenu();
      } else {
        showMenu();
      }
      e.stopPropagation();
    }
    onArrow(e, direction) {
      if (!_isMenuVisible) showMenu();
      changeHighlightedOption(direction === "up" ? -1 : 1);
      e.stopPropagation();
    }
    onTab(_) {
      const matchedOption = _filteredOptions.find((option) => {
        var _a;
        return ((_a = option.label) == null ? void 0 : _a.toLowerCase()) === this.input.value.toLowerCase();
      });
      if (matchedOption) {
        onSelect(matchedOption);
      }
      hideMenu();
    }
    onKeyUp(_) {
      showMenu();
    }
    handleKeyUp(e) {
      switch (e.key) {
        case "Enter":
          this.onEnter(e);
          break;
        case "ArrowUp":
          this.onArrow(e, "up");
          break;
        case "ArrowDown":
          this.onArrow(e, "down");
          break;
        case "Home":
          this.input.setSelectionRange(0, 0);
          break;
        case "End":
          this.input.setSelectionRange(this.input.value.length, this.input.value.length);
          break;
        case "Tab":
          break;
        default:
          this.onKeyUp(e);
          break;
      }
    }
    handleKeyDown(e) {
      switch (e.key) {
        case "Escape":
          this.onEscape(e);
          break;
        case "Tab":
          this.onTab(e);
          break;
      }
    }
  }
  class DropdownKeyUpHandler {
    constructor(_input) {
    }
    onEnter(e) {
      if (_isMenuVisible) {
        const option = _filteredOptions[_highlightedIndex];
        if (option) {
          onSelect(option);
        }
        hideMenu();
      } else {
        showMenu();
      }
      e.preventDefault();
      e.stopPropagation();
    }
    onArrow(e, direction) {
      if (!_isMenuVisible) showMenu();
      changeHighlightedOption(direction === "up" ? -1 : 1);
      e.preventDefault();
      e.stopPropagation();
    }
    handleKeyDown(e) {
      switch (e.key) {
        case " ":
        case "Enter":
          this.onEnter(e);
          break;
        case "ArrowUp":
          this.onArrow(e, "up");
          break;
        case "ArrowDown":
          this.onArrow(e, "down");
          break;
        case "Tab":
          hideMenu();
          break;
      }
      return false;
    }
    handleKeyUp(e) {
      switch (e.key) {
        case "ArrowUp":
        case "ArrowDown":
        case " ":
        case "Enter":
          e.preventDefault();
          e.stopPropagation();
      }
    }
  }
  function input_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _inputEl = $$value;
      $$invalidate(24, _inputEl);
    });
  }
  const click_handler = (option) => {
    $$invalidate(25, _isDirty = true);
    onSelect(option);
  };
  function ul_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _menuEl = $$value;
      $$invalidate(23, _menuEl);
    });
  }
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _rootEl = $$value;
      $$invalidate(22, _rootEl);
    });
  }
  function div_elementresize_handler() {
    _popoverMaxWidth = this.clientWidth;
    $$invalidate(21, _popoverMaxWidth);
  }
  $$self.$$set = ($$props2) => {
    if ("name" in $$props2) $$invalidate(1, name = $$props2.name);
    if ("arialabel" in $$props2) $$invalidate(2, arialabel = $$props2.arialabel);
    if ("arialabelledby" in $$props2) $$invalidate(3, arialabelledby = $$props2.arialabelledby);
    if ("value" in $$props2) $$invalidate(0, value = $$props2.value);
    if ("filterable" in $$props2) $$invalidate(41, filterable = $$props2.filterable);
    if ("leadingicon" in $$props2) $$invalidate(4, leadingicon = $$props2.leadingicon);
    if ("maxheight" in $$props2) $$invalidate(5, maxheight = $$props2.maxheight);
    if ("placeholder" in $$props2) $$invalidate(6, placeholder = $$props2.placeholder);
    if ("width" in $$props2) $$invalidate(42, width = $$props2.width);
    if ("disabled" in $$props2) $$invalidate(7, disabled = $$props2.disabled);
    if ("error" in $$props2) $$invalidate(40, error = $$props2.error);
    if ("multiselect" in $$props2) $$invalidate(43, multiselect = $$props2.multiselect);
    if ("native" in $$props2) $$invalidate(44, native = $$props2.native);
    if ("relative" in $$props2) $$invalidate(8, relative = $$props2.relative);
    if ("mt" in $$props2) $$invalidate(9, mt = $$props2.mt);
    if ("mr" in $$props2) $$invalidate(10, mr = $$props2.mr);
    if ("mb" in $$props2) $$invalidate(11, mb2 = $$props2.mb);
    if ("ml" in $$props2) $$invalidate(12, ml2 = $$props2.ml);
    if ("testid" in $$props2) $$invalidate(13, testid = $$props2.testid);
    if ("$$scope" in $$props2) $$invalidate(45, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*disabled*/
    128) {
      $$invalidate(28, _disabled = toBoolean(disabled));
    }
    if ($$self.$$.dirty[1] & /*error*/
    512) {
      $$invalidate(29, _error = toBoolean(error));
    }
    if ($$self.$$.dirty[1] & /*multiselect*/
    4096) {
      _multiselect = toBoolean(multiselect);
    }
    if ($$self.$$.dirty[1] & /*native*/
    8192) {
      $$invalidate(16, _native = toBoolean(native));
    }
    if ($$self.$$.dirty[0] & /*_native*/
    65536 | $$self.$$.dirty[1] & /*filterable*/
    1024) {
      $$invalidate(26, _filterable = toBoolean(filterable) && !_native);
    }
    if ($$self.$$.dirty[0] & /*_filteredOptions, _highlightedIndex*/
    49152) {
      $$invalidate(27, _activeDescendantId = _filteredOptions[_highlightedIndex] ? _filteredOptions[_highlightedIndex].value : void 0);
    }
    if ($$self.$$.dirty[0] & /*value*/
    1) {
      {
        _values = parseValues(value || "");
        setSelected();
      }
    }
  };
  return [
    value,
    name,
    arialabel,
    arialabelledby,
    leadingicon,
    maxheight,
    placeholder,
    disabled,
    relative,
    mt,
    mr,
    mb2,
    ml2,
    testid,
    _highlightedIndex,
    _filteredOptions,
    _native,
    _options,
    _selectedOption,
    _isMenuVisible,
    _width,
    _popoverMaxWidth,
    _rootEl,
    _menuEl,
    _inputEl,
    _isDirty,
    _filterable,
    _activeDescendantId,
    _disabled,
    _error,
    showMenu,
    hideMenu,
    onSelect,
    onChange2,
    onInputKeyUp,
    onInputKeyDown,
    onClearIconKeyDown,
    onClearIconClick,
    onNativeSelect,
    onChevronClick,
    error,
    filterable,
    width,
    multiselect,
    native,
    $$scope,
    slots,
    input_binding,
    click_handler,
    ul_binding,
    div_binding,
    div_elementresize_handler
  ];
}
class Dropdown extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$N,
      create_fragment$N,
      safe_not_equal,
      {
        name: 1,
        arialabel: 2,
        arialabelledby: 3,
        value: 0,
        filterable: 41,
        leadingicon: 4,
        maxheight: 5,
        placeholder: 6,
        width: 42,
        disabled: 7,
        error: 40,
        multiselect: 43,
        native: 44,
        relative: 8,
        mt: 9,
        mr: 10,
        mb: 11,
        ml: 12,
        testid: 13
      },
      add_css$I,
      [-1, -1, -1]
    );
  }
  get name() {
    return this.$$.ctx[1];
  }
  set name(name) {
    this.$$set({ name });
    flush();
  }
  get arialabel() {
    return this.$$.ctx[2];
  }
  set arialabel(arialabel) {
    this.$$set({ arialabel });
    flush();
  }
  get arialabelledby() {
    return this.$$.ctx[3];
  }
  set arialabelledby(arialabelledby) {
    this.$$set({ arialabelledby });
    flush();
  }
  get value() {
    return this.$$.ctx[0];
  }
  set value(value) {
    this.$$set({ value });
    flush();
  }
  get filterable() {
    return this.$$.ctx[41];
  }
  set filterable(filterable) {
    this.$$set({ filterable });
    flush();
  }
  get leadingicon() {
    return this.$$.ctx[4];
  }
  set leadingicon(leadingicon) {
    this.$$set({ leadingicon });
    flush();
  }
  get maxheight() {
    return this.$$.ctx[5];
  }
  set maxheight(maxheight) {
    this.$$set({ maxheight });
    flush();
  }
  get placeholder() {
    return this.$$.ctx[6];
  }
  set placeholder(placeholder) {
    this.$$set({ placeholder });
    flush();
  }
  get width() {
    return this.$$.ctx[42];
  }
  set width(width) {
    this.$$set({ width });
    flush();
  }
  get disabled() {
    return this.$$.ctx[7];
  }
  set disabled(disabled) {
    this.$$set({ disabled });
    flush();
  }
  get error() {
    return this.$$.ctx[40];
  }
  set error(error) {
    this.$$set({ error });
    flush();
  }
  get multiselect() {
    return this.$$.ctx[43];
  }
  set multiselect(multiselect) {
    this.$$set({ multiselect });
    flush();
  }
  get native() {
    return this.$$.ctx[44];
  }
  set native(native) {
    this.$$set({ native });
    flush();
  }
  get relative() {
    return this.$$.ctx[8];
  }
  set relative(relative) {
    this.$$set({ relative });
    flush();
  }
  get mt() {
    return this.$$.ctx[9];
  }
  set mt(mt) {
    this.$$set({ mt });
    flush();
  }
  get mr() {
    return this.$$.ctx[10];
  }
  set mr(mr) {
    this.$$set({ mr });
    flush();
  }
  get mb() {
    return this.$$.ctx[11];
  }
  set mb(mb2) {
    this.$$set({ mb: mb2 });
    flush();
  }
  get ml() {
    return this.$$.ctx[12];
  }
  set ml(ml2) {
    this.$$set({ ml: ml2 });
    flush();
  }
  get testid() {
    return this.$$.ctx[13];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
}
customElements.define("goa-dropdown", create_custom_element(Dropdown, { "name": {}, "arialabel": {}, "arialabelledby": {}, "value": {}, "filterable": {}, "leadingicon": {}, "maxheight": {}, "placeholder": {}, "width": {}, "disabled": {}, "error": {}, "multiselect": {}, "native": {}, "relative": {}, "mt": {}, "mr": {}, "mb": {}, "ml": {}, "testid": {} }, ["default"], [], true));
function create_fragment$M(ctx) {
  let span;
  return {
    c() {
      span = element("span");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      ctx[5](span);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
      ctx[5](null);
    }
  };
}
function instance$M($$self, $$props, $$invalidate) {
  let { filter = "" } = $$props;
  let { label = "" } = $$props;
  let { value = "" } = $$props;
  let { mount = "append" } = $$props;
  let _rootEl;
  onMount(() => {
    setTimeout(
      () => {
        _rootEl == null ? void 0 : _rootEl.dispatchEvent(new CustomEvent(
          "dropdown-item:mounted",
          {
            composed: true,
            bubbles: true,
            detail: { filter, value, label, mountType: mount }
          }
        ));
      },
      10
    );
  });
  function span_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _rootEl = $$value;
      $$invalidate(0, _rootEl);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("filter" in $$props2) $$invalidate(1, filter = $$props2.filter);
    if ("label" in $$props2) $$invalidate(2, label = $$props2.label);
    if ("value" in $$props2) $$invalidate(3, value = $$props2.value);
    if ("mount" in $$props2) $$invalidate(4, mount = $$props2.mount);
  };
  return [_rootEl, filter, label, value, mount, span_binding];
}
class DropdownItem extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$M, create_fragment$M, safe_not_equal, { filter: 1, label: 2, value: 3, mount: 4 });
  }
  get filter() {
    return this.$$.ctx[1];
  }
  set filter(filter) {
    this.$$set({ filter });
    flush();
  }
  get label() {
    return this.$$.ctx[2];
  }
  set label(label) {
    this.$$set({ label });
    flush();
  }
  get value() {
    return this.$$.ctx[3];
  }
  set value(value) {
    this.$$set({ value });
    flush();
  }
  get mount() {
    return this.$$.ctx[4];
  }
  set mount(mount) {
    this.$$set({ mount });
    flush();
  }
}
customElements.define("goa-dropdown-item", create_custom_element(DropdownItem, { "filter": {}, "label": {}, "value": {}, "mount": {} }, [], [], true));
function add_css$H(target) {
  append_styles(target, "svelte-quhy4b", '#container.svelte-quhy4b{container:self / inline-size}.root.svelte-quhy4b{display:grid;padding:var(--goa-space-l);border:var(--goa-border-width-s) solid var(--goa-color-greyscale-200);border-radius:var(--goa-border-radius-m);margin:0.5rem 0;gap:1rem;align-items:center}.details.svelte-quhy4b{grid-area:details;display:flex;flex-direction:column;overflow-x:hidden}.actions.svelte-quhy4b{grid-area:action}@container self (min-width: 624px){.root.svelte-quhy4b{grid-template-columns:38px 1fr auto;grid-template-rows:auto;grid-template-areas:"icon details action"}.details.svelte-quhy4b{margin-left:0.5rem}}@container self (max-width: 623px){.root.svelte-quhy4b{grid-template-columns:38px auto;grid-template-rows:repeat(2, auto);grid-template-areas:"icon details"\n        "action action"}.actions.svelte-quhy4b{display:flex;justify-content:center}}.root.error.svelte-quhy4b{border:var(--goa-border-width-m) solid var(--goa-color-interactive-error)}.fileicon.svelte-quhy4b{grid-area:icon;align-self:center}.filename.svelte-quhy4b{grid-area:filename;font-size:var(--goa-font-size-4);overflow-wrap:anywhere}.error-msg.svelte-quhy4b{display:flex;align-items:flex-start;margin-top:0.5rem;gap:var(--goa-space-2xs);color:var(--goa-color-interactive-error);font:var(--goa-typography-body-xs)}.timestamp.svelte-quhy4b,.filesize.svelte-quhy4b{color:var(--goa-color-greyscale-700);font:var(--goa-typography-body-s)}.progress.svelte-quhy4b{display:flex;align-items:center;font:var(--goa-typography-body-xs);gap:0.5rem}progress.svelte-quhy4b{flex:1 1 auto;-webkit-appearance:none;-moz-appearance:none;appearance:none;height:4px;border:none;border-radius:var(--goa-border-radius-m);background:var(--goa-color-greyscale-200);color:var(--goa-color-greyscale-700)}progress.svelte-quhy4b::-webkit-progress-value{background:var(--goa-color-interactive-default)}progress.svelte-quhy4b::-webkit-progress-bar{background:var(--goa-color-greyscale-200)}progress.svelte-quhy4b::-moz-progress-bar{background:var(--goa-color-interactive-default)}');
}
function create_else_block$a(ctx) {
  let goa_icon;
  return {
    c() {
      goa_icon = element("goa-icon");
      set_custom_element_data(goa_icon, "class", "fileicon svelte-quhy4b");
      set_custom_element_data(goa_icon, "data-testid", "icon");
      set_custom_element_data(goa_icon, "type", "goa-file");
      set_custom_element_data(goa_icon, "fillcolor", "#dcdcdc");
      set_custom_element_data(goa_icon, "size", "xlarge");
    },
    m(target, anchor) {
      insert(target, goa_icon, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(goa_icon);
      }
    }
  };
}
function create_if_block_7(ctx) {
  let goa_icon;
  return {
    c() {
      goa_icon = element("goa-icon");
      set_custom_element_data(goa_icon, "class", "fileicon svelte-quhy4b");
      set_custom_element_data(goa_icon, "data-testid", "icon");
      set_custom_element_data(
        goa_icon,
        "type",
        /*_fileIcon*/
        ctx[7]
      );
      set_custom_element_data(goa_icon, "fillcolor", "#0070c4");
      set_custom_element_data(goa_icon, "size", "xlarge");
    },
    m(target, anchor) {
      insert(target, goa_icon, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*_fileIcon*/
      128) {
        set_custom_element_data(
          goa_icon,
          "type",
          /*_fileIcon*/
          ctx2[7]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(goa_icon);
      }
    }
  };
}
function create_if_block_6$2(ctx) {
  let div;
  let t_value = formatFileSize(
    /*size*/
    ctx[1]
  ) + "";
  let t2;
  return {
    c() {
      div = element("div");
      t2 = text(t_value);
      attr(div, "class", "filesize svelte-quhy4b");
      attr(div, "data-testid", "filesize");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*size*/
      2 && t_value !== (t_value = formatFileSize(
        /*size*/
        ctx2[1]
      ) + "")) set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_if_block_5$2(ctx) {
  let div;
  let goa_icon;
  let t0;
  let t1;
  return {
    c() {
      div = element("div");
      goa_icon = element("goa-icon");
      t0 = space();
      t1 = text(
        /*error*/
        ctx[3]
      );
      set_custom_element_data(goa_icon, "type", "warning");
      set_custom_element_data(goa_icon, "size", "small");
      set_custom_element_data(goa_icon, "theme", "filled");
      attr(div, "class", "error-msg svelte-quhy4b");
      attr(div, "data-testid", "error");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, goa_icon);
      append(div, t0);
      append(div, t1);
    },
    p(ctx2, dirty) {
      if (dirty & /*error*/
      8) set_data(
        t1,
        /*error*/
        ctx2[3]
      );
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_if_block_4$4(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      div.textContent = `Uploaded on ${getTimestamp()}`;
      attr(div, "class", "timestamp svelte-quhy4b");
      attr(div, "data-testid", "timestamp");
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_if_block_3$a(ctx) {
  let div;
  let progress_1;
  let t0;
  let t1_value = Math.ceil(
    /*progress*/
    ctx[2]
  ) + "";
  let t1;
  let t2;
  return {
    c() {
      div = element("div");
      progress_1 = element("progress");
      t0 = space();
      t1 = text(t1_value);
      t2 = text("%");
      progress_1.value = /*progress*/
      ctx[2];
      attr(progress_1, "max", "100");
      attr(progress_1, "class", "svelte-quhy4b");
      attr(div, "class", "progress svelte-quhy4b");
      attr(div, "data-testid", "progress");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, progress_1);
      append(div, t0);
      append(div, t1);
      append(div, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*progress*/
      4) {
        progress_1.value = /*progress*/
        ctx2[2];
      }
      if (dirty & /*progress*/
      4 && t1_value !== (t1_value = Math.ceil(
        /*progress*/
        ctx2[2]
      ) + "")) set_data(t1, t1_value);
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_if_block_2$a(ctx) {
  let goa_button;
  let mounted;
  let dispose;
  return {
    c() {
      goa_button = element("goa-button");
      goa_button.textContent = "Cancel";
      set_custom_element_data(goa_button, "type", "tertiary");
      set_custom_element_data(goa_button, "size", "compact");
      set_custom_element_data(goa_button, "variant", "destructive");
    },
    m(target, anchor) {
      insert(target, goa_button, anchor);
      if (!mounted) {
        dispose = listen(
          goa_button,
          "click",
          /*click_handler_2*/
          ctx[12]
        );
        mounted = true;
      }
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(goa_button);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_1$f(ctx) {
  let goa_button;
  let mounted;
  let dispose;
  return {
    c() {
      goa_button = element("goa-button");
      goa_button.textContent = "Remove";
      set_custom_element_data(goa_button, "type", "tertiary");
      set_custom_element_data(goa_button, "size", "compact");
      set_custom_element_data(goa_button, "leadingicon", "trash");
    },
    m(target, anchor) {
      insert(target, goa_button, anchor);
      if (!mounted) {
        dispose = listen(
          goa_button,
          "click",
          /*click_handler_1*/
          ctx[11]
        );
        mounted = true;
      }
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(goa_button);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_if_block$r(ctx) {
  let goa_button;
  let mounted;
  let dispose;
  return {
    c() {
      goa_button = element("goa-button");
      goa_button.textContent = "Cancel";
      set_custom_element_data(goa_button, "type", "tertiary");
      set_custom_element_data(goa_button, "size", "compact");
    },
    m(target, anchor) {
      insert(target, goa_button, anchor);
      if (!mounted) {
        dispose = listen(
          goa_button,
          "click",
          /*click_handler*/
          ctx[10]
        );
        mounted = true;
      }
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(goa_button);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_fragment$L(ctx) {
  let div4;
  let div3;
  let t0;
  let div1;
  let div0;
  let t1;
  let t2;
  let t3;
  let t4;
  let div2;
  let div3_class_value;
  function select_block_type(ctx2, dirty) {
    if (
      /*_status*/
      ctx2[5] === "uploaded"
    ) return create_if_block_7;
    return create_else_block$a;
  }
  let current_block_type = select_block_type(ctx);
  let if_block0 = current_block_type(ctx);
  let if_block1 = (
    /*_status*/
    ctx[5] !== "error" && create_if_block_6$2(ctx)
  );
  function select_block_type_1(ctx2, dirty) {
    if (
      /*_status*/
      ctx2[5] === "uploading"
    ) return create_if_block_3$a;
    if (
      /*_status*/
      ctx2[5] === "uploaded"
    ) return create_if_block_4$4;
    if (
      /*_status*/
      ctx2[5] === "error"
    ) return create_if_block_5$2;
  }
  let current_block_type_1 = select_block_type_1(ctx);
  let if_block2 = current_block_type_1 && current_block_type_1(ctx);
  function select_block_type_2(ctx2, dirty) {
    if (
      /*_status*/
      ctx2[5] === "uploading"
    ) return create_if_block$r;
    if (
      /*_status*/
      ctx2[5] === "uploaded"
    ) return create_if_block_1$f;
    if (
      /*_status*/
      ctx2[5] === "error"
    ) return create_if_block_2$a;
  }
  let current_block_type_2 = select_block_type_2(ctx);
  let if_block3 = current_block_type_2 && current_block_type_2(ctx);
  return {
    c() {
      div4 = element("div");
      div3 = element("div");
      if_block0.c();
      t0 = space();
      div1 = element("div");
      div0 = element("div");
      t1 = text(
        /*filename*/
        ctx[0]
      );
      t2 = space();
      if (if_block1) if_block1.c();
      t3 = space();
      if (if_block2) if_block2.c();
      t4 = space();
      div2 = element("div");
      if (if_block3) if_block3.c();
      attr(div0, "class", "filename svelte-quhy4b");
      attr(div0, "data-testid", "filename");
      attr(div1, "class", "details svelte-quhy4b");
      attr(div2, "class", "actions svelte-quhy4b");
      attr(div2, "data-testid", "actions");
      attr(div3, "data-testid", "root");
      attr(div3, "class", div3_class_value = null_to_empty(`root ${/*_status*/
      ctx[5]}`) + " svelte-quhy4b");
      toggle_class(
        div3,
        "error",
        /*error*/
        ctx[3]
      );
      attr(div4, "id", "container");
      attr(
        div4,
        "data-testid",
        /*testid*/
        ctx[4]
      );
      attr(div4, "class", "svelte-quhy4b");
    },
    m(target, anchor) {
      insert(target, div4, anchor);
      append(div4, div3);
      if_block0.m(div3, null);
      append(div3, t0);
      append(div3, div1);
      append(div1, div0);
      append(div0, t1);
      append(div1, t2);
      if (if_block1) if_block1.m(div1, null);
      append(div1, t3);
      if (if_block2) if_block2.m(div1, null);
      append(div3, t4);
      append(div3, div2);
      if (if_block3) if_block3.m(div2, null);
      ctx[13](div3);
    },
    p(ctx2, [dirty]) {
      if (current_block_type === (current_block_type = select_block_type(ctx2)) && if_block0) {
        if_block0.p(ctx2, dirty);
      } else {
        if_block0.d(1);
        if_block0 = current_block_type(ctx2);
        if (if_block0) {
          if_block0.c();
          if_block0.m(div3, t0);
        }
      }
      if (dirty & /*filename*/
      1) set_data(
        t1,
        /*filename*/
        ctx2[0]
      );
      if (
        /*_status*/
        ctx2[5] !== "error"
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block_6$2(ctx2);
          if_block1.c();
          if_block1.m(div1, t3);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (current_block_type_1 === (current_block_type_1 = select_block_type_1(ctx2)) && if_block2) {
        if_block2.p(ctx2, dirty);
      } else {
        if (if_block2) if_block2.d(1);
        if_block2 = current_block_type_1 && current_block_type_1(ctx2);
        if (if_block2) {
          if_block2.c();
          if_block2.m(div1, null);
        }
      }
      if (current_block_type_2 === (current_block_type_2 = select_block_type_2(ctx2)) && if_block3) {
        if_block3.p(ctx2, dirty);
      } else {
        if (if_block3) if_block3.d(1);
        if_block3 = current_block_type_2 && current_block_type_2(ctx2);
        if (if_block3) {
          if_block3.c();
          if_block3.m(div2, null);
        }
      }
      if (dirty & /*_status*/
      32 && div3_class_value !== (div3_class_value = null_to_empty(`root ${/*_status*/
      ctx2[5]}`) + " svelte-quhy4b")) {
        attr(div3, "class", div3_class_value);
      }
      if (dirty & /*_status, error*/
      40) {
        toggle_class(
          div3,
          "error",
          /*error*/
          ctx2[3]
        );
      }
      if (dirty & /*testid*/
      16) {
        attr(
          div4,
          "data-testid",
          /*testid*/
          ctx2[4]
        );
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div4);
      }
      if_block0.d();
      if (if_block1) if_block1.d();
      if (if_block2) {
        if_block2.d();
      }
      if (if_block3) {
        if_block3.d();
      }
      ctx[13](null);
    }
  };
}
function getFiletypeIcon(filename2, type2) {
  const parts = filename2.split(".");
  const ext = parts[parts.length - 1];
  const extTypeIcon = ext === "xlxs" && "goa-xls" || ext === "xls" && "goa-xls" || ext === "zip" && "goa-zip" || ext === "docx" && "goa-doc" || ext === "doc" && "goa-doc" || ext === "pptx" && "goa-ppt" || ext === "ppt" && "goa-ppt" || ext === "pdf" && "goa-pdf" || ext === "html" && "goa-html";
  if (extTypeIcon) return extTypeIcon;
  const mimeTypeIcon = type2 === "application/vnd.ms-powerpoint" && "goa-ppt" || type2.includes("presentationml") && "goa-ppt" || type2.includes("wordprocessingml") && "goa-doc" || type2.includes("spreadsheet") && "goa-xls" || type2.startsWith("video") && "goa-video" || type2.startsWith("audio") && "goa-audio" || type2.startsWith("image") && "goa-image" || type2 === "application/msword" && "goa-doc" || "goa-file";
  return mimeTypeIcon;
}
function formatFileSize(bytes) {
  switch (true) {
    case bytes < 1024:
      return bytes + "B";
    case bytes < 1024 * 1024:
      return Math.round(bytes / 1024) + "KB";
    case bytes < Math.pow(1024, 3):
      return Math.round(bytes / Math.pow(1024, 2)) + "MB";
    default:
      return "n/a";
  }
}
function instance$L($$self, $$props, $$invalidate) {
  let { filename } = $$props;
  let { size } = $$props;
  let { type = "" } = $$props;
  let { progress = -1 } = $$props;
  let { error = "" } = $$props;
  let { testid = "" } = $$props;
  let _status = "uploading";
  let _rootEl;
  let _fileIcon = "goa-file";
  function dispatch2(action) {
    _rootEl.dispatchEvent(new CustomEvent(action, { composed: true }));
  }
  const click_handler = () => dispatch2("_cancel");
  const click_handler_1 = () => dispatch2("_delete");
  const click_handler_2 = () => dispatch2("_delete");
  function div3_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _rootEl = $$value;
      $$invalidate(6, _rootEl);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("filename" in $$props2) $$invalidate(0, filename = $$props2.filename);
    if ("size" in $$props2) $$invalidate(1, size = $$props2.size);
    if ("type" in $$props2) $$invalidate(9, type = $$props2.type);
    if ("progress" in $$props2) $$invalidate(2, progress = $$props2.progress);
    if ("error" in $$props2) $$invalidate(3, error = $$props2.error);
    if ("testid" in $$props2) $$invalidate(4, testid = $$props2.testid);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*error, progress*/
    12) {
      $$invalidate(5, _status = error && "error" || progress >= 0 && progress < 100 && "uploading" || "uploaded");
    }
    if ($$self.$$.dirty & /*filename, type*/
    513) {
      $$invalidate(7, _fileIcon = filename && type && getFiletypeIcon(filename, type));
    }
  };
  return [
    filename,
    size,
    progress,
    error,
    testid,
    _status,
    _rootEl,
    _fileIcon,
    dispatch2,
    type,
    click_handler,
    click_handler_1,
    click_handler_2,
    div3_binding
  ];
}
class FileUploadCard extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$L,
      create_fragment$L,
      safe_not_equal,
      {
        filename: 0,
        size: 1,
        type: 9,
        progress: 2,
        error: 3,
        testid: 4
      },
      add_css$H
    );
  }
  get filename() {
    return this.$$.ctx[0];
  }
  set filename(filename) {
    this.$$set({ filename });
    flush();
  }
  get size() {
    return this.$$.ctx[1];
  }
  set size(size) {
    this.$$set({ size });
    flush();
  }
  get type() {
    return this.$$.ctx[9];
  }
  set type(type) {
    this.$$set({ type });
    flush();
  }
  get progress() {
    return this.$$.ctx[2];
  }
  set progress(progress) {
    this.$$set({ progress });
    flush();
  }
  get error() {
    return this.$$.ctx[3];
  }
  set error(error) {
    this.$$set({ error });
    flush();
  }
  get testid() {
    return this.$$.ctx[4];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
}
customElements.define("goa-file-upload-card", create_custom_element(FileUploadCard, { "filename": {}, "size": {}, "type": {}, "progress": {}, "error": {}, "testid": {} }, [], [], true));
function add_css$G(target) {
  append_styles(target, "svelte-1sccr4g", ':host{--goa-file-upload-color-bg:var(--goa-color-info-background);--goa-file-upload-border-radius:var(--goa-border-radius-m);--goa-file-upload-padding:var(--goa-space-xl);--goa-file-upload-text-gap:var(--goa-space-m);--goa-file-upload-border:var(--goa-border-width-m) dashed var(--goa-color-interactive-default);--goa-file-upload-instruction-text:var(--goa-typography-body-m);--goa-file-upload-instruction-color:var(--goa-color-interactive-default);--goa-file-upload-help-text:var(--goa-typography-body-s);--goa-file-upload-help-text-color:var(--goa-color-greyscale-700);--goa-file-upload-color-bg-hover:var(--goa-color-greyscale-100);--goa-file-upload-border-hover:var(--goa-border-width-m) dashed var(--goa-color-interactive-hover);--goa-file-upload-instruction-color-hover:var(--goa-color-interactive-hover);--goa-file-upload-color-bg-active:var(--goa-color-info-background);--goa-file-upload-border-active:var(--goa-border-width-m) solid var(--goa-color-interactive-hover);--goa-file-upload-instruction-color-active:var(--goa-color-interactive-hover);--goa-file-upload-color-bg-focus:var(--goa-color-greyscale-100);--goa-file-upload-border-focus:0 0 0 var(--goa-border-width-l) var(--goa-color-interactive-focus);--goa-file-upload-instruction-color-focus:var(--goa-color-interactive-hover);--goa-file-upload-color-bg-drag:var(--goa-color-info-background);--goa-file-upload-border-drag:var(--goa-border-width-m) solid var(--goa-color-interactive-hover);--goa-file-upload-instruction-color-drag:var(--goa-color-interactive-hover);--goa-file-upload-card-: }.dragdrop.svelte-1sccr4g.svelte-1sccr4g{border-radius:var(--goa-file-upload-border-radius);border:var(--goa-file-upload-border);display:flex;font:var(--goa-file-upload-instruction-text);flex-direction:column;align-items:center;justify-content:center;gap:var(--goa-file-upload-text-gap);padding:var(--goa-file-upload-padding);color:var(--goa-file-upload-instruction-color);text-align:center;cursor:pointer;background:var(--goa-file-upload-color-bg);container:self / inline-size}.dragdrop.svelte-1sccr4g.svelte-1sccr4g:active{border:var(--goa-file-upload-border-active);outline:none}.dragdrop.svelte-1sccr4g.svelte-1sccr4g:focus-within{border:var(--goa-file-upload-border-hover);box-shadow:var(--goa-file-upload-border-focus);background-color:var(--goa-file-upload-color-bg-focus);color:var(--goa-file-upload-instruction-color-focus)}.state-hover.svelte-1sccr4g.svelte-1sccr4g{background:var(--goa-file-upload-color-bg-hover);border:var(--goa-file-upload-border-hover);color:var(--goa-file-upload-instruction-color-hover)}.state-dragenter.svelte-1sccr4g.svelte-1sccr4g{background:var(--goa-file-upload-color-bg-drag);border:var(--goa-file-upload-border-drag);color:var(--goa-file-upload-instruction-color-drag)}.instructions.svelte-1sccr4g.svelte-1sccr4g{display:flex;align-items:center}goa-icon.svelte-1sccr4g.svelte-1sccr4g{margin:0 var(--goa-space-s)}.browse-files.svelte-1sccr4g.svelte-1sccr4g{text-decoration:underline}em.svelte-1sccr4g.svelte-1sccr4g{font-style:normal;font:var(--goa-file-upload-help-text);color:var(--goa-file-upload-help-text-color)}.or-text.svelte-1sccr4g.svelte-1sccr4g{margin:var(--goa-space-3xs) var(--goa-space-xs) 0 var(--goa-space-xs)}.max-file-size.svelte-1sccr4g.svelte-1sccr4g{display:block}.button.svelte-1sccr4g .max-file-size.svelte-1sccr4g{margin-top:var(--goa-space-xs)}input[type="file"].svelte-1sccr4g.svelte-1sccr4g{position:absolute;left:-9999px}.issues.svelte-1sccr4g.svelte-1sccr4g{border-bottom:1px solid var(--goa-color-greyscale-200);margin:1rem 0}.issue.svelte-1sccr4g.svelte-1sccr4g{margin-bottom:1rem}.error.svelte-1sccr4g.svelte-1sccr4g{color:var(--goa-color-interactive-error);font-size:0.9em;display:flex;align-items:center;gap:0.5rem}@container self (max-width: 623px){.dragdrop.svelte-1sccr4g.svelte-1sccr4g{padding-top:1.75rem}.instructions.svelte-1sccr4g.svelte-1sccr4g{flex-direction:column}}');
}
function get_each_context$6(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[22] = list[i];
  return child_ctx;
}
function create_if_block_3$9(ctx) {
  let div3;
  let div2;
  let t6;
  let t7;
  let input;
  let div3_data_testid_value;
  let div3_class_value;
  let mounted;
  let dispose;
  let if_block = (
    /*maxfilesize*/
    ctx[2] && create_if_block_4$3(ctx)
  );
  return {
    c() {
      div3 = element("div");
      div2 = element("div");
      div2.innerHTML = `<goa-icon type="cloud-upload" size="large" class="svelte-1sccr4g"></goa-icon> <div>Drag and drop files here</div> <em class="or-text svelte-1sccr4g">or</em> <div class="browse-files svelte-1sccr4g">Browse files</div>`;
      t6 = space();
      if (if_block) if_block.c();
      t7 = space();
      input = element("input");
      attr(div2, "class", "instructions svelte-1sccr4g");
      attr(input, "data-testid", "input");
      attr(input, "tabindex", "0");
      attr(input, "type", "file");
      attr(
        input,
        "accept",
        /*accept*/
        ctx[1]
      );
      input.multiple = true;
      attr(input, "class", "svelte-1sccr4g");
      attr(div3, "data-testid", div3_data_testid_value = /*testid*/
      ctx[3] || "dragdrop");
      attr(div3, "class", div3_class_value = null_to_empty(`dragdrop state-${/*_state*/
      ctx[6]}`) + " svelte-1sccr4g");
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      append(div3, div2);
      append(div3, t6);
      if (if_block) if_block.m(div3, null);
      append(div3, t7);
      append(div3, input);
      ctx[14](input);
      ctx[15](div3);
      if (!mounted) {
        dispose = [
          listen(
            div3,
            "click",
            /*openFilePicker*/
            ctx[8]
          ),
          listen(
            div3,
            "drop",
            /*onDrop*/
            ctx[9]
          ),
          listen(
            div3,
            "mouseover",
            /*onMouseOver*/
            ctx[12]
          ),
          listen(
            div3,
            "mouseout",
            /*onMouseOut*/
            ctx[13]
          ),
          listen(
            div3,
            "dragenter",
            /*onDragEnter*/
            ctx[10]
          ),
          listen(
            div3,
            "dragleave",
            /*onDragLeave*/
            ctx[11]
          ),
          listen(div3, "dragover", onDrag)
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (
        /*maxfilesize*/
        ctx2[2]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block_4$3(ctx2);
          if_block.c();
          if_block.m(div3, t7);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (dirty & /*accept*/
      2) {
        attr(
          input,
          "accept",
          /*accept*/
          ctx2[1]
        );
      }
      if (dirty & /*testid*/
      8 && div3_data_testid_value !== (div3_data_testid_value = /*testid*/
      ctx2[3] || "dragdrop")) {
        attr(div3, "data-testid", div3_data_testid_value);
      }
      if (dirty & /*_state*/
      64 && div3_class_value !== (div3_class_value = null_to_empty(`dragdrop state-${/*_state*/
      ctx2[6]}`) + " svelte-1sccr4g")) {
        attr(div3, "class", div3_class_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(div3);
      }
      if (if_block) if_block.d();
      ctx[14](null);
      ctx[15](null);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_if_block_4$3(ctx) {
  let em;
  let t0;
  let t1;
  return {
    c() {
      em = element("em");
      t0 = text("Maximum file size is ");
      t1 = text(
        /*maxfilesize*/
        ctx[2]
      );
      attr(em, "class", "max-file-size svelte-1sccr4g");
      attr(em, "data-testid", "max-file-size");
    },
    m(target, anchor) {
      insert(target, em, anchor);
      append(em, t0);
      append(em, t1);
    },
    p(ctx2, dirty) {
      if (dirty & /*maxfilesize*/
      4) set_data(
        t1,
        /*maxfilesize*/
        ctx2[2]
      );
    },
    d(detaching) {
      if (detaching) {
        detach(em);
      }
    }
  };
}
function create_if_block_1$e(ctx) {
  let div;
  let goa_button;
  let t1;
  let t2;
  let input;
  let input_data_testid_value;
  let mounted;
  let dispose;
  let if_block = (
    /*maxfilesize*/
    ctx[2] && create_if_block_2$9(ctx)
  );
  return {
    c() {
      div = element("div");
      goa_button = element("goa-button");
      goa_button.textContent = "Choose file";
      t1 = space();
      if (if_block) if_block.c();
      t2 = space();
      input = element("input");
      set_custom_element_data(goa_button, "type", "secondary");
      attr(div, "class", "button svelte-1sccr4g");
      attr(input, "data-testid", input_data_testid_value = /*testid*/
      ctx[3] || "input");
      attr(input, "tabindex", "-1");
      attr(input, "type", "file");
      attr(
        input,
        "accept",
        /*accept*/
        ctx[1]
      );
      input.multiple = true;
      attr(input, "class", "svelte-1sccr4g");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, goa_button);
      append(div, t1);
      if (if_block) if_block.m(div, null);
      ctx[16](div);
      insert(target, t2, anchor);
      insert(target, input, anchor);
      ctx[17](input);
      if (!mounted) {
        dispose = listen(
          goa_button,
          "click",
          /*openFilePicker*/
          ctx[8]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (
        /*maxfilesize*/
        ctx2[2]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block_2$9(ctx2);
          if_block.c();
          if_block.m(div, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (dirty & /*testid*/
      8 && input_data_testid_value !== (input_data_testid_value = /*testid*/
      ctx2[3] || "input")) {
        attr(input, "data-testid", input_data_testid_value);
      }
      if (dirty & /*accept*/
      2) {
        attr(
          input,
          "accept",
          /*accept*/
          ctx2[1]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(div);
        detach(t2);
        detach(input);
      }
      if (if_block) if_block.d();
      ctx[16](null);
      ctx[17](null);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_2$9(ctx) {
  let em;
  let t0;
  let t1;
  return {
    c() {
      em = element("em");
      t0 = text("Maximum file size is ");
      t1 = text(
        /*maxfilesize*/
        ctx[2]
      );
      attr(em, "class", "max-file-size svelte-1sccr4g");
      attr(em, "data-testid", "max-file-size");
    },
    m(target, anchor) {
      insert(target, em, anchor);
      append(em, t0);
      append(em, t1);
    },
    p(ctx2, dirty) {
      if (dirty & /*maxfilesize*/
      4) set_data(
        t1,
        /*maxfilesize*/
        ctx2[2]
      );
    },
    d(detaching) {
      if (detaching) {
        detach(em);
      }
    }
  };
}
function create_if_block$q(ctx) {
  let div;
  let each_value = ensure_array_like(
    /*issues*/
    ctx[7]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block$6(get_each_context$6(ctx, each_value, i));
  }
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "issues svelte-1sccr4g");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div, null);
        }
      }
    },
    p(ctx2, dirty) {
      if (dirty & /*issues*/
      128) {
        each_value = ensure_array_like(
          /*issues*/
          ctx2[7]
        );
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context$6(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block$6(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(div, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_each_block$6(ctx) {
  let div1;
  let t0_value = (
    /*issue*/
    ctx[22].filename + ""
  );
  let t0;
  let t1;
  let div0;
  let goa_icon;
  let t2;
  let t3_value = (
    /*issue*/
    ctx[22].error + ""
  );
  let t3;
  let t4;
  return {
    c() {
      div1 = element("div");
      t0 = text(t0_value);
      t1 = space();
      div0 = element("div");
      goa_icon = element("goa-icon");
      t2 = space();
      t3 = text(t3_value);
      t4 = space();
      set_custom_element_data(goa_icon, "type", "warning");
      set_custom_element_data(goa_icon, "size", "small");
      set_custom_element_data(goa_icon, "theme", "filled");
      set_custom_element_data(goa_icon, "class", "svelte-1sccr4g");
      attr(div0, "class", "error svelte-1sccr4g");
      attr(div0, "data-testid", "error");
      attr(div1, "class", "issue svelte-1sccr4g");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, t0);
      append(div1, t1);
      append(div1, div0);
      append(div0, goa_icon);
      append(div0, t2);
      append(div0, t3);
      append(div1, t4);
    },
    p(ctx2, dirty) {
      if (dirty & /*issues*/
      128 && t0_value !== (t0_value = /*issue*/
      ctx2[22].filename + "")) set_data(t0, t0_value);
      if (dirty & /*issues*/
      128 && t3_value !== (t3_value = /*issue*/
      ctx2[22].error + "")) set_data(t3, t3_value);
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
    }
  };
}
function create_fragment$K(ctx) {
  let t0;
  let t1;
  let if_block2_anchor;
  let if_block0 = (
    /*variant*/
    ctx[0] === "dragdrop" && create_if_block_3$9(ctx)
  );
  let if_block1 = (
    /*variant*/
    ctx[0] === "button" && create_if_block_1$e(ctx)
  );
  let if_block2 = (
    /*issues*/
    ctx[7].length && create_if_block$q(ctx)
  );
  return {
    c() {
      if (if_block0) if_block0.c();
      t0 = space();
      if (if_block1) if_block1.c();
      t1 = space();
      if (if_block2) if_block2.c();
      if_block2_anchor = empty();
    },
    m(target, anchor) {
      if (if_block0) if_block0.m(target, anchor);
      insert(target, t0, anchor);
      if (if_block1) if_block1.m(target, anchor);
      insert(target, t1, anchor);
      if (if_block2) if_block2.m(target, anchor);
      insert(target, if_block2_anchor, anchor);
    },
    p(ctx2, [dirty]) {
      if (
        /*variant*/
        ctx2[0] === "dragdrop"
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_3$9(ctx2);
          if_block0.c();
          if_block0.m(t0.parentNode, t0);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (
        /*variant*/
        ctx2[0] === "button"
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block_1$e(ctx2);
          if_block1.c();
          if_block1.m(t1.parentNode, t1);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (
        /*issues*/
        ctx2[7].length
      ) {
        if (if_block2) {
          if_block2.p(ctx2, dirty);
        } else {
          if_block2 = create_if_block$q(ctx2);
          if_block2.c();
          if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
        }
      } else if (if_block2) {
        if_block2.d(1);
        if_block2 = null;
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
        detach(if_block2_anchor);
      }
      if (if_block0) if_block0.d(detaching);
      if (if_block1) if_block1.d(detaching);
      if (if_block2) if_block2.d(detaching);
    }
  };
}
function onDrag(e) {
  e.preventDefault();
  return false;
}
function instance$K($$self, $$props, $$invalidate) {
  let { variant = "dragdrop" } = $$props;
  let { accept = "*" } = $$props;
  let { maxfilesize = "5MB" } = $$props;
  let { testid = "" } = $$props;
  let _el;
  let _fileInput;
  let _state = "default";
  let issues = [];
  onMount(() => {
    _fileInput.addEventListener(
      "change",
      () => {
        $$invalidate(7, issues = []);
        [..._fileInput.files].forEach((file) => {
          const error = validate(file);
          if (error) {
            $$invalidate(7, issues = [{ filename: file.name, error }, ...issues]);
            return;
          }
          dispatch2(file);
        });
        $$invalidate(5, _fileInput.value = "", _fileInput);
      },
      true
    );
  });
  function validate(file) {
    if (!isValidFileType(file)) {
      return "Invalid file type";
    }
    if (!isValidFileSize(file)) {
      return `The file must be less than ${maxfilesize}`;
    }
    return null;
  }
  function isValidFileType(file) {
    const typeMatchers = accept.split(",");
    for (const matcher of typeMatchers) {
      const matches = file.type.match(matcher.replace("*", ".*")) || file.name.endsWith(matcher.trim());
      if (matches) {
        return true;
      }
    }
    return false;
  }
  function isValidFileSize(file) {
    const matches = maxfilesize.match(/(\d*)(\w*$)/);
    if (!matches) {
      return false;
    }
    const size = matches[1];
    const units = matches[2];
    const factor = {
      B: 1,
      KB: 1024,
      MB: Math.pow(1024, 2),
      GB: Math.pow(1024, 3)
    };
    if (file.size / factor[units] > parseInt(size)) {
      return false;
    }
    return true;
  }
  function dispatch2(file) {
    _el.dispatchEvent(new CustomEvent("_selectFile", { composed: true, detail: { file } }));
  }
  function openFilePicker() {
    _fileInput.click();
  }
  function onDrop(e) {
    var _a, _b;
    e.preventDefault();
    $$invalidate(7, issues = []);
    if ((_a = e.dataTransfer) == null ? void 0 : _a.items) {
      [...e.dataTransfer.items].forEach((item) => {
        if (item.kind === "file") {
          const file = item.getAsFile();
          if (file) {
            const error = validate(file);
            if (error) {
              $$invalidate(7, issues = [{ filename: file.name, error }, ...issues]);
              return;
            }
            dispatch2(file);
          }
        }
      });
    } else {
      [...(_b = e.dataTransfer) == null ? void 0 : _b.files].forEach((file) => {
        const error = validate(file);
        if (error) {
          $$invalidate(7, issues = [{ filename: file.name, error }, ...issues]);
          return;
        }
        dispatch2(file);
      });
    }
    $$invalidate(5, _fileInput.value = "", _fileInput);
  }
  function onDragEnter() {
    $$invalidate(6, _state = "dragenter");
  }
  function onDragLeave(e) {
    const rect = _el.getBoundingClientRect();
    const withinBounds = e.clientX > rect.x && e.clientX <= rect.x + rect.width && e.clientY > rect.y && e.clientY <= rect.y + rect.height;
    if (!withinBounds) {
      $$invalidate(6, _state = "default");
    }
  }
  function onMouseOver() {
    $$invalidate(6, _state = "hover");
  }
  function onMouseOut() {
    $$invalidate(6, _state = "default");
  }
  function input_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _fileInput = $$value;
      $$invalidate(5, _fileInput);
    });
  }
  function div3_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _el = $$value;
      $$invalidate(4, _el);
    });
  }
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _el = $$value;
      $$invalidate(4, _el);
    });
  }
  function input_binding_1($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _fileInput = $$value;
      $$invalidate(5, _fileInput);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("variant" in $$props2) $$invalidate(0, variant = $$props2.variant);
    if ("accept" in $$props2) $$invalidate(1, accept = $$props2.accept);
    if ("maxfilesize" in $$props2) $$invalidate(2, maxfilesize = $$props2.maxfilesize);
    if ("testid" in $$props2) $$invalidate(3, testid = $$props2.testid);
  };
  return [
    variant,
    accept,
    maxfilesize,
    testid,
    _el,
    _fileInput,
    _state,
    issues,
    openFilePicker,
    onDrop,
    onDragEnter,
    onDragLeave,
    onMouseOver,
    onMouseOut,
    input_binding,
    div3_binding,
    div_binding,
    input_binding_1
  ];
}
class FileUploadInput extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$K,
      create_fragment$K,
      safe_not_equal,
      {
        variant: 0,
        accept: 1,
        maxfilesize: 2,
        testid: 3
      },
      add_css$G
    );
  }
  get variant() {
    return this.$$.ctx[0];
  }
  set variant(variant) {
    this.$$set({ variant });
    flush();
  }
  get accept() {
    return this.$$.ctx[1];
  }
  set accept(accept) {
    this.$$set({ accept });
    flush();
  }
  get maxfilesize() {
    return this.$$.ctx[2];
  }
  set maxfilesize(maxfilesize) {
    this.$$set({ maxfilesize });
    flush();
  }
  get testid() {
    return this.$$.ctx[3];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
}
customElements.define("goa-file-upload-input", create_custom_element(FileUploadInput, { "variant": {}, "accept": {}, "maxfilesize": {}, "testid": {} }, [], [], true));
function add_css$F(target) {
  append_styles(target, "svelte-w8bdbk", "div.svelte-w8bdbk{display:inline}");
}
function create_fragment$J(ctx) {
  let div;
  let span0;
  let t0;
  let t1;
  let span1;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[2].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[1],
    null
  );
  return {
    c() {
      div = element("div");
      span0 = element("span");
      t0 = space();
      if (default_slot) default_slot.c();
      t1 = space();
      span1 = element("span");
      attr(span0, "data-tab-boundry", "start");
      attr(span0, "tabindex", "0");
      attr(span1, "data-tab-boundry", "end");
      attr(span1, "tabindex", "0");
      attr(div, "class", "svelte-w8bdbk");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, span0);
      append(div, t0);
      if (default_slot) {
        default_slot.m(div, null);
      }
      append(div, t1);
      append(div, span1);
      ctx[3](div);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        2)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[1],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[1]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[1],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (default_slot) default_slot.d(detaching);
      ctx[3](null);
    }
  };
}
function instance$J($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let rootEl;
  let boundryStartEl;
  let boundryEndEl;
  let isShiftPressed;
  let isFirstFocus = true;
  onMount(async () => {
    await tick();
    rootEl.addEventListener("focus", keepWithinBounds, true);
    rootEl.addEventListener("keydown", activateShiftState, true);
    rootEl.addEventListener("keyup", deactivateShiftState, true);
    boundryStartEl = rootEl.querySelector("[data-tab-boundry=start]");
    boundryEndEl = rootEl.querySelector("[data-tab-boundry=end]");
    findFirstFocusableEl();
  });
  function activateShiftState(e) {
    if (e.shiftKey) isShiftPressed = true;
  }
  function deactivateShiftState(e) {
    if (e.shiftKey) isShiftPressed = false;
  }
  function isFocusable(node) {
    var _a, _b;
    const element2 = node;
    const isTabbable = element2.tabIndex > 0 || element2.tabIndex === 0 && element2.getAttribute("tabIndex") !== null;
    if (isFirstFocus && ((_a = element2.getAttribute) == null ? void 0 : _a.call(element2, "data-ignore-focus"))) return "ignore-focus";
    if (element2.nodeType !== 1) return null;
    if (isTabbable) return node;
    if (element2 == null ? void 0 : element2.getAttribute("disabled")) return null;
    if (element2.tabIndex < 0 || ((_b = element2.getAttribute) == null ? void 0 : _b.call(element2, "tabindex")) === "-1") return null;
    let focusableNode = null;
    switch (element2.nodeName) {
      case "A": {
        const el2 = element2;
        if (!!el2.href && el2.rel !== "ignore") {
          focusableNode = node;
        }
        break;
      }
      case "INPUT": {
        const el2 = element2;
        if (el2.type !== "hidden" && el2.type !== "file") {
          focusableNode = node;
        }
        break;
      }
      case "BUTTON":
      case "SELECT":
      case "TEXTAREA":
        focusableNode = node;
        break;
    }
    return focusableNode;
  }
  function findFirstFocusableEl() {
    const sibling = rootEl == null ? void 0 : rootEl.querySelector("slot");
    if (!sibling) return;
    const el2 = findFirstNode([sibling], false);
    el2 == null ? void 0 : el2.focus();
  }
  function keepWithinBounds(e) {
    const el2 = (e == null ? void 0 : e.target) ?? rootEl;
    isFirstFocus = false;
    if (el2.dataset["tabBoundry"] === "start") {
      if (isShiftPressed) {
        boundryEndEl == null ? void 0 : boundryEndEl.focus();
        return;
      }
      const sibling = el2.nextElementSibling;
      if (!sibling) return;
      const next = findFirstNode([sibling], false);
      next == null ? void 0 : next.focus();
      return;
    }
    if (el2.dataset["tabBoundry"] === "end") {
      if (!isShiftPressed) {
        boundryStartEl == null ? void 0 : boundryStartEl.focus();
        return;
      }
      const sibling = el2.previousElementSibling;
      if (!sibling) return;
      const next = findFirstNode([sibling], true);
      next == null ? void 0 : next.focus();
      return;
    }
  }
  function findFirstNode(nodes, reversed = false) {
    const nodeList = reversed ? [...nodes].reverse() : nodes;
    for (const node of nodeList) {
      if (isFocusable(node) !== "ignore-focus") {
        const el2 = isFocusable(node) || findFirstNode(node.childNodes, reversed) || findFirstNodeOfSlot(node, reversed) || findFirstNodeOfShadowDOM(node, reversed);
        if (el2) {
          return el2;
        }
      }
    }
    return null;
  }
  function findFirstNodeOfSlot(node, reversed) {
    if (!(node instanceof HTMLSlotElement)) return null;
    return findFirstNode([...node.assignedNodes()], reversed);
  }
  function findFirstNodeOfShadowDOM(node, reversed) {
    var _a;
    if (!(node instanceof HTMLElement)) return null;
    return findFirstNode([...((_a = node.shadowRoot) == null ? void 0 : _a.childNodes) || []], reversed);
  }
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      rootEl = $$value;
      $$invalidate(0, rootEl);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("$$scope" in $$props2) $$invalidate(1, $$scope = $$props2.$$scope);
  };
  return [rootEl, $$scope, slots, div_binding];
}
class FocusTrap extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$J, create_fragment$J, safe_not_equal, {}, add_css$F);
  }
}
customElements.define("goa-focus-trap", create_custom_element(FocusTrap, {}, ["default"], [], true));
const goalogo = "data:image/svg+xml,%3csvg%20width='155'%20height='42'%20viewBox='0%200%20155%2042'%20fill='none'%20xmlns='http://www.w3.org/2000/svg'%3e%3cg%20clip-path='url(%23clip0_74_4890)'%3e%3cpath%20d='M155%2021H140.6V35.4004H155V21Z'%20fill='%2300B6ED'/%3e%3cpath%20d='M65.5539%2033.211C64.116%2033.349%2062.6147%2033.4882%2061.0366%2033.5566C61.6106%2029.2005%2063.9758%2023.1883%2066.915%2024.1484C68.6357%2024.7016%2067.7035%2029.8197%2065.5527%2033.2086L65.5539%2033.211ZM61.8957%2036.1823C61.4683%2036.2514%2061.0326%2036.2514%2060.6053%2036.1823C60.7165%2036.1047%2060.8073%2036.0013%2060.8699%2035.881C60.9325%2035.7606%2060.965%2035.6268%2060.9647%2035.4911V34.9378C61.7531%2034.9378%2062.9717%2034.7998%2064.4779%2034.6606C63.8154%2035.4471%2062.9038%2035.9839%2061.8957%2036.1823ZM79.8198%2025.8116C81.6842%2024.1484%2082.6164%2024.29%2082.8273%2024.7052C83.3294%2025.6736%2081.1786%2029.0625%2076.9489%2030.9297C77.3845%2028.9796%2078.3814%2027.2002%2079.8162%2025.8116H79.8198ZM149%2027.4712C148.784%2024.0824%20145.702%2023.5291%20145.272%2024.4976C145.128%2024.8432%20146.419%2024.7052%20146.419%2027.1256C146.419%2031.0677%20142.261%2036.2543%20136.953%2036.2543C135.111%2036.3656%20133.298%2035.7577%20131.894%2034.5583C130.49%2033.3589%20129.605%2031.6613%20129.425%2029.8221C129.209%2028.3701%20129.568%2026.3636%20126.988%2026.6408C125.19%2026.8484%20123.618%2030.1677%20121.324%2033.001C119.387%2035.4215%20118.527%2035.2139%20118.957%2033.139C119.531%2030.5109%20121.754%2024.4256%20124.335%2024.0104C125.553%2023.8027%20125.983%2025.8104%20126.491%2024.5636C126.674%2024.1246%20126.746%2023.6475%20126.701%2023.1742C126.655%2022.7009%20126.495%2022.246%20126.233%2021.8497C125.97%2021.4533%20125.615%2021.1276%20125.197%2020.9012C124.78%2020.6749%20124.313%2020.5549%20123.839%2020.5519C121.974%2020.5519%20119.751%2022.4887%20117.888%2024.632C116.311%2026.5688%20108.209%2038.0483%20104.768%2035.5595C103.191%2034.3834%20103.33%2029.6793%20104.338%2024.1484C105.794%2023.5168%20107.361%2023.1795%20108.948%2023.1559C110.536%2023.1322%20112.112%2023.4226%20113.587%2024.0104C114.519%2024.4256%20114.665%2024.356%20114.233%2023.3875C113.659%2021.9355%20110.433%2019.653%20105.343%2020.6899C105.199%2020.6899%20105.127%2020.7595%20104.984%2020.7595C105.414%2018.9594%20105.844%2017.0946%20106.421%2015.2957C106.923%2013.6361%20108.286%2010.8004%20104.624%2010.3168C103.477%2010.1092%20103.979%2010.6624%20103.546%2012.184C102.827%2014.9501%20101.969%2018.5442%20101.323%2022.2115C98.0002%2024.1064%2095.2885%2026.9143%2093.5082%2030.3033C93.9222%2028.7349%2094.2336%2027.141%2094.4404%2025.532C94.4806%2025.1343%2094.3704%2024.7359%2094.1314%2024.4157C93.8924%2024.0955%2093.5422%2023.8768%2093.1499%2023.8027C92.3615%2023.5951%2091.3526%2023.9408%2090.4252%2025.2548C88.2025%2028.2981%2085.4071%2033.0694%2081.1055%2035.0747C78.0225%2036.5267%2076.6601%2035.0747%2076.5894%2032.7946C77.1289%2032.6525%2077.6562%2032.4675%2078.1663%2032.2414C83.7583%2029.8905%2085.6228%2026.294%2084.2604%2024.0812C82.898%2022.0063%2079.0985%2022.6291%2076.0155%2025.7408C74.3913%2027.5384%2073.4079%2029.8245%2073.2188%2032.2414C71.9284%2032.5186%2070.4941%2032.7214%2068.8454%2032.9326C71.4263%2028.8525%2071.2118%2023.3191%2067.4075%2022.3519C62.9621%2021.2455%2060.7395%2025.3952%2059.8084%2028.8525C60.1679%2024.98%2060.7407%2021.1063%2061.4572%2017.3034C61.8167%2015.6437%2062.9621%2012.808%2059.3004%2012.3244C58.1537%2012.1168%2058.2963%2012.67%2058.3682%2014.1917C58.512%2016.2665%2056.1455%2028.6461%2057.3641%2034.0402C55.7872%2034.5202%2055.1414%2035.6999%2057.1484%2036.8759C58.3625%2037.3816%2059.673%2037.6128%2060.9865%2037.5531C62.3%2037.4933%2063.5842%2037.1441%2064.7475%2036.5303C65.8289%2036.0016%2066.8016%2035.2742%2067.6148%2034.3858C69.4792%2034.1782%2071.4143%2033.8326%2073.2069%2033.5554C73.4932%2035.9759%2075.1432%2037.7735%2078.8708%2037.4279C84.1765%2036.9479%2088.9083%2030.6501%2090.7008%2027.608C90.3413%2030.8589%2088.1917%2037.9811%2091.9194%2037.6355C93.3572%2037.4975%2092.7797%2037.2899%2092.8516%2036.0455C93.211%2031.7578%2096.8668%2028.0929%20100.52%2025.8788C99.8743%2031.1349%20100.09%2035.8391%20102.599%2037.2899C107.187%2040.056%20113.569%2032.7946%20117.153%2028.3689C115.355%2032.311%20114.356%2037.2899%20117.009%2038.0507C120.164%2038.9496%20122.673%2033.8326%20125.612%2029.9589C125.971%2032.725%20127.907%2037.5659%20135.649%2037.5659C143.966%2037.4963%20149.2%2032.6554%20148.984%2027.4688L149%2027.4712ZM36.7117%2036.1091C33.9173%2035.1299%2031.1875%2033.9747%2028.5387%2032.6506C30.939%2031.8034%2033.2854%2030.8103%2035.565%2029.6769C35.8138%2031.8427%2036.1968%2033.9909%2036.7117%2036.1091ZM57.8817%2039.9888C57.8098%2039.7812%2057.2359%2040.0584%2056.735%2039.9888C55.2289%2039.7812%2053.2219%2037.7759%2052.6479%2034.525C51.5695%2028.6449%2052.2178%2022.8379%2054.0103%2014.1929C54.3698%2012.5332%2055.5164%209.69756%2051.8535%209.14435C50.7068%209.00634%2051.2796%209.55956%2050.9932%2011.0116C49.5553%2017.4438%2044.1106%2022.0771%2038.6624%2025.1888C38.0884%2017.8578%2038.3029%209.62796%2039.7408%204.64903C40.9629%200.430912%2042.396%201.19173%2040.6035%200.292908C38.8109%20-0.605916%2036.732%200.568916%2035.0833%203.7478C33.4346%206.92669%2025.9122%2024.014%2013.8629%2035.5631C7.69931%2041.4408%202.10485%2038.3987%201.02886%2037.4999C0.0966476%2036.7391%20-0.189725%2037.9151%200.885072%2039.09C5.8325%2044.3461%2013.1452%2041.37%2015.7968%2038.8128C23.1059%2031.759%2031.6408%2016.5438%2035.0881%2010.1128C34.6816%2015.735%2034.7775%2021.3824%2035.3745%2026.9876C32.6035%2028.2941%2029.7251%2029.3585%2026.7713%2030.1689C25.0507%2030.5841%2023.9747%2031.2753%2023.9747%2032.0362C23.9747%2032.797%2025.1213%2033.5578%2026.7713%2034.3162C29.7105%2035.6999%2038.3856%2039.5724%2040.4645%2040.8168C42.2618%2041.8536%2043.1892%2041.0244%2043.6913%2039.918C44.4102%2038.4659%2042.4727%2037.6379%2040.6083%2037.1519C39.7869%2034.1144%2039.2115%2031.0154%2038.8876%2027.8853C43.2611%2025.2572%2047.6346%2021.7999%2050.0718%2017.445C49.4271%2021.0451%2047.8491%2033.421%2051.8691%2038.6076C52.4249%2039.3234%2053.1422%2039.8971%2053.9622%2040.2815C54.7822%2040.666%2055.6816%2040.8502%2056.5864%2040.8192C57.5905%2040.7496%2058.0243%2040.128%2057.8769%2039.9888'%20fill='%23545860'/%3e%3c/g%3e%3cdefs%3e%3cclipPath%20id='clip0_74_4890'%3e%3crect%20width='154.804'%20height='42'%20fill='white'%20transform='translate(0.195801)'/%3e%3c/clipPath%3e%3c/defs%3e%3c/svg%3e";
function add_css$E(target) {
  append_styles(target, "svelte-19kukcv", ":host{--goa-footer-color-bg:var(--goa-color-greyscale-100);--goa-footer-border-top:var(--goa-border-width-m) solid var(--goa-color-greyscale-200);--goa-footer-border-bottom:1rem solid var(--goa-color-brand-default);--goa-footer-padding-small-screen:var(--goa-space-xl) var(--goa-space-m);--goa-footer-padding-medium-screen:var(--goa-space-2xl) var(--goa-space-xl);--goa-footer-padding-large-screen:var(--goa-space-2xl) var(--goa-space-3xl);--goa-footer-color-links:var(--goa-color-text-secondary);--goa-footer-color-links-hover:var(--goa-color-greyscale-900);--goa-footer-link-focus:var(--goa-border-width-l) solid var(--goa-color-interactive-focus);--goa-footer-typography-small-screen:var(--goa-font-size-3);--goa-footer-size-logo-desktop:155px;--goa-footer-size-logo-tablet:155px;--goa-footer-size-logo-mobile:133px;;}.svelte-19kukcv.svelte-19kukcv{box-sizing:border-box}.app-footer.svelte-19kukcv.svelte-19kukcv{background-color:var(--goa-footer-color-bg);border-top:var(--goa-footer-border-top);border-bottom:var(--goa-footer-border-bottom);container:self / inline-size}.content.svelte-19kukcv.svelte-19kukcv{margin:0 auto;width:min(var(--max-content-width), 100%)}@container self (max-width: 623px){.content.svelte-19kukcv.svelte-19kukcv{padding:var(--goa-footer-padding-small-screen);font-size:var(--goa-footer-typography-small-screen)}.logo.svelte-19kukcv.svelte-19kukcv{width:var(--goa-footer-size-logo-mobile)}}@container self (min-width: 624px) and (max-width: 1023px){.content.svelte-19kukcv.svelte-19kukcv{padding:var(--goa-footer-padding-medium-screen)}.logo.svelte-19kukcv.svelte-19kukcv{width:var(--goa-footer-size-logo-tablet)}}@container self (min-width: 1024px){.content.svelte-19kukcv.svelte-19kukcv{padding:var(--goa-footer-padding-large-screen)}.logo.svelte-19kukcv.svelte-19kukcv{width:var(--goa-footer-size-logo-desktop)}}.meta-section.svelte-19kukcv.svelte-19kukcv{display:flex;flex-direction:column;gap:var(--goa-space-l)}.meta-section.with-meta-links.svelte-19kukcv.svelte-19kukcv{justify-content:space-between}.meta-links.svelte-19kukcv.svelte-19kukcv{display:none}.with-meta-links.svelte-19kukcv .meta-links.svelte-19kukcv{display:block}.nav-links.svelte-19kukcv.svelte-19kukcv{display:flex;flex-direction:column;gap:var(--goa-space-xl)}.abgov.svelte-19kukcv.svelte-19kukcv{display:flex;flex-direction:column;justify-content:space-between;width:100%;gap:var(--goa-space-m)}@container self (min-width: 624px){.meta-section.svelte-19kukcv.svelte-19kukcv{flex-direction:row;gap:var(--goa-space-xl)}.nav-links.svelte-19kukcv.svelte-19kukcv{flex-direction:row;gap:var(--goa-space-2xl)}.abgov.svelte-19kukcv.svelte-19kukcv{align-items:center;flex-direction:row-reverse;gap:var(--goa-space-m)}.abgov.with-meta-links.svelte-19kukcv.svelte-19kukcv{align-items:flex-end}}.abgov.with-meta-links.svelte-19kukcv.svelte-19kukcv{gap:var(--goa-space-m);flex-direction:column;width:unset}.goa-copyright.svelte-19kukcv.svelte-19kukcv{white-space:nowrap}a.svelte-19kukcv.svelte-19kukcv{color:var(--goa-footer-color-links);cursor:pointer;display:flex}a.svelte-19kukcv.svelte-19kukcv:hover{color:var(--goa-footer-color-links-hover)}a.svelte-19kukcv.svelte-19kukcv:focus-visible{outline:var(--goa-footer-link-focus);border-radius:2px}");
}
const get_meta_slot_changes$1 = (dirty) => ({});
const get_meta_slot_context$1 = (ctx) => ({});
const get_nav_slot_changes$3 = (dirty) => ({});
const get_nav_slot_context$3 = (ctx) => ({});
function create_if_block_1$d(ctx) {
  let goa_divider;
  return {
    c() {
      goa_divider = element("goa-divider");
      set_custom_element_data(goa_divider, "mt", "l");
      set_custom_element_data(goa_divider, "mb", "l");
      set_custom_element_data(goa_divider, "class", "svelte-19kukcv");
    },
    m(target, anchor) {
      insert(target, goa_divider, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(goa_divider);
      }
    }
  };
}
function create_else_block$9(ctx) {
  let img;
  let img_src_value;
  return {
    c() {
      img = element("img");
      if (!src_url_equal(img.src, img_src_value = goalogo)) attr(img, "src", img_src_value);
      attr(img, "alt", "Government of Alberta Logo");
      attr(img, "class", "logo svelte-19kukcv");
    },
    m(target, anchor) {
      insert(target, img, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(img);
      }
    }
  };
}
function create_if_block$p(ctx) {
  let a;
  let img;
  let img_src_value;
  return {
    c() {
      a = element("a");
      img = element("img");
      if (!src_url_equal(img.src, img_src_value = goalogo)) attr(img, "src", img_src_value);
      attr(img, "alt", "Government of Alberta Logo");
      attr(img, "class", "logo svelte-19kukcv");
      attr(
        a,
        "href",
        /*url*/
        ctx[2]
      );
      attr(a, "class", "svelte-19kukcv");
    },
    m(target, anchor) {
      insert(target, a, anchor);
      append(a, img);
    },
    p(ctx2, dirty) {
      if (dirty & /*url*/
      4) {
        attr(
          a,
          "href",
          /*url*/
          ctx2[2]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(a);
      }
    }
  };
}
function create_fragment$I(ctx) {
  var _a;
  let div5;
  let div4;
  let div0;
  let t0;
  let t1;
  let div3;
  let div1;
  let t2;
  let div2;
  let t3;
  let a;
  let div5_style_value;
  let current;
  const nav_slot_template = (
    /*#slots*/
    ctx[8].nav
  );
  const nav_slot = create_slot(
    nav_slot_template,
    ctx,
    /*$$scope*/
    ctx[7],
    get_nav_slot_context$3
  );
  let if_block0 = (
    /*navLinks*/
    ((_a = ctx[4]) == null ? void 0 : _a.length) > 0 && create_if_block_1$d()
  );
  const meta_slot_template = (
    /*#slots*/
    ctx[8].meta
  );
  const meta_slot = create_slot(
    meta_slot_template,
    ctx,
    /*$$scope*/
    ctx[7],
    get_meta_slot_context$1
  );
  function select_block_type(ctx2, dirty) {
    if (
      /*url*/
      ctx2[2]
    ) return create_if_block$p;
    return create_else_block$9;
  }
  let current_block_type = select_block_type(ctx);
  let if_block1 = current_block_type(ctx);
  return {
    c() {
      div5 = element("div");
      div4 = element("div");
      div0 = element("div");
      if (nav_slot) nav_slot.c();
      t0 = space();
      if (if_block0) if_block0.c();
      t1 = space();
      div3 = element("div");
      div1 = element("div");
      if (meta_slot) meta_slot.c();
      t2 = space();
      div2 = element("div");
      if_block1.c();
      t3 = space();
      a = element("a");
      a.textContent = `© ${/*year*/
      ctx[6]} Government of Alberta`;
      attr(div0, "class", "nav-links svelte-19kukcv");
      attr(div1, "class", "meta-links svelte-19kukcv");
      attr(a, "href", "https://alberta.ca");
      attr(a, "class", "goa-copyright svelte-19kukcv");
      attr(div2, "class", "abgov svelte-19kukcv");
      toggle_class(
        div2,
        "with-meta-links",
        /*metaLinks*/
        ctx[5] && /*metaLinks*/
        ctx[5].length > 0
      );
      attr(div3, "class", "meta-section svelte-19kukcv");
      toggle_class(
        div3,
        "with-meta-links",
        /*metaLinks*/
        ctx[5] && /*metaLinks*/
        ctx[5].length > 0
      );
      attr(div4, "class", "content svelte-19kukcv");
      attr(div5, "class", "app-footer svelte-19kukcv");
      attr(div5, "style", div5_style_value = `--max-content-width: ${/*maxcontentwidth*/
      ctx[0] || "100%"}`);
      attr(
        div5,
        "data-testid",
        /*testid*/
        ctx[1]
      );
    },
    m(target, anchor) {
      insert(target, div5, anchor);
      append(div5, div4);
      append(div4, div0);
      if (nav_slot) {
        nav_slot.m(div0, null);
      }
      append(div4, t0);
      if (if_block0) if_block0.m(div4, null);
      append(div4, t1);
      append(div4, div3);
      append(div3, div1);
      if (meta_slot) {
        meta_slot.m(div1, null);
      }
      append(div3, t2);
      append(div3, div2);
      if_block1.m(div2, null);
      append(div2, t3);
      append(div2, a);
      ctx[9](div5);
      current = true;
    },
    p(ctx2, [dirty]) {
      var _a2;
      if (nav_slot) {
        if (nav_slot.p && (!current || dirty & /*$$scope*/
        128)) {
          update_slot_base(
            nav_slot,
            nav_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[7],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[7]
            ) : get_slot_changes(
              nav_slot_template,
              /*$$scope*/
              ctx2[7],
              dirty,
              get_nav_slot_changes$3
            ),
            get_nav_slot_context$3
          );
        }
      }
      if (
        /*navLinks*/
        ((_a2 = ctx2[4]) == null ? void 0 : _a2.length) > 0
      ) {
        if (if_block0) ;
        else {
          if_block0 = create_if_block_1$d();
          if_block0.c();
          if_block0.m(div4, t1);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (meta_slot) {
        if (meta_slot.p && (!current || dirty & /*$$scope*/
        128)) {
          update_slot_base(
            meta_slot,
            meta_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[7],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[7]
            ) : get_slot_changes(
              meta_slot_template,
              /*$$scope*/
              ctx2[7],
              dirty,
              get_meta_slot_changes$1
            ),
            get_meta_slot_context$1
          );
        }
      }
      if (current_block_type === (current_block_type = select_block_type(ctx2)) && if_block1) {
        if_block1.p(ctx2, dirty);
      } else {
        if_block1.d(1);
        if_block1 = current_block_type(ctx2);
        if (if_block1) {
          if_block1.c();
          if_block1.m(div2, t3);
        }
      }
      if (!current || dirty & /*metaLinks*/
      32) {
        toggle_class(
          div2,
          "with-meta-links",
          /*metaLinks*/
          ctx2[5] && /*metaLinks*/
          ctx2[5].length > 0
        );
      }
      if (!current || dirty & /*metaLinks*/
      32) {
        toggle_class(
          div3,
          "with-meta-links",
          /*metaLinks*/
          ctx2[5] && /*metaLinks*/
          ctx2[5].length > 0
        );
      }
      if (!current || dirty & /*maxcontentwidth*/
      1 && div5_style_value !== (div5_style_value = `--max-content-width: ${/*maxcontentwidth*/
      ctx2[0] || "100%"}`)) {
        attr(div5, "style", div5_style_value);
      }
      if (!current || dirty & /*testid*/
      2) {
        attr(
          div5,
          "data-testid",
          /*testid*/
          ctx2[1]
        );
      }
    },
    i(local) {
      if (current) return;
      transition_in(nav_slot, local);
      transition_in(meta_slot, local);
      current = true;
    },
    o(local) {
      transition_out(nav_slot, local);
      transition_out(meta_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div5);
      }
      if (nav_slot) nav_slot.d(detaching);
      if (if_block0) if_block0.d();
      if (meta_slot) meta_slot.d(detaching);
      if_block1.d();
      ctx[9](null);
    }
  };
}
function instance$I($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { maxcontentwidth = "" } = $$props;
  let { testid = "" } = $$props;
  let { url = "" } = $$props;
  let rootEl;
  let navLinks;
  let metaLinks;
  const year = /* @__PURE__ */ (/* @__PURE__ */ new Date()).getFullYear();
  onMount(async () => {
    await tick();
    const navSlot = rootEl.querySelector("slot[name=nav]");
    const metaSlot = rootEl.querySelector("slot[name=meta]");
    $$invalidate(5, metaLinks = metaSlot == null ? void 0 : metaSlot.assignedElements());
    $$invalidate(4, navLinks = navSlot == null ? void 0 : navSlot.assignedElements());
  });
  function div5_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      rootEl = $$value;
      $$invalidate(3, rootEl);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("maxcontentwidth" in $$props2) $$invalidate(0, maxcontentwidth = $$props2.maxcontentwidth);
    if ("testid" in $$props2) $$invalidate(1, testid = $$props2.testid);
    if ("url" in $$props2) $$invalidate(2, url = $$props2.url);
    if ("$$scope" in $$props2) $$invalidate(7, $$scope = $$props2.$$scope);
  };
  return [
    maxcontentwidth,
    testid,
    url,
    rootEl,
    navLinks,
    metaLinks,
    year,
    $$scope,
    slots,
    div5_binding
  ];
}
class Footer extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$I, create_fragment$I, safe_not_equal, { maxcontentwidth: 0, testid: 1, url: 2 }, add_css$E);
  }
  get maxcontentwidth() {
    return this.$$.ctx[0];
  }
  set maxcontentwidth(maxcontentwidth) {
    this.$$set({ maxcontentwidth });
    flush();
  }
  get testid() {
    return this.$$.ctx[1];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
  get url() {
    return this.$$.ctx[2];
  }
  set url(url) {
    this.$$set({ url });
    flush();
  }
}
customElements.define("goa-app-footer", create_custom_element(Footer, { "maxcontentwidth": {}, "testid": {}, "url": {} }, ["nav", "meta"], [], true));
function add_css$D(target) {
  append_styles(target, "svelte-2ofh1f", ":host{--goa-footer-meta-links-gap:var(--goa-space-l);--goa-footer-meta-links-gap-small-screen:20px;--goa-footer-color-links:var(--goa-color-text-default);--goa-footer-color-links-hover:var(--goa-color-greyscale-700);--goa-footer-link-focus:var(--goa-border-width-l) solid var(--goa-color-interactive-focus)}.hidden.svelte-2ofh1f{display:none}ul.svelte-2ofh1f{display:flex;flex-wrap:wrap;gap:var(--goa-footer-meta-links-gap);padding:0;margin:8px 0px 0px 0px}li.svelte-2ofh1f{list-style-type:none}@media(max-width: 623px){ul.svelte-2ofh1f{display:flex;flex-wrap:wrap;gap:var(--goa-footer-meta-links-gap-small-screen);padding:0;margin:0px 0px 0px 0px}}a.svelte-2ofh1f{color:var(--goa-footer-color-links);cursor:pointer;white-space:nowrap}a.svelte-2ofh1f:hover{color:var(--goa-footer-color-links-hover)}a.svelte-2ofh1f:focus-visible{outline:var(--goa-footer-link-focus);border-radius:2px}");
}
function get_each_context$5(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[6] = list[i];
  return child_ctx;
}
function create_each_block$5(ctx) {
  let li2;
  let a;
  let t_value = (
    /*child*/
    ctx[6].innerHTML + ""
  );
  let t2;
  let a_href_value;
  return {
    c() {
      li2 = element("li");
      a = element("a");
      t2 = text(t_value);
      attr(a, "href", a_href_value = /*child*/
      ctx[6].href);
      attr(a, "class", "svelte-2ofh1f");
      attr(li2, "class", "svelte-2ofh1f");
    },
    m(target, anchor) {
      insert(target, li2, anchor);
      append(li2, a);
      append(a, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*children*/
      4 && t_value !== (t_value = /*child*/
      ctx2[6].innerHTML + "")) set_data(t2, t_value);
      if (dirty & /*children*/
      4 && a_href_value !== (a_href_value = /*child*/
      ctx2[6].href)) {
        attr(a, "href", a_href_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(li2);
      }
    }
  };
}
function create_fragment$H(ctx) {
  let section;
  let div;
  let t2;
  let ul2;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[4].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[3],
    null
  );
  let each_value = ensure_array_like(
    /*children*/
    ctx[2]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block$5(get_each_context$5(ctx, each_value, i));
  }
  return {
    c() {
      section = element("section");
      div = element("div");
      if (default_slot) default_slot.c();
      t2 = space();
      ul2 = element("ul");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "hidden svelte-2ofh1f");
      attr(ul2, "class", "svelte-2ofh1f");
      attr(
        section,
        "data-testid",
        /*testid*/
        ctx[0]
      );
    },
    m(target, anchor) {
      insert(target, section, anchor);
      append(section, div);
      if (default_slot) {
        default_slot.m(div, null);
      }
      append(section, t2);
      append(section, ul2);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(ul2, null);
        }
      }
      ctx[5](section);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        8)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[3],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[3]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[3],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (dirty & /*children*/
      4) {
        each_value = ensure_array_like(
          /*children*/
          ctx2[2]
        );
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context$5(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block$5(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(ul2, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
      if (!current || dirty & /*testid*/
      1) {
        attr(
          section,
          "data-testid",
          /*testid*/
          ctx2[0]
        );
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(section);
      }
      if (default_slot) default_slot.d(detaching);
      destroy_each(each_blocks, detaching);
      ctx[5](null);
    }
  };
}
function instance$H($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { testid = "" } = $$props;
  let rootEl;
  let children2 = [];
  onMount(async () => {
    await tick();
    $$invalidate(2, children2 = rootEl.querySelector("slot").assignedElements());
    const isValid2 = children2.map((child) => child.hasAttribute("href")).reduce(
      (sum, valid) => {
        return sum && valid;
      },
      true
    );
    if (!isValid2) {
      $$invalidate(2, children2 = []);
      console.warn("GoAFooterMetaSection children must be anchor elements.");
      return;
    }
  });
  function section_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      rootEl = $$value;
      $$invalidate(1, rootEl);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("testid" in $$props2) $$invalidate(0, testid = $$props2.testid);
    if ("$$scope" in $$props2) $$invalidate(3, $$scope = $$props2.$$scope);
  };
  return [testid, rootEl, children2, $$scope, slots, section_binding];
}
class FooterMetaSection extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$H, create_fragment$H, safe_not_equal, { testid: 0 }, add_css$D);
  }
  get testid() {
    return this.$$.ctx[0];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
}
customElements.define("goa-app-footer-meta-section", create_custom_element(FooterMetaSection, { "testid": {} }, ["default"], [], true));
function add_css$C(target) {
  append_styles(target, "svelte-1xhgbnv", ":host{--goa-footer-color-links:var(--goa-color-text-default);--goa-footer-color-links-hover:var(--goa-color-greyscale-700);--goa-footer-link-focus:var(--goa-border-width-l) solid var(--goa-color-interactive-focus);flex:auto}.title.svelte-1xhgbnv{font:var(--goa-typography-heading-s);padding-bottom:var(--goa-space-m);color:var(--goa-color-greyscale-800)}.hidden.svelte-1xhgbnv{display:none}.links.svelte-1xhgbnv{display:flex;flex-direction:column;list-style-type:none;padding-left:0;margin:0;gap:12px}@media not (max-width: 623px){.links.svelte-1xhgbnv{list-style-type:none;padding-left:0;flex-direction:column}.title.svelte-1xhgbnv{font:var(--goa-typography-heading-m);padding-bottom:var(--goa-space-l)}}@media(min-width: 624px) and (max-width: 1023px){.links.svelte-1xhgbnv{display:var(--narrow-display-type);-moz-column-count:var(--narrow-column-count);column-count:var(--narrow-column-count)}}@media(min-width: 1024px){.links.svelte-1xhgbnv{display:var(--wide-display-type);-moz-column-count:var(--wide-column-count);column-count:var(--wide-column-count)}}a.svelte-1xhgbnv{color:var(--goa-footer-color-links);cursor:pointer}a.svelte-1xhgbnv:hover{color:var(--goa-footer-color-links-hover)}a.svelte-1xhgbnv:focus-visible{outline:var(--goa-footer-link-focus);border-radius:2px}");
}
function get_each_context$4(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[8] = list[i];
  return child_ctx;
}
function create_if_block$o(ctx) {
  let div;
  let t0;
  let t1;
  let goa_divider;
  return {
    c() {
      div = element("div");
      t0 = text(
        /*heading*/
        ctx[0]
      );
      t1 = space();
      goa_divider = element("goa-divider");
      attr(div, "class", "title svelte-1xhgbnv");
      set_custom_element_data(goa_divider, "mb", "l");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, t0);
      insert(target, t1, anchor);
      insert(target, goa_divider, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*heading*/
      1) set_data(
        t0,
        /*heading*/
        ctx2[0]
      );
    },
    d(detaching) {
      if (detaching) {
        detach(div);
        detach(t1);
        detach(goa_divider);
      }
    }
  };
}
function create_each_block$4(ctx) {
  let li2;
  let a;
  let t_value = (
    /*child*/
    ctx[8].innerHTML + ""
  );
  let t2;
  let a_href_value;
  return {
    c() {
      li2 = element("li");
      a = element("a");
      t2 = text(t_value);
      attr(a, "href", a_href_value = /*child*/
      ctx[8].href);
      attr(a, "class", "svelte-1xhgbnv");
    },
    m(target, anchor) {
      insert(target, li2, anchor);
      append(li2, a);
      append(a, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*children*/
      16 && t_value !== (t_value = /*child*/
      ctx2[8].innerHTML + "")) set_data(t2, t_value);
      if (dirty & /*children*/
      16 && a_href_value !== (a_href_value = /*child*/
      ctx2[8].href)) {
        attr(a, "href", a_href_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(li2);
      }
    }
  };
}
function create_fragment$G(ctx) {
  let section;
  let t0;
  let div;
  let t1;
  let ul2;
  let ul_style_value;
  let current;
  let if_block = (
    /*heading*/
    ctx[0] && create_if_block$o(ctx)
  );
  const default_slot_template = (
    /*#slots*/
    ctx[6].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[5],
    null
  );
  let each_value = ensure_array_like(
    /*children*/
    ctx[4]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
  }
  return {
    c() {
      section = element("section");
      if (if_block) if_block.c();
      t0 = space();
      div = element("div");
      if (default_slot) default_slot.c();
      t1 = space();
      ul2 = element("ul");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "hidden svelte-1xhgbnv");
      attr(ul2, "class", "links svelte-1xhgbnv");
      attr(ul2, "style", ul_style_value = `
      --narrow-display-type: ${Math.ceil(
        /*maxcolumncount*/
        ctx[1] / 2
      ) > 1 ? "block" : "flex"};
      --narrow-column-count: ${Math.ceil(
        /*maxcolumncount*/
        ctx[1] / 2
      )};
      --wide-display-type: ${/*maxcolumncount*/
      ctx[1] > 1 ? "block" : "flex"};
      --wide-column-count: ${/*maxcolumncount*/
      ctx[1]};
    `);
      attr(
        section,
        "data-testid",
        /*testid*/
        ctx[2]
      );
    },
    m(target, anchor) {
      insert(target, section, anchor);
      if (if_block) if_block.m(section, null);
      append(section, t0);
      append(section, div);
      if (default_slot) {
        default_slot.m(div, null);
      }
      append(section, t1);
      append(section, ul2);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(ul2, null);
        }
      }
      ctx[7](section);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*heading*/
        ctx2[0]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block$o(ctx2);
          if_block.c();
          if_block.m(section, t0);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        32)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[5],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[5]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[5],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (dirty & /*children*/
      16) {
        each_value = ensure_array_like(
          /*children*/
          ctx2[4]
        );
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context$4(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block$4(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(ul2, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
      if (!current || dirty & /*maxcolumncount*/
      2 && ul_style_value !== (ul_style_value = `
      --narrow-display-type: ${Math.ceil(
        /*maxcolumncount*/
        ctx2[1] / 2
      ) > 1 ? "block" : "flex"};
      --narrow-column-count: ${Math.ceil(
        /*maxcolumncount*/
        ctx2[1] / 2
      )};
      --wide-display-type: ${/*maxcolumncount*/
      ctx2[1] > 1 ? "block" : "flex"};
      --wide-column-count: ${/*maxcolumncount*/
      ctx2[1]};
    `)) {
        attr(ul2, "style", ul_style_value);
      }
      if (!current || dirty & /*testid*/
      4) {
        attr(
          section,
          "data-testid",
          /*testid*/
          ctx2[2]
        );
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(section);
      }
      if (if_block) if_block.d();
      if (default_slot) default_slot.d(detaching);
      destroy_each(each_blocks, detaching);
      ctx[7](null);
    }
  };
}
function instance$G($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { heading = "" } = $$props;
  let { maxcolumncount = 1 } = $$props;
  let { testid = "" } = $$props;
  let rootEl;
  let children2 = [];
  onMount(async () => {
    var _a;
    await tick();
    $$invalidate(4, children2 = (_a = rootEl.querySelector("slot")) == null ? void 0 : _a.assignedElements());
    const isValid2 = children2.map((child) => child.hasAttribute("href")).reduce(
      (sum, valid) => {
        return sum && valid;
      },
      true
    );
    if (!isValid2) {
      $$invalidate(4, children2 = []);
      console.warn("GoAFooterNavSection children must be anchor elements.");
      return;
    }
  });
  function section_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      rootEl = $$value;
      $$invalidate(3, rootEl);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("heading" in $$props2) $$invalidate(0, heading = $$props2.heading);
    if ("maxcolumncount" in $$props2) $$invalidate(1, maxcolumncount = $$props2.maxcolumncount);
    if ("testid" in $$props2) $$invalidate(2, testid = $$props2.testid);
    if ("$$scope" in $$props2) $$invalidate(5, $$scope = $$props2.$$scope);
  };
  return [
    heading,
    maxcolumncount,
    testid,
    rootEl,
    children2,
    $$scope,
    slots,
    section_binding
  ];
}
class FooterNavSection extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$G, create_fragment$G, safe_not_equal, { heading: 0, maxcolumncount: 1, testid: 2 }, add_css$C);
  }
  get heading() {
    return this.$$.ctx[0];
  }
  set heading(heading) {
    this.$$set({ heading });
    flush();
  }
  get maxcolumncount() {
    return this.$$.ctx[1];
  }
  set maxcolumncount(maxcolumncount) {
    this.$$set({ maxcolumncount });
    flush();
  }
  get testid() {
    return this.$$.ctx[2];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
}
customElements.define("goa-app-footer-nav-section", create_custom_element(FooterNavSection, { "heading": {}, "maxcolumncount": {}, "testid": {} }, ["default"], [], true));
function add_css$B(target) {
  append_styles(target, "svelte-tubgpq", "fieldset.svelte-tubgpq.svelte-tubgpq{border:none;padding:0}.errors.svelte-tubgpq li.svelte-tubgpq::marker,a.error.svelte-tubgpq.svelte-tubgpq,a.error.svelte-tubgpq.svelte-tubgpq:visited{color:var(--goa-color-emergency-dark)}");
}
const get_subform_slot_changes = (dirty) => ({});
const get_subform_slot_context = (ctx) => ({});
function get_each_context$3(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[42] = list[i];
  return child_ctx;
}
function create_else_block_2(ctx) {
  let current;
  const subform_slot_template = (
    /*#slots*/
    ctx[22].subform
  );
  const subform_slot = create_slot(
    subform_slot_template,
    ctx,
    /*$$scope*/
    ctx[21],
    get_subform_slot_context
  );
  return {
    c() {
      if (subform_slot) subform_slot.c();
    },
    m(target, anchor) {
      if (subform_slot) {
        subform_slot.m(target, anchor);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (subform_slot) {
        if (subform_slot.p && (!current || dirty[0] & /*$$scope*/
        2097152)) {
          update_slot_base(
            subform_slot,
            subform_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[21],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[21]
            ) : get_slot_changes(
              subform_slot_template,
              /*$$scope*/
              ctx2[21],
              dirty,
              get_subform_slot_changes
            ),
            get_subform_slot_context
          );
        }
      }
    },
    i(local) {
      if (current) return;
      transition_in(subform_slot, local);
      current = true;
    },
    o(local) {
      transition_out(subform_slot, local);
      current = false;
    },
    d(detaching) {
      if (subform_slot) subform_slot.d(detaching);
    }
  };
}
function create_if_block$n(ctx) {
  let t0;
  let show_if = Object.keys(
    /*_errors*/
    ctx[14]
  ).length;
  let t1;
  let t2;
  let t3;
  let goa_block;
  let t4;
  let t5;
  let current;
  let if_block0 = !/*first*/
  ctx[9] && !/*_editting*/
  ctx[13] && !/*last*/
  ctx[10] && /*showBackButton*/
  ctx[3] === "true" && create_if_block_6$1();
  let if_block1 = show_if && create_if_block_5$1(ctx);
  function select_block_type_1(ctx2, dirty) {
    if (
      /*heading*/
      ctx2[0]
    ) return create_if_block_4$2;
    return create_else_block_1;
  }
  let current_block_type = select_block_type_1(ctx);
  let if_block2 = current_block_type(ctx);
  const default_slot_template = (
    /*#slots*/
    ctx[22].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[21],
    null
  );
  let if_block3 = (
    /*_editting*/
    ctx[13] && !/*secondaryButtonText*/
    ctx[2] && create_if_block_3$8(ctx)
  );
  let if_block4 = (
    /*secondaryButtonText*/
    ctx[2] && create_if_block_2$8(ctx)
  );
  function select_block_type_2(ctx2, dirty) {
    if (
      /*last*/
      ctx2[10]
    ) return create_if_block_1$c;
    return create_else_block$8;
  }
  let current_block_type_1 = select_block_type_2(ctx);
  let if_block5 = current_block_type_1(ctx);
  return {
    c() {
      if (if_block0) if_block0.c();
      t0 = space();
      if (if_block1) if_block1.c();
      t1 = space();
      if_block2.c();
      t2 = space();
      if (default_slot) default_slot.c();
      t3 = space();
      goa_block = element("goa-block");
      if (if_block3) if_block3.c();
      t4 = space();
      if (if_block4) if_block4.c();
      t5 = space();
      if_block5.c();
      set_custom_element_data(goa_block, "mt", "xl");
    },
    m(target, anchor) {
      if (if_block0) if_block0.m(target, anchor);
      insert(target, t0, anchor);
      if (if_block1) if_block1.m(target, anchor);
      insert(target, t1, anchor);
      if_block2.m(target, anchor);
      insert(target, t2, anchor);
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      insert(target, t3, anchor);
      insert(target, goa_block, anchor);
      if (if_block3) if_block3.m(goa_block, null);
      append(goa_block, t4);
      if (if_block4) if_block4.m(goa_block, null);
      append(goa_block, t5);
      if_block5.m(goa_block, null);
      current = true;
    },
    p(ctx2, dirty) {
      if (!/*first*/
      ctx2[9] && !/*_editting*/
      ctx2[13] && !/*last*/
      ctx2[10] && /*showBackButton*/
      ctx2[3] === "true") {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_6$1();
          if_block0.c();
          if_block0.m(t0.parentNode, t0);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (dirty[0] & /*_errors*/
      16384) show_if = Object.keys(
        /*_errors*/
        ctx2[14]
      ).length;
      if (show_if) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block_5$1(ctx2);
          if_block1.c();
          if_block1.m(t1.parentNode, t1);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (current_block_type === (current_block_type = select_block_type_1(ctx2)) && if_block2) {
        if_block2.p(ctx2, dirty);
      } else {
        if_block2.d(1);
        if_block2 = current_block_type(ctx2);
        if (if_block2) {
          if_block2.c();
          if_block2.m(t2.parentNode, t2);
        }
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty[0] & /*$$scope*/
        2097152)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[21],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[21]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[21],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (
        /*_editting*/
        ctx2[13] && !/*secondaryButtonText*/
        ctx2[2]
      ) {
        if (if_block3) {
          if_block3.p(ctx2, dirty);
        } else {
          if_block3 = create_if_block_3$8(ctx2);
          if_block3.c();
          if_block3.m(goa_block, t4);
        }
      } else if (if_block3) {
        if_block3.d(1);
        if_block3 = null;
      }
      if (
        /*secondaryButtonText*/
        ctx2[2]
      ) {
        if (if_block4) {
          if_block4.p(ctx2, dirty);
        } else {
          if_block4 = create_if_block_2$8(ctx2);
          if_block4.c();
          if_block4.m(goa_block, t5);
        }
      } else if (if_block4) {
        if_block4.d(1);
        if_block4 = null;
      }
      if (current_block_type_1 === (current_block_type_1 = select_block_type_2(ctx2)) && if_block5) {
        if_block5.p(ctx2, dirty);
      } else {
        if_block5.d(1);
        if_block5 = current_block_type_1(ctx2);
        if (if_block5) {
          if_block5.c();
          if_block5.m(goa_block, null);
        }
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
        detach(t2);
        detach(t3);
        detach(goa_block);
      }
      if (if_block0) if_block0.d(detaching);
      if (if_block1) if_block1.d(detaching);
      if_block2.d(detaching);
      if (default_slot) default_slot.d(detaching);
      if (if_block3) if_block3.d();
      if (if_block4) if_block4.d();
      if_block5.d();
    }
  };
}
function create_if_block_6$1(ctx) {
  let goa_link_button;
  let mounted;
  let dispose;
  return {
    c() {
      goa_link_button = element("goa-link-button");
      goa_link_button.textContent = "Back";
      set_custom_element_data(goa_link_button, "leadingicon", "chevron-back");
      set_custom_element_data(goa_link_button, "mb", "2xl");
    },
    m(target, anchor) {
      insert(target, goa_link_button, anchor);
      if (!mounted) {
        dispose = listen(goa_link_button, "_click", handleBack);
        mounted = true;
      }
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(goa_link_button);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_5$1(ctx) {
  let goa_callout;
  let ul2;
  let each_value = ensure_array_like(Object.keys(
    /*_errors*/
    ctx[14]
  ));
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
  }
  return {
    c() {
      goa_callout = element("goa-callout");
      ul2 = element("ul");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(ul2, "class", "errors svelte-tubgpq");
      set_custom_element_data(goa_callout, "type", "emergency");
      set_custom_element_data(goa_callout, "heading", "Please correct the following errors on this page:");
    },
    m(target, anchor) {
      insert(target, goa_callout, anchor);
      append(goa_callout, ul2);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(ul2, null);
        }
      }
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*_errors, jumpToError*/
      540672) {
        each_value = ensure_array_like(Object.keys(
          /*_errors*/
          ctx2[14]
        ));
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context$3(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block$3(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(ul2, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    d(detaching) {
      if (detaching) {
        detach(goa_callout);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_each_block$3(ctx) {
  let li2;
  let a;
  let t0_value = (
    /*_errors*/
    ctx[14][
      /*key*/
      ctx[42]
    ] + ""
  );
  let t0;
  let a_href_value;
  let t1;
  let mounted;
  let dispose;
  function click_handler(...args) {
    return (
      /*click_handler*/
      ctx[23](
        /*key*/
        ctx[42],
        ...args
      )
    );
  }
  return {
    c() {
      li2 = element("li");
      a = element("a");
      t0 = text(t0_value);
      t1 = space();
      attr(a, "class", "error svelte-tubgpq");
      attr(a, "href", a_href_value = `#${/*key*/
      ctx[42]}`);
      attr(li2, "class", "svelte-tubgpq");
    },
    m(target, anchor) {
      insert(target, li2, anchor);
      append(li2, a);
      append(a, t0);
      append(li2, t1);
      if (!mounted) {
        dispose = listen(a, "click", click_handler);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty[0] & /*_errors*/
      16384 && t0_value !== (t0_value = /*_errors*/
      ctx[14][
        /*key*/
        ctx[42]
      ] + "")) set_data(t0, t0_value);
      if (dirty[0] & /*_errors*/
      16384 && a_href_value !== (a_href_value = `#${/*key*/
      ctx[42]}`)) {
        attr(a, "href", a_href_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(li2);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_else_block_1(ctx) {
  let br;
  return {
    c() {
      br = element("br");
    },
    m(target, anchor) {
      insert(target, br, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(br);
      }
    }
  };
}
function create_if_block_4$2(ctx) {
  let goa_text;
  let t2;
  return {
    c() {
      goa_text = element("goa-text");
      t2 = text(
        /*heading*/
        ctx[0]
      );
      set_custom_element_data(goa_text, "as", "h2");
      set_custom_element_data(goa_text, "size", "heading-l");
    },
    m(target, anchor) {
      insert(target, goa_text, anchor);
      append(goa_text, t2);
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*heading*/
      1) set_data(
        t2,
        /*heading*/
        ctx2[0]
      );
    },
    d(detaching) {
      if (detaching) {
        detach(goa_text);
      }
    }
  };
}
function create_if_block_3$8(ctx) {
  let goa_button;
  let mounted;
  let dispose;
  return {
    c() {
      goa_button = element("goa-button");
      goa_button.textContent = "Cancel";
      set_custom_element_data(goa_button, "type", "secondary");
    },
    m(target, anchor) {
      insert(target, goa_button, anchor);
      if (!mounted) {
        dispose = listen(
          goa_button,
          "_click",
          /*onCancel*/
          ctx[16]
        );
        mounted = true;
      }
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(goa_button);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_2$8(ctx) {
  let goa_button;
  let t2;
  let mounted;
  let dispose;
  return {
    c() {
      goa_button = element("goa-button");
      t2 = text(
        /*secondaryButtonText*/
        ctx[2]
      );
      set_custom_element_data(goa_button, "type", "secondary");
    },
    m(target, anchor) {
      insert(target, goa_button, anchor);
      append(goa_button, t2);
      if (!mounted) {
        dispose = listen(
          goa_button,
          "_click",
          /*onSecondaryClick*/
          ctx[18]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*secondaryButtonText*/
      4) set_data(
        t2,
        /*secondaryButtonText*/
        ctx2[2]
      );
    },
    d(detaching) {
      if (detaching) {
        detach(goa_button);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_else_block$8(ctx) {
  let goa_button;
  let t_value = (
    /*buttonText*/
    (ctx[1] || "Continue") + ""
  );
  let t2;
  let mounted;
  let dispose;
  return {
    c() {
      goa_button = element("goa-button");
      t2 = text(t_value);
      set_custom_element_data(goa_button, "type", "primary");
    },
    m(target, anchor) {
      insert(target, goa_button, anchor);
      append(goa_button, t2);
      if (!mounted) {
        dispose = listen(
          goa_button,
          "_click",
          /*onSaveAndContinue*/
          ctx[15]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*buttonText*/
      2 && t_value !== (t_value = /*buttonText*/
      (ctx2[1] || "Continue") + "")) set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(goa_button);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_1$c(ctx) {
  let goa_button;
  let t_value = (
    /*buttonText*/
    (ctx[1] || "Confirm") + ""
  );
  let t2;
  let mounted;
  let dispose;
  return {
    c() {
      goa_button = element("goa-button");
      t2 = text(t_value);
      set_custom_element_data(goa_button, "type", "primary");
    },
    m(target, anchor) {
      insert(target, goa_button, anchor);
      append(goa_button, t2);
      if (!mounted) {
        dispose = listen(
          goa_button,
          "_click",
          /*onSubmit*/
          ctx[17]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*buttonText*/
      2 && t_value !== (t_value = /*buttonText*/
      (ctx2[1] || "Confirm") + "")) set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(goa_button);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_fragment$F(ctx) {
  let section;
  let fieldset;
  let current_block_type_index;
  let if_block;
  let fieldset_style_value;
  let current;
  const if_block_creators = [create_if_block$n, create_else_block_2];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*state*/
      ctx2[4] === "default"
    ) return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      section = element("section");
      fieldset = element("fieldset");
      if_block.c();
      attr(fieldset, "style", fieldset_style_value = styles(calculateMargin(
        /*mt*/
        ctx[5],
        /*mr*/
        ctx[6],
        /*mb*/
        ctx[7],
        /*ml*/
        ctx[8]
      ), `display: ${/*_active*/
      ctx[11] ? "block" : "none"}`));
      attr(fieldset, "class", "svelte-tubgpq");
    },
    m(target, anchor) {
      insert(target, section, anchor);
      append(section, fieldset);
      if_blocks[current_block_type_index].m(fieldset, null);
      ctx[24](section);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(fieldset, null);
      }
      if (!current || dirty[0] & /*mt, mr, mb, ml, _active*/
      2528 && fieldset_style_value !== (fieldset_style_value = styles(calculateMargin(
        /*mt*/
        ctx2[5],
        /*mr*/
        ctx2[6],
        /*mb*/
        ctx2[7],
        /*ml*/
        ctx2[8]
      ), `display: ${/*_active*/
      ctx2[11] ? "block" : "none"}`))) {
        attr(fieldset, "style", fieldset_style_value);
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(section);
      }
      if_blocks[current_block_type_index].d();
      ctx[24](null);
    }
  };
}
function handleBack(e) {
  history.back();
  e.stopPropagation();
}
function instance$F($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { id: id2 = "" } = $$props;
  let { heading = "" } = $$props;
  let { buttonText = "" } = $$props;
  let { secondaryButtonText = "" } = $$props;
  let { showBackButton = "true" } = $$props;
  let { state = "default" } = $$props;
  let { mt = null } = $$props;
  let { mr = null } = $$props;
  let { mb: mb2 = null } = $$props;
  let { ml: ml2 = null } = $$props;
  let { first = false } = $$props;
  let { last = false } = $$props;
  let _rootEl;
  let _active = false;
  let _editting = false;
  let _detail;
  let _errors = {};
  let _state = {};
  let _stateSnapshot = {};
  let _formItems = {};
  let _formFields = {};
  onMount(() => {
    _detail = { id: id2, heading, el: _rootEl };
    dispatchBindMsg();
    addChildChangeListener();
    bindChannel();
  });
  function bindChannel() {
    receive(_rootEl, (action, data) => {
      switch (action) {
        case FormSetFieldsetMsg:
          onSetFieldset(data);
          break;
        case FormResetErrorsMsg:
          onErrorReset();
          break;
        case FormDispatchStateMsg:
          onFormDispatch(data);
          break;
        case FormItemMountMsg:
          onFormItemMount(data);
          break;
        case FormFieldMountMsg:
          onFieldsetMount(data);
          break;
        case FormToggleActiveMsg:
          onToggleActiveState(data);
          break;
        case ExternalSetErrorMsg:
          onError(data);
          break;
      }
    });
  }
  function onSetFieldset(detail) {
    for (const [id22, item] of Object.entries(detail.value)) {
      _state[id22] = { ...item };
    }
  }
  function onFormDispatch(detail) {
    $$invalidate(13, _editting = detail.editting === id2);
  }
  function onErrorReset() {
    $$invalidate(14, _errors = {});
    for (const [_, el2] of Object.entries(_formFields)) {
      relay(el2, FieldsetResetErrorsMsg, null);
    }
    for (const [_, { el: el2 }] of Object.entries(_formItems)) {
      relay(el2, FieldsetResetErrorsMsg, null);
    }
  }
  function onToggleActiveState(detail) {
    $$invalidate(11, _active = detail.active);
    _stateSnapshot = { ..._state };
  }
  function onFormItemMount(detail) {
    const { id: id22, label, el: el2 } = detail;
    _formItems[id22] = { label, el: el2 };
  }
  function onFieldsetMount(detail) {
    const { name, el: el2 } = detail;
    _formFields[name] = el2;
    relay(_rootEl, FieldsetMountFormItemMsg, { id: id2, name, el: el2 }, { bubbles: true });
  }
  function onError(detail) {
    $$invalidate(14, _errors[detail.name] = detail.msg, _errors);
    relay(_formFields[detail.name], FieldsetSetErrorMsg, { error: detail.msg });
    relay(_formItems[detail.name].el, FieldsetSetErrorMsg, { error: detail.msg });
  }
  function onSaveAndContinue() {
    const isDirty = Object.keys(_state).length > 0;
    if (isDirty) {
      relay(_rootEl, FieldsetChangeMsg, { id: id2, state: _state }, { bubbles: true });
    }
    sendContinueMsg(false);
  }
  function sendContinueMsg(cancelled) {
    if (cancelled) {
      revertFormFieldValues();
    }
    dispatch$1(
      _rootEl,
      "_continue",
      {
        el: _rootEl,
        state: cancelled ? _stateSnapshot : _state
      },
      { bubbles: true }
    );
  }
  function onCancel() {
    sendContinueMsg(true);
  }
  function revertFormFieldValues() {
    for (const [id22, el2] of Object.entries(_formFields)) {
      relay(el2, FormSetValueMsg, {
        name: id22,
        value: _stateSnapshot[id22].value
      });
    }
  }
  function onSubmit() {
    relay(_rootEl, FieldsetSubmitMsg, {}, { bubbles: true });
  }
  function onSecondaryClick() {
    dispatch$1(_rootEl, "_secondaryClick", {}, { bubbles: true });
  }
  function dispatchBindMsg() {
    relay(_rootEl, FieldsetBindMsg, _detail, { bubbles: true, timeout: 10 });
  }
  function addChildChangeListener() {
    _rootEl.addEventListener("_change", (e) => {
      const { name, value } = e.detail;
      if (!_formItems[name]) {
        return;
      }
      _state[name] = {
        name,
        value,
        label: _formItems[name].label
      };
      e.stopPropagation();
    });
  }
  function jumpToError(e, id22) {
    _formFields[id22].focus();
    e.preventDefault();
  }
  const click_handler = (key, e) => jumpToError(e, key);
  function section_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _rootEl = $$value;
      $$invalidate(12, _rootEl);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("id" in $$props2) $$invalidate(20, id2 = $$props2.id);
    if ("heading" in $$props2) $$invalidate(0, heading = $$props2.heading);
    if ("buttonText" in $$props2) $$invalidate(1, buttonText = $$props2.buttonText);
    if ("secondaryButtonText" in $$props2) $$invalidate(2, secondaryButtonText = $$props2.secondaryButtonText);
    if ("showBackButton" in $$props2) $$invalidate(3, showBackButton = $$props2.showBackButton);
    if ("state" in $$props2) $$invalidate(4, state = $$props2.state);
    if ("mt" in $$props2) $$invalidate(5, mt = $$props2.mt);
    if ("mr" in $$props2) $$invalidate(6, mr = $$props2.mr);
    if ("mb" in $$props2) $$invalidate(7, mb2 = $$props2.mb);
    if ("ml" in $$props2) $$invalidate(8, ml2 = $$props2.ml);
    if ("first" in $$props2) $$invalidate(9, first = $$props2.first);
    if ("last" in $$props2) $$invalidate(10, last = $$props2.last);
    if ("$$scope" in $$props2) $$invalidate(21, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*_active, id*/
    1050624) {
      if (_active) {
        const url = new URL(location.href);
        url.searchParams.set("page", id2);
        history.pushState({ page: id2 }, "", url);
      }
    }
  };
  return [
    heading,
    buttonText,
    secondaryButtonText,
    showBackButton,
    state,
    mt,
    mr,
    mb2,
    ml2,
    first,
    last,
    _active,
    _rootEl,
    _editting,
    _errors,
    onSaveAndContinue,
    onCancel,
    onSubmit,
    onSecondaryClick,
    jumpToError,
    id2,
    $$scope,
    slots,
    click_handler,
    section_binding
  ];
}
class Fieldset extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$F,
      create_fragment$F,
      safe_not_equal,
      {
        id: 20,
        heading: 0,
        buttonText: 1,
        secondaryButtonText: 2,
        showBackButton: 3,
        state: 4,
        mt: 5,
        mr: 6,
        mb: 7,
        ml: 8,
        first: 9,
        last: 10
      },
      add_css$B,
      [-1, -1]
    );
  }
  get id() {
    return this.$$.ctx[20];
  }
  set id(id2) {
    this.$$set({ id: id2 });
    flush();
  }
  get heading() {
    return this.$$.ctx[0];
  }
  set heading(heading) {
    this.$$set({ heading });
    flush();
  }
  get buttonText() {
    return this.$$.ctx[1];
  }
  set buttonText(buttonText) {
    this.$$set({ buttonText });
    flush();
  }
  get secondaryButtonText() {
    return this.$$.ctx[2];
  }
  set secondaryButtonText(secondaryButtonText) {
    this.$$set({ secondaryButtonText });
    flush();
  }
  get showBackButton() {
    return this.$$.ctx[3];
  }
  set showBackButton(showBackButton) {
    this.$$set({ showBackButton });
    flush();
  }
  get state() {
    return this.$$.ctx[4];
  }
  set state(state) {
    this.$$set({ state });
    flush();
  }
  get mt() {
    return this.$$.ctx[5];
  }
  set mt(mt) {
    this.$$set({ mt });
    flush();
  }
  get mr() {
    return this.$$.ctx[6];
  }
  set mr(mr) {
    this.$$set({ mr });
    flush();
  }
  get mb() {
    return this.$$.ctx[7];
  }
  set mb(mb2) {
    this.$$set({ mb: mb2 });
    flush();
  }
  get ml() {
    return this.$$.ctx[8];
  }
  set ml(ml2) {
    this.$$set({ ml: ml2 });
    flush();
  }
  get first() {
    return this.$$.ctx[9];
  }
  set first(first) {
    this.$$set({ first });
    flush();
  }
  get last() {
    return this.$$.ctx[10];
  }
  set last(last) {
    this.$$set({ last });
    flush();
  }
}
customElements.define("goa-fieldset", create_custom_element(Fieldset, { "id": {}, "heading": {}, "buttonText": { "type": "String", "attribute": "button-text" }, "secondaryButtonText": { "type": "String", "attribute": "secondary-button-text" }, "showBackButton": { "type": "String", "attribute": "show-back-button" }, "state": {}, "mt": {}, "mr": {}, "mb": {}, "ml": {}, "first": { "type": "Boolean" }, "last": { "type": "Boolean" } }, ["default", "subform"], [], true));
function add_css$A(target) {
  append_styles(target, "svelte-ar5omo", '.page.svelte-ar5omo{color:var(--goa-color-greyscale-700)}@media(max-width: 1023px){.summary.svelte-ar5omo{display:grid;grid-template-rows:min-content 1fr;grid-template-columns:auto;grid-template-areas:"top top top"\n        "main main main"\n        "link link link"\n    }.page.svelte-ar5omo{grid-area:top}.action.svelte-ar5omo{grid-area:link;margin-top:0.25rem}.details.svelte-ar5omo{grid-area:main}dl.svelte-ar5omo{margin:0.5rem 0}dt.svelte-ar5omo{font:var(--goa-typography-heading-s)}dd.svelte-ar5omo{margin:0}}@media(min-width: 1024px){.summary.svelte-ar5omo{display:grid;grid-template-rows:min-content 1fr;grid-template-columns:auto;grid-template-areas:"top . link"\n        "main main main"\n    }.page.svelte-ar5omo{grid-area:top}.action.svelte-ar5omo{grid-area:link;text-align:right}.details.svelte-ar5omo{grid-area:main}dl.svelte-ar5omo{margin:0.5rem 0}dt.svelte-ar5omo{display:inline-block;width:50%;font:var(--goa-typography-heading-s)}dd.svelte-ar5omo{display:inline-block}}');
}
function get_each_context$2(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[8] = list[i];
  return child_ctx;
}
function get_each_context_3(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[14] = list[i][0];
  child_ctx[15] = list[i][1];
  return child_ctx;
}
function get_each_context_1(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[11] = list[i];
  child_ctx[13] = i;
  return child_ctx;
}
function get_each_context_2(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[14] = list[i][0];
  child_ctx[15] = list[i][1];
  return child_ctx;
}
function create_if_block$m(ctx) {
  let each_1_anchor;
  let each_value = ensure_array_like(
    /*_state*/
    ctx[1].history
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
  }
  return {
    c() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(target, anchor);
        }
      }
      insert(target, each_1_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*_state, Object, formatValue, Array, changePage, formatName*/
      14) {
        each_value = ensure_array_like(
          /*_state*/
          ctx2[1].history
        );
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context$2(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block$2(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_if_block_1$b(ctx) {
  let goa_container;
  let div3;
  let div0;
  let t0_value = formatName(
    /*page*/
    ctx[8]
  ) + "";
  let t0;
  let t1;
  let div1;
  let goa_link;
  let t3;
  let div2;
  let show_if;
  let t4;
  let mounted;
  let dispose;
  function click_handler(...args) {
    return (
      /*click_handler*/
      ctx[4](
        /*page*/
        ctx[8],
        ...args
      )
    );
  }
  function select_block_type(ctx2, dirty) {
    if (dirty & /*_state*/
    2) show_if = null;
    if (show_if == null) show_if = !!Array.isArray(
      /*_state*/
      ctx2[1].form[
        /*page*/
        ctx2[8]
      ]
    );
    if (show_if) return create_if_block_2$7;
    return create_else_block$7;
  }
  let current_block_type = select_block_type(ctx, -1);
  let if_block = current_block_type(ctx);
  return {
    c() {
      goa_container = element("goa-container");
      div3 = element("div");
      div0 = element("div");
      t0 = text(t0_value);
      t1 = space();
      div1 = element("div");
      goa_link = element("goa-link");
      goa_link.textContent = "Change";
      t3 = space();
      div2 = element("div");
      if_block.c();
      t4 = space();
      attr(div0, "class", "page svelte-ar5omo");
      set_custom_element_data(goa_link, "leadingicon", "pencil");
      attr(div1, "class", "action svelte-ar5omo");
      attr(div2, "class", "details svelte-ar5omo");
      attr(div3, "class", "summary svelte-ar5omo");
    },
    m(target, anchor) {
      insert(target, goa_container, anchor);
      append(goa_container, div3);
      append(div3, div0);
      append(div0, t0);
      append(div3, t1);
      append(div3, div1);
      append(div1, goa_link);
      append(div3, t3);
      append(div3, div2);
      if_block.m(div2, null);
      append(goa_container, t4);
      if (!mounted) {
        dispose = listen(goa_link, "click", click_handler);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*_state*/
      2 && t0_value !== (t0_value = formatName(
        /*page*/
        ctx[8]
      ) + "")) set_data(t0, t0_value);
      if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
        if_block.p(ctx, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx);
        if (if_block) {
          if_block.c();
          if_block.m(div2, null);
        }
      }
    },
    d(detaching) {
      if (detaching) {
        detach(goa_container);
      }
      if_block.d();
      mounted = false;
      dispose();
    }
  };
}
function create_else_block$7(ctx) {
  let each_1_anchor;
  let each_value_3 = ensure_array_like(Object.entries(
    /*_state*/
    ctx[1].form[
      /*page*/
      ctx[8]
    ]
  ));
  let each_blocks = [];
  for (let i = 0; i < each_value_3.length; i += 1) {
    each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
  }
  return {
    c() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(target, anchor);
        }
      }
      insert(target, each_1_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*formatValue, Object, _state*/
      10) {
        each_value_3 = ensure_array_like(Object.entries(
          /*_state*/
          ctx2[1].form[
            /*page*/
            ctx2[8]
          ]
        ));
        let i;
        for (i = 0; i < each_value_3.length; i += 1) {
          const child_ctx = get_each_context_3(ctx2, each_value_3, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block_3(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value_3.length;
      }
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_if_block_2$7(ctx) {
  let each_1_anchor;
  let each_value_1 = ensure_array_like(
    /*_state*/
    ctx[1].form[
      /*page*/
      ctx[8]
    ]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value_1.length; i += 1) {
    each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
  }
  return {
    c() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(target, anchor);
        }
      }
      insert(target, each_1_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*Object, _state, formatValue*/
      10) {
        each_value_1 = ensure_array_like(
          /*_state*/
          ctx2[1].form[
            /*page*/
            ctx2[8]
          ]
        );
        let i;
        for (i = 0; i < each_value_1.length; i += 1) {
          const child_ctx = get_each_context_1(ctx2, each_value_1, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block_1(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value_1.length;
      }
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_each_block_3(ctx) {
  let dl2;
  let dt;
  let t0_value = (
    /*value*/
    ctx[15].label + ""
  );
  let t0;
  let dd2;
  let t1_value = (
    /*formatValue*/
    ctx[3](
      /*value*/
      ctx[15].value
    ) + ""
  );
  let t1;
  return {
    c() {
      dl2 = element("dl");
      dt = element("dt");
      t0 = text(t0_value);
      dd2 = element("dd");
      t1 = text(t1_value);
      attr(dt, "class", "svelte-ar5omo");
      attr(dd2, "class", "svelte-ar5omo");
      attr(dl2, "class", "svelte-ar5omo");
    },
    m(target, anchor) {
      insert(target, dl2, anchor);
      append(dl2, dt);
      append(dt, t0);
      append(dl2, dd2);
      append(dd2, t1);
    },
    p(ctx2, dirty) {
      if (dirty & /*_state*/
      2 && t0_value !== (t0_value = /*value*/
      ctx2[15].label + "")) set_data(t0, t0_value);
      if (dirty & /*_state*/
      2 && t1_value !== (t1_value = /*formatValue*/
      ctx2[3](
        /*value*/
        ctx2[15].value
      ) + "")) set_data(t1, t1_value);
    },
    d(detaching) {
      if (detaching) {
        detach(dl2);
      }
    }
  };
}
function create_if_block_3$7(ctx) {
  let goa_divider;
  return {
    c() {
      goa_divider = element("goa-divider");
    },
    m(target, anchor) {
      insert(target, goa_divider, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(goa_divider);
      }
    }
  };
}
function create_each_block_2(ctx) {
  let dl2;
  let dt;
  let t0_value = (
    /*value*/
    ctx[15].label + ""
  );
  let t0;
  let dd2;
  let t1_value = (
    /*formatValue*/
    ctx[3](
      /*value*/
      ctx[15].value
    ) + ""
  );
  let t1;
  return {
    c() {
      dl2 = element("dl");
      dt = element("dt");
      t0 = text(t0_value);
      dd2 = element("dd");
      t1 = text(t1_value);
      attr(dt, "class", "svelte-ar5omo");
      attr(dd2, "class", "svelte-ar5omo");
      attr(dl2, "class", "svelte-ar5omo");
    },
    m(target, anchor) {
      insert(target, dl2, anchor);
      append(dl2, dt);
      append(dt, t0);
      append(dl2, dd2);
      append(dd2, t1);
    },
    p(ctx2, dirty) {
      if (dirty & /*_state*/
      2 && t0_value !== (t0_value = /*value*/
      ctx2[15].label + "")) set_data(t0, t0_value);
      if (dirty & /*_state*/
      2 && t1_value !== (t1_value = /*formatValue*/
      ctx2[3](
        /*value*/
        ctx2[15].value
      ) + "")) set_data(t1, t1_value);
    },
    d(detaching) {
      if (detaching) {
        detach(dl2);
      }
    }
  };
}
function create_each_block_1(ctx) {
  let t2;
  let each_1_anchor;
  let if_block = (
    /*i*/
    ctx[13] > 0 && create_if_block_3$7()
  );
  let each_value_2 = ensure_array_like(Object.entries(
    /*item*/
    ctx[11]
  ));
  let each_blocks = [];
  for (let i = 0; i < each_value_2.length; i += 1) {
    each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
  }
  return {
    c() {
      if (if_block) if_block.c();
      t2 = space();
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      if (if_block) if_block.m(target, anchor);
      insert(target, t2, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(target, anchor);
        }
      }
      insert(target, each_1_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*formatValue, Object, _state*/
      10) {
        each_value_2 = ensure_array_like(Object.entries(
          /*item*/
          ctx2[11]
        ));
        let i;
        for (i = 0; i < each_value_2.length; i += 1) {
          const child_ctx = get_each_context_2(ctx2, each_value_2, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block_2(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value_2.length;
      }
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
        detach(each_1_anchor);
      }
      if (if_block) if_block.d(detaching);
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_each_block$2(ctx) {
  let if_block_anchor;
  let if_block = (
    /*_state*/
    ctx[1].form[
      /*page*/
      ctx[8]
    ] && create_if_block_1$b(ctx)
  );
  return {
    c() {
      if (if_block) if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block) if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (
        /*_state*/
        ctx2[1].form[
          /*page*/
          ctx2[8]
        ]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block_1$b(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block) if_block.d(detaching);
    }
  };
}
function create_fragment$E(ctx) {
  let div;
  let if_block = (
    /*_state*/
    ctx[1] && create_if_block$m(ctx)
  );
  return {
    c() {
      div = element("div");
      if (if_block) if_block.c();
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (if_block) if_block.m(div, null);
      ctx[5](div);
    },
    p(ctx2, [dirty]) {
      if (
        /*_state*/
        ctx2[1]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block$m(ctx2);
          if_block.c();
          if_block.m(div, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (if_block) if_block.d();
      ctx[5](null);
    }
  };
}
function formatName(value) {
  if (!value) return "";
  const str = value.replace(/-/g, " ");
  return str[0].toUpperCase() + str.slice(1);
}
function instance$E($$self, $$props, $$invalidate) {
  let _rootEl;
  let _state;
  onMount(() => {
    addRelayListener();
    relay(_rootEl, FormSummaryBindMsg, { el: _rootEl }, { bubbles: true, timeout: 100 });
  });
  function addRelayListener() {
    receive(_rootEl, (action, data) => {
      switch (action) {
        case FormDispatchStateMsg:
          onFormDispatch(data);
          break;
      }
    });
  }
  function onFormDispatch(detail) {
    $$invalidate(1, _state = detail);
  }
  function changePage(e, pageId) {
    relay(_rootEl, FormSummaryEditPageMsg, { id: pageId }, { bubbles: true });
    e.preventDefault();
  }
  function formatValue(value) {
    let parsedDate;
    if (typeof value === "string") {
      try {
        parsedDate = parseISO(value);
        return format(parsedDate, "PPP");
      } catch (e) {
        return value;
      }
    }
    if (isDate(value)) {
      return format(value, "PPP");
    }
    return value;
  }
  const click_handler = (page, e) => changePage(e, page);
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _rootEl = $$value;
      $$invalidate(0, _rootEl);
    });
  }
  return [_rootEl, _state, changePage, formatValue, click_handler, div_binding];
}
class FormSummary extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$E, create_fragment$E, safe_not_equal, {}, add_css$A);
  }
}
customElements.define("goa-public-form-summary", create_custom_element(FormSummary, {}, [], [], true));
function create_fragment$D(ctx) {
  let form;
  let form_style_value;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[8].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[7],
    null
  );
  return {
    c() {
      form = element("form");
      if (default_slot) default_slot.c();
      attr(form, "style", form_style_value = calculateMargin(
        /*mt*/
        ctx[0],
        /*mr*/
        ctx[1],
        /*mb*/
        ctx[2],
        /*ml*/
        ctx[3]
      ));
    },
    m(target, anchor) {
      insert(target, form, anchor);
      if (default_slot) {
        default_slot.m(form, null);
      }
      ctx[9](form);
      current = true;
    },
    p(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty[0] & /*$$scope*/
        128)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[7],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[7]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[7],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty[0] & /*mt, mr, mb, ml*/
      15 && form_style_value !== (form_style_value = calculateMargin(
        /*mt*/
        ctx2[0],
        /*mr*/
        ctx2[1],
        /*mb*/
        ctx2[2],
        /*ml*/
        ctx2[3]
      ))) {
        attr(form, "style", form_style_value);
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(form);
      }
      if (default_slot) default_slot.d(detaching);
      ctx[9](null);
    }
  };
}
function instance$D($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { name } = $$props;
  let { storage = "none" } = $$props;
  let { mt = null } = $$props;
  let { mr = null } = $$props;
  let { mb: mb2 = null } = $$props;
  let { ml: ml2 = null } = $$props;
  let _formEl;
  let _fieldsets = {};
  let _formFields = {};
  let _formSummary;
  let _formItemBindingTimeoutId;
  let _state = {
    form: {},
    history: [],
    editting: "",
    lastModified: void 0
  };
  let lastPage;
  onMount(() => {
    restoreState();
    addWindowPopStateListener();
    addRelayListener();
    dispatchStateChange();
    dispatch$1(_formEl, "_bind", { el: _formEl });
    setTimeout(bindChildren, 100);
  });
  function addRelayListener() {
    receive(_formEl, (type, data, e) => {
      switch (type) {
        case FieldsetBindMsg:
          onFieldsetBind(data);
          e.stopPropagation();
          break;
        case FieldsetChangeMsg:
          onFieldsetChange(data);
          break;
        case FieldsetMountFormItemMsg:
          onFieldsetMountFormItem(data);
          break;
        case FormSummaryBindMsg:
          onFormSummaryBind(data);
          break;
        case ExternalContinueMsg:
          onContinue(data);
          break;
        case FormSummaryEditPageMsg:
          onSetPage(data);
          break;
        case FieldsetSubmitMsg:
          onFormComplete();
          break;
        case ExternalAppendDataMsg:
          onAppendData(data);
          break;
        case ExternalAlterDataMsg:
          onAlterData(data);
          break;
        case ExternalResetStateMsg:
          resetState();
          break;
      }
    });
  }
  function onAlterData(detail) {
    const state = _state.form[detail.id];
    if (!Array.isArray(state)) {
      return;
    }
    switch (detail.operation) {
      case "edit": {
        _state.form[detail.id][detail.index] = detail.data || {};
        break;
      }
      case "remove": {
        const temp = [...state];
        temp.splice(detail.index, 1);
        _state.form[detail.id] = [...temp];
        break;
      }
    }
    dispatchStateChange();
    saveState(_state);
  }
  function onAppendData(detail) {
    const { id: id2, data } = detail;
    const temp = [..._state.form[id2] || []];
    temp.push(data);
    _state.form[id2] = [...temp];
    dispatchStateChange();
    saveState(_state);
  }
  function onFormSummaryBind(detail) {
    _formSummary = detail.el;
    syncFormSummaryState();
  }
  function onFieldsetMountFormItem(detail) {
    const { name: name2, el: el2, id: id2 } = detail;
    const old = _formFields[id2] || {};
    _formFields[id2] = { ...old, [name2]: el2 };
  }
  function onFieldsetBind(detail) {
    _fieldsets[detail.id] = detail;
    if (_formItemBindingTimeoutId) {
      clearTimeout(_formItemBindingTimeoutId);
    }
    _formItemBindingTimeoutId = setTimeout(
      () => {
        if (lastPage) {
          const item = _fieldsets[lastPage];
          sendToggleActiveStateMsg(item.id);
        } else {
          const [id2] = Object.entries(_fieldsets)[0];
          _state.history.push(id2);
          saveState(_state);
          sendToggleActiveStateMsg(id2);
        }
      },
      100
    );
  }
  function onFieldsetChange(detail) {
    const { id: id2, state } = detail;
    _state.form[id2] = state;
    _state.lastModified = /* @__PURE__ */ new Date();
    saveState(_state);
  }
  function onContinue(detail) {
    const { next } = detail;
    dispatchStateChange();
    if (_state.editting) {
      resetFieldsetErrors(_state.editting);
      const oldNextIndex = _state.history.indexOf(_state.editting) + 1;
      const jumpToSummary = _state.history[oldNextIndex] === next;
      if (jumpToSummary) {
        const last = _state.history[_state.history.length - 1];
        sendToggleActiveStateMsg(last);
      } else {
        _state.history = [..._state.history.slice(0, oldNextIndex), next];
        sendToggleActiveStateMsg(next);
        sendEdittingStateMsg();
        _state.editting = "";
      }
    } else {
      const page = _state.history[_state.history.length - 1];
      resetFieldsetErrors(page);
      if (_state.history[_state.history.length - 1] !== next) {
        _state.history.push(next);
      }
      sendToggleActiveStateMsg(next);
    }
    syncFormSummaryState();
    saveState(_state);
  }
  function dispatchStateChange() {
    dispatch$1(_formEl, "_stateChange", { ..._state }, { bubbles: true, timeout: 100 });
  }
  function syncFormSummaryState() {
    relay(_formSummary, FormDispatchStateMsg, _state);
  }
  function onSetPage(detail) {
    _state.editting = detail.id;
    sendToggleActiveStateMsg(detail.id);
    sendEdittingStateMsg();
  }
  function sendEdittingStateMsg() {
    for (const fieldset of Object.values(_fieldsets)) {
      relay(fieldset.el, FormDispatchStateMsg, _state);
    }
  }
  function onFormComplete() {
    const cleanedState = _state.history.reduce(
      (acc, fieldsetId) => {
        acc[fieldsetId] = _state.form[fieldsetId];
        return acc;
      },
      {}
    );
    dispatch$1(_formEl, "_complete", { form: cleanedState }, { bubbles: true });
  }
  function resetFieldsetErrors(name2) {
    relay(_fieldsets[name2].el, FormResetErrorsMsg, null);
  }
  function sendToggleActiveStateMsg(page) {
    const keys = Object.keys(_fieldsets);
    keys.forEach((key) => {
      relay(_fieldsets[key].el, FormToggleActiveMsg, {
        first: false,
        //key === _firstElement,
        active: key === page
      });
    });
  }
  function addWindowPopStateListener() {
    window.addEventListener("popstate", (e) => {
      const history2 = [..._state.history];
      history2.pop();
      _state.history = history2;
      saveState(_state);
      sendToggleActiveStateMsg(history2[history2.length - 1]);
      e.stopPropagation();
    });
  }
  function getStorage() {
    if (storage === "none") return null;
    return storage === "local" ? localStorage : sessionStorage;
  }
  function saveState(state) {
    const storage2 = getStorage();
    storage2 == null ? void 0 : storage2.setItem(name, JSON.stringify(state));
  }
  function restoreState() {
    const storage2 = getStorage();
    const raw = storage2 == null ? void 0 : storage2.getItem(name);
    if (!raw) {
      return;
    }
    _state = JSON.parse(raw);
    let historyPageCount = _state.history.length;
    if (historyPageCount > 0) {
      lastPage = _state.history[historyPageCount - 1];
    }
  }
  function bindChildren() {
    var _a;
    for (const [name2, detail] of Object.entries(_fieldsets)) {
      const value = _state.form[name2];
      if (value) relay(detail.el, FormSetFieldsetMsg, { name: name2, value });
    }
    for (const id2 of Object.keys(_formFields)) {
      for (const [name2, el2] of Object.entries(_formFields[id2])) {
        const fieldset = _state.form[id2];
        if (Array.isArray(fieldset)) {
          console.log("Array is multiple values!!", fieldset);
        } else {
          const value = (_a = fieldset == null ? void 0 : fieldset[name2]) == null ? void 0 : _a.value;
          if (value) {
            relay(el2, FormSetValueMsg, { name: name2, value });
          }
        }
      }
    }
  }
  function resetState() {
    var _a;
    const storage2 = getStorage();
    if (!storage2) return;
    storage2.removeItem(name);
    _state = {
      form: {},
      history: [(_a = _fieldsets[0]) == null ? void 0 : _a.id],
      editting: "",
      lastModified: void 0
    };
  }
  function form_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _formEl = $$value;
      $$invalidate(4, _formEl);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("name" in $$props2) $$invalidate(5, name = $$props2.name);
    if ("storage" in $$props2) $$invalidate(6, storage = $$props2.storage);
    if ("mt" in $$props2) $$invalidate(0, mt = $$props2.mt);
    if ("mr" in $$props2) $$invalidate(1, mr = $$props2.mr);
    if ("mb" in $$props2) $$invalidate(2, mb2 = $$props2.mb);
    if ("ml" in $$props2) $$invalidate(3, ml2 = $$props2.ml);
    if ("$$scope" in $$props2) $$invalidate(7, $$scope = $$props2.$$scope);
  };
  return [mt, mr, mb2, ml2, _formEl, name, storage, $$scope, slots, form_binding];
}
class Form extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$D,
      create_fragment$D,
      safe_not_equal,
      {
        name: 5,
        storage: 6,
        mt: 0,
        mr: 1,
        mb: 2,
        ml: 3
      },
      null,
      [-1, -1]
    );
  }
  get name() {
    return this.$$.ctx[5];
  }
  set name(name) {
    this.$$set({ name });
    flush();
  }
  get storage() {
    return this.$$.ctx[6];
  }
  set storage(storage) {
    this.$$set({ storage });
    flush();
  }
  get mt() {
    return this.$$.ctx[0];
  }
  set mt(mt) {
    this.$$set({ mt });
    flush();
  }
  get mr() {
    return this.$$.ctx[1];
  }
  set mr(mr) {
    this.$$set({ mr });
    flush();
  }
  get mb() {
    return this.$$.ctx[2];
  }
  set mb(mb2) {
    this.$$set({ mb: mb2 });
    flush();
  }
  get ml() {
    return this.$$.ctx[3];
  }
  set ml(ml2) {
    this.$$set({ ml: ml2 });
    flush();
  }
}
customElements.define("goa-public-form", create_custom_element(Form, { "name": {}, "storage": {}, "mt": {}, "mr": {}, "mb": {}, "ml": {} }, ["default"], [], true));
function add_css$z(target) {
  append_styles(target, "svelte-1rjq4hq", ".description.svelte-1rjq4hq{min-width:40ch}");
}
function create_fragment$C(ctx) {
  let goa_block;
  let div;
  let t0;
  let goa_spacer;
  let t1;
  let goa_badge;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[4].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[3],
    null
  );
  return {
    c() {
      goa_block = element("goa-block");
      div = element("div");
      if (default_slot) default_slot.c();
      t0 = space();
      goa_spacer = element("goa-spacer");
      t1 = space();
      goa_badge = element("goa-badge");
      attr(div, "class", "description svelte-1rjq4hq");
      set_custom_element_data(goa_spacer, "hspacing", "fill");
      set_custom_element_data(
        goa_spacer,
        "type",
        /*status*/
        ctx[0]
      );
      set_custom_element_data(
        goa_badge,
        "type",
        /*_badgeType*/
        ctx[2]
      );
      set_custom_element_data(
        goa_badge,
        "content",
        /*_badgeContent*/
        ctx[1]
      );
    },
    m(target, anchor) {
      insert(target, goa_block, anchor);
      append(goa_block, div);
      if (default_slot) {
        default_slot.m(div, null);
      }
      append(goa_block, t0);
      append(goa_block, goa_spacer);
      append(goa_block, t1);
      append(goa_block, goa_badge);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        8)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[3],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[3]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[3],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*status*/
      1) {
        set_custom_element_data(
          goa_spacer,
          "type",
          /*status*/
          ctx2[0]
        );
      }
      if (!current || dirty & /*_badgeType*/
      4) {
        set_custom_element_data(
          goa_badge,
          "type",
          /*_badgeType*/
          ctx2[2]
        );
      }
      if (!current || dirty & /*_badgeContent*/
      2) {
        set_custom_element_data(
          goa_badge,
          "content",
          /*_badgeContent*/
          ctx2[1]
        );
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(goa_block);
      }
      if (default_slot) default_slot.d(detaching);
    }
  };
}
function instance$C($$self, $$props, $$invalidate) {
  let _badgeType;
  let _badgeContent;
  let { $$slots: slots = {}, $$scope } = $$props;
  let { status = "cannot-start" } = $$props;
  $$self.$$set = ($$props2) => {
    if ("status" in $$props2) $$invalidate(0, status = $$props2.status);
    if ("$$scope" in $$props2) $$invalidate(3, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*status*/
    1) {
      $$invalidate(2, _badgeType = status === "completed" ? "success" : status === "not-started" ? "information" : "light");
    }
    if ($$self.$$.dirty & /*status*/
    1) {
      $$invalidate(1, _badgeContent = status === "completed" ? "Completed" : status === "not-started" ? "Not started" : "Cannot start yet");
    }
  };
  return [status, _badgeContent, _badgeType, $$scope, slots];
}
class Task extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$C, create_fragment$C, safe_not_equal, { status: 0 }, add_css$z);
  }
  get status() {
    return this.$$.ctx[0];
  }
  set status(status) {
    this.$$set({ status });
    flush();
  }
}
customElements.define("goa-public-form-task", create_custom_element(Task, { "status": {} }, ["default"], [], true));
function add_css$y(target) {
  append_styles(target, "svelte-1ym28a", "fieldset.svelte-1ym28a{border:none;padding:0}");
}
function create_if_block$l(ctx) {
  let goa_text;
  let t2;
  return {
    c() {
      goa_text = element("goa-text");
      t2 = text(
        /*heading*/
        ctx[0]
      );
      set_custom_element_data(goa_text, "as", "h2");
      set_custom_element_data(goa_text, "size", "heading-l");
    },
    m(target, anchor) {
      insert(target, goa_text, anchor);
      append(goa_text, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*heading*/
      1) set_data(
        t2,
        /*heading*/
        ctx2[0]
      );
    },
    d(detaching) {
      if (detaching) {
        detach(goa_text);
      }
    }
  };
}
function create_fragment$B(ctx) {
  let section;
  let fieldset;
  let t2;
  let fieldset_style_value;
  let current;
  let if_block = (
    /*heading*/
    ctx[0] && create_if_block$l(ctx)
  );
  const default_slot_template = (
    /*#slots*/
    ctx[6].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[5],
    null
  );
  return {
    c() {
      section = element("section");
      fieldset = element("fieldset");
      if (if_block) if_block.c();
      t2 = space();
      if (default_slot) default_slot.c();
      attr(fieldset, "style", fieldset_style_value = calculateMargin(
        /*mt*/
        ctx[1],
        /*mr*/
        ctx[2],
        /*mb*/
        ctx[3],
        /*ml*/
        ctx[4]
      ));
      attr(fieldset, "class", "svelte-1ym28a");
    },
    m(target, anchor) {
      insert(target, section, anchor);
      append(section, fieldset);
      if (if_block) if_block.m(fieldset, null);
      append(fieldset, t2);
      if (default_slot) {
        default_slot.m(fieldset, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*heading*/
        ctx2[0]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block$l(ctx2);
          if_block.c();
          if_block.m(fieldset, t2);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        32)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[5],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[5]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[5],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*mt, mr, mb, ml*/
      30 && fieldset_style_value !== (fieldset_style_value = calculateMargin(
        /*mt*/
        ctx2[1],
        /*mr*/
        ctx2[2],
        /*mb*/
        ctx2[3],
        /*ml*/
        ctx2[4]
      ))) {
        attr(fieldset, "style", fieldset_style_value);
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(section);
      }
      if (if_block) if_block.d();
      if (default_slot) default_slot.d(detaching);
    }
  };
}
function instance$B($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { heading = "" } = $$props;
  let { mt = null } = $$props;
  let { mr = null } = $$props;
  let { mb: mb2 = null } = $$props;
  let { ml: ml2 = null } = $$props;
  $$self.$$set = ($$props2) => {
    if ("heading" in $$props2) $$invalidate(0, heading = $$props2.heading);
    if ("mt" in $$props2) $$invalidate(1, mt = $$props2.mt);
    if ("mr" in $$props2) $$invalidate(2, mr = $$props2.mr);
    if ("mb" in $$props2) $$invalidate(3, mb2 = $$props2.mb);
    if ("ml" in $$props2) $$invalidate(4, ml2 = $$props2.ml);
    if ("$$scope" in $$props2) $$invalidate(5, $$scope = $$props2.$$scope);
  };
  return [heading, mt, mr, mb2, ml2, $$scope, slots];
}
class TaskList extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$B, create_fragment$B, safe_not_equal, { heading: 0, mt: 1, mr: 2, mb: 3, ml: 4 }, add_css$y);
  }
  get heading() {
    return this.$$.ctx[0];
  }
  set heading(heading) {
    this.$$set({ heading });
    flush();
  }
  get mt() {
    return this.$$.ctx[1];
  }
  set mt(mt) {
    this.$$set({ mt });
    flush();
  }
  get mr() {
    return this.$$.ctx[2];
  }
  set mr(mr) {
    this.$$set({ mr });
    flush();
  }
  get mb() {
    return this.$$.ctx[3];
  }
  set mb(mb2) {
    this.$$set({ mb: mb2 });
    flush();
  }
  get ml() {
    return this.$$.ctx[4];
  }
  set ml(ml2) {
    this.$$set({ ml: ml2 });
    flush();
  }
}
customElements.define("goa-public-form-task-list", create_custom_element(TaskList, { "heading": {}, "mt": {}, "mr": {}, "mb": {}, "ml": {} }, ["default"], [], true));
function add_css$x(target) {
  append_styles(target, "svelte-412iwn", ":host{box-sizing:border-box;font-family:var(--goa-font-family-sans);--goa-form-item-label-typography:var(--goa-typography-heading-s);--goa-form-item-label-padding-bottom:var(--goa-space-s);--goa-form-item-label-large-typography:var(--goa-typography-heading-l);--goa-form-item-label-large-padding-bottom:var(--goa-space-m);--goa-form-item-optional-label-typography:var(--goa-typography-body-xs);--goa-form-item-optional-label-color:var(--goa-color-greyscale-700);--goa-form-item-message-typography:var(--goa-typography-body-xs);--goa-form-item-message-margin-top:var(--goa-space-s);--goa-form-item-message-gap:var(--goa-space-2xs);--goa-form-item-error-message-color:var(--goa-color-interactive-error);--goa-form-item-help-message-color:var(--goa-color-text-default)}.svelte-412iwn.svelte-412iwn{box-sizing:border-box}.label.svelte-412iwn.svelte-412iwn{display:block;font:var(--goa-form-item-label-typography);padding-bottom:var(--goa-form-item-label-padding-bottom)}.label.large.svelte-412iwn.svelte-412iwn{font:var(--goa-form-item-label-large-typography);padding-bottom:var(--goa-form-item-label-large-padding-bottom)}.label.svelte-412iwn em.svelte-412iwn{font:var(--goa-form-item-optional-label-typography);color:var(--goa-form-item-optional-label-color);margin-left:var(--goa-space-2xs)}.error-msg.svelte-412iwn.svelte-412iwn{display:flex;align-items:flex-start;gap:var(--goa-space-2xs);font:var(--goa-form-item-message-typography);color:var(--goa-form-item-error-message-color);margin-top:var(--goa-form-item-message-margin-top)}.error-msg.svelte-412iwn goa-icon.svelte-412iwn{transform:translateY(calc(var(--goa-space-2xs) * -1))}.help-msg.svelte-412iwn.svelte-412iwn{font:var(--goa-form-item-message-typography);color:var(--goa-form-item-help-message-color);margin-top:var(--goa-form-item-message-margin-top)}.error-msg.svelte-412iwn+.help-msg.svelte-412iwn{margin-top:var(--goa-form-item-message-gap)}");
}
const get_helptext_slot_changes = (dirty) => ({});
const get_helptext_slot_context = (ctx) => ({});
const get_error_slot_changes = (dirty) => ({});
const get_error_slot_context = (ctx) => ({});
function create_if_block_2$6(ctx) {
  let label_1;
  let t0;
  let t1;
  let show_if = (
    /*requirement*/
    ctx[9] && /*REQUIREMENT_TYPES*/
    ctx[12].includes(
      /*requirement*/
      ctx[9]
    )
  );
  let label_1_class_value;
  let if_block = show_if && create_if_block_3$6(ctx);
  return {
    c() {
      label_1 = element("label");
      t0 = text(
        /*label*/
        ctx[6]
      );
      t1 = space();
      if (if_block) if_block.c();
      attr(label_1, "class", label_1_class_value = null_to_empty(`label ${/*labelsize*/
      ctx[7]}`) + " svelte-412iwn");
    },
    m(target, anchor) {
      insert(target, label_1, anchor);
      append(label_1, t0);
      append(label_1, t1);
      if (if_block) if_block.m(label_1, null);
    },
    p(ctx2, dirty) {
      if (dirty & /*label*/
      64) set_data(
        t0,
        /*label*/
        ctx2[6]
      );
      if (dirty & /*requirement*/
      512) show_if = /*requirement*/
      ctx2[9] && /*REQUIREMENT_TYPES*/
      ctx2[12].includes(
        /*requirement*/
        ctx2[9]
      );
      if (show_if) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block_3$6(ctx2);
          if_block.c();
          if_block.m(label_1, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (dirty & /*labelsize*/
      128 && label_1_class_value !== (label_1_class_value = null_to_empty(`label ${/*labelsize*/
      ctx2[7]}`) + " svelte-412iwn")) {
        attr(label_1, "class", label_1_class_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(label_1);
      }
      if (if_block) if_block.d();
    }
  };
}
function create_if_block_3$6(ctx) {
  let em;
  let t0;
  let t1;
  let t2;
  return {
    c() {
      em = element("em");
      t0 = text("(");
      t1 = text(
        /*requirement*/
        ctx[9]
      );
      t2 = text(")");
      attr(em, "class", "svelte-412iwn");
    },
    m(target, anchor) {
      insert(target, em, anchor);
      append(em, t0);
      append(em, t1);
      append(em, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*requirement*/
      512) set_data(
        t1,
        /*requirement*/
        ctx2[9]
      );
    },
    d(detaching) {
      if (detaching) {
        detach(em);
      }
    }
  };
}
function create_if_block_1$a(ctx) {
  let div;
  let goa_icon;
  let t2;
  let current;
  const error_slot_template = (
    /*#slots*/
    ctx[16].error
  );
  const error_slot = create_slot(
    error_slot_template,
    ctx,
    /*$$scope*/
    ctx[15],
    get_error_slot_context
  );
  const error_slot_or_fallback = error_slot || fallback_block_1(ctx);
  return {
    c() {
      div = element("div");
      goa_icon = element("goa-icon");
      t2 = space();
      if (error_slot_or_fallback) error_slot_or_fallback.c();
      set_custom_element_data(goa_icon, "type", "warning");
      set_custom_element_data(goa_icon, "size", "small");
      set_custom_element_data(goa_icon, "theme", "filled");
      set_custom_element_data(goa_icon, "mt", "2xs");
      set_custom_element_data(goa_icon, "class", "svelte-412iwn");
      attr(div, "class", "error-msg svelte-412iwn");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, goa_icon);
      append(div, t2);
      if (error_slot_or_fallback) {
        error_slot_or_fallback.m(div, null);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (error_slot) {
        if (error_slot.p && (!current || dirty & /*$$scope*/
        32768)) {
          update_slot_base(
            error_slot,
            error_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[15],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[15]
            ) : get_slot_changes(
              error_slot_template,
              /*$$scope*/
              ctx2[15],
              dirty,
              get_error_slot_changes
            ),
            get_error_slot_context
          );
        }
      } else {
        if (error_slot_or_fallback && error_slot_or_fallback.p && (!current || dirty & /*error*/
        1)) {
          error_slot_or_fallback.p(ctx2, !current ? -1 : dirty);
        }
      }
    },
    i(local) {
      if (current) return;
      transition_in(error_slot_or_fallback, local);
      current = true;
    },
    o(local) {
      transition_out(error_slot_or_fallback, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (error_slot_or_fallback) error_slot_or_fallback.d(detaching);
    }
  };
}
function fallback_block_1(ctx) {
  let t2;
  return {
    c() {
      t2 = text(
        /*error*/
        ctx[0]
      );
    },
    m(target, anchor) {
      insert(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*error*/
      1) set_data(
        t2,
        /*error*/
        ctx2[0]
      );
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_if_block$k(ctx) {
  let div;
  let current;
  const helptext_slot_template = (
    /*#slots*/
    ctx[16].helptext
  );
  const helptext_slot = create_slot(
    helptext_slot_template,
    ctx,
    /*$$scope*/
    ctx[15],
    get_helptext_slot_context
  );
  const helptext_slot_or_fallback = helptext_slot || fallback_block$2(ctx);
  return {
    c() {
      div = element("div");
      if (helptext_slot_or_fallback) helptext_slot_or_fallback.c();
      attr(div, "class", "help-msg svelte-412iwn");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (helptext_slot_or_fallback) {
        helptext_slot_or_fallback.m(div, null);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (helptext_slot) {
        if (helptext_slot.p && (!current || dirty & /*$$scope*/
        32768)) {
          update_slot_base(
            helptext_slot,
            helptext_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[15],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[15]
            ) : get_slot_changes(
              helptext_slot_template,
              /*$$scope*/
              ctx2[15],
              dirty,
              get_helptext_slot_changes
            ),
            get_helptext_slot_context
          );
        }
      } else {
        if (helptext_slot_or_fallback && helptext_slot_or_fallback.p && (!current || dirty & /*helptext*/
        256)) {
          helptext_slot_or_fallback.p(ctx2, !current ? -1 : dirty);
        }
      }
    },
    i(local) {
      if (current) return;
      transition_in(helptext_slot_or_fallback, local);
      current = true;
    },
    o(local) {
      transition_out(helptext_slot_or_fallback, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (helptext_slot_or_fallback) helptext_slot_or_fallback.d(detaching);
    }
  };
}
function fallback_block$2(ctx) {
  let t2;
  return {
    c() {
      t2 = text(
        /*helptext*/
        ctx[8]
      );
    },
    m(target, anchor) {
      insert(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*helptext*/
      256) set_data(
        t2,
        /*helptext*/
        ctx2[8]
      );
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_fragment$A(ctx) {
  let div1;
  let t0;
  let div0;
  let t1;
  let t2;
  let div1_style_value;
  let current;
  let if_block0 = (
    /*label*/
    ctx[6] && create_if_block_2$6(ctx)
  );
  const default_slot_template = (
    /*#slots*/
    ctx[16].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[15],
    null
  );
  let if_block1 = (
    /*$$slots*/
    (ctx[13].error || /*error*/
    ctx[0]) && create_if_block_1$a(ctx)
  );
  let if_block2 = (
    /*$$slots*/
    (ctx[13].helptext || /*helptext*/
    ctx[8]) && create_if_block$k(ctx)
  );
  return {
    c() {
      div1 = element("div");
      if (if_block0) if_block0.c();
      t0 = space();
      div0 = element("div");
      if (default_slot) default_slot.c();
      t1 = space();
      if (if_block1) if_block1.c();
      t2 = space();
      if (if_block2) if_block2.c();
      attr(div0, "class", "form-item-input svelte-412iwn");
      attr(
        div1,
        "data-testid",
        /*testid*/
        ctx[5]
      );
      attr(div1, "style", div1_style_value = `
    ${calculateMargin(
        /*mt*/
        ctx[1],
        /*mr*/
        ctx[2],
        /*mb*/
        ctx[3],
        /*ml*/
        ctx[4]
      )}
    max-width: ${/*maxwidth*/
      ctx[10]};
  `);
      attr(div1, "class", "svelte-412iwn");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      if (if_block0) if_block0.m(div1, null);
      append(div1, t0);
      append(div1, div0);
      if (default_slot) {
        default_slot.m(div0, null);
      }
      append(div1, t1);
      if (if_block1) if_block1.m(div1, null);
      append(div1, t2);
      if (if_block2) if_block2.m(div1, null);
      ctx[17](div1);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*label*/
        ctx2[6]
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_2$6(ctx2);
          if_block0.c();
          if_block0.m(div1, t0);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        32768)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[15],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[15]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[15],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (
        /*$$slots*/
        ctx2[13].error || /*error*/
        ctx2[0]
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & /*$$slots, error*/
          8193) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block_1$a(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(div1, t2);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      if (
        /*$$slots*/
        ctx2[13].helptext || /*helptext*/
        ctx2[8]
      ) {
        if (if_block2) {
          if_block2.p(ctx2, dirty);
          if (dirty & /*$$slots, helptext*/
          8448) {
            transition_in(if_block2, 1);
          }
        } else {
          if_block2 = create_if_block$k(ctx2);
          if_block2.c();
          transition_in(if_block2, 1);
          if_block2.m(div1, null);
        }
      } else if (if_block2) {
        group_outros();
        transition_out(if_block2, 1, 1, () => {
          if_block2 = null;
        });
        check_outros();
      }
      if (!current || dirty & /*testid*/
      32) {
        attr(
          div1,
          "data-testid",
          /*testid*/
          ctx2[5]
        );
      }
      if (!current || dirty & /*mt, mr, mb, ml, maxwidth*/
      1054 && div1_style_value !== (div1_style_value = `
    ${calculateMargin(
        /*mt*/
        ctx2[1],
        /*mr*/
        ctx2[2],
        /*mb*/
        ctx2[3],
        /*ml*/
        ctx2[4]
      )}
    max-width: ${/*maxwidth*/
      ctx2[10]};
  `)) {
        attr(div1, "style", div1_style_value);
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      transition_in(if_block1);
      transition_in(if_block2);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      transition_out(if_block1);
      transition_out(if_block2);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      if (if_block0) if_block0.d();
      if (default_slot) default_slot.d(detaching);
      if (if_block1) if_block1.d();
      if (if_block2) if_block2.d();
      ctx[17](null);
    }
  };
}
function instance$A($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  const $$slots = compute_slots(slots);
  const [REQUIREMENT_TYPES, validateRequirementType] = typeValidator("Requirement type", ["optional", "required"], false);
  const [LABEL_SIZE_TYPES, validateLabelSize] = typeValidator("Label size type", ["regular", "large"], false);
  let { mt = null } = $$props;
  let { mr = null } = $$props;
  let { mb: mb2 = null } = $$props;
  let { ml: ml2 = null } = $$props;
  let { testid = "" } = $$props;
  let { label = "" } = $$props;
  let { labelsize = "regular" } = $$props;
  let { helptext = "" } = $$props;
  let { error = "" } = $$props;
  let { requirement = "" } = $$props;
  let { maxwidth = "none" } = $$props;
  let { id: id2 = "" } = $$props;
  let _rootEl;
  onMount(() => {
    validateRequirementType(requirement);
    validateLabelSize(labelsize);
    bindElement();
    receive(_rootEl, (action, data) => {
      switch (action) {
        case FormFieldMountMsg:
          onInputMount(data);
          break;
        case FieldsetSetErrorMsg:
          onSetError(data);
          break;
        case FieldsetResetErrorsMsg:
          $$invalidate(0, error = "");
          break;
      }
    });
  });
  function onSetError(d) {
    $$invalidate(0, error = d["error"]);
  }
  function bindElement() {
    relay(_rootEl, FormItemMountMsg, { id: id2, label, el: _rootEl }, { bubbles: true, timeout: 10 });
  }
  function onInputMount(props) {
    const { el: el2 } = props;
    const ariaLabel = el2.getAttribute("aria-label");
    if (!ariaLabel || ariaLabel.trim() === "") {
      el2.setAttribute("aria-label", label);
    }
  }
  function div1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _rootEl = $$value;
      $$invalidate(11, _rootEl);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("mt" in $$props2) $$invalidate(1, mt = $$props2.mt);
    if ("mr" in $$props2) $$invalidate(2, mr = $$props2.mr);
    if ("mb" in $$props2) $$invalidate(3, mb2 = $$props2.mb);
    if ("ml" in $$props2) $$invalidate(4, ml2 = $$props2.ml);
    if ("testid" in $$props2) $$invalidate(5, testid = $$props2.testid);
    if ("label" in $$props2) $$invalidate(6, label = $$props2.label);
    if ("labelsize" in $$props2) $$invalidate(7, labelsize = $$props2.labelsize);
    if ("helptext" in $$props2) $$invalidate(8, helptext = $$props2.helptext);
    if ("error" in $$props2) $$invalidate(0, error = $$props2.error);
    if ("requirement" in $$props2) $$invalidate(9, requirement = $$props2.requirement);
    if ("maxwidth" in $$props2) $$invalidate(10, maxwidth = $$props2.maxwidth);
    if ("id" in $$props2) $$invalidate(14, id2 = $$props2.id);
    if ("$$scope" in $$props2) $$invalidate(15, $$scope = $$props2.$$scope);
  };
  return [
    error,
    mt,
    mr,
    mb2,
    ml2,
    testid,
    label,
    labelsize,
    helptext,
    requirement,
    maxwidth,
    _rootEl,
    REQUIREMENT_TYPES,
    $$slots,
    id2,
    $$scope,
    slots,
    div1_binding
  ];
}
class FormItem extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$A,
      create_fragment$A,
      safe_not_equal,
      {
        mt: 1,
        mr: 2,
        mb: 3,
        ml: 4,
        testid: 5,
        label: 6,
        labelsize: 7,
        helptext: 8,
        error: 0,
        requirement: 9,
        maxwidth: 10,
        id: 14
      },
      add_css$x
    );
  }
  get mt() {
    return this.$$.ctx[1];
  }
  set mt(mt) {
    this.$$set({ mt });
    flush();
  }
  get mr() {
    return this.$$.ctx[2];
  }
  set mr(mr) {
    this.$$set({ mr });
    flush();
  }
  get mb() {
    return this.$$.ctx[3];
  }
  set mb(mb2) {
    this.$$set({ mb: mb2 });
    flush();
  }
  get ml() {
    return this.$$.ctx[4];
  }
  set ml(ml2) {
    this.$$set({ ml: ml2 });
    flush();
  }
  get testid() {
    return this.$$.ctx[5];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
  get label() {
    return this.$$.ctx[6];
  }
  set label(label) {
    this.$$set({ label });
    flush();
  }
  get labelsize() {
    return this.$$.ctx[7];
  }
  set labelsize(labelsize) {
    this.$$set({ labelsize });
    flush();
  }
  get helptext() {
    return this.$$.ctx[8];
  }
  set helptext(helptext) {
    this.$$set({ helptext });
    flush();
  }
  get error() {
    return this.$$.ctx[0];
  }
  set error(error) {
    this.$$set({ error });
    flush();
  }
  get requirement() {
    return this.$$.ctx[9];
  }
  set requirement(requirement) {
    this.$$set({ requirement });
    flush();
  }
  get maxwidth() {
    return this.$$.ctx[10];
  }
  set maxwidth(maxwidth) {
    this.$$set({ maxwidth });
    flush();
  }
  get id() {
    return this.$$.ctx[14];
  }
  set id(id2) {
    this.$$set({ id: id2 });
    flush();
  }
}
customElements.define("goa-form-item", create_custom_element(FormItem, { "mt": {}, "mr": {}, "mb": {}, "ml": {}, "testid": {}, "label": {}, "labelsize": {}, "helptext": {}, "error": {}, "requirement": {}, "maxwidth": {}, "id": {} }, ["default", "error", "helptext"], [], true));
function add_css$w(target) {
  append_styles(target, "svelte-20ibvy", ':host{--goa-step-size:2.5rem;--goa-step-padding:var(--goa-space-l);--goa-step-padding-vertical:var(--goa-space-2xs) var(--goa-space-l);--goa-step-typography-label:var(--goa-typography-body-s);--goa-step-typography-label-active:var(--goa-typography-heading-xs);--goa-step-typography-sublabel:var(--goa-typography-body-xs);--goa-step-typography-step-number:var(--goa-typography-heading-xs);--goa-step-color-step-number:var(--goa-color-text-secondary);--goa-step-color-label:var(--goa-color-text-default);--goa-step-color-sublabel:var(--goa-color-text-secondary);--goa-step-border:4px solid var(--goa-step-color-border-active);--goa-step-color-bg:var(--goa-color-greyscale-white);--goa-step-color-border:var(--goa-color-greyscale-400);--goa-step-color-bg-active:var(--goa-color-greyscale-white);--goa-step-color-border-active:var(--goa-color-interactive-default);--goa-step-color-bg-incomplete:var(--goa-color-greyscale-white);--goa-step-color-border-incomplete:var(--goa-color-interactive-default);--goa-step-color-bg-complete:var(--goa-color-interactive-default);--goa-step-color-border-complete:var(--goa-color-interactive-default)}input[type="checkbox"].svelte-20ibvy.svelte-20ibvy{position:absolute;left:-9999px}label.svelte-20ibvy.svelte-20ibvy{display:flex;box-sizing:border-box;height:100%;width:100%;padding:var(--goa-step-padding)}label.svelte-20ibvy.svelte-20ibvy:not([aria-disabled="true"]):not([aria-current="step"]):has(input:focus-visible){outline:var(--goa-color-interactive-focus) solid var(--goa-border-width-l)}label.svelte-20ibvy.svelte-20ibvy:not([aria-disabled="true"]):not([aria-current="step"]):hover{background-color:rgba(0, 0, 0, 0.05);cursor:pointer}label.desktop.svelte-20ibvy.svelte-20ibvy{text-align:center;flex-direction:column;align-items:center}label.desktop.svelte-20ibvy .details.svelte-20ibvy{margin-top:0.75rem}label.mobile.svelte-20ibvy.svelte-20ibvy{flex-direction:row;align-items:center;text-align:start;padding:var(--goa-step-padding-vertical)}label.mobile.svelte-20ibvy .details.svelte-20ibvy{margin-left:var(--goa-space-xs)}.status.svelte-20ibvy.svelte-20ibvy{flex:0 0 auto;display:flex;align-items:center;justify-content:center;box-sizing:border-box;border-radius:999px;border:var(--goa-step-border);background:var(--goa-step-color-bg);height:var(--goa-step-size);width:var(--goa-step-size)}.status.svelte-20ibvy>.svelte-20ibvy{fill:var(--fill-color, var(--goa-step-color-bg-complete));color:var(--fill-color, var(--goa-step-color-bg-complete))}[aria-current="step"].svelte-20ibvy .text.svelte-20ibvy{font:var(--goa-step-typography-label-active)}[data-status="complete"].svelte-20ibvy .status.svelte-20ibvy{background:var(--goa-step-color-bg-complete)}[aria-current="step"][data-status="complete"].svelte-20ibvy .status.svelte-20ibvy{background:var(--goa-step-color-bg-active)}.step-number.svelte-20ibvy.svelte-20ibvy{margin-bottom:var(--font-valign-fix);font:var(--goa-step-typography-step-number);color:var(--goa-step-color-step-number)}label.svelte-20ibvy:not(\n      [data-status="complete"],\n      [data-status="incomplete"],\n      [aria-current="step"]\n    ) .status.svelte-20ibvy{border-color:var(--goa-step-color-border)}.text.svelte-20ibvy.svelte-20ibvy{font:var(--goa-step-typography-label);color:var(--goa-step-color-label)}.subtext.svelte-20ibvy.svelte-20ibvy{margin-top:0.25rem;font:var(--goa-step-typography-sublabel);color:var(--goa-step-color-sublabel)}');
}
function create_else_block$6(ctx) {
  let div;
  let t_value = (
    /*childindex*/
    (ctx[3] || "") + ""
  );
  let t2;
  return {
    c() {
      div = element("div");
      t2 = text(t_value);
      attr(div, "data-testid", "step-number");
      attr(div, "class", "step-number svelte-20ibvy");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*childindex*/
      8 && t_value !== (t_value = /*childindex*/
      (ctx2[3] || "") + "")) set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_if_block_3$5(ctx) {
  let goa_icon;
  return {
    c() {
      goa_icon = element("goa-icon");
      set_custom_element_data(goa_icon, "type", "remove");
      set_custom_element_data(goa_icon, "theme", "filled");
      set_custom_element_data(goa_icon, "class", "svelte-20ibvy");
    },
    m(target, anchor) {
      insert(target, goa_icon, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(goa_icon);
      }
    }
  };
}
function create_if_block_2$5(ctx) {
  let goa_icon;
  return {
    c() {
      goa_icon = element("goa-icon");
      set_custom_element_data(goa_icon, "type", "checkmark");
      set_custom_element_data(goa_icon, "inverted", "");
      set_custom_element_data(goa_icon, "class", "svelte-20ibvy");
    },
    m(target, anchor) {
      insert(target, goa_icon, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(goa_icon);
      }
    }
  };
}
function create_if_block_1$9(ctx) {
  let goa_icon;
  return {
    c() {
      goa_icon = element("goa-icon");
      set_custom_element_data(goa_icon, "type", "pencil");
      set_custom_element_data(goa_icon, "theme", "filled");
      set_custom_element_data(goa_icon, "class", "svelte-20ibvy");
    },
    m(target, anchor) {
      insert(target, goa_icon, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(goa_icon);
      }
    }
  };
}
function create_if_block$j(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      div.textContent = "Partially complete";
      attr(div, "class", "subtext svelte-20ibvy");
      attr(div, "data-testid", "subtext");
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_fragment$z(ctx) {
  let label;
  let input;
  let input_aria_disabled_value;
  let input_disabled_value;
  let t0;
  let div0;
  let t1;
  let div2;
  let div1;
  let t2;
  let t3;
  let label_aria_current_value;
  let label_aria_label_value;
  let mounted;
  let dispose;
  function select_block_type(ctx2, dirty) {
    if (
      /*current*/
      ctx2[2]
    ) return create_if_block_1$9;
    if (
      /*status*/
      ctx2[0] === "complete"
    ) return create_if_block_2$5;
    if (
      /*status*/
      ctx2[0] === "incomplete"
    ) return create_if_block_3$5;
    return create_else_block$6;
  }
  let current_block_type = select_block_type(ctx);
  let if_block0 = current_block_type(ctx);
  let if_block1 = (
    /*status*/
    ctx[0] === "incomplete" && create_if_block$j()
  );
  return {
    c() {
      label = element("label");
      input = element("input");
      t0 = space();
      div0 = element("div");
      if_block0.c();
      t1 = space();
      div2 = element("div");
      div1 = element("div");
      t2 = text(
        /*text*/
        ctx[1]
      );
      t3 = space();
      if (if_block1) if_block1.c();
      attr(
        input,
        "id",
        /*text*/
        ctx[1]
      );
      attr(input, "type", "checkbox");
      input.checked = /*current*/
      ctx[2];
      attr(input, "aria-disabled", input_aria_disabled_value = !/*_isEnabled*/
      ctx[8]);
      input.disabled = input_disabled_value = !/*_isEnabled*/
      ctx[8];
      attr(input, "data-testid", "checkbox");
      attr(input, "class", "svelte-20ibvy");
      attr(div0, "data-testid", "status");
      attr(div0, "class", "status svelte-20ibvy");
      attr(div1, "class", "text svelte-20ibvy");
      attr(div1, "data-testid", "text");
      attr(div2, "class", "details svelte-20ibvy");
      attr(
        label,
        "id",
        /*arialabel*/
        ctx[4]
      );
      attr(label, "role", "listitem");
      attr(label, "tabindex", "-1");
      attr(
        label,
        "for",
        /*text*/
        ctx[1]
      );
      attr(
        label,
        "data-status",
        /*status*/
        ctx[0]
      );
      attr(label, "aria-current", label_aria_current_value = /*current*/
      ctx[2] ? "step" : "false");
      attr(label, "aria-label", label_aria_label_value = /*arialabel*/
      ctx[4] || `${/*text*/
      ctx[1]} ${/*status*/
      ctx[0] || ""}`);
      attr(label, "data-testid", "label");
      attr(label, "class", "svelte-20ibvy");
      toggle_class(
        label,
        "mobile",
        /*_isMobile*/
        ctx[7]
      );
      toggle_class(label, "desktop", !/*_isMobile*/
      ctx[7]);
    },
    m(target, anchor) {
      insert(target, label, anchor);
      append(label, input);
      ctx[11](input);
      append(label, t0);
      append(label, div0);
      if_block0.m(div0, null);
      append(label, t1);
      append(label, div2);
      append(div2, div1);
      append(div1, t2);
      append(div2, t3);
      if (if_block1) if_block1.m(div2, null);
      ctx[12](label);
      if (!mounted) {
        dispose = listen(
          input,
          "click",
          /*onClick*/
          ctx[9]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*text*/
      2) {
        attr(
          input,
          "id",
          /*text*/
          ctx2[1]
        );
      }
      if (dirty & /*current*/
      4) {
        input.checked = /*current*/
        ctx2[2];
      }
      if (dirty & /*_isEnabled*/
      256 && input_aria_disabled_value !== (input_aria_disabled_value = !/*_isEnabled*/
      ctx2[8])) {
        attr(input, "aria-disabled", input_aria_disabled_value);
      }
      if (dirty & /*_isEnabled*/
      256 && input_disabled_value !== (input_disabled_value = !/*_isEnabled*/
      ctx2[8])) {
        input.disabled = input_disabled_value;
      }
      if (current_block_type === (current_block_type = select_block_type(ctx2)) && if_block0) {
        if_block0.p(ctx2, dirty);
      } else {
        if_block0.d(1);
        if_block0 = current_block_type(ctx2);
        if (if_block0) {
          if_block0.c();
          if_block0.m(div0, null);
        }
      }
      if (dirty & /*text*/
      2) set_data(
        t2,
        /*text*/
        ctx2[1]
      );
      if (
        /*status*/
        ctx2[0] === "incomplete"
      ) {
        if (if_block1) ;
        else {
          if_block1 = create_if_block$j();
          if_block1.c();
          if_block1.m(div2, null);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (dirty & /*arialabel*/
      16) {
        attr(
          label,
          "id",
          /*arialabel*/
          ctx2[4]
        );
      }
      if (dirty & /*text*/
      2) {
        attr(
          label,
          "for",
          /*text*/
          ctx2[1]
        );
      }
      if (dirty & /*status*/
      1) {
        attr(
          label,
          "data-status",
          /*status*/
          ctx2[0]
        );
      }
      if (dirty & /*current*/
      4 && label_aria_current_value !== (label_aria_current_value = /*current*/
      ctx2[2] ? "step" : "false")) {
        attr(label, "aria-current", label_aria_current_value);
      }
      if (dirty & /*arialabel, text, status*/
      19 && label_aria_label_value !== (label_aria_label_value = /*arialabel*/
      ctx2[4] || `${/*text*/
      ctx2[1]} ${/*status*/
      ctx2[0] || ""}`)) {
        attr(label, "aria-label", label_aria_label_value);
      }
      if (dirty & /*_isMobile*/
      128) {
        toggle_class(
          label,
          "mobile",
          /*_isMobile*/
          ctx2[7]
        );
      }
      if (dirty & /*_isMobile*/
      128) {
        toggle_class(label, "desktop", !/*_isMobile*/
        ctx2[7]);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(label);
      }
      ctx[11](null);
      if_block0.d();
      if (if_block1) if_block1.d();
      ctx[12](null);
      mounted = false;
      dispose();
    }
  };
}
function instance$z($$self, $$props, $$invalidate) {
  let _isEnabled;
  let { text: text2 } = $$props;
  let { status = void 0 } = $$props;
  let current = false;
  let enabled = false;
  let childindex;
  let arialabel = "";
  let _rootEl;
  let _checkbox;
  let _isMobile;
  onMount(() => {
    _rootEl.addEventListener("form-stepper:resized", (e) => {
      const { mobile } = e.detail;
      $$invalidate(7, _isMobile = mobile);
    });
    _rootEl.addEventListener("formstepper:init", (e) => {
      const ce2 = e;
      $$invalidate(4, arialabel = ce2.detail.ariaLabel);
      $$invalidate(10, enabled = ce2.detail.enabled);
      $$invalidate(3, childindex = ce2.detail.childIndex);
      $$invalidate(2, current = ce2.detail.current);
      $$invalidate(0, status = ce2.detail.status);
    });
    _rootEl.addEventListener("formstepper:enabled:changed", (e) => {
      const ce2 = e;
      $$invalidate(10, enabled = ce2.detail.enabled);
    });
    _rootEl.addEventListener("formstepper:current:changed", (e) => {
      const ce2 = e;
      $$invalidate(10, enabled = true);
      $$invalidate(2, current = ce2.detail.current);
    });
    dispatchInit(_rootEl);
  });
  function dispatchInit(el2) {
    setTimeout(
      () => {
        el2.dispatchEvent(new CustomEvent(
          "formstep:mounted",
          {
            detail: { el: _rootEl, status },
            composed: true,
            bubbles: true
          }
        ));
      },
      10
    );
  }
  function onClick(e) {
    if (!_isEnabled) return;
    $$invalidate(6, _checkbox.checked = !_checkbox.checked, _checkbox);
    _rootEl.dispatchEvent(new CustomEvent(
      "_click",
      {
        composed: true,
        bubbles: true,
        detail: { step: +childindex }
      }
    ));
    e.stopPropagation();
  }
  function input_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _checkbox = $$value;
      $$invalidate(6, _checkbox);
    });
  }
  function label_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _rootEl = $$value;
      $$invalidate(5, _rootEl);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("text" in $$props2) $$invalidate(1, text2 = $$props2.text);
    if ("status" in $$props2) $$invalidate(0, status = $$props2.status);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*enabled, status*/
    1025) {
      $$invalidate(8, _isEnabled = enabled || status === "complete");
    }
  };
  return [
    status,
    text2,
    current,
    childindex,
    arialabel,
    _rootEl,
    _checkbox,
    _isMobile,
    _isEnabled,
    onClick,
    enabled,
    input_binding,
    label_binding
  ];
}
class FormStep extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$z, create_fragment$z, safe_not_equal, { text: 1, status: 0 }, add_css$w);
  }
  get text() {
    return this.$$.ctx[1];
  }
  set text(text2) {
    this.$$set({ text: text2 });
    flush();
  }
  get status() {
    return this.$$.ctx[0];
  }
  set status(status) {
    this.$$set({ status });
    flush();
  }
}
customElements.define("goa-form-step", create_custom_element(FormStep, { "text": {}, "status": {} }, [], [], true));
function add_css$v(target) {
  append_styles(target, "svelte-5aoolp", ":host{--goa-stepper-color-line:var(--goa-color-greyscale-200);--goa-stepper-color-line-active:var(--goa-color-interactive-default);--goa-stepper-line-thickness:4px;--goa-step-gap-small-screen:0px}.slots.svelte-5aoolp{position:relative;inset:0;z-index:2}#container.svelte-5aoolp{container:self / inline-size}progress.svelte-5aoolp{position:absolute;z-index:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;height:var(--goa-stepper-line-thickness);border:none;background:var(--goa-stepper-color-line);pointer-events:none}progress.horizontal.svelte-5aoolp{top:calc(1.5rem + (2.5rem / 2) - 2px);left:calc(var(--step-width) / 2);width:calc(100% - var(--step-width))}@container self (min-width: 624px){progress.horizontal.svelte-5aoolp{display:block}progress.vertical.svelte-5aoolp{display:none}.form-stepper.svelte-5aoolp{position:relative}}progress.vertical.svelte-5aoolp{width:calc(var(--height) - var(--step-height));transform:rotate(90deg)\n      translate(\n        calc(50% + 1.25rem + 1rem),\n        calc((var(--height) - var(--step-height)) / 2 - 1.25rem - 1.5rem)\n      )}@container self (max-width: 623px){progress.horizontal.svelte-5aoolp{display:none}progress.vertical.svelte-5aoolp{display:inline-block}.form-stepper.svelte-5aoolp{display:block}}progress.svelte-5aoolp::-webkit-progress-value{background:var(--goa-color-interactive-default)}progress.svelte-5aoolp::-webkit-progress-bar{background:var(--goa-stepper-color-line)}progress.svelte-5aoolp::-moz-progress-bar{background:var(--goa-color-interactive-default)}");
}
function create_if_block$i(ctx) {
  let progress0;
  let t2;
  let progress1;
  return {
    c() {
      progress0 = element("progress");
      t2 = space();
      progress1 = element("progress");
      attr(progress0, "class", "horizontal svelte-5aoolp");
      progress0.value = /*_progress*/
      ctx[11];
      attr(progress0, "max", "100");
      attr(progress1, "class", "vertical svelte-5aoolp");
      progress1.value = /*_progress*/
      ctx[11];
      attr(progress1, "max", "100");
    },
    m(target, anchor) {
      insert(target, progress0, anchor);
      insert(target, t2, anchor);
      insert(target, progress1, anchor);
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*_progress*/
      2048) {
        progress0.value = /*_progress*/
        ctx2[11];
      }
      if (dirty[0] & /*_progress*/
      2048) {
        progress1.value = /*_progress*/
        ctx2[11];
      }
    },
    d(detaching) {
      if (detaching) {
        detach(progress0);
        detach(t2);
        detach(progress1);
      }
    }
  };
}
function create_fragment$y(ctx) {
  let div2;
  let div1;
  let t2;
  let div0;
  let goa_grid;
  let div1_style_value;
  let current;
  let if_block = (
    /*_steps*/
    ctx[7].length > 0 && /*_showProgressBars*/
    ctx[12] && create_if_block$i(ctx)
  );
  const default_slot_template = (
    /*#slots*/
    ctx[17].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[16],
    null
  );
  return {
    c() {
      div2 = element("div");
      div1 = element("div");
      if (if_block) if_block.c();
      t2 = space();
      div0 = element("div");
      goa_grid = element("goa-grid");
      if (default_slot) default_slot.c();
      set_custom_element_data(goa_grid, "minchildwidth", "10ch");
      attr(div0, "class", "slots svelte-5aoolp");
      attr(div1, "class", "form-stepper svelte-5aoolp");
      attr(div1, "style", div1_style_value = `
      ${calculateMargin(
        /*mt*/
        ctx[1],
        /*mr*/
        ctx[2],
        /*mb*/
        ctx[3],
        /*ml*/
        ctx[4]
      )};
      --progress: ${/*_progress*/
      ctx[11]}%;
      --step-width: ${/*_stepWidth*/
      ctx[8]}px;
      --step-height: ${/*_stepHeight*/
      ctx[9]}px;
      --height: ${/*_progressHeight*/
      ctx[10]}px;
    `);
      attr(div1, "role", "list");
      attr(
        div1,
        "data-testid",
        /*testid*/
        ctx[0]
      );
      attr(div2, "id", "container");
      attr(div2, "class", "svelte-5aoolp");
    },
    m(target, anchor) {
      insert(target, div2, anchor);
      append(div2, div1);
      if (if_block) if_block.m(div1, null);
      append(div1, t2);
      append(div1, div0);
      append(div0, goa_grid);
      if (default_slot) {
        default_slot.m(goa_grid, null);
      }
      ctx[18](div0);
      ctx[19](div1);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*_steps*/
        ctx2[7].length > 0 && /*_showProgressBars*/
        ctx2[12]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block$i(ctx2);
          if_block.c();
          if_block.m(div1, t2);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty[0] & /*$$scope*/
        65536)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[16],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[16]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[16],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty[0] & /*mt, mr, mb, ml, _progress, _stepWidth, _stepHeight, _progressHeight*/
      3870 && div1_style_value !== (div1_style_value = `
      ${calculateMargin(
        /*mt*/
        ctx2[1],
        /*mr*/
        ctx2[2],
        /*mb*/
        ctx2[3],
        /*ml*/
        ctx2[4]
      )};
      --progress: ${/*_progress*/
      ctx2[11]}%;
      --step-width: ${/*_stepWidth*/
      ctx2[8]}px;
      --step-height: ${/*_stepHeight*/
      ctx2[9]}px;
      --height: ${/*_progressHeight*/
      ctx2[10]}px;
    `)) {
        attr(div1, "style", div1_style_value);
      }
      if (!current || dirty[0] & /*testid*/
      1) {
        attr(
          div1,
          "data-testid",
          /*testid*/
          ctx2[0]
        );
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div2);
      }
      if (if_block) if_block.d();
      if (default_slot) default_slot.d(detaching);
      ctx[18](null);
      ctx[19](null);
    }
  };
}
function instance$y($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { step = -1 } = $$props;
  let { testid = "" } = $$props;
  let { mt = null } = $$props;
  let { mr = null } = $$props;
  let { mb: mb2 = null } = $$props;
  let { ml: ml2 = null } = $$props;
  let _rootEl;
  let _gridEl;
  let _steps = [];
  let _stepWidth;
  let _stepHeight;
  let _stepType;
  let _progressHeight;
  let _progress = 0;
  let _currentStep;
  let _maxAllowedStep = 1;
  let _showProgressBars = false;
  let _bindTimeoutId;
  let resizeObserver;
  onMount(async () => {
    await tick();
    _stepType = +step === -1 ? "free" : "constrained";
    getChildren();
    resizeObserver = createResizeNotififications();
    resizeObserver.observe(_rootEl);
  });
  onDestroy(() => {
    window.removeEventListener("orientationchange", calcStepDimensions);
    resizeObserver.unobserve(_rootEl);
  });
  function getChildren() {
    _rootEl.addEventListener("formstep:mounted", (e) => {
      const ce2 = e;
      const { el: el2, status } = ce2.detail;
      $$invalidate(7, _steps = [..._steps, { el: el2, status }]);
      if (_bindTimeoutId) {
        clearTimeout(_bindTimeoutId);
      }
      _bindTimeoutId = setTimeout(() => {
        bindChildren();
        calcStepDimensions();
        addClickListener();
        addOrientationChangeListener();
        $$invalidate(14, _currentStep = step < 1 ? 1 : step);
        dispatchCurrentStep();
      });
    });
  }
  function bindChildren() {
    for (const [i, stepItem] of _steps.entries()) {
      const stepIndex = i + 1;
      const formStep = {
        ariaLabel: `Step ${stepIndex} of ${_steps.length}`,
        childIndex: stepIndex,
        current: step === -1 ? stepIndex === 1 : stepIndex === step,
        enabled: stepIndex <= step || _stepType === "free",
        status: stepItem.status
      };
      stepItem.el.dispatchEvent(new CustomEvent("formstepper:init", { composed: true, detail: formStep }));
    }
  }
  function addOrientationChangeListener() {
    window.addEventListener("orientationchange", calcStepDimensions);
  }
  function addClickListener() {
    _rootEl == null ? void 0 : _rootEl.addEventListener("_click", (e) => {
      const nextStep = e.detail.step;
      changeStep(nextStep);
    });
  }
  function createResizeNotififications() {
    return new ResizeObserver((entries) => {
      if (entries.length !== 1) return;
      calcStepDimensions();
      const width = entries[0].contentRect.width;
      for (const step2 of _steps) {
        step2.el.dispatchEvent(new CustomEvent(
          "form-stepper:resized",
          {
            bubbles: true,
            composed: true,
            detail: { testid, mobile: width < MOBILE_BP }
          }
        ));
      }
    });
  }
  function changeStep(nextStep) {
    if (_steps.length === 0) return;
    if (_currentStep > 0) {
      _steps[_currentStep - 1].el.dispatchEvent(new CustomEvent(
        "formstepper:current:changed",
        {
          detail: { current: false },
          composed: true
        }
      ));
    }
    _steps[nextStep - 1].el.dispatchEvent(new CustomEvent(
      "formstepper:current:changed",
      {
        detail: { current: true },
        composed: true
      }
    ));
    $$invalidate(14, _currentStep = nextStep);
    calculateProgress();
    dispatchCurrentStep();
  }
  function calculateProgress() {
    $$invalidate(11, _progress = (_currentStep - 1) / (_steps.length - 1) * 100);
  }
  function calcStepDimensions() {
    var _a;
    const el2 = (_a = _steps == null ? void 0 : _steps[0]) == null ? void 0 : _a.el;
    $$invalidate(8, _stepWidth = (el2 == null ? void 0 : el2.offsetWidth) ?? 0);
    $$invalidate(9, _stepHeight = (el2 == null ? void 0 : el2.offsetHeight) ?? 0);
    $$invalidate(10, _progressHeight = _gridEl == null ? void 0 : _gridEl.offsetHeight);
    setTimeout(() => $$invalidate(12, _showProgressBars = true), 100);
  }
  function dispatchCurrentStep() {
    _rootEl == null ? void 0 : _rootEl.dispatchEvent(new CustomEvent(
      "_change",
      {
        composed: true,
        bubbles: true,
        detail: {
          step: +_currentStep,
          stepIndex: +_currentStep - 1
        }
      }
    ));
  }
  function div0_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _gridEl = $$value;
      $$invalidate(6, _gridEl);
    });
  }
  function div1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _rootEl = $$value;
      $$invalidate(5, _rootEl);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("step" in $$props2) $$invalidate(13, step = $$props2.step);
    if ("testid" in $$props2) $$invalidate(0, testid = $$props2.testid);
    if ("mt" in $$props2) $$invalidate(1, mt = $$props2.mt);
    if ("mr" in $$props2) $$invalidate(2, mr = $$props2.mr);
    if ("mb" in $$props2) $$invalidate(3, mb2 = $$props2.mb);
    if ("ml" in $$props2) $$invalidate(4, ml2 = $$props2.ml);
    if ("$$scope" in $$props2) $$invalidate(16, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*_currentStep, _maxAllowedStep*/
    49152) {
      $$invalidate(15, _maxAllowedStep = Math.max(_currentStep || 1, _maxAllowedStep || 1));
    }
    if ($$self.$$.dirty[0] & /*step*/
    8192) {
      $$invalidate(13, step = +step);
    }
    if ($$self.$$.dirty[0] & /*step, _currentStep*/
    24576) {
      if (step > 0 && _currentStep !== step) {
        changeStep(step);
      }
    }
    if ($$self.$$.dirty[0] & /*_currentStep*/
    16384) {
      if (_currentStep) {
        calculateProgress();
      }
    }
  };
  return [
    testid,
    mt,
    mr,
    mb2,
    ml2,
    _rootEl,
    _gridEl,
    _steps,
    _stepWidth,
    _stepHeight,
    _progressHeight,
    _progress,
    _showProgressBars,
    step,
    _currentStep,
    _maxAllowedStep,
    $$scope,
    slots,
    div0_binding,
    div1_binding
  ];
}
class FormStepper extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$y,
      create_fragment$y,
      safe_not_equal,
      {
        step: 13,
        testid: 0,
        mt: 1,
        mr: 2,
        mb: 3,
        ml: 4
      },
      add_css$v,
      [-1, -1]
    );
  }
  get step() {
    return this.$$.ctx[13];
  }
  set step(step) {
    this.$$set({ step });
    flush();
  }
  get testid() {
    return this.$$.ctx[0];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
  get mt() {
    return this.$$.ctx[1];
  }
  set mt(mt) {
    this.$$set({ mt });
    flush();
  }
  get mr() {
    return this.$$.ctx[2];
  }
  set mr(mr) {
    this.$$set({ mr });
    flush();
  }
  get mb() {
    return this.$$.ctx[3];
  }
  set mb(mb2) {
    this.$$set({ mb: mb2 });
    flush();
  }
  get ml() {
    return this.$$.ctx[4];
  }
  set ml(ml2) {
    this.$$set({ ml: ml2 });
    flush();
  }
}
customElements.define("goa-form-stepper", create_custom_element(FormStepper, { "step": {}, "testid": {}, "mt": {}, "mr": {}, "mb": {}, "ml": {} }, ["default"], [], true));
function add_css$u(target) {
  append_styles(target, "svelte-1f1uff1", '.page.svelte-1f1uff1{height:100vh;grid-template-columns:auto;grid-template-rows:min-content auto min-content;grid-template-areas:"header"\n      "content"\n      "nav"\n      "footer";display:grid;place-content:stretch stretch;gap:0 0}@media(max-width: 623px){.page.svelte-1f1uff1{grid-template-columns:300px auto;grid-template-rows:min-content auto min-content;grid-template-areas:"header header"\n        "nav content"\n        "footer footer"}}.header.svelte-1f1uff1{grid-area:header}.footer.svelte-1f1uff1{grid-area:footer}main.svelte-1f1uff1{grid-area:content;justify-self:stretch;padding:1rem}.nav.svelte-1f1uff1{grid-area:nav;padding:1rem;background-color:var(--goa-color-greyscale-100)}');
}
const get_footer_slot_changes$3 = (dirty) => ({});
const get_footer_slot_context$3 = (ctx) => ({});
const get_nav_slot_changes$2 = (dirty) => ({});
const get_nav_slot_context$2 = (ctx) => ({});
const get_header_slot_changes$3 = (dirty) => ({});
const get_header_slot_context$3 = (ctx) => ({});
function create_fragment$x(ctx) {
  let div;
  let header;
  let t0;
  let nav;
  let t1;
  let main;
  let t2;
  let footer;
  let current;
  const header_slot_template = (
    /*#slots*/
    ctx[1].header
  );
  const header_slot = create_slot(
    header_slot_template,
    ctx,
    /*$$scope*/
    ctx[0],
    get_header_slot_context$3
  );
  const nav_slot_template = (
    /*#slots*/
    ctx[1].nav
  );
  const nav_slot = create_slot(
    nav_slot_template,
    ctx,
    /*$$scope*/
    ctx[0],
    get_nav_slot_context$2
  );
  const default_slot_template = (
    /*#slots*/
    ctx[1].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[0],
    null
  );
  const footer_slot_template = (
    /*#slots*/
    ctx[1].footer
  );
  const footer_slot = create_slot(
    footer_slot_template,
    ctx,
    /*$$scope*/
    ctx[0],
    get_footer_slot_context$3
  );
  return {
    c() {
      div = element("div");
      header = element("header");
      if (header_slot) header_slot.c();
      t0 = space();
      nav = element("nav");
      if (nav_slot) nav_slot.c();
      t1 = space();
      main = element("main");
      if (default_slot) default_slot.c();
      t2 = space();
      footer = element("footer");
      if (footer_slot) footer_slot.c();
      attr(header, "class", "header svelte-1f1uff1");
      attr(nav, "class", "nav svelte-1f1uff1");
      attr(main, "class", "svelte-1f1uff1");
      attr(footer, "class", "footer svelte-1f1uff1");
      attr(div, "class", "page svelte-1f1uff1");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, header);
      if (header_slot) {
        header_slot.m(header, null);
      }
      append(div, t0);
      append(div, nav);
      if (nav_slot) {
        nav_slot.m(nav, null);
      }
      append(div, t1);
      append(div, main);
      if (default_slot) {
        default_slot.m(main, null);
      }
      append(div, t2);
      append(div, footer);
      if (footer_slot) {
        footer_slot.m(footer, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (header_slot) {
        if (header_slot.p && (!current || dirty & /*$$scope*/
        1)) {
          update_slot_base(
            header_slot,
            header_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[0],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[0]
            ) : get_slot_changes(
              header_slot_template,
              /*$$scope*/
              ctx2[0],
              dirty,
              get_header_slot_changes$3
            ),
            get_header_slot_context$3
          );
        }
      }
      if (nav_slot) {
        if (nav_slot.p && (!current || dirty & /*$$scope*/
        1)) {
          update_slot_base(
            nav_slot,
            nav_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[0],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[0]
            ) : get_slot_changes(
              nav_slot_template,
              /*$$scope*/
              ctx2[0],
              dirty,
              get_nav_slot_changes$2
            ),
            get_nav_slot_context$2
          );
        }
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        1)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[0],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[0]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[0],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (footer_slot) {
        if (footer_slot.p && (!current || dirty & /*$$scope*/
        1)) {
          update_slot_base(
            footer_slot,
            footer_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[0],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[0]
            ) : get_slot_changes(
              footer_slot_template,
              /*$$scope*/
              ctx2[0],
              dirty,
              get_footer_slot_changes$3
            ),
            get_footer_slot_context$3
          );
        }
      }
    },
    i(local) {
      if (current) return;
      transition_in(header_slot, local);
      transition_in(nav_slot, local);
      transition_in(default_slot, local);
      transition_in(footer_slot, local);
      current = true;
    },
    o(local) {
      transition_out(header_slot, local);
      transition_out(nav_slot, local);
      transition_out(default_slot, local);
      transition_out(footer_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (header_slot) header_slot.d(detaching);
      if (nav_slot) nav_slot.d(detaching);
      if (default_slot) default_slot.d(detaching);
      if (footer_slot) footer_slot.d(detaching);
    }
  };
}
function instance$x($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  $$self.$$set = ($$props2) => {
    if ("$$scope" in $$props2) $$invalidate(0, $$scope = $$props2.$$scope);
  };
  return [$$scope, slots];
}
class FullScreenNavbarLayout extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$x, create_fragment$x, safe_not_equal, {}, add_css$u);
  }
}
customElements.define("goa-layout-full-nav", create_custom_element(FullScreenNavbarLayout, {}, ["header", "nav", "default", "footer"], [], true));
function add_css$t(target) {
  append_styles(target, "svelte-esicfq", ":host{box-sizing:border-box;font-family:var(--goa-font-family-sans)}.goa-grid.svelte-esicfq{display:flex;flex-direction:column;gap:var(--gap)}@media(min-width: 624px){.goa-grid.svelte-esicfq{display:grid;grid-template-columns:repeat(\n        auto-fit,\n        minmax(var(--min-child-width), 1fr)\n      )}}");
}
function create_fragment$w(ctx) {
  let div;
  let div_style_value;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[8].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[7],
    null
  );
  return {
    c() {
      div = element("div");
      if (default_slot) default_slot.c();
      attr(div, "class", "goa-grid svelte-esicfq");
      attr(div, "style", div_style_value = `
    ${calculateMargin(
        /*mt*/
        ctx[3],
        /*mr*/
        ctx[4],
        /*mb*/
        ctx[5],
        /*ml*/
        ctx[6]
      )}
    --min-child-width: ${/*minchildwidth*/
      ctx[1] || 0};
    gap: var(--goa-space-${/*gap*/
      ctx[0]})
  `);
      attr(
        div,
        "data-testid",
        /*testid*/
        ctx[2]
      );
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        128)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[7],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[7]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[7],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*mt, mr, mb, ml, minchildwidth, gap*/
      123 && div_style_value !== (div_style_value = `
    ${calculateMargin(
        /*mt*/
        ctx2[3],
        /*mr*/
        ctx2[4],
        /*mb*/
        ctx2[5],
        /*ml*/
        ctx2[6]
      )}
    --min-child-width: ${/*minchildwidth*/
      ctx2[1] || 0};
    gap: var(--goa-space-${/*gap*/
      ctx2[0]})
  `)) {
        attr(div, "style", div_style_value);
      }
      if (!current || dirty & /*testid*/
      4) {
        attr(
          div,
          "data-testid",
          /*testid*/
          ctx2[2]
        );
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (default_slot) default_slot.d(detaching);
    }
  };
}
function instance$w($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { gap = "m" } = $$props;
  let { minchildwidth = "" } = $$props;
  let { testid = "" } = $$props;
  let { mt = null } = $$props;
  let { mr = null } = $$props;
  let { mb: mb2 = null } = $$props;
  let { ml: ml2 = null } = $$props;
  onMount(() => {
    validateRequired("Grid", { minchildwidth });
  });
  $$self.$$set = ($$props2) => {
    if ("gap" in $$props2) $$invalidate(0, gap = $$props2.gap);
    if ("minchildwidth" in $$props2) $$invalidate(1, minchildwidth = $$props2.minchildwidth);
    if ("testid" in $$props2) $$invalidate(2, testid = $$props2.testid);
    if ("mt" in $$props2) $$invalidate(3, mt = $$props2.mt);
    if ("mr" in $$props2) $$invalidate(4, mr = $$props2.mr);
    if ("mb" in $$props2) $$invalidate(5, mb2 = $$props2.mb);
    if ("ml" in $$props2) $$invalidate(6, ml2 = $$props2.ml);
    if ("$$scope" in $$props2) $$invalidate(7, $$scope = $$props2.$$scope);
  };
  return [gap, minchildwidth, testid, mt, mr, mb2, ml2, $$scope, slots];
}
class Grid extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$w,
      create_fragment$w,
      safe_not_equal,
      {
        gap: 0,
        minchildwidth: 1,
        testid: 2,
        mt: 3,
        mr: 4,
        mb: 5,
        ml: 6
      },
      add_css$t
    );
  }
  get gap() {
    return this.$$.ctx[0];
  }
  set gap(gap) {
    this.$$set({ gap });
    flush();
  }
  get minchildwidth() {
    return this.$$.ctx[1];
  }
  set minchildwidth(minchildwidth) {
    this.$$set({ minchildwidth });
    flush();
  }
  get testid() {
    return this.$$.ctx[2];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
  get mt() {
    return this.$$.ctx[3];
  }
  set mt(mt) {
    this.$$set({ mt });
    flush();
  }
  get mr() {
    return this.$$.ctx[4];
  }
  set mr(mr) {
    this.$$set({ mr });
    flush();
  }
  get mb() {
    return this.$$.ctx[5];
  }
  set mb(mb2) {
    this.$$set({ mb: mb2 });
    flush();
  }
  get ml() {
    return this.$$.ctx[6];
  }
  set ml(ml2) {
    this.$$set({ ml: ml2 });
    flush();
  }
}
customElements.define("goa-grid", create_custom_element(Grid, { "gap": {}, "minchildwidth": {}, "testid": {}, "mt": {}, "mr": {}, "mb": {}, "ml": {} }, ["default"], [], true));
function add_css$s(target) {
  append_styles(target, "svelte-kaqo3i", ":host{--goa-hero-banner-padding:var(--goa-space-2xl) 0;--goa-hero-banner-mobile-padding:var(--goa-space-xl) 0;--goa-hero-banner-content-gap:var(--goa-space-l) 0 0;--goa-hero-banner-heading:var(--goa-typography-heading-xl);--goa-hero-banner-content:var(--goa-typography-body-l);box-sizing:border-box;font-family:var(--goa-font-family-sans)}.goa-hero.svelte-kaqo3i{background:var(--hero-banner-background-color);box-sizing:border-box;display:flex;justify-content:center;flex-direction:column;color:var(--hero-banner-text-color, var(--goa-color-text-default));background-position:center center;width:100%;padding:var(--goa-hero-banner-padding)}@media(max-width: 623px){.goa-hero.svelte-kaqo3i{padding:var(--goa-hero-banner-mobile-padding)}}.goa-hero.with-image.svelte-kaqo3i{border-bottom:8px solid var(--goa-color-brand-default);justify-content:flex-end;background:unset;background-image:linear-gradient(\n        rgba(0, 0, 0, 0) 0%,\n        rgba(0, 0, 0, 0.42) 42%,\n        rgba(0, 0, 0, 0.6) 100%\n      ),\n      var(--hero-background-url);background-size:cover;background-position:center;background-repeat:no-repeat;color:var(--hero-banner-text-color, var(--goa-color-text-light))}h1.svelte-kaqo3i{font:var(--goa-hero-banner-heading);margin:0}.goa-hero-banner-content.svelte-kaqo3i{font:var(--goa-hero-banner-content);margin:var(--goa-hero-banner-content-gap)}.goa-hero-banner-actions.svelte-kaqo3i{margin:var(--goa-hero-banner-content-gap)}");
}
const get_actions_slot_changes$1 = (dirty) => ({});
const get_actions_slot_context$1 = (ctx) => ({});
function create_fragment$v(ctx) {
  let div2;
  let goa_page_block;
  let h1;
  let t0;
  let t1;
  let div0;
  let t2;
  let div1;
  let goa_page_block_width_value;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[8].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[7],
    null
  );
  const actions_slot_template = (
    /*#slots*/
    ctx[8].actions
  );
  const actions_slot = create_slot(
    actions_slot_template,
    ctx,
    /*$$scope*/
    ctx[7],
    get_actions_slot_context$1
  );
  return {
    c() {
      div2 = element("div");
      goa_page_block = element("goa-page-block");
      h1 = element("h1");
      t0 = text(
        /*heading*/
        ctx[1]
      );
      t1 = space();
      div0 = element("div");
      if (default_slot) default_slot.c();
      t2 = space();
      div1 = element("div");
      if (actions_slot) actions_slot.c();
      attr(h1, "class", "svelte-kaqo3i");
      attr(div0, "class", "goa-hero-banner-content svelte-kaqo3i");
      attr(div0, "role", "note");
      attr(div1, "class", "goa-hero-banner-actions svelte-kaqo3i");
      set_custom_element_data(goa_page_block, "width", goa_page_block_width_value = /*maxcontentwidth*/
      ctx[3] || "full");
      attr(div2, "class", "goa-hero svelte-kaqo3i");
      attr(
        div2,
        "data-testid",
        /*testid*/
        ctx[6]
      );
      set_style(
        div2,
        "min-height",
        /*minheight*/
        ctx[0]
      );
      set_style(
        div2,
        "--hero-banner-background-color",
        /*backgroundcolor*/
        ctx[4]
      );
      set_style(
        div2,
        "--hero-banner-text-color",
        /*textcolor*/
        ctx[5]
      );
      set_style(div2, "--hero-background-url", "url(" + /*backgroundurl*/
      ctx[2] + ")");
      toggle_class(
        div2,
        "with-image",
        /*backgroundurl*/
        ctx[2]
      );
    },
    m(target, anchor) {
      insert(target, div2, anchor);
      append(div2, goa_page_block);
      append(goa_page_block, h1);
      append(h1, t0);
      append(goa_page_block, t1);
      append(goa_page_block, div0);
      if (default_slot) {
        default_slot.m(div0, null);
      }
      append(goa_page_block, t2);
      append(goa_page_block, div1);
      if (actions_slot) {
        actions_slot.m(div1, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & /*heading*/
      2) set_data(
        t0,
        /*heading*/
        ctx2[1]
      );
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        128)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[7],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[7]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[7],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (actions_slot) {
        if (actions_slot.p && (!current || dirty & /*$$scope*/
        128)) {
          update_slot_base(
            actions_slot,
            actions_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[7],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[7]
            ) : get_slot_changes(
              actions_slot_template,
              /*$$scope*/
              ctx2[7],
              dirty,
              get_actions_slot_changes$1
            ),
            get_actions_slot_context$1
          );
        }
      }
      if (!current || dirty & /*maxcontentwidth*/
      8 && goa_page_block_width_value !== (goa_page_block_width_value = /*maxcontentwidth*/
      ctx2[3] || "full")) {
        set_custom_element_data(goa_page_block, "width", goa_page_block_width_value);
      }
      if (!current || dirty & /*testid*/
      64) {
        attr(
          div2,
          "data-testid",
          /*testid*/
          ctx2[6]
        );
      }
      if (!current || dirty & /*minheight*/
      1) {
        set_style(
          div2,
          "min-height",
          /*minheight*/
          ctx2[0]
        );
      }
      if (!current || dirty & /*backgroundcolor*/
      16) {
        set_style(
          div2,
          "--hero-banner-background-color",
          /*backgroundcolor*/
          ctx2[4]
        );
      }
      if (!current || dirty & /*textcolor*/
      32) {
        set_style(
          div2,
          "--hero-banner-text-color",
          /*textcolor*/
          ctx2[5]
        );
      }
      if (!current || dirty & /*backgroundurl*/
      4) {
        set_style(div2, "--hero-background-url", "url(" + /*backgroundurl*/
        ctx2[2] + ")");
      }
      if (!current || dirty & /*backgroundurl*/
      4) {
        toggle_class(
          div2,
          "with-image",
          /*backgroundurl*/
          ctx2[2]
        );
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      transition_in(actions_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      transition_out(actions_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div2);
      }
      if (default_slot) default_slot.d(detaching);
      if (actions_slot) actions_slot.d(detaching);
    }
  };
}
function instance$v($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { heading } = $$props;
  let { backgroundurl } = $$props;
  let { minheight } = $$props;
  let { maxcontentwidth = "100%" } = $$props;
  let { backgroundcolor = "#f8f8f8" } = $$props;
  let { textcolor = "" } = $$props;
  let { testid = "background" } = $$props;
  $$self.$$set = ($$props2) => {
    if ("heading" in $$props2) $$invalidate(1, heading = $$props2.heading);
    if ("backgroundurl" in $$props2) $$invalidate(2, backgroundurl = $$props2.backgroundurl);
    if ("minheight" in $$props2) $$invalidate(0, minheight = $$props2.minheight);
    if ("maxcontentwidth" in $$props2) $$invalidate(3, maxcontentwidth = $$props2.maxcontentwidth);
    if ("backgroundcolor" in $$props2) $$invalidate(4, backgroundcolor = $$props2.backgroundcolor);
    if ("textcolor" in $$props2) $$invalidate(5, textcolor = $$props2.textcolor);
    if ("testid" in $$props2) $$invalidate(6, testid = $$props2.testid);
    if ("$$scope" in $$props2) $$invalidate(7, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*minheight, backgroundurl*/
    5) {
      if (!minheight && backgroundurl) $$invalidate(0, minheight = "600px");
    }
  };
  return [
    minheight,
    heading,
    backgroundurl,
    maxcontentwidth,
    backgroundcolor,
    textcolor,
    testid,
    $$scope,
    slots
  ];
}
class HeroBanner extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$v,
      create_fragment$v,
      safe_not_equal,
      {
        heading: 1,
        backgroundurl: 2,
        minheight: 0,
        maxcontentwidth: 3,
        backgroundcolor: 4,
        textcolor: 5,
        testid: 6
      },
      add_css$s
    );
  }
  get heading() {
    return this.$$.ctx[1];
  }
  set heading(heading) {
    this.$$set({ heading });
    flush();
  }
  get backgroundurl() {
    return this.$$.ctx[2];
  }
  set backgroundurl(backgroundurl) {
    this.$$set({ backgroundurl });
    flush();
  }
  get minheight() {
    return this.$$.ctx[0];
  }
  set minheight(minheight) {
    this.$$set({ minheight });
    flush();
  }
  get maxcontentwidth() {
    return this.$$.ctx[3];
  }
  set maxcontentwidth(maxcontentwidth) {
    this.$$set({ maxcontentwidth });
    flush();
  }
  get backgroundcolor() {
    return this.$$.ctx[4];
  }
  set backgroundcolor(backgroundcolor) {
    this.$$set({ backgroundcolor });
    flush();
  }
  get textcolor() {
    return this.$$.ctx[5];
  }
  set textcolor(textcolor) {
    this.$$set({ textcolor });
    flush();
  }
  get testid() {
    return this.$$.ctx[6];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
}
customElements.define("goa-hero-banner", create_custom_element(HeroBanner, { "heading": {}, "backgroundurl": {}, "minheight": {}, "maxcontentwidth": {}, "backgroundcolor": {}, "textcolor": {}, "testid": {} }, ["default", "actions"], [], true));
function add_css$r(target) {
  append_styles(target, "svelte-5l8c2d", ":host{display:inline-flex;align-items:center;box-sizing:border-box;font-family:var(--goa-font-family-sans);--goa-icon-button-medium-padding:var(--goa-space-2xs);--goa-icon-button-large-padding:var(--goa-space-xs);--goa-icon-button-medium-border-radius:var(--goa-border-radius-m);--goa-icon-button-large-border-radius:var(--goa-border-radius-xl);--goa-icon-button-default-color:var(--goa-color-interactive-default);--goa-icon-button-default-hover-color:var(--goa-color-interactive-hover);--goa-icon-button-default-focus-color:var(--goa-color-interactive-hover);--goa-icon-button-default-hover-color-bg:var(--goa-color-greyscale-100);--goa-icon-button-default-disabled-color:var(--goa-color-interactive-disabled);--goa-icon-button-light-color:var(--goa-color-greyscale-white);--goa-icon-button-light-hover-color-bg:var(--goa-color-greyscale-700);--goa-icon-button-light-disabled-color:var(--goa-color-greyscale-500);--goa-icon-button-dark-color:var(--goa-color-greyscale-black);--goa-icon-button-dark-hover-color-bg:var(--goa-color-greyscale-100);--goa-icon-button-dark-disabled-color-bg:var(--goa-color-greyscale-500);--goa-icon-button-destructive-color:var(--goa-color-emergency-default);--goa-icon-button-destructive-hover-color-bg:var(--goa-color-emergency-light);--goa-icon-button-destructive-disabled-color:var(--goa-color-interactive-error-disabled);--goa-color-interactive-error-disabled:#f58185}:host:focus,:host:focus-within,:host:focus-visible{outline:none !important}button.svelte-5l8c2d{display:inline-flex;align-items:center;box-sizing:border-box;justify-content:center;background:transparent;cursor:pointer;border:none;border-radius:var(--goa-icon-button-medium-border-radius);padding:var(--padding);cursor:pointer;transition:background-color 0.2s ease-in-out,\n      color 0.2s ease-in-out,\n      transform 0.1s ease-in-out}button.svelte-5l8c2d:active{transform:translateY(2px)}button.svelte-5l8c2d:hover{outline:none}button.svelte-5l8c2d:focus-visible{box-shadow:0 0 0 3px var(--goa-color-interactive-focus);outline:none}button.svelte-5l8c2d:disabled{pointer-events:none;transform:none;cursor:default;opacity:1}button.svelte-5l8c2d:disabled:hover{background-color:transparent}.color.svelte-5l8c2d{color:var(--goa-icon-button-default-color);fill:var(--goa-icon-button-default-color)}.color.svelte-5l8c2d:hover,.color.svelte-5l8c2d:focus{color:var(--goa-icon-button-default-hover-color);fill:var(--goa-icon-button-default-hover-color);background-color:var(--goa-icon-button-default-hover-color-bg)}.color.svelte-5l8c2d:disabled{color:var(--goa-icon-button-default-disabled-color);fill:var(--goa-icon-button-default-disabled-color)}.dark.svelte-5l8c2d{color:var(--goa-icon-button-dark-color);fill:var(--goa-icon-button-dark-color)}.dark.svelte-5l8c2d:hover,.dark.svelte-5l8c2d:focus,.dark.svelte-5l8c2d:active{background-color:var(--goa-icon-button-dark-hover-color-bg)}.dark.svelte-5l8c2d:disabled{color:var(--goa-icon-button-dark-disabled-color-bg);fill:var(--goa-icon-button-dark-disabled-color-bg)}.nocolor.svelte-5l8c2d{color:var(--goa-icon-button-dark-color);fill:var(--goa-icon-button-dark-color)}.nocolor.svelte-5l8c2d:hover,.nocolor.svelte-5l8c2d:focus,.nocolor.svelte-5l8c2d:active{background-color:var(--goa-icon-button-dark-hover-color-bg)}.destructive.svelte-5l8c2d{color:var(--goa-icon-button-destructive-color);fill:var(--goa-icon-button-destructive-color)}.destructive.svelte-5l8c2d:hover,.destructive.svelte-5l8c2d:focus,.destructive.svelte-5l8c2d:active{background-color:var(--goa-icon-button-destructive-hover-color-bg)}.destructive.svelte-5l8c2d:disabled{color:var(--goa-icon-button-destructive-disabled-color);fill:var(--goa-icon-button-destructive-disabled-color)}.light.svelte-5l8c2d{color:var(--goa-icon-button-light-color);fill:var(--goa-icon-button-light-color)}.light.svelte-5l8c2d:hover,.light.svelte-5l8c2d:focus,.light.svelte-5l8c2d:active{background-color:var(--goa-icon-button-light-hover-color-bg)}.light.svelte-5l8c2d:disabled{color:var(--goa-icon-button-light-disabled-color);fill:var(--goa-icon-button-light-disabled-color)}.inverted.svelte-5l8c2d{color:var(--goa-icon-button-light-color);fill:var(--goa-icon-button-light-color)}.inverted.svelte-5l8c2d:hover,.inverted.svelte-5l8c2d:focus,.inverted.svelte-5l8c2d:active{background-color:var(--goa-icon-button-light-hover-color-bg)}");
}
function create_fragment$u(ctx) {
  let button;
  let goa_icon;
  let button_style_value;
  let button_class_value;
  let mounted;
  let dispose;
  return {
    c() {
      button = element("button");
      goa_icon = element("goa-icon");
      set_custom_element_data(
        goa_icon,
        "title",
        /*title*/
        ctx[3]
      );
      set_custom_element_data(
        goa_icon,
        "type",
        /*icon*/
        ctx[0]
      );
      set_custom_element_data(
        goa_icon,
        "size",
        /*size*/
        ctx[1]
      );
      set_custom_element_data(
        goa_icon,
        "theme",
        /*theme*/
        ctx[2]
      );
      attr(button, "style", button_style_value = `
    --padding: ${/*_paddingSize*/
      ctx[10]};
    ${calculateMargin(
        /*mt*/
        ctx[6],
        /*mr*/
        ctx[7],
        /*mb*/
        ctx[8],
        /*ml*/
        ctx[9]
      )}
  `);
      attr(
        button,
        "title",
        /*title*/
        ctx[3]
      );
      button.disabled = /*isDisabled*/
      ctx[11];
      attr(button, "class", button_class_value = null_to_empty(
        /*css*/
        ctx[12]
      ) + " svelte-5l8c2d");
      attr(
        button,
        "data-testid",
        /*testid*/
        ctx[4]
      );
      attr(
        button,
        "aria-label",
        /*arialabel*/
        ctx[5]
      );
    },
    m(target, anchor) {
      insert(target, button, anchor);
      append(button, goa_icon);
      if (!mounted) {
        dispose = listen(button, "click", handleClick);
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*title*/
      8) {
        set_custom_element_data(
          goa_icon,
          "title",
          /*title*/
          ctx2[3]
        );
      }
      if (dirty & /*icon*/
      1) {
        set_custom_element_data(
          goa_icon,
          "type",
          /*icon*/
          ctx2[0]
        );
      }
      if (dirty & /*size*/
      2) {
        set_custom_element_data(
          goa_icon,
          "size",
          /*size*/
          ctx2[1]
        );
      }
      if (dirty & /*theme*/
      4) {
        set_custom_element_data(
          goa_icon,
          "theme",
          /*theme*/
          ctx2[2]
        );
      }
      if (dirty & /*_paddingSize, mt, mr, mb, ml*/
      1984 && button_style_value !== (button_style_value = `
    --padding: ${/*_paddingSize*/
      ctx2[10]};
    ${calculateMargin(
        /*mt*/
        ctx2[6],
        /*mr*/
        ctx2[7],
        /*mb*/
        ctx2[8],
        /*ml*/
        ctx2[9]
      )}
  `)) {
        attr(button, "style", button_style_value);
      }
      if (dirty & /*title*/
      8) {
        attr(
          button,
          "title",
          /*title*/
          ctx2[3]
        );
      }
      if (dirty & /*isDisabled*/
      2048) {
        button.disabled = /*isDisabled*/
        ctx2[11];
      }
      if (dirty & /*css*/
      4096 && button_class_value !== (button_class_value = null_to_empty(
        /*css*/
        ctx2[12]
      ) + " svelte-5l8c2d")) {
        attr(button, "class", button_class_value);
      }
      if (dirty & /*testid*/
      16) {
        attr(
          button,
          "data-testid",
          /*testid*/
          ctx2[4]
        );
      }
      if (dirty & /*arialabel*/
      32) {
        attr(
          button,
          "aria-label",
          /*arialabel*/
          ctx2[5]
        );
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(button);
      }
      mounted = false;
      dispose();
    }
  };
}
function handleClick(e) {
  var _a;
  (_a = e.target) == null ? void 0 : _a.dispatchEvent(new CustomEvent("_click", { composed: true, detail: { event: e } }));
}
function instance$u($$self, $$props, $$invalidate) {
  let css;
  let isDisabled;
  let isInverted;
  let _paddingSize;
  const [Variants, validateVariant] = typeValidator("Icon Button Variant", ["color", "nocolor", "light", "dark", "destructive"], true);
  let { icon } = $$props;
  let { size = "medium" } = $$props;
  let { theme = "outline" } = $$props;
  let { variant = "color" } = $$props;
  let { title = "" } = $$props;
  let { testid = "" } = $$props;
  let { disabled = "false" } = $$props;
  let { inverted = "false" } = $$props;
  let { arialabel = "" } = $$props;
  let { mt = null } = $$props;
  let { mr = null } = $$props;
  let { mb: mb2 = null } = $$props;
  let { ml: ml2 = null } = $$props;
  onMount(() => {
    validateVariant(variant);
    if (variant == "nocolor") {
      console.warn("goa-icon-button nocolor variant is deprecated. Instead use dark.");
    }
    if (isInverted) {
      console.warn("goa-icon-button inverted is deprecated. Instead use light variant.");
    }
  });
  $$self.$$set = ($$props2) => {
    if ("icon" in $$props2) $$invalidate(0, icon = $$props2.icon);
    if ("size" in $$props2) $$invalidate(1, size = $$props2.size);
    if ("theme" in $$props2) $$invalidate(2, theme = $$props2.theme);
    if ("variant" in $$props2) $$invalidate(13, variant = $$props2.variant);
    if ("title" in $$props2) $$invalidate(3, title = $$props2.title);
    if ("testid" in $$props2) $$invalidate(4, testid = $$props2.testid);
    if ("disabled" in $$props2) $$invalidate(14, disabled = $$props2.disabled);
    if ("inverted" in $$props2) $$invalidate(15, inverted = $$props2.inverted);
    if ("arialabel" in $$props2) $$invalidate(5, arialabel = $$props2.arialabel);
    if ("mt" in $$props2) $$invalidate(6, mt = $$props2.mt);
    if ("mr" in $$props2) $$invalidate(7, mr = $$props2.mr);
    if ("mb" in $$props2) $$invalidate(8, mb2 = $$props2.mb);
    if ("ml" in $$props2) $$invalidate(9, ml2 = $$props2.ml);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*inverted*/
    32768) {
      $$invalidate(16, isInverted = toBoolean(inverted));
    }
    if ($$self.$$.dirty & /*variant, isInverted*/
    73728) {
      $$invalidate(12, css = `${variant} ${isInverted ? "inverted" : ""}`);
    }
    if ($$self.$$.dirty & /*disabled*/
    16384) {
      $$invalidate(11, isDisabled = toBoolean(disabled));
    }
    if ($$self.$$.dirty & /*size*/
    2) {
      $$invalidate(10, _paddingSize = {
        small: "var(--goa-icon-button-medium-padding)",
        medium: "var(--goa-icon-button-medium-padding)",
        large: "var(--goa-icon-button-large-padding)",
        xlarge: "var(--goa-icon-button-large-padding)"
      }[size]);
    }
  };
  return [
    icon,
    size,
    theme,
    title,
    testid,
    arialabel,
    mt,
    mr,
    mb2,
    ml2,
    _paddingSize,
    isDisabled,
    css,
    variant,
    disabled,
    inverted,
    isInverted
  ];
}
class IconButton extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$u,
      create_fragment$u,
      safe_not_equal,
      {
        icon: 0,
        size: 1,
        theme: 2,
        variant: 13,
        title: 3,
        testid: 4,
        disabled: 14,
        inverted: 15,
        arialabel: 5,
        mt: 6,
        mr: 7,
        mb: 8,
        ml: 9
      },
      add_css$r
    );
  }
  get icon() {
    return this.$$.ctx[0];
  }
  set icon(icon) {
    this.$$set({ icon });
    flush();
  }
  get size() {
    return this.$$.ctx[1];
  }
  set size(size) {
    this.$$set({ size });
    flush();
  }
  get theme() {
    return this.$$.ctx[2];
  }
  set theme(theme) {
    this.$$set({ theme });
    flush();
  }
  get variant() {
    return this.$$.ctx[13];
  }
  set variant(variant) {
    this.$$set({ variant });
    flush();
  }
  get title() {
    return this.$$.ctx[3];
  }
  set title(title) {
    this.$$set({ title });
    flush();
  }
  get testid() {
    return this.$$.ctx[4];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
  get disabled() {
    return this.$$.ctx[14];
  }
  set disabled(disabled) {
    this.$$set({ disabled });
    flush();
  }
  get inverted() {
    return this.$$.ctx[15];
  }
  set inverted(inverted) {
    this.$$set({ inverted });
    flush();
  }
  get arialabel() {
    return this.$$.ctx[5];
  }
  set arialabel(arialabel) {
    this.$$set({ arialabel });
    flush();
  }
  get mt() {
    return this.$$.ctx[6];
  }
  set mt(mt) {
    this.$$set({ mt });
    flush();
  }
  get mr() {
    return this.$$.ctx[7];
  }
  set mr(mr) {
    this.$$set({ mr });
    flush();
  }
  get mb() {
    return this.$$.ctx[8];
  }
  set mb(mb2) {
    this.$$set({ mb: mb2 });
    flush();
  }
  get ml() {
    return this.$$.ctx[9];
  }
  set ml(ml2) {
    this.$$set({ ml: ml2 });
    flush();
  }
}
customElements.define("goa-icon-button", create_custom_element(IconButton, { "icon": {}, "size": {}, "theme": {}, "variant": {}, "title": {}, "testid": {}, "disabled": {}, "inverted": {}, "arialabel": {}, "mt": {}, "mr": {}, "mb": {}, "ml": {} }, [], [], true));
function add_css$q(target) {
  append_styles(target, "svelte-14603t1", ":host{--goa-icon-size-1:1rem;--goa-icon-size-2:1.125rem;--goa-icon-size-3:1.25rem;--goa-icon-size-4:1.5rem;--goa-icon-size-5:2rem;--goa-icon-size-6:2.5rem;display:inline-flex;align-items:center}ion-icon.svelte-14603t1.svelte-14603t1{pointer-events:none;width:100%;height:100%}.goa-icon.svelte-14603t1.svelte-14603t1{fill:var(--fill-color);color:var(--fill-color);opacity:var(--opacity);display:inline-flex;align-items:center;justify-content:center}.goa-icon--1.svelte-14603t1.svelte-14603t1{width:var(--goa-icon-size-1);height:var(--goa-icon-size-1)}.goa-icon--2.svelte-14603t1.svelte-14603t1{width:var(--goa-icon-size-2);height:var(--goa-icon-size-2)}.goa-icon--3.svelte-14603t1.svelte-14603t1{width:var(--goa-icon-size-3);height:var(--goa-icon-size-3)}.goa-icon--4.svelte-14603t1.svelte-14603t1{width:var(--goa-icon-size-4);height:var(--goa-icon-size-4)}.goa-icon--5.svelte-14603t1.svelte-14603t1{width:var(--goa-icon-size-5);height:var(--goa-icon-size-5)}.goa-icon--6.svelte-14603t1.svelte-14603t1{width:var(--goa-icon-size-6);height:var(--goa-icon-size-6)}.goa-icon--2xsmall.svelte-14603t1.svelte-14603t1{width:var(--goa-icon-size-s);height:var(--goa-icon-size-s)}.goa-icon--xsmall.svelte-14603t1.svelte-14603t1{width:18px;height:18px}.goa-icon--small.svelte-14603t1.svelte-14603t1{width:var(--goa-icon-size-m);height:var(--goa-icon-size-m)}.goa-icon--medium.svelte-14603t1.svelte-14603t1{width:var(--goa-icon-size-l);height:var(--goa-icon-size-l)}.goa-icon--large.svelte-14603t1.svelte-14603t1{width:2rem;height:2rem}.goa-icon--xlarge.svelte-14603t1.svelte-14603t1{width:2.5rem;height:2.5rem}.goa-icon.svelte-14603t1.svelte-14603t1:has(.icon-override){height:-moz-fit-content;height:fit-content}.icon-override.svelte-14603t1.svelte-14603t1{display:flex;flex-direction:column;align-items:center}.inverted.svelte-14603t1 .svelte-14603t1{color:var(--goa-color-greyscale-white);fill:var(--goa-color-greyscale-white)}");
}
function create_if_block$h(ctx) {
  let if_block_anchor;
  function select_block_type(ctx2, dirty) {
    if (
      /*type*/
      ctx2[4] in /*_iconOverrides*/
      ctx2[17]
    ) return create_if_block_1$8;
    return create_else_block$5;
  }
  let current_block_type = select_block_type(ctx);
  let if_block = current_block_type(ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (current_block_type === (current_block_type = select_block_type(ctx2)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_block.d(detaching);
    }
  };
}
function create_else_block$5(ctx) {
  let ion_icon;
  return {
    c() {
      ion_icon = element("ion-icon");
      set_custom_element_data(
        ion_icon,
        "name",
        /*_iconName*/
        ctx[14]
      );
      set_custom_element_data(ion_icon, "class", "svelte-14603t1");
    },
    m(target, anchor) {
      insert(target, ion_icon, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*_iconName*/
      16384) {
        set_custom_element_data(
          ion_icon,
          "name",
          /*_iconName*/
          ctx2[14]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(ion_icon);
      }
    }
  };
}
function create_if_block_1$8(ctx) {
  let div;
  let raw_value = (
    /*_iconOverrides*/
    (ctx[17][`${/*type*/
    ctx[4]}-${/*theme*/
    ctx[6]}`] || /*_iconOverrides*/
    ctx[17][
      /*type*/
      ctx[4]
    ]) + ""
  );
  return {
    c() {
      div = element("div");
      attr(div, "class", "icon-override svelte-14603t1");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      div.innerHTML = raw_value;
    },
    p(ctx2, dirty) {
      if (dirty & /*type, theme*/
      80 && raw_value !== (raw_value = /*_iconOverrides*/
      (ctx2[17][`${/*type*/
      ctx2[4]}-${/*theme*/
      ctx2[6]}`] || /*_iconOverrides*/
      ctx2[17][
        /*type*/
        ctx2[4]
      ]) + "")) div.innerHTML = raw_value;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_fragment$t(ctx) {
  let div;
  let div_class_value;
  let div_style_value;
  let if_block = (
    /*type*/
    ctx[4] && create_if_block$h(ctx)
  );
  return {
    c() {
      div = element("div");
      if (if_block) if_block.c();
      attr(
        div,
        "role",
        /*role*/
        ctx[13]
      );
      attr(
        div,
        "aria-label",
        /*arialabel*/
        ctx[11]
      );
      attr(
        div,
        "aria-controls",
        /*ariacontrols*/
        ctx[12]
      );
      attr(
        div,
        "aria-expanded",
        /*_ariaExpanded*/
        ctx[15]
      );
      attr(div, "class", div_class_value = null_to_empty(`goa-icon goa-icon--${/*size*/
      ctx[5]}`) + " svelte-14603t1");
      attr(
        div,
        "data-testid",
        /*testid*/
        ctx[10]
      );
      attr(
        div,
        "title",
        /*title*/
        ctx[9]
      );
      attr(div, "style", div_style_value = `
    ${calculateMargin(
        /*mt*/
        ctx[0],
        /*mr*/
        ctx[1],
        /*mb*/
        ctx[2],
        /*ml*/
        ctx[3]
      )}
    ${style(
        "--fill-color",
        /*fillcolor*/
        ctx[7]
      )};
    ${style(
        "--opacity",
        /*opacity*/
        ctx[8]
      )};
  `);
      toggle_class(
        div,
        "inverted",
        /*_isInverted*/
        ctx[16]
      );
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (if_block) if_block.m(div, null);
    },
    p(ctx2, [dirty]) {
      if (
        /*type*/
        ctx2[4]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block$h(ctx2);
          if_block.c();
          if_block.m(div, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (dirty & /*role*/
      8192) {
        attr(
          div,
          "role",
          /*role*/
          ctx2[13]
        );
      }
      if (dirty & /*arialabel*/
      2048) {
        attr(
          div,
          "aria-label",
          /*arialabel*/
          ctx2[11]
        );
      }
      if (dirty & /*ariacontrols*/
      4096) {
        attr(
          div,
          "aria-controls",
          /*ariacontrols*/
          ctx2[12]
        );
      }
      if (dirty & /*_ariaExpanded*/
      32768) {
        attr(
          div,
          "aria-expanded",
          /*_ariaExpanded*/
          ctx2[15]
        );
      }
      if (dirty & /*size*/
      32 && div_class_value !== (div_class_value = null_to_empty(`goa-icon goa-icon--${/*size*/
      ctx2[5]}`) + " svelte-14603t1")) {
        attr(div, "class", div_class_value);
      }
      if (dirty & /*testid*/
      1024) {
        attr(
          div,
          "data-testid",
          /*testid*/
          ctx2[10]
        );
      }
      if (dirty & /*title*/
      512) {
        attr(
          div,
          "title",
          /*title*/
          ctx2[9]
        );
      }
      if (dirty & /*mt, mr, mb, ml, fillcolor, opacity*/
      399 && div_style_value !== (div_style_value = `
    ${calculateMargin(
        /*mt*/
        ctx2[0],
        /*mr*/
        ctx2[1],
        /*mb*/
        ctx2[2],
        /*ml*/
        ctx2[3]
      )}
    ${style(
        "--fill-color",
        /*fillcolor*/
        ctx2[7]
      )};
    ${style(
        "--opacity",
        /*opacity*/
        ctx2[8]
      )};
  `)) {
        attr(div, "style", div_style_value);
      }
      if (dirty & /*size, _isInverted*/
      65568) {
        toggle_class(
          div,
          "inverted",
          /*_isInverted*/
          ctx2[16]
        );
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (if_block) if_block.d();
    }
  };
}
function iconName(type2, theme2) {
  if (type2) {
    const name = theme2 === "filled" || type2.indexOf("logo") === 0 ? type2 : `${type2}-${theme2}`;
    return name;
  }
  return "";
}
function instance$t($$self, $$props, $$invalidate) {
  let _isInverted;
  let _ariaExpanded;
  let _iconName;
  let { mt = null } = $$props;
  let { mr = null } = $$props;
  let { mb: mb2 = null } = $$props;
  let { ml: ml2 = null } = $$props;
  let { type } = $$props;
  let { size = "medium" } = $$props;
  let { theme = "outline" } = $$props;
  let { inverted = "false" } = $$props;
  let { fillcolor = "" } = $$props;
  let { opacity = 1 } = $$props;
  let { title = "" } = $$props;
  let { testid = "" } = $$props;
  let { arialabel = "" } = $$props;
  let { ariacontrols = "" } = $$props;
  let { ariaexpanded = "" } = $$props;
  let { role = "img" } = $$props;
  const _iconOverrides = {
    pencil: `<svg width="24" height="25" viewBox="0 0 24 25" fill="none" xmlns="http://www.w3.org/2000/svg"> <path d="M4.86885 18.6573C4.86885 18.9334 5.0927 19.1573 5.36885 19.1573H5.90136C6.03391 19.1573 6.16103 19.1046 6.25479 19.0109L15.6988 9.57357L14.4593 8.33405L5.01542 17.7713C4.92157 17.865 4.86885 17.9923 4.86885 18.1249V18.6573ZM19.1614 8.47035L15.5555 4.86447L16.7387 3.68129C17.058 3.36202 17.4571 3.20708 17.936 3.21647C18.4149 3.22586 18.814 3.39019 19.1333 3.70946L20.3446 4.92081C20.6639 5.24008 20.8235 5.63447 20.8235 6.10399C20.8235 6.5735 20.6639 6.9679 20.3446 7.28717L19.1614 8.47035ZM4.02372 20.8475C3.77957 20.8475 3.57768 20.7677 3.41804 20.608C3.25841 20.4484 3.17859 20.2465 3.17859 20.0024V17.5797C3.17859 17.467 3.19737 17.3637 3.23493 17.2698C3.27249 17.1759 3.33822 17.082 3.43213 16.9881L14.4874 5.93952L18.0933 9.5454L7.03801 20.594C6.9441 20.6879 6.8502 20.7536 6.7563 20.7912C6.6624 20.8287 6.5591 20.8475 6.44642 20.8475H4.02372Z" fill="currentcolor"/> </svg>`,
    "pencil-filled": `<svg width="24" height="25" viewBox="0 0 24 25" fill="none" xmlns="http://www.w3.org/2000/svg"> <path d="M19.1442 8.47956L15.5355 4.87088L16.7196 3.68678C17.0391 3.36726 17.4385 3.2122 17.9178 3.22159C18.3971 3.23099 18.7965 3.39545 19.116 3.71497L20.3283 4.92726C20.6478 5.24678 20.8076 5.64148 20.8076 6.11136C20.8076 6.58124 20.6478 6.97594 20.3283 7.29546L19.1442 8.47956ZM4.03951 20.8424C3.79517 20.8424 3.59312 20.7626 3.43337 20.6028C3.27361 20.443 3.19373 20.241 3.19373 19.9966V17.5721C3.19373 17.4593 3.21252 17.356 3.25011 17.262C3.2877 17.168 3.35349 17.074 3.44746 16.9801L14.4689 5.93435L18.0776 9.54303L7.05615 20.5887C6.96217 20.6827 6.8682 20.7485 6.77422 20.7861C6.68024 20.8236 6.57687 20.8424 6.4641 20.8424H4.03951Z" fill="currentcolor" /> </svg>`,
    checkmark: `<svg width="18" height="14" viewBox="0 0 18 14" fill="none" xmlns="http://www.w3.org/2000/svg"> <path fill-rule="evenodd" clip-rule="evenodd" d="M6.20129 11.5368L15.9974 0.341265C16.3611 -0.0743717 16.9929 -0.116489 17.4085 0.247193C17.8241 0.610875 17.8663 1.24264 17.5026 1.65827L7.00258 13.6583C6.82032 13.8666 6.5599 13.99 6.28328 13.9992C6.00666 14.0084 5.7386 13.9026 5.54289 13.7069L1.04289 9.20688C0.652369 8.81635 0.652369 8.18319 1.04289 7.79266C1.43342 7.40214 2.06658 7.40214 2.45711 7.79266L6.20129 11.5368Z" fill="currentcolor"/> </svg>`,
    remove: `<svg width="16" height="20" viewBox="0 0 16 1" fill="none" xmlns="http://www.w3.org/2000/svg"> <path d="M1.5 -0.000244141C0.947715 -0.000244141 0.5 0.447471 0.5 0.999756C0.5 1.55204 0.947715 1.99976 1.5 1.99976H15C15.5523 1.99976 16 1.55204 16 0.999756C16 0.447471 15.5523 -0.000244141 15 -0.000244141H1.5Z" fill="currentcolor"/> </svg>`,
    "goa-file": `<svg width="39" height="48" viewBox="0 0 39 48" fill="none" xmlns="http://www.w3.org/2000/svg"> <g clip-path="url(#clip0_1357_108691)"> <path d="M38.741 14C38.541 13.07 38.081 12.22 37.401 11.54L36.861 11L27.861 2L27.321 1.46C26.641 0.78 25.781 0.32 24.861 0.12C24.511 0.04 24.151 0 23.791 0H5.86096C3.10096 0 0.860962 2.24 0.860962 5V43C0.860962 45.76 3.10096 48 5.86096 48H33.861C36.621 48 38.861 45.76 38.861 43V15.07C38.861 14.71 38.811 14.35 38.741 14ZM35.041 12H29.871C28.221 12 26.871 10.65 26.871 9V3.83L35.041 12ZM36.871 43C36.871 44.65 35.521 46 33.871 46H5.87097C4.22097 46 2.87097 44.65 2.87097 43V5C2.87097 3.35 4.22097 2 5.87097 2H23.801C24.171 2 24.531 2.07 24.871 2.2V9C24.871 11.76 27.111 14 29.871 14H36.671C36.801 14.34 36.871 14.7 36.871 15.07V43Z" fill="currentcolor"/> </g> <defs> <clipPath id="clip0_1357_108691"><rect width="38" height="48" fill="white" transform="translate(0.861328)"/></clipPath></defs></svg>`,
    "goa-text": `<svg width="39" height="48" viewBox="0 0 39 48" fill="none" xmlns="http://www.w3.org/2000/svg"> <path d="M38.7953 14C38.5953 13.07 38.1353 12.22 37.4553 11.54L36.9153 11L27.9153 2L27.3753 1.46C26.6953 0.78 25.8353 0.32 24.9153 0.12C24.5653 0.04 24.2053 0 23.8453 0H5.91528C3.15528 0 0.915283 2.24 0.915283 5V43C0.915283 45.76 3.15528 48 5.91528 48H33.9153C36.6753 48 38.9153 45.76 38.9153 43V15.07C38.9153 14.71 38.8653 14.35 38.7953 14ZM35.0953 12H29.9253C28.2753 12 26.9253 10.65 26.9253 9V3.83L35.0953 12ZM36.9253 43C36.9253 44.65 35.5753 46 33.9253 46H5.91528C4.26528 46 2.91528 44.65 2.91528 43V5C2.91528 3.35 4.26528 2 5.91528 2H23.8453C24.2153 2 24.5753 2.07 24.9153 2.2V9C24.9153 11.76 27.1553 14 29.9153 14H36.7153C36.8453 14.34 36.9153 14.7 36.9153 15.07V43H36.9253Z" fill="currentcolor"/> <path d="M27.9153 34H11.9153C11.363 34 10.9153 34.4477 10.9153 35C10.9153 35.5523 11.363 36 11.9153 36H27.9153C28.4676 36 28.9153 35.5523 28.9153 35C28.9153 34.4477 28.4676 34 27.9153 34Z" fill="currentcolor"/> <path d="M27.9153 26H11.9153C11.363 26 10.9153 26.4477 10.9153 27C10.9153 27.5523 11.363 28 11.9153 28H27.9153C28.4676 28 28.9153 27.5523 28.9153 27C28.9153 26.4477 28.4676 26 27.9153 26Z" fill="currentcolor"/> </svg>`,
    "goa-pdf": `<svg width="39" height="48" viewBox="0 0 39 48" fill="none" xmlns="http://www.w3.org/2000/svg"> <path d="M37.8861 14C37.6861 13.07 37.2261 12.22 36.5461 11.54L36.0061 11L27.0061 2L26.4661 1.46C25.7861 0.78 24.9261 0.32 24.0061 0.12C23.6561 0.04 23.2961 0 22.9361 0H5.0061C2.2461 0 0.00610352 2.24 0.00610352 5V43C0.00610352 45.76 2.2461 48 5.0061 48H33.0061C35.7661 48 38.0061 45.76 38.0061 43V15.07C38.0061 14.71 37.9561 14.35 37.8861 14ZM34.1861 12H29.0161C27.3661 12 26.0161 10.65 26.0161 9V3.83L34.1861 12ZM36.0161 43C36.0161 44.65 34.6661 46 33.0161 46H5.0061C3.3561 46 2.0061 44.65 2.0061 43V5C2.0061 3.35 3.3561 2 5.0061 2H22.9361C23.3061 2 23.6661 2.07 24.0061 2.2V9C24.0061 11.76 26.2461 14 29.0061 14H35.8061C35.9361 14.34 36.0061 14.7 36.0061 15.07V43H36.0161Z" fill="currentcolor"/> <path d="M5.02611 27C5.02611 26.45 5.47611 26 6.02611 26H9.05611C11.1161 26 12.9261 27.06 12.9261 29.28C12.9261 31.5 11.2461 32.74 8.85611 32.74H7.25611V35.85C7.25611 36.47 6.75611 36.97 6.13611 36.97C5.51611 36.97 5.01611 36.47 5.01611 35.85V27.01L5.02611 27ZM7.26611 30.96H8.73611C9.91611 30.96 10.6561 30.53 10.6561 29.31C10.6561 28.22 9.90611 27.77 8.79611 27.77H7.25611V30.96H7.26611Z" fill="currentcolor"/> <path d="M15.0361 27C15.0361 26.45 15.4861 26 16.0361 26H18.8461C22.1761 26 24.0161 28.03 24.0161 31.25C24.0161 34.82 22.0961 36.96 18.7661 36.96H16.0361C15.4861 36.96 15.0361 36.51 15.0361 35.96V27ZM17.2961 35.2H18.7361C20.6861 35.2 21.6961 33.74 21.6961 31.28C21.6961 29.25 20.7861 27.79 18.7461 27.79H17.2861V35.2H17.2961Z" fill="currentcolor"/> <path d="M25.9761 27C25.9761 26.45 26.4261 26 26.9761 26H32.0861C32.5961 26 33.0061 26.41 33.0061 26.92C33.0061 27.43 32.5961 27.84 32.0861 27.84H28.1761V30.63H31.8161C32.3161 30.63 32.7161 31.03 32.7161 31.53C32.7161 32.03 32.3161 32.43 31.8161 32.43H28.1761V35.86C28.1761 36.47 27.6861 36.96 27.0761 36.96C26.4661 36.96 25.9761 36.47 25.9761 35.86V26.99V27Z" fill="currentcolor"/> </svg> `,
    "goa-doc": `<svg width="39" height="48" viewBox="0 0 39 48" fill="none" xmlns="http://www.w3.org/2000/svg"> <path d="M38.6134 14C38.4134 13.07 37.9534 12.22 37.2734 11.54L36.7334 11L27.7334 2L27.1934 1.46C26.5134 0.78 25.6534 0.32 24.7334 0.12C24.3834 0.04 24.0234 0 23.6634 0H5.7334C2.9734 0 0.733398 2.24 0.733398 5V43C0.733398 45.76 2.9734 48 5.7334 48H33.7334C36.4934 48 38.7334 45.76 38.7334 43V15.07C38.7334 14.71 38.6834 14.35 38.6134 14ZM34.9134 12H29.7434C28.0934 12 26.7434 10.65 26.7434 9V3.83L34.9134 12ZM36.7434 43C36.7434 44.65 35.3934 46 33.7434 46H5.7334C4.0834 46 2.7334 44.65 2.7334 43V5C2.7334 3.35 4.0834 2 5.7334 2H23.6634C24.0334 2 24.3934 2.07 24.7334 2.2V9C24.7334 11.76 26.9734 14 29.7334 14H36.5334C36.6634 14.34 36.7334 14.7 36.7334 15.07V43H36.7434Z" fill="currentcolor"/> <path d="M13.7834 36.6406L10.9034 24.5806C10.6934 23.7206 11.3534 22.8906 12.2334 22.8906C12.8734 22.8906 13.4334 23.3406 13.5734 23.9706C14.4934 28.2306 15.3434 32.5006 15.6434 34.9706H15.6634C16.0934 32.6806 17.3834 27.7106 18.2434 24.0806C18.4134 23.3806 19.0334 22.8906 19.7534 22.8906C20.4634 22.8906 21.0834 23.3706 21.2534 24.0606C22.0734 27.3606 23.3634 32.5806 23.7534 34.8406H23.7734C24.1834 32.0406 25.4534 26.8306 26.1134 23.8706C26.2434 23.3006 26.7434 22.8906 27.3334 22.8906C28.1534 22.8906 28.7434 23.6606 28.5434 24.4506L25.4134 36.6706C25.2134 37.4606 24.5034 38.0106 23.6934 38.0106C22.8634 38.0106 22.1534 37.4506 21.9634 36.6406C21.1734 33.2806 20.0434 28.8506 19.6434 26.6306H19.6234C19.1834 28.9106 18.0234 33.4506 17.2234 36.6606C17.0234 37.4506 16.3134 38.0006 15.5034 38.0006C14.6834 38.0006 13.9634 37.4406 13.7734 36.6406H13.7834Z" fill="currentcolor"/> </svg> `,
    "goa-ppt": `<svg width="39" height="48" viewBox="0 0 39 48" fill="none" xmlns="http://www.w3.org/2000/svg"> <path d="M38.2498 14C38.0498 13.07 37.5898 12.22 36.9098 11.54L36.3698 11L27.3698 2L26.8298 1.46C26.1497 0.78 25.2898 0.32 24.3698 0.12C24.0198 0.04 23.6598 0 23.2998 0H5.36975C2.60975 0 0.369751 2.24 0.369751 5V43C0.369751 45.76 2.60975 48 5.36975 48H33.3698C36.1297 48 38.3698 45.76 38.3698 43V15.07C38.3698 14.71 38.3198 14.35 38.2498 14ZM34.5498 12H29.3798C27.7298 12 26.3798 10.65 26.3798 9V3.83L34.5498 12ZM36.3797 43C36.3797 44.65 35.0298 46 33.3797 46H5.36975C3.71975 46 2.36975 44.65 2.36975 43V5C2.36975 3.35 3.71975 2 5.36975 2H23.2998C23.6698 2 24.0298 2.07 24.3698 2.2V9C24.3698 11.76 26.6098 14 29.3698 14H36.1698C36.2998 14.34 36.3698 14.7 36.3698 15.07V43H36.3797Z" fill="currentcolor"/> <path d="M14.0798 24.8906C14.0798 23.7906 14.9798 22.8906 16.0798 22.8906H19.4698C22.3098 22.8906 24.6598 24.3406 24.6598 27.2906C24.6598 30.2406 22.4198 31.9306 19.2298 31.9306H16.7698V36.6606C16.7698 37.4006 16.1698 38.0006 15.4298 38.0006C14.6898 38.0006 14.0898 37.4006 14.0898 36.6606V24.8906H14.0798ZM16.7598 29.8206H19.0698C20.8098 29.8206 21.9498 29.1806 21.9498 27.3606C21.9498 25.7306 20.7798 25.0306 19.1298 25.0306H16.7498V29.8306L16.7598 29.8206Z" fill="currentcolor"/> </svg> `,
    "goa-xls": `<svg width="39" height="48" viewBox="0 0 39 48" fill="none" xmlns="http://www.w3.org/2000/svg"> <path d="M38.3407 14C38.1407 13.07 37.6807 12.22 37.0007 11.54L36.4607 11L27.4607 2L26.9207 1.46C26.2407 0.78 25.3807 0.32 24.4607 0.12C24.1107 0.04 23.7507 0 23.3907 0H5.46069C2.70069 0 0.460693 2.24 0.460693 5V43C0.460693 45.76 2.70069 48 5.46069 48H33.4607C36.2207 48 38.4607 45.76 38.4607 43V15.07C38.4607 14.71 38.4107 14.35 38.3407 14ZM34.6407 12H29.4707C27.8207 12 26.4707 10.65 26.4707 9V3.83L34.6407 12ZM36.4707 43C36.4707 44.65 35.1207 46 33.4707 46H5.46069C3.81069 46 2.46069 44.65 2.46069 43V5C2.46069 3.35 3.81069 2 5.46069 2H23.3907C23.7607 2 24.1207 2.07 24.4607 2.2V9C24.4607 11.76 26.7007 14 29.4607 14H36.2607C36.3907 14.34 36.4607 14.7 36.4607 15.07V43H36.4707Z" fill="currentcolor"/> <path d="M23.4107 38.0006C22.9407 38.0006 22.5107 37.7506 22.2707 37.3406L19.3907 32.2806H19.3707L16.4607 37.3906C16.2507 37.7706 15.8407 38.0006 15.4107 38.0006C14.4707 38.0006 13.8907 36.9706 14.3807 36.1606L17.9207 30.3906L14.5807 24.8606C14.0607 23.9906 14.6807 22.8906 15.6907 22.8906C16.1607 22.8906 16.5907 23.1406 16.8207 23.5406L19.5307 28.2806L19.5507 28.2606L22.3507 23.4806C22.5607 23.1206 22.9507 22.8906 23.3807 22.8906C24.3107 22.8906 24.8807 23.9106 24.3907 24.7006L21.0307 30.1206L24.5407 36.0206C25.0607 36.8906 24.4307 38.0006 23.4207 38.0006H23.4107Z" fill="currentcolor"/> </svg> `,
    "goa-zip": `<svg width="39" height="48" viewBox="0 0 39 48" fill="none" xmlns="http://www.w3.org/2000/svg"> <path d="M38.7043 14C38.5043 13.07 38.0443 12.22 37.3643 11.54L36.8243 11L27.8243 2L27.2843 1.46C26.6043 0.78 25.7443 0.32 24.8243 0.12C24.4743 0.04 24.1143 0 23.7543 0H5.82434C3.06434 0 0.824341 2.24 0.824341 5V43C0.824341 45.76 3.06434 48 5.82434 48H33.8243C36.5843 48 38.8243 45.76 38.8243 43V15.07C38.8243 14.71 38.7743 14.35 38.7043 14ZM35.0043 12H29.8343C28.1843 12 26.8343 10.65 26.8343 9V3.83L35.0043 12ZM36.8343 43C36.8343 44.65 35.4843 46 33.8343 46H5.82434C4.17434 46 2.82434 44.65 2.82434 43V5C2.82434 3.35 4.17434 2 5.82434 2H23.7543C24.1243 2 24.4843 2.07 24.8243 2.2V9C24.8243 11.76 27.0643 14 29.8243 14H36.6243C36.7543 14.34 36.8243 14.7 36.8243 15.07V43H36.8343Z" fill="currentcolor"/> <path d="M14.8243 20H12.8243V22H14.8243V20Z" fill="currentcolor"/> <path d="M12.8243 18H10.8243V20H12.8243V18Z" fill="currentcolor"/> <path d="M14.8243 16H12.8243V18H14.8243V16Z" fill="currentcolor"/> <path d="M12.8243 14H10.8243V16H12.8243V14Z" fill="currentcolor"/> <path d="M14.8243 12H12.8243V14H14.8243V12Z" fill="currentcolor"/> <path d="M12.8243 10H10.8243V12H12.8243V10Z" fill="currentcolor"/> <path d="M14.8243 8H12.8243V10H14.8243V8Z" fill="currentcolor"/> <path d="M12.8243 6H10.8243V8H12.8243V6Z" fill="currentcolor"/> <path d="M14.8243 4H12.8243V6H14.8243V4Z" fill="currentcolor"/> <path d="M12.8243 2H10.8243V4H12.8243V2Z" fill="currentcolor"/> <path d="M17.7244 32.14L15.4744 23.69C15.3644 23.29 15.0044 23 14.5844 23H11.0644C10.6444 23 10.2744 23.28 10.1744 23.69L7.92435 32.14C7.30435 35.17 9.62435 37.97 12.8244 38C16.0144 37.98 18.3444 35.18 17.7244 32.14ZM15.1944 34.89C14.6244 35.58 13.7644 35.98 12.8244 35.99C11.8844 35.98 11.0244 35.58 10.4544 34.89C9.92435 34.24 9.71435 33.42 9.87435 32.59L11.8944 25H13.7544L15.7744 32.59C15.9344 33.42 15.7244 34.24 15.1944 34.89Z" fill="currentcolor"/> <path d="M13.8243 32H11.8243C11.2721 32 10.8243 32.4477 10.8243 33C10.8243 33.5523 11.2721 34 11.8243 34H13.8243C14.3766 34 14.8243 33.5523 14.8243 33C14.8243 32.4477 14.3766 32 13.8243 32Z" fill="currentcolor"/> </svg> `,
    "goa-video": `<svg width="39" height="48" viewBox="0 0 39 48" fill="none" xmlns="http://www.w3.org/2000/svg"> <path d="M37.977 14C37.777 13.07 37.317 12.22 36.637 11.54L36.097 11L27.097 2L26.557 1.46C25.877 0.78 25.017 0.32 24.097 0.12C23.747 0.04 23.387 0 23.027 0H5.09705C2.33705 0 0.0970459 2.24 0.0970459 5V43C0.0970459 45.76 2.33705 48 5.09705 48H33.097C35.857 48 38.097 45.76 38.097 43V15.07C38.097 14.71 38.047 14.35 37.977 14ZM34.277 12H29.107C27.457 12 26.107 10.65 26.107 9V3.83L34.277 12ZM36.107 43C36.107 44.65 34.757 46 33.107 46H5.09705C3.44705 46 2.09705 44.65 2.09705 43V5C2.09705 3.35 3.44705 2 5.09705 2H23.027C23.397 2 23.757 2.07 24.097 2.2V9C24.097 11.76 26.337 14 29.097 14H35.897C36.027 14.34 36.097 14.7 36.097 15.07V43H36.107Z" fill="currentcolor"/> <path d="M22.097 26.0002V29.0102C22.097 29.7802 22.927 30.2602 23.587 29.8802L25.077 29.0302L28.087 27.3202V34.6902L25.077 32.9802L23.587 32.1302C22.917 31.7502 22.097 32.2302 22.097 33.0002V35.9902H10.097V25.9902H22.097M22.097 23.9902H10.097C8.99705 23.9902 8.09705 24.8902 8.09705 25.9902V35.9902C8.09705 37.0902 8.99705 37.9902 10.097 37.9902H22.097C23.197 37.9902 24.097 37.0902 24.097 35.9902V34.7202L27.107 36.4302C27.427 36.6102 27.767 36.6902 28.087 36.6902C29.137 36.6902 30.087 35.8502 30.087 34.6902V27.3202C30.087 26.1502 29.127 25.3202 28.087 25.3202C27.757 25.3202 27.417 25.4002 27.107 25.5802L24.097 27.2902V25.9902C24.097 24.8902 23.197 23.9902 22.097 23.9902Z" fill="currentcolor"/> </svg> `,
    "goa-audio": `<svg width="39" height="49" viewBox="0 0 39 49" fill="none" xmlns="http://www.w3.org/2000/svg"> <path d="M38.0679 14.2305C37.8679 13.3005 37.4079 12.4505 36.7279 11.7705L36.1879 11.2305L27.1879 2.23047L26.6479 1.69047C25.9679 1.01047 25.1079 0.550469 24.1879 0.350469C23.8379 0.270469 23.4779 0.230469 23.1179 0.230469H5.18793C2.42793 0.230469 0.187927 2.47047 0.187927 5.23047V43.2305C0.187927 45.9905 2.42793 48.2305 5.18793 48.2305H33.1879C35.9479 48.2305 38.1879 45.9905 38.1879 43.2305V15.3005C38.1879 14.9405 38.1379 14.5805 38.0679 14.2305ZM34.3679 12.2305H29.1979C27.5479 12.2305 26.1979 10.8805 26.1979 9.23047V4.06047L34.3679 12.2305ZM36.1979 43.2305C36.1979 44.8805 34.8479 46.2305 33.1979 46.2305H5.19792C3.54792 46.2305 2.19792 44.8805 2.19792 43.2305V5.23047C2.19792 3.58047 3.54792 2.23047 5.19792 2.23047H23.1279C23.4979 2.23047 23.8579 2.30047 24.1979 2.43047V9.23047C24.1979 11.9905 26.4379 14.2305 29.1979 14.2305H35.9979C36.1279 14.5705 36.1979 14.9305 36.1979 15.3005V43.2305Z" fill="currentcolor"/> <path d="M20.1879 25.1189V37.3489L16.3479 34.6089L15.8279 34.2389H10.1879V28.2389H15.8279L16.3479 27.8689L20.1879 25.1289M20.1879 23.1289C19.7979 23.1289 19.3979 23.2489 19.0279 23.5089L15.1879 26.2489H10.1879C9.08793 26.2489 8.18793 27.1489 8.18793 28.2489V34.2489C8.18793 35.3489 9.08793 36.2489 10.1879 36.2489H15.1879L19.0279 38.9889C19.3879 39.2489 19.7879 39.3689 20.1879 39.3689C21.2279 39.3689 22.1979 38.5489 22.1979 37.3689V25.1389C22.1979 23.9589 21.2279 23.1389 20.1879 23.1389V23.1289Z" fill="currentcolor"/> <path d="M26.1381 23.707C26.6381 24.037 27.1081 24.417 27.5481 24.857C27.9881 25.297 28.3681 25.767 28.6981 26.267C29.0281 26.767 29.2981 27.287 29.5181 27.837C29.7381 28.387 29.8981 28.937 30.0081 29.507C30.1181 30.077 30.1681 30.647 30.1681 31.227C30.1681 31.807 30.1181 32.377 30.0081 32.947C29.8981 33.517 29.7381 34.077 29.5181 34.617C29.2981 35.157 29.0281 35.687 28.6981 36.187C28.3681 36.687 27.9881 37.157 27.5481 37.597C27.1081 38.037 26.6381 38.417 26.1381 38.747" stroke="currentcolor" stroke-width="2" stroke-miterlimit="10" stroke-linecap="round"/> </svg> `,
    "goa-image": `<svg width="39" height="49" viewBox="0 0 39 49" fill="none" xmlns="http://www.w3.org/2000/svg"> <path d="M38.1588 14.2305C37.9588 13.3005 37.4988 12.4505 36.8188 11.7705L36.2788 11.2305L27.2788 2.23047L26.7388 1.69047C26.0588 1.01047 25.1988 0.550469 24.2788 0.350469C23.9288 0.270469 23.5688 0.230469 23.2088 0.230469H5.27881C2.51881 0.230469 0.278809 2.47047 0.278809 5.23047V43.2305C0.278809 45.9905 2.51881 48.2305 5.27881 48.2305H33.2788C36.0388 48.2305 38.2788 45.9905 38.2788 43.2305V15.3005C38.2788 14.9405 38.2288 14.5805 38.1588 14.2305ZM34.4588 12.2305H29.2888C27.6388 12.2305 26.2888 10.8805 26.2888 9.23047V4.06047L34.4588 12.2305ZM36.2888 43.2305C36.2888 44.8805 34.9388 46.2305 33.2888 46.2305H5.2888C3.6388 46.2305 2.2888 44.8805 2.2888 43.2305V5.23047C2.2888 3.58047 3.6388 2.23047 5.2888 2.23047H23.2188C23.5888 2.23047 23.9488 2.30047 24.2888 2.43047V9.23047C24.2888 11.9905 26.5288 14.2305 29.2888 14.2305H36.0888C36.2188 14.5705 36.2888 14.9305 36.2888 15.3005V43.2305Z" fill="currentcolor"/> <path d="M20.9985 28.2305C21.3585 28.2305 21.6485 28.4405 21.7885 28.7305L27.1085 36.7305C27.3185 37.0205 27.3185 37.4405 27.1785 37.7305C27.0385 38.0905 26.6785 38.2305 26.3185 38.2305H12.2385C11.8785 38.2305 11.5885 38.0905 11.3785 37.7305C11.2385 37.4405 11.2385 37.0205 11.4485 36.7305L14.8285 31.7305C14.9685 31.4405 15.3285 31.2305 15.6185 31.2305C15.9785 31.2305 16.2685 31.4405 16.4785 31.7305L17.3385 32.9405L20.1385 28.7305C20.3585 28.4405 20.6385 28.2305 20.9985 28.2305ZM20.9985 26.2305C20.0485 26.2305 19.1685 26.6905 18.5385 27.5305L18.4985 27.5805L18.4685 27.6305L17.1185 29.6605C16.6585 29.3805 16.1485 29.2405 15.6085 29.2405C14.6085 29.2405 13.6185 29.8205 13.1085 30.6905L9.79851 35.5905C9.17851 36.4505 9.08851 37.6705 9.57851 38.6305L9.60851 38.7005L9.6485 38.7705C10.2085 39.7005 11.1485 40.2405 12.2285 40.2405H26.3085C27.5185 40.2405 28.5385 39.6005 28.9985 38.5605C29.4385 37.6105 29.3385 36.4405 28.7485 35.6005L23.5085 27.7105C22.9885 26.8005 22.0485 26.2405 21.0085 26.2405L20.9985 26.2305Z" fill="currentcolor"/> <path d="M12.7788 23.2305C13.6088 23.2305 14.2788 23.9005 14.2788 24.7305C14.2788 25.5605 13.6088 26.2305 12.7788 26.2305C11.9488 26.2305 11.2788 25.5605 11.2788 24.7305C11.2788 23.9005 11.9488 23.2305 12.7788 23.2305ZM12.7788 21.2305C10.8488 21.2305 9.27881 22.8005 9.27881 24.7305C9.27881 26.6605 10.8488 28.2305 12.7788 28.2305C14.7088 28.2305 16.2788 26.6605 16.2788 24.7305C16.2788 22.8005 14.7088 21.2305 12.7788 21.2305Z" fill="currentcolor"/> </svg> `
  };
  $$self.$$set = ($$props2) => {
    if ("mt" in $$props2) $$invalidate(0, mt = $$props2.mt);
    if ("mr" in $$props2) $$invalidate(1, mr = $$props2.mr);
    if ("mb" in $$props2) $$invalidate(2, mb2 = $$props2.mb);
    if ("ml" in $$props2) $$invalidate(3, ml2 = $$props2.ml);
    if ("type" in $$props2) $$invalidate(4, type = $$props2.type);
    if ("size" in $$props2) $$invalidate(5, size = $$props2.size);
    if ("theme" in $$props2) $$invalidate(6, theme = $$props2.theme);
    if ("inverted" in $$props2) $$invalidate(18, inverted = $$props2.inverted);
    if ("fillcolor" in $$props2) $$invalidate(7, fillcolor = $$props2.fillcolor);
    if ("opacity" in $$props2) $$invalidate(8, opacity = $$props2.opacity);
    if ("title" in $$props2) $$invalidate(9, title = $$props2.title);
    if ("testid" in $$props2) $$invalidate(10, testid = $$props2.testid);
    if ("arialabel" in $$props2) $$invalidate(11, arialabel = $$props2.arialabel);
    if ("ariacontrols" in $$props2) $$invalidate(12, ariacontrols = $$props2.ariacontrols);
    if ("ariaexpanded" in $$props2) $$invalidate(19, ariaexpanded = $$props2.ariaexpanded);
    if ("role" in $$props2) $$invalidate(13, role = $$props2.role);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*inverted*/
    262144) {
      $$invalidate(16, _isInverted = toBoolean(inverted));
    }
    if ($$self.$$.dirty & /*ariaexpanded*/
    524288) {
      $$invalidate(15, _ariaExpanded = toBoolean(ariaexpanded));
    }
    if ($$self.$$.dirty & /*type, theme*/
    80) {
      $$invalidate(14, _iconName = iconName(type, theme));
    }
  };
  return [
    mt,
    mr,
    mb2,
    ml2,
    type,
    size,
    theme,
    fillcolor,
    opacity,
    title,
    testid,
    arialabel,
    ariacontrols,
    role,
    _iconName,
    _ariaExpanded,
    _isInverted,
    _iconOverrides,
    inverted,
    ariaexpanded
  ];
}
class Icon extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$t,
      create_fragment$t,
      safe_not_equal,
      {
        mt: 0,
        mr: 1,
        mb: 2,
        ml: 3,
        type: 4,
        size: 5,
        theme: 6,
        inverted: 18,
        fillcolor: 7,
        opacity: 8,
        title: 9,
        testid: 10,
        arialabel: 11,
        ariacontrols: 12,
        ariaexpanded: 19,
        role: 13
      },
      add_css$q
    );
  }
  get mt() {
    return this.$$.ctx[0];
  }
  set mt(mt) {
    this.$$set({ mt });
    flush();
  }
  get mr() {
    return this.$$.ctx[1];
  }
  set mr(mr) {
    this.$$set({ mr });
    flush();
  }
  get mb() {
    return this.$$.ctx[2];
  }
  set mb(mb2) {
    this.$$set({ mb: mb2 });
    flush();
  }
  get ml() {
    return this.$$.ctx[3];
  }
  set ml(ml2) {
    this.$$set({ ml: ml2 });
    flush();
  }
  get type() {
    return this.$$.ctx[4];
  }
  set type(type) {
    this.$$set({ type });
    flush();
  }
  get size() {
    return this.$$.ctx[5];
  }
  set size(size) {
    this.$$set({ size });
    flush();
  }
  get theme() {
    return this.$$.ctx[6];
  }
  set theme(theme) {
    this.$$set({ theme });
    flush();
  }
  get inverted() {
    return this.$$.ctx[18];
  }
  set inverted(inverted) {
    this.$$set({ inverted });
    flush();
  }
  get fillcolor() {
    return this.$$.ctx[7];
  }
  set fillcolor(fillcolor) {
    this.$$set({ fillcolor });
    flush();
  }
  get opacity() {
    return this.$$.ctx[8];
  }
  set opacity(opacity) {
    this.$$set({ opacity });
    flush();
  }
  get title() {
    return this.$$.ctx[9];
  }
  set title(title) {
    this.$$set({ title });
    flush();
  }
  get testid() {
    return this.$$.ctx[10];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
  get arialabel() {
    return this.$$.ctx[11];
  }
  set arialabel(arialabel) {
    this.$$set({ arialabel });
    flush();
  }
  get ariacontrols() {
    return this.$$.ctx[12];
  }
  set ariacontrols(ariacontrols) {
    this.$$set({ ariacontrols });
    flush();
  }
  get ariaexpanded() {
    return this.$$.ctx[19];
  }
  set ariaexpanded(ariaexpanded) {
    this.$$set({ ariaexpanded });
    flush();
  }
  get role() {
    return this.$$.ctx[13];
  }
  set role(role) {
    this.$$set({ role });
    flush();
  }
}
customElements.define("goa-icon", create_custom_element(Icon, { "mt": {}, "mr": {}, "mb": {}, "ml": {}, "type": {}, "size": {}, "theme": {}, "inverted": {}, "fillcolor": {}, "opacity": {}, "title": {}, "testid": {}, "arialabel": {}, "ariacontrols": {}, "ariaexpanded": {}, "role": {} }, [], [], true));
function add_css$p(target) {
  append_styles(target, "svelte-1gpf5ub", `:host{--goa-text-input-typography:var(--goa-typography-body-m);--goa-text-input-color-bg:var(--goa-color-greyscale-white);--goa-text-input-color-text:var(--goa-color-text-default);--goa-text-input-color-text-disabled:var(--goa-color-text-secondary);--goa-text-input-color-bg-disabled:var(--goa-color-greyscale-100);--goa-text-input-color-text-placeholder:var(--goa-color-text-secondary);--goa-text-input-border-radius:var(--goa-border-radius-m);--goa-text-input-border:inset 0 0 0 var(--goa-border-width-s) var(--goa-color-greyscale-700);--goa-text-input-border-hover:inset 0 0 0 var(--goa-border-width-m) var(--goa-color-interactive-hover);--goa-text-input-border-focus:0 0 0 var(--goa-border-width-l) var(--goa-color-interactive-focus);--goa-text-input-border-error:inset 0 0 0 var(--goa-border-width-m) var(--goa-color-interactive-error);--goa-text-input-border-disabled:1px solid var(--goa-color-greyscale-200);--goa-text-input-padding:7px var(--goa-text-input-padding-lr) 9px;--goa-text-input-padding-lr:var(--goa-space-s);--goa-text-input-space-btw-icon-text:var(--goa-space-xs);--goa-text-input-size-icon: ;--goa-text-input-color-icon: ;--goa-text-input-color-icon-disabled:var(--goa-color-greyscale-500);--goa-text-input-lt-content-color-bg:var(--goa-color-greyscale-100);--goa-text-input-lt-content-color-text:var(--goa-color-text-default);--goa-text-input-transition:box-shadow 0.05s ease-in;box-sizing:border-box}.container.svelte-1gpf5ub.svelte-1gpf5ub{position:relative;width:auto;display:inline-block;max-width:100%}@media not (max-width: 623px){.container.svelte-1gpf5ub.svelte-1gpf5ub{width:auto}}.goa-input.svelte-1gpf5ub.svelte-1gpf5ub,.goa-input.svelte-1gpf5ub .svelte-1gpf5ub{line-height:normal}.goa-input.svelte-1gpf5ub.svelte-1gpf5ub{outline:none;transition:var(--goa-text-input-transition);background-clip:padding-box;display:inline-flex;align-items:stretch;min-width:100%;background-color:var(--goa-text-input-color-bg);box-shadow:var(--goa-text-input-border);border-radius:var(--goa-text-input-border-radius);vertical-align:middle;max-width:100%}.goa-input.svelte-1gpf5ub.svelte-1gpf5ub:not(.error):not(.leading-content):not(.trailing-content):hover:not(
      :has(input:focus-visible)
    ){box-shadow:var(--goa-text-input-border-hover)}.goa-input.svelte-1gpf5ub.svelte-1gpf5ub:not(.error):has(input:focus-visible){box-shadow:var(--goa-text-input-border),
      var(--goa-text-input-border-focus)}.goa-input.error.svelte-1gpf5ub input.input--goa.svelte-1gpf5ub:not(input:focus-visible){box-shadow:var(--goa-text-input-border-error)}.goa-input.leading-content.error.svelte-1gpf5ub input.input--goa.svelte-1gpf5ub:not(input:focus-visible){border-top-left-radius:0;border-bottom-left-radius:0}.goa-input.trailing-content.error.svelte-1gpf5ub input.input--goa.svelte-1gpf5ub:not(input:focus-visible){border-top-right-radius:0;border-bottom-right-radius:0}.goa-input.svelte-1gpf5ub.svelte-1gpf5ub:has(input:focus-visible){box-shadow:var(--goa-text-input-border),
      var(--goa-text-input-border-focus)}.goa-input.type--range.svelte-1gpf5ub.svelte-1gpf5ub{border:none;&.type--range:active,
    &.type--range:focus-visible,
    &.type--range:focus-within {
      box-shadow: none;
    }}.leading-icon.svelte-1gpf5ub.svelte-1gpf5ub{margin-left:var(--goa-text-input-padding-lr)}.trailing-icon.svelte-1gpf5ub.svelte-1gpf5ub{margin-right:var(--goa-text-input-padding-lr)}.trailing-icon-button.svelte-1gpf5ub.svelte-1gpf5ub{margin-right:var(--goa-text-input-padding-lr)}input.svelte-1gpf5ub.svelte-1gpf5ub{display:inline-block;color:var(--goa-text-input-color-text);font:var(--goa-text-input-typography);padding:var(--goa-text-input-padding);background-color:transparent;width:calc(var(--width) + 1ch);max-width:100%;flex:1 1 auto;z-index:1;border-radius:var(--goa-text-input-border-radius)}input.svelte-1gpf5ub.svelte-1gpf5ub,input.svelte-1gpf5ub.svelte-1gpf5ub:focus-visible,input.svelte-1gpf5ub.svelte-1gpf5ub:hover,input.svelte-1gpf5ub.svelte-1gpf5ub:active{outline:none;border:none}input[readonly].svelte-1gpf5ub.svelte-1gpf5ub{cursor:pointer}.leading-icon.svelte-1gpf5ub+input.svelte-1gpf5ub{padding-left:var(--goa-text-input-space-btw-icon-text)}.input--disabled.svelte-1gpf5ub.svelte-1gpf5ub,.input--disabled.svelte-1gpf5ub.svelte-1gpf5ub:hover,.input--disabled.svelte-1gpf5ub.svelte-1gpf5ub:active,.input--disabled.svelte-1gpf5ub.svelte-1gpf5ub:focus-visible{background-color:var(--goa-text-input-color-bg-disabled);border:var(--goa-text-input-border-disabled);cursor:default;box-shadow:none !important}.input--disabled.svelte-1gpf5ub input.svelte-1gpf5ub,.input--disabled.svelte-1gpf5ub input.svelte-1gpf5ub:hover,.input--disabled.svelte-1gpf5ub input.svelte-1gpf5ub:active,.input--disabled.svelte-1gpf5ub input.svelte-1gpf5ub:focus-visible{color:var(--goa-text-input-color-text-disabled)}.input--disabled.svelte-1gpf5ub input.svelte-1gpf5ub:hover{cursor:default !important}.input--disabled.svelte-1gpf5ub .leading-icon.svelte-1gpf5ub,.input--disabled.svelte-1gpf5ub .trailing-icon.svelte-1gpf5ub{color:var(--goa-text-input-color-icon-disabled);cursor:default}.prefix.svelte-1gpf5ub.svelte-1gpf5ub,.suffix.svelte-1gpf5ub.svelte-1gpf5ub,.leading-content-slot.svelte-1gpf5ub ::slotted(div),.trailing-content-slot.svelte-1gpf5ub ::slotted(div){background-color:var(--goa-text-input-lt-content-color-bg);box-shadow:var(--goa-text-input-border);display:flex;align-items:center;white-space:normal}.leading-content-slot.svelte-1gpf5ub ::slotted(div),.trailing-content-slot.svelte-1gpf5ub ::slotted(div){padding:var(--goa-text-input-padding)}.prefix.svelte-1gpf5ub.svelte-1gpf5ub,.leading-content-slot.svelte-1gpf5ub ::slotted(div){border-top-left-radius:var(--goa-text-input-border-radius);border-bottom-left-radius:var(--goa-text-input-border-radius)}.suffix.svelte-1gpf5ub.svelte-1gpf5ub,.trailing-content-slot.svelte-1gpf5ub ::slotted(div){border-top-right-radius:var(--goa-text-input-border-radius);border-bottom-right-radius:var(--goa-text-input-border-radius)}.input-leading-content.svelte-1gpf5ub.svelte-1gpf5ub{border-top-left-radius:var(--goa-border-radius-none);border-bottom-left-radius:var(--goa-border-radius-none)}.input-trailing-content.svelte-1gpf5ub.svelte-1gpf5ub{border-top-right-radius:var(--goa-border-radius-none);border-bottom-right-radius:var(--goa-border-radius-none)}.input-leading-content.svelte-1gpf5ub.svelte-1gpf5ub:not(.error):not(input:focus-visible):hover{box-shadow:var(--goa-text-input-border-hover)}.input-trailing-content.svelte-1gpf5ub.svelte-1gpf5ub:not(.error):not(input:focus-visible):hover{box-shadow:var(--goa-text-input-border-hover)}.input-leading-content.svelte-1gpf5ub.svelte-1gpf5ub:active,.input-leading-content.svelte-1gpf5ub.svelte-1gpf5ub:focus-visible,.input-leading-content.svelte-1gpf5ub.svelte-1gpf5ub:focus-within{box-shadow:var(--goa-text-input-border),
      var(--goa-text-input-border-focus)}.input-trailing-content.svelte-1gpf5ub.svelte-1gpf5ub:active,.input-trailing-content.svelte-1gpf5ub.svelte-1gpf5ub:focus-visible,.input-trailing-content.svelte-1gpf5ub.svelte-1gpf5ub:focus-within{box-shadow:var(--goa-text-input-border),
      var(--goa-text-input-border-focus)}.goa-input.leading-content.svelte-1gpf5ub.svelte-1gpf5ub:has(input:focus-visible){box-shadow:var(--goa-text-input-border)}.goa-input.trailing-content.svelte-1gpf5ub.svelte-1gpf5ub:has(input:focus-visible){box-shadow:var(--goa-text-input-border)}input.input--goa.svelte-1gpf5ub.svelte-1gpf5ub{display:block;border:none;flex:1 1 auto}.variant--bare.svelte-1gpf5ub.svelte-1gpf5ub{border:none}.variant--bare.svelte-1gpf5ub.svelte-1gpf5ub:focus-visible,.variant--bare.svelte-1gpf5ub.svelte-1gpf5ub:active,.variant--bare.svelte-1gpf5ub.svelte-1gpf5ub:focus-within{box-shadow:none}input[type="search"].svelte-1gpf5ub.svelte-1gpf5ub:enabled:read-write:-webkit-any(
      :focus-visible,
      :hover
    )::-webkit-search-cancel-button{position:relative;right:var(--search-icon-offset);cursor:pointer;-webkit-appearance:none;height:1.2rem;width:1.2rem;background:url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="%23333" d="M405 136.798L375.202 107 256 226.202 136.798 107 107 136.798 226.202 256 107 375.202 136.798 405 256 285.798 375.202 405 405 375.202 285.798 256z"/></svg>')
      center center no-repeat}.svelte-1gpf5ub.svelte-1gpf5ub::-ms-reveal{display:none}.svelte-1gpf5ub.svelte-1gpf5ub::-moz-placeholder{color:var(--goa-text-input-color-text-placeholder);opacity:1}.svelte-1gpf5ub.svelte-1gpf5ub::placeholder{color:var(--goa-text-input-color-text-placeholder);opacity:1}`);
}
const get_trailingContent_slot_changes = (dirty) => ({});
const get_trailingContent_slot_context = (ctx) => ({});
const get_leadingContent_slot_changes = (dirty) => ({});
const get_leadingContent_slot_context = (ctx) => ({});
function create_if_block_4$1(ctx) {
  let div;
  let t2;
  return {
    c() {
      div = element("div");
      t2 = text(
        /*prefix*/
        ctx[14]
      );
      attr(div, "class", "prefix svelte-1gpf5ub");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, t2);
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*prefix*/
      16384) set_data(
        t2,
        /*prefix*/
        ctx2[14]
      );
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_if_block_3$4(ctx) {
  let goa_icon;
  return {
    c() {
      goa_icon = element("goa-icon");
      set_custom_element_data(goa_icon, "class", "leading-icon svelte-1gpf5ub");
      set_custom_element_data(goa_icon, "data-testid", "leading-icon");
      set_custom_element_data(
        goa_icon,
        "type",
        /*leadingicon*/
        ctx[5]
      );
    },
    m(target, anchor) {
      insert(target, goa_icon, anchor);
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*leadingicon*/
      32) {
        set_custom_element_data(
          goa_icon,
          "type",
          /*leadingicon*/
          ctx2[5]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(goa_icon);
      }
    }
  };
}
function create_if_block_2$4(ctx) {
  let goa_icon;
  return {
    c() {
      goa_icon = element("goa-icon");
      set_custom_element_data(goa_icon, "class", "trailing-icon svelte-1gpf5ub");
      set_custom_element_data(goa_icon, "data-testid", "trailing-icon");
      set_custom_element_data(goa_icon, "size", "medium");
      set_custom_element_data(
        goa_icon,
        "type",
        /*trailingicon*/
        ctx[6]
      );
    },
    m(target, anchor) {
      insert(target, goa_icon, anchor);
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*trailingicon*/
      64) {
        set_custom_element_data(
          goa_icon,
          "type",
          /*trailingicon*/
          ctx2[6]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(goa_icon);
      }
    }
  };
}
function create_if_block_1$7(ctx) {
  let goa_icon_button;
  let mounted;
  let dispose;
  return {
    c() {
      goa_icon_button = element("goa-icon-button");
      set_custom_element_data(
        goa_icon_button,
        "disabled",
        /*isDisabled*/
        ctx[28]
      );
      set_custom_element_data(goa_icon_button, "variant", "dark");
      set_custom_element_data(goa_icon_button, "size", "medium");
      set_custom_element_data(
        goa_icon_button,
        "icon",
        /*trailingicon*/
        ctx[6]
      );
      set_custom_element_data(goa_icon_button, "data-testid", "trailing-icon-button");
      set_custom_element_data(goa_icon_button, "class", "trailing-icon-button svelte-1gpf5ub");
    },
    m(target, anchor) {
      insert(target, goa_icon_button, anchor);
      if (!mounted) {
        dispose = listen(goa_icon_button, "click", doClick);
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*isDisabled*/
      268435456) {
        set_custom_element_data(
          goa_icon_button,
          "disabled",
          /*isDisabled*/
          ctx2[28]
        );
      }
      if (dirty[0] & /*trailingicon*/
      64) {
        set_custom_element_data(
          goa_icon_button,
          "icon",
          /*trailingicon*/
          ctx2[6]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(goa_icon_button);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_if_block$g(ctx) {
  let span;
  let t2;
  return {
    c() {
      span = element("span");
      t2 = text(
        /*suffix*/
        ctx[15]
      );
      attr(span, "class", "suffix svelte-1gpf5ub");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*suffix*/
      32768) set_data(
        t2,
        /*suffix*/
        ctx2[15]
      );
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_fragment$s(ctx) {
  let div3;
  let div2;
  let t0;
  let div0;
  let t1;
  let t2;
  let input;
  let input_class_value;
  let input_style_value;
  let input_value_value;
  let input_id_value;
  let t3;
  let t4;
  let t5;
  let t6;
  let div1;
  let div2_class_value;
  let div3_style_value;
  let current;
  let mounted;
  let dispose;
  let if_block0 = (
    /*prefix*/
    ctx[14] && create_if_block_4$1(ctx)
  );
  const leadingContent_slot_template = (
    /*#slots*/
    ctx[43].leadingContent
  );
  const leadingContent_slot = create_slot(
    leadingContent_slot_template,
    ctx,
    /*$$scope*/
    ctx[42],
    get_leadingContent_slot_context
  );
  let if_block1 = (
    /*leadingicon*/
    ctx[5] && create_if_block_3$4(ctx)
  );
  let if_block2 = (
    /*trailingicon*/
    ctx[6] && !/*handlesTrailingIconClick*/
    ctx[30] && create_if_block_2$4(ctx)
  );
  let if_block3 = (
    /*trailingicon*/
    ctx[6] && /*handlesTrailingIconClick*/
    ctx[30] && create_if_block_1$7(ctx)
  );
  let if_block4 = (
    /*suffix*/
    ctx[15] && create_if_block$g(ctx)
  );
  const trailingContent_slot_template = (
    /*#slots*/
    ctx[43].trailingContent
  );
  const trailingContent_slot = create_slot(
    trailingContent_slot_template,
    ctx,
    /*$$scope*/
    ctx[42],
    get_trailingContent_slot_context
  );
  return {
    c() {
      div3 = element("div");
      div2 = element("div");
      if (if_block0) if_block0.c();
      t0 = space();
      div0 = element("div");
      if (leadingContent_slot) leadingContent_slot.c();
      t1 = space();
      if (if_block1) if_block1.c();
      t2 = space();
      input = element("input");
      t3 = space();
      if (if_block2) if_block2.c();
      t4 = space();
      if (if_block3) if_block3.c();
      t5 = space();
      if (if_block4) if_block4.c();
      t6 = space();
      div1 = element("div");
      if (trailingContent_slot) trailingContent_slot.c();
      attr(div0, "class", "leading-content-slot svelte-1gpf5ub");
      attr(input, "class", input_class_value = "input--" + /*variant*/
      ctx[7] + " svelte-1gpf5ub");
      attr(input, "style", input_style_value = `--search-icon-offset: ${/*trailingicon*/
      ctx[6] ? "-0.5rem" : "0"}`);
      input.readOnly = /*isReadonly*/
      ctx[27];
      input.disabled = /*isDisabled*/
      ctx[28];
      attr(
        input,
        "data-testid",
        /*testid*/
        ctx[8]
      );
      attr(
        input,
        "autocapitalize",
        /*autocapitalize*/
        ctx[3]
      );
      attr(
        input,
        "name",
        /*name*/
        ctx[2]
      );
      attr(
        input,
        "type",
        /*type*/
        ctx[1]
      );
      input.value = input_value_value = /*value*/
      ctx[0] || "";
      attr(
        input,
        "placeholder",
        /*placeholder*/
        ctx[4]
      );
      attr(
        input,
        "min",
        /*min*/
        ctx[11]
      );
      attr(
        input,
        "max",
        /*max*/
        ctx[12]
      );
      attr(
        input,
        "step",
        /*step*/
        ctx[13]
      );
      attr(
        input,
        "maxlength",
        /*maxlength*/
        ctx[16]
      );
      attr(input, "id", input_id_value = /*id*/
      ctx[17] || /*name*/
      ctx[2]);
      attr(input, "role", "textbox");
      attr(
        input,
        "aria-label",
        /*arialabel*/
        ctx[9]
      );
      attr(
        input,
        "aria-labelledby",
        /*arialabelledby*/
        ctx[10]
      );
      toggle_class(
        input,
        "input-leading-content",
        /*_leadingContentSlot*/
        ctx[23] && !/*isDisabled*/
        ctx[28]
      );
      toggle_class(
        input,
        "input-trailing-content",
        /*_trailingContentSlot*/
        ctx[24] && !/*isDisabled*/
        ctx[28]
      );
      attr(div1, "class", "trailing-content-slot svelte-1gpf5ub");
      attr(div2, "class", div2_class_value = "goa-input variant--" + /*variant*/
      ctx[7] + " type--" + /*type*/
      ctx[1] + " svelte-1gpf5ub");
      toggle_class(
        div2,
        "input--disabled",
        /*isDisabled*/
        ctx[28]
      );
      toggle_class(
        div2,
        "leading-content",
        /*_leadingContentSlot*/
        ctx[23]
      );
      toggle_class(
        div2,
        "trailing-content",
        /*_trailingContentSlot*/
        ctx[24]
      );
      toggle_class(
        div2,
        "error",
        /*isError*/
        ctx[29]
      );
      attr(div3, "class", "container svelte-1gpf5ub");
      attr(div3, "style", div3_style_value = `${/*containerWidth*/
      ctx[26]}${calculateMargin(
        /*mt*/
        ctx[18],
        /*mr*/
        ctx[19],
        /*mb*/
        ctx[20],
        /*ml*/
        ctx[21]
      )}`);
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      append(div3, div2);
      if (if_block0) if_block0.m(div2, null);
      append(div2, t0);
      append(div2, div0);
      if (leadingContent_slot) {
        leadingContent_slot.m(div0, null);
      }
      append(div2, t1);
      if (if_block1) if_block1.m(div2, null);
      append(div2, t2);
      append(div2, input);
      ctx[44](input);
      append(div2, t3);
      if (if_block2) if_block2.m(div2, null);
      append(div2, t4);
      if (if_block3) if_block3.m(div2, null);
      append(div2, t5);
      if (if_block4) if_block4.m(div2, null);
      append(div2, t6);
      append(div2, div1);
      if (trailingContent_slot) {
        trailingContent_slot.m(div1, null);
      }
      ctx[45](div3);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            input,
            "keyup",
            /*onKeyUp*/
            ctx[31]
          ),
          listen(
            input,
            "change",
            /*onKeyUp*/
            ctx[31]
          ),
          listen(
            input,
            "focus",
            /*onFocus*/
            ctx[32]
          ),
          listen(
            input,
            "blur",
            /*onBlur*/
            ctx[33]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (
        /*prefix*/
        ctx2[14]
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_4$1(ctx2);
          if_block0.c();
          if_block0.m(div2, t0);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (leadingContent_slot) {
        if (leadingContent_slot.p && (!current || dirty[1] & /*$$scope*/
        2048)) {
          update_slot_base(
            leadingContent_slot,
            leadingContent_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[42],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[42]
            ) : get_slot_changes(
              leadingContent_slot_template,
              /*$$scope*/
              ctx2[42],
              dirty,
              get_leadingContent_slot_changes
            ),
            get_leadingContent_slot_context
          );
        }
      }
      if (
        /*leadingicon*/
        ctx2[5]
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block_3$4(ctx2);
          if_block1.c();
          if_block1.m(div2, t2);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (!current || dirty[0] & /*variant*/
      128 && input_class_value !== (input_class_value = "input--" + /*variant*/
      ctx2[7] + " svelte-1gpf5ub")) {
        attr(input, "class", input_class_value);
      }
      if (!current || dirty[0] & /*trailingicon*/
      64 && input_style_value !== (input_style_value = `--search-icon-offset: ${/*trailingicon*/
      ctx2[6] ? "-0.5rem" : "0"}`)) {
        attr(input, "style", input_style_value);
      }
      if (!current || dirty[0] & /*isReadonly*/
      134217728) {
        input.readOnly = /*isReadonly*/
        ctx2[27];
      }
      if (!current || dirty[0] & /*isDisabled*/
      268435456) {
        input.disabled = /*isDisabled*/
        ctx2[28];
      }
      if (!current || dirty[0] & /*testid*/
      256) {
        attr(
          input,
          "data-testid",
          /*testid*/
          ctx2[8]
        );
      }
      if (!current || dirty[0] & /*autocapitalize*/
      8) {
        attr(
          input,
          "autocapitalize",
          /*autocapitalize*/
          ctx2[3]
        );
      }
      if (!current || dirty[0] & /*name*/
      4) {
        attr(
          input,
          "name",
          /*name*/
          ctx2[2]
        );
      }
      if (!current || dirty[0] & /*type*/
      2) {
        attr(
          input,
          "type",
          /*type*/
          ctx2[1]
        );
      }
      if (!current || dirty[0] & /*value*/
      1 && input_value_value !== (input_value_value = /*value*/
      ctx2[0] || "") && input.value !== input_value_value) {
        input.value = input_value_value;
      }
      if (!current || dirty[0] & /*placeholder*/
      16) {
        attr(
          input,
          "placeholder",
          /*placeholder*/
          ctx2[4]
        );
      }
      if (!current || dirty[0] & /*min*/
      2048) {
        attr(
          input,
          "min",
          /*min*/
          ctx2[11]
        );
      }
      if (!current || dirty[0] & /*max*/
      4096) {
        attr(
          input,
          "max",
          /*max*/
          ctx2[12]
        );
      }
      if (!current || dirty[0] & /*step*/
      8192) {
        attr(
          input,
          "step",
          /*step*/
          ctx2[13]
        );
      }
      if (!current || dirty[0] & /*maxlength*/
      65536) {
        attr(
          input,
          "maxlength",
          /*maxlength*/
          ctx2[16]
        );
      }
      if (!current || dirty[0] & /*id, name*/
      131076 && input_id_value !== (input_id_value = /*id*/
      ctx2[17] || /*name*/
      ctx2[2])) {
        attr(input, "id", input_id_value);
      }
      if (!current || dirty[0] & /*arialabel*/
      512) {
        attr(
          input,
          "aria-label",
          /*arialabel*/
          ctx2[9]
        );
      }
      if (!current || dirty[0] & /*arialabelledby*/
      1024) {
        attr(
          input,
          "aria-labelledby",
          /*arialabelledby*/
          ctx2[10]
        );
      }
      if (!current || dirty[0] & /*variant, _leadingContentSlot, isDisabled*/
      276824192) {
        toggle_class(
          input,
          "input-leading-content",
          /*_leadingContentSlot*/
          ctx2[23] && !/*isDisabled*/
          ctx2[28]
        );
      }
      if (!current || dirty[0] & /*variant, _trailingContentSlot, isDisabled*/
      285212800) {
        toggle_class(
          input,
          "input-trailing-content",
          /*_trailingContentSlot*/
          ctx2[24] && !/*isDisabled*/
          ctx2[28]
        );
      }
      if (
        /*trailingicon*/
        ctx2[6] && !/*handlesTrailingIconClick*/
        ctx2[30]
      ) {
        if (if_block2) {
          if_block2.p(ctx2, dirty);
        } else {
          if_block2 = create_if_block_2$4(ctx2);
          if_block2.c();
          if_block2.m(div2, t4);
        }
      } else if (if_block2) {
        if_block2.d(1);
        if_block2 = null;
      }
      if (
        /*trailingicon*/
        ctx2[6] && /*handlesTrailingIconClick*/
        ctx2[30]
      ) {
        if (if_block3) {
          if_block3.p(ctx2, dirty);
        } else {
          if_block3 = create_if_block_1$7(ctx2);
          if_block3.c();
          if_block3.m(div2, t5);
        }
      } else if (if_block3) {
        if_block3.d(1);
        if_block3 = null;
      }
      if (
        /*suffix*/
        ctx2[15]
      ) {
        if (if_block4) {
          if_block4.p(ctx2, dirty);
        } else {
          if_block4 = create_if_block$g(ctx2);
          if_block4.c();
          if_block4.m(div2, t6);
        }
      } else if (if_block4) {
        if_block4.d(1);
        if_block4 = null;
      }
      if (trailingContent_slot) {
        if (trailingContent_slot.p && (!current || dirty[1] & /*$$scope*/
        2048)) {
          update_slot_base(
            trailingContent_slot,
            trailingContent_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[42],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[42]
            ) : get_slot_changes(
              trailingContent_slot_template,
              /*$$scope*/
              ctx2[42],
              dirty,
              get_trailingContent_slot_changes
            ),
            get_trailingContent_slot_context
          );
        }
      }
      if (!current || dirty[0] & /*variant, type*/
      130 && div2_class_value !== (div2_class_value = "goa-input variant--" + /*variant*/
      ctx2[7] + " type--" + /*type*/
      ctx2[1] + " svelte-1gpf5ub")) {
        attr(div2, "class", div2_class_value);
      }
      if (!current || dirty[0] & /*variant, type, isDisabled*/
      268435586) {
        toggle_class(
          div2,
          "input--disabled",
          /*isDisabled*/
          ctx2[28]
        );
      }
      if (!current || dirty[0] & /*variant, type, _leadingContentSlot*/
      8388738) {
        toggle_class(
          div2,
          "leading-content",
          /*_leadingContentSlot*/
          ctx2[23]
        );
      }
      if (!current || dirty[0] & /*variant, type, _trailingContentSlot*/
      16777346) {
        toggle_class(
          div2,
          "trailing-content",
          /*_trailingContentSlot*/
          ctx2[24]
        );
      }
      if (!current || dirty[0] & /*variant, type, isError*/
      536871042) {
        toggle_class(
          div2,
          "error",
          /*isError*/
          ctx2[29]
        );
      }
      if (!current || dirty[0] & /*containerWidth, mt, mr, mb, ml*/
      71041024 && div3_style_value !== (div3_style_value = `${/*containerWidth*/
      ctx2[26]}${calculateMargin(
        /*mt*/
        ctx2[18],
        /*mr*/
        ctx2[19],
        /*mb*/
        ctx2[20],
        /*ml*/
        ctx2[21]
      )}`)) {
        attr(div3, "style", div3_style_value);
      }
    },
    i(local) {
      if (current) return;
      transition_in(leadingContent_slot, local);
      transition_in(trailingContent_slot, local);
      current = true;
    },
    o(local) {
      transition_out(leadingContent_slot, local);
      transition_out(trailingContent_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div3);
      }
      if (if_block0) if_block0.d();
      if (leadingContent_slot) leadingContent_slot.d(detaching);
      if (if_block1) if_block1.d();
      ctx[44](null);
      if (if_block2) if_block2.d();
      if (if_block3) if_block3.d();
      if (if_block4) if_block4.d();
      if (trailingContent_slot) trailingContent_slot.d(detaching);
      ctx[45](null);
      mounted = false;
      run_all(dispose);
    }
  };
}
function doClick() {
  this.dispatchEvent(new CustomEvent("_trailingIconClick", { composed: true }));
}
function instance$s($$self, $$props, $$invalidate) {
  let handlesTrailingIconClick;
  let isFocused;
  let isReadonly;
  let isError;
  let isDisabled;
  let { $$slots: slots = {}, $$scope } = $$props;
  const [Types, validateType] = typeValidator("Input type", [
    "text",
    "number",
    "password",
    "email",
    "date",
    "datetime-local",
    "month",
    "range",
    "search",
    "tel",
    "time",
    "url",
    "week"
  ]);
  const [AutoCapitalize, validateAutoCapitalize] = typeValidator("Input auto capitalize", ["on", "off", "none", "sentences", "words", "characters"]);
  let { type = "text" } = $$props;
  let { name = "" } = $$props;
  let { value = "" } = $$props;
  let { autocapitalize = "off" } = $$props;
  let { placeholder = "" } = $$props;
  let { leadingicon = null } = $$props;
  let { trailingicon = null } = $$props;
  let { variant = "goa" } = $$props;
  let { disabled = "false" } = $$props;
  let { handletrailingiconclick = "false" } = $$props;
  let { focused = "false" } = $$props;
  let { readonly = "false" } = $$props;
  let { error = "false" } = $$props;
  let { testid = "" } = $$props;
  let { width = "30ch" } = $$props;
  let { arialabel = "" } = $$props;
  let { arialabelledby = "" } = $$props;
  let { min = "" } = $$props;
  let { max = "" } = $$props;
  let { step = 1 } = $$props;
  let { prefix = "" } = $$props;
  let { suffix = "" } = $$props;
  let { debounce = 0 } = $$props;
  let { maxlength = null } = $$props;
  let { id: id2 = "" } = $$props;
  let { mt = null } = $$props;
  let { mr = null } = $$props;
  let { mb: mb2 = null } = $$props;
  let { ml: ml2 = null } = $$props;
  let _leadingContentSlot = false;
  let _trailingContentSlot = false;
  let _debounceId;
  let inputEl;
  let _rootEl;
  let containerWidth = "";
  onMount(async () => {
    await tick();
    validateType(type);
    validateAutoCapitalize(autocapitalize);
    addRelayListener();
    showDeprecationWarnings();
    checkSlots();
    sendMountedMessage();
  });
  onMount(() => {
    if (_rootEl.querySelector(".leading-icon") || _rootEl.querySelector(".trailing-icon")) {
      _rootEl.classList.add("has-icon");
    }
  });
  function addRelayListener() {
    receive(inputEl, (action, data) => {
      switch (action) {
        case FormSetValueMsg:
          onSetValue(data);
          break;
        case FieldsetSetErrorMsg:
          $$invalidate(35, error = "true");
          break;
        case FieldsetResetErrorsMsg:
          $$invalidate(35, error = "false");
          break;
        case FieldsetResetFieldsMsg:
          $$invalidate(0, value = "");
          break;
      }
    });
  }
  function onSetValue(detail) {
    $$invalidate(0, value = detail.value);
    dispatch$1(inputEl, "_change", { name, value: detail.value }, { bubbles: true });
  }
  function sendMountedMessage() {
    relay(_rootEl, FormFieldMountMsg, { name, el: inputEl }, { bubbles: true, timeout: 10 });
  }
  function onKeyUp(e) {
    const input = e.target;
    if (!input) return;
    if (isReadonly) return;
    if (_debounceId != null) {
      clearTimeout(_debounceId);
    }
    _debounceId = setTimeout(
      () => {
        input.dispatchEvent(new CustomEvent(
          "_change",
          {
            composed: true,
            bubbles: true,
            cancelable: true,
            detail: { name, value: input.value }
          }
        ));
      },
      debounce
    );
    input.dispatchEvent(new CustomEvent(
      "_keyPress",
      {
        composed: true,
        detail: { name, value: input.value, key: e.key }
      }
    ));
    $$invalidate(0, value = input.value);
  }
  function onFocus(e) {
    const input = e.target;
    input.dispatchEvent(new CustomEvent(
      "_focus",
      {
        composed: true,
        detail: { name, value: input.value }
      }
    ));
  }
  function onBlur(e) {
    $$invalidate(34, focused = "false");
    const input = e.target;
    input.dispatchEvent(new CustomEvent(
      "_blur",
      {
        composed: true,
        detail: { name, value: input.value }
      }
    ));
  }
  function checkSlots() {
    const leadingContentSlot = _rootEl.querySelector("slot[name=leadingContent]");
    if (leadingContentSlot && leadingContentSlot.assignedNodes().length > 0) {
      $$invalidate(23, _leadingContentSlot = true);
    }
    const trailingContentSlot = _rootEl.querySelector("slot[name=trailingContent]");
    if (trailingContentSlot && trailingContentSlot.assignedNodes().length > 0) {
      $$invalidate(24, _trailingContentSlot = true);
    }
  }
  function showDeprecationWarnings() {
    if (prefix != "" || suffix != "") {
      console.warn("GoAInput [prefix] and [suffix] properties are deprecated. Instead use leadingContent and trailingContent.");
    }
  }
  function input_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      inputEl = $$value;
      $$invalidate(22, inputEl);
    });
  }
  function div3_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _rootEl = $$value;
      $$invalidate(25, _rootEl);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("type" in $$props2) $$invalidate(1, type = $$props2.type);
    if ("name" in $$props2) $$invalidate(2, name = $$props2.name);
    if ("value" in $$props2) $$invalidate(0, value = $$props2.value);
    if ("autocapitalize" in $$props2) $$invalidate(3, autocapitalize = $$props2.autocapitalize);
    if ("placeholder" in $$props2) $$invalidate(4, placeholder = $$props2.placeholder);
    if ("leadingicon" in $$props2) $$invalidate(5, leadingicon = $$props2.leadingicon);
    if ("trailingicon" in $$props2) $$invalidate(6, trailingicon = $$props2.trailingicon);
    if ("variant" in $$props2) $$invalidate(7, variant = $$props2.variant);
    if ("disabled" in $$props2) $$invalidate(36, disabled = $$props2.disabled);
    if ("handletrailingiconclick" in $$props2) $$invalidate(37, handletrailingiconclick = $$props2.handletrailingiconclick);
    if ("focused" in $$props2) $$invalidate(34, focused = $$props2.focused);
    if ("readonly" in $$props2) $$invalidate(38, readonly = $$props2.readonly);
    if ("error" in $$props2) $$invalidate(35, error = $$props2.error);
    if ("testid" in $$props2) $$invalidate(8, testid = $$props2.testid);
    if ("width" in $$props2) $$invalidate(39, width = $$props2.width);
    if ("arialabel" in $$props2) $$invalidate(9, arialabel = $$props2.arialabel);
    if ("arialabelledby" in $$props2) $$invalidate(10, arialabelledby = $$props2.arialabelledby);
    if ("min" in $$props2) $$invalidate(11, min = $$props2.min);
    if ("max" in $$props2) $$invalidate(12, max = $$props2.max);
    if ("step" in $$props2) $$invalidate(13, step = $$props2.step);
    if ("prefix" in $$props2) $$invalidate(14, prefix = $$props2.prefix);
    if ("suffix" in $$props2) $$invalidate(15, suffix = $$props2.suffix);
    if ("debounce" in $$props2) $$invalidate(40, debounce = $$props2.debounce);
    if ("maxlength" in $$props2) $$invalidate(16, maxlength = $$props2.maxlength);
    if ("id" in $$props2) $$invalidate(17, id2 = $$props2.id);
    if ("mt" in $$props2) $$invalidate(18, mt = $$props2.mt);
    if ("mr" in $$props2) $$invalidate(19, mr = $$props2.mr);
    if ("mb" in $$props2) $$invalidate(20, mb2 = $$props2.mb);
    if ("ml" in $$props2) $$invalidate(21, ml2 = $$props2.ml);
    if ("$$scope" in $$props2) $$invalidate(42, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty[1] & /*handletrailingiconclick*/
    64) {
      $$invalidate(30, handlesTrailingIconClick = toBoolean(handletrailingiconclick));
    }
    if ($$self.$$.dirty[1] & /*focused*/
    8) {
      $$invalidate(41, isFocused = toBoolean(focused));
    }
    if ($$self.$$.dirty[1] & /*readonly*/
    128) {
      $$invalidate(27, isReadonly = toBoolean(readonly));
    }
    if ($$self.$$.dirty[1] & /*error*/
    16) {
      $$invalidate(29, isError = toBoolean(error));
    }
    if ($$self.$$.dirty[1] & /*disabled*/
    32) {
      $$invalidate(28, isDisabled = toBoolean(disabled));
    }
    if ($$self.$$.dirty[0] & /*inputEl*/
    4194304 | $$self.$$.dirty[1] & /*isFocused*/
    1024) {
      if (isFocused && inputEl) {
        setTimeout(() => inputEl.focus(), 2);
      }
    }
    if ($$self.$$.dirty[0] & /*inputEl, type*/
    4194306) {
      if (inputEl && type === "search") {
        inputEl.addEventListener("search", (e) => {
          onKeyUp(e);
        });
      }
    }
    if ($$self.$$.dirty[1] & /*width*/
    256) {
      {
        if (width.includes("%")) {
          $$invalidate(26, containerWidth = `width: ${width};`);
        } else {
          $$invalidate(26, containerWidth = `--width: ${width};`);
        }
      }
    }
  };
  return [
    value,
    type,
    name,
    autocapitalize,
    placeholder,
    leadingicon,
    trailingicon,
    variant,
    testid,
    arialabel,
    arialabelledby,
    min,
    max,
    step,
    prefix,
    suffix,
    maxlength,
    id2,
    mt,
    mr,
    mb2,
    ml2,
    inputEl,
    _leadingContentSlot,
    _trailingContentSlot,
    _rootEl,
    containerWidth,
    isReadonly,
    isDisabled,
    isError,
    handlesTrailingIconClick,
    onKeyUp,
    onFocus,
    onBlur,
    focused,
    error,
    disabled,
    handletrailingiconclick,
    readonly,
    width,
    debounce,
    isFocused,
    $$scope,
    slots,
    input_binding,
    div3_binding
  ];
}
class Input extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$s,
      create_fragment$s,
      safe_not_equal,
      {
        type: 1,
        name: 2,
        value: 0,
        autocapitalize: 3,
        placeholder: 4,
        leadingicon: 5,
        trailingicon: 6,
        variant: 7,
        disabled: 36,
        handletrailingiconclick: 37,
        focused: 34,
        readonly: 38,
        error: 35,
        testid: 8,
        width: 39,
        arialabel: 9,
        arialabelledby: 10,
        min: 11,
        max: 12,
        step: 13,
        prefix: 14,
        suffix: 15,
        debounce: 40,
        maxlength: 16,
        id: 17,
        mt: 18,
        mr: 19,
        mb: 20,
        ml: 21
      },
      add_css$p,
      [-1, -1]
    );
  }
  get type() {
    return this.$$.ctx[1];
  }
  set type(type) {
    this.$$set({ type });
    flush();
  }
  get name() {
    return this.$$.ctx[2];
  }
  set name(name) {
    this.$$set({ name });
    flush();
  }
  get value() {
    return this.$$.ctx[0];
  }
  set value(value) {
    this.$$set({ value });
    flush();
  }
  get autocapitalize() {
    return this.$$.ctx[3];
  }
  set autocapitalize(autocapitalize) {
    this.$$set({ autocapitalize });
    flush();
  }
  get placeholder() {
    return this.$$.ctx[4];
  }
  set placeholder(placeholder) {
    this.$$set({ placeholder });
    flush();
  }
  get leadingicon() {
    return this.$$.ctx[5];
  }
  set leadingicon(leadingicon) {
    this.$$set({ leadingicon });
    flush();
  }
  get trailingicon() {
    return this.$$.ctx[6];
  }
  set trailingicon(trailingicon) {
    this.$$set({ trailingicon });
    flush();
  }
  get variant() {
    return this.$$.ctx[7];
  }
  set variant(variant) {
    this.$$set({ variant });
    flush();
  }
  get disabled() {
    return this.$$.ctx[36];
  }
  set disabled(disabled) {
    this.$$set({ disabled });
    flush();
  }
  get handletrailingiconclick() {
    return this.$$.ctx[37];
  }
  set handletrailingiconclick(handletrailingiconclick) {
    this.$$set({ handletrailingiconclick });
    flush();
  }
  get focused() {
    return this.$$.ctx[34];
  }
  set focused(focused) {
    this.$$set({ focused });
    flush();
  }
  get readonly() {
    return this.$$.ctx[38];
  }
  set readonly(readonly) {
    this.$$set({ readonly });
    flush();
  }
  get error() {
    return this.$$.ctx[35];
  }
  set error(error) {
    this.$$set({ error });
    flush();
  }
  get testid() {
    return this.$$.ctx[8];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
  get width() {
    return this.$$.ctx[39];
  }
  set width(width) {
    this.$$set({ width });
    flush();
  }
  get arialabel() {
    return this.$$.ctx[9];
  }
  set arialabel(arialabel) {
    this.$$set({ arialabel });
    flush();
  }
  get arialabelledby() {
    return this.$$.ctx[10];
  }
  set arialabelledby(arialabelledby) {
    this.$$set({ arialabelledby });
    flush();
  }
  get min() {
    return this.$$.ctx[11];
  }
  set min(min) {
    this.$$set({ min });
    flush();
  }
  get max() {
    return this.$$.ctx[12];
  }
  set max(max) {
    this.$$set({ max });
    flush();
  }
  get step() {
    return this.$$.ctx[13];
  }
  set step(step) {
    this.$$set({ step });
    flush();
  }
  get prefix() {
    return this.$$.ctx[14];
  }
  set prefix(prefix) {
    this.$$set({ prefix });
    flush();
  }
  get suffix() {
    return this.$$.ctx[15];
  }
  set suffix(suffix) {
    this.$$set({ suffix });
    flush();
  }
  get debounce() {
    return this.$$.ctx[40];
  }
  set debounce(debounce) {
    this.$$set({ debounce });
    flush();
  }
  get maxlength() {
    return this.$$.ctx[16];
  }
  set maxlength(maxlength) {
    this.$$set({ maxlength });
    flush();
  }
  get id() {
    return this.$$.ctx[17];
  }
  set id(id2) {
    this.$$set({ id: id2 });
    flush();
  }
  get mt() {
    return this.$$.ctx[18];
  }
  set mt(mt) {
    this.$$set({ mt });
    flush();
  }
  get mr() {
    return this.$$.ctx[19];
  }
  set mr(mr) {
    this.$$set({ mr });
    flush();
  }
  get mb() {
    return this.$$.ctx[20];
  }
  set mb(mb2) {
    this.$$set({ mb: mb2 });
    flush();
  }
  get ml() {
    return this.$$.ctx[21];
  }
  set ml(ml2) {
    this.$$set({ ml: ml2 });
    flush();
  }
}
customElements.define("goa-input", create_custom_element(Input, { "type": {}, "name": {}, "value": {}, "autocapitalize": {}, "placeholder": {}, "leadingicon": {}, "trailingicon": {}, "variant": {}, "disabled": {}, "handletrailingiconclick": {}, "focused": {}, "readonly": {}, "error": {}, "testid": {}, "width": {}, "arialabel": {}, "arialabelledby": {}, "min": {}, "max": {}, "step": {}, "prefix": {}, "suffix": {}, "debounce": {}, "maxlength": {}, "id": {}, "mt": {}, "mr": {}, "mb": {}, "ml": {} }, ["leadingContent", "trailingContent"], [], true));
function add_css$o(target) {
  append_styles(target, "svelte-o4q4t4", ".link.svelte-o4q4t4{display:inline-flex;align-items:center;color:var(--goa-color-interactive-default);padding:0;border:none;background:none;cursor:pointer;font:var(--goa-typography-body-m);text-decoration:underline;gap:8px}.link.svelte-o4q4t4:hover{color:var(--goa-color-interactive-hover)}");
}
function create_if_block_1$6(ctx) {
  let goa_icon;
  return {
    c() {
      goa_icon = element("goa-icon");
      set_custom_element_data(goa_icon, "class", "leading-icon");
      set_custom_element_data(
        goa_icon,
        "type",
        /*leadingicon*/
        ctx[0]
      );
    },
    m(target, anchor) {
      insert(target, goa_icon, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*leadingicon*/
      1) {
        set_custom_element_data(
          goa_icon,
          "type",
          /*leadingicon*/
          ctx2[0]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(goa_icon);
      }
    }
  };
}
function create_if_block$f(ctx) {
  let goa_icon;
  return {
    c() {
      goa_icon = element("goa-icon");
      set_custom_element_data(
        goa_icon,
        "type",
        /*trailingicon*/
        ctx[1]
      );
    },
    m(target, anchor) {
      insert(target, goa_icon, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*trailingicon*/
      2) {
        set_custom_element_data(
          goa_icon,
          "type",
          /*trailingicon*/
          ctx2[1]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(goa_icon);
      }
    }
  };
}
function create_fragment$r(ctx) {
  let div;
  let t0;
  let t1;
  let div_style_value;
  let current;
  let if_block0 = (
    /*leadingicon*/
    ctx[0] && create_if_block_1$6(ctx)
  );
  const default_slot_template = (
    /*#slots*/
    ctx[7].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[6],
    null
  );
  let if_block1 = (
    /*trailingicon*/
    ctx[1] && create_if_block$f(ctx)
  );
  return {
    c() {
      div = element("div");
      if (if_block0) if_block0.c();
      t0 = space();
      if (default_slot) default_slot.c();
      t1 = space();
      if (if_block1) if_block1.c();
      attr(div, "class", null_to_empty(`link`) + " svelte-o4q4t4");
      attr(div, "style", div_style_value = styles(calculateMargin(
        /*mt*/
        ctx[2],
        /*mr*/
        ctx[3],
        /*mb*/
        ctx[4],
        /*ml*/
        ctx[5]
      )));
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (if_block0) if_block0.m(div, null);
      append(div, t0);
      if (default_slot) {
        default_slot.m(div, null);
      }
      append(div, t1);
      if (if_block1) if_block1.m(div, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*leadingicon*/
        ctx2[0]
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_1$6(ctx2);
          if_block0.c();
          if_block0.m(div, t0);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        64)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[6],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[6]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[6],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (
        /*trailingicon*/
        ctx2[1]
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block$f(ctx2);
          if_block1.c();
          if_block1.m(div, null);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (!current || dirty & /*mt, mr, mb, ml*/
      60 && div_style_value !== (div_style_value = styles(calculateMargin(
        /*mt*/
        ctx2[2],
        /*mr*/
        ctx2[3],
        /*mb*/
        ctx2[4],
        /*ml*/
        ctx2[5]
      )))) {
        attr(div, "style", div_style_value);
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (if_block0) if_block0.d();
      if (default_slot) default_slot.d(detaching);
      if (if_block1) if_block1.d();
    }
  };
}
function instance$r($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { leadingicon } = $$props;
  let { trailingicon } = $$props;
  let { mt = null } = $$props;
  let { mr = null } = $$props;
  let { mb: mb2 = "m" } = $$props;
  let { ml: ml2 = null } = $$props;
  $$self.$$set = ($$props2) => {
    if ("leadingicon" in $$props2) $$invalidate(0, leadingicon = $$props2.leadingicon);
    if ("trailingicon" in $$props2) $$invalidate(1, trailingicon = $$props2.trailingicon);
    if ("mt" in $$props2) $$invalidate(2, mt = $$props2.mt);
    if ("mr" in $$props2) $$invalidate(3, mr = $$props2.mr);
    if ("mb" in $$props2) $$invalidate(4, mb2 = $$props2.mb);
    if ("ml" in $$props2) $$invalidate(5, ml2 = $$props2.ml);
    if ("$$scope" in $$props2) $$invalidate(6, $$scope = $$props2.$$scope);
  };
  return [leadingicon, trailingicon, mt, mr, mb2, ml2, $$scope, slots];
}
class Link extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$r,
      create_fragment$r,
      safe_not_equal,
      {
        leadingicon: 0,
        trailingicon: 1,
        mt: 2,
        mr: 3,
        mb: 4,
        ml: 5
      },
      add_css$o
    );
  }
  get leadingicon() {
    return this.$$.ctx[0];
  }
  set leadingicon(leadingicon) {
    this.$$set({ leadingicon });
    flush();
  }
  get trailingicon() {
    return this.$$.ctx[1];
  }
  set trailingicon(trailingicon) {
    this.$$set({ trailingicon });
    flush();
  }
  get mt() {
    return this.$$.ctx[2];
  }
  set mt(mt) {
    this.$$set({ mt });
    flush();
  }
  get mr() {
    return this.$$.ctx[3];
  }
  set mr(mr) {
    this.$$set({ mr });
    flush();
  }
  get mb() {
    return this.$$.ctx[4];
  }
  set mb(mb2) {
    this.$$set({ mb: mb2 });
    flush();
  }
  get ml() {
    return this.$$.ctx[5];
  }
  set ml(ml2) {
    this.$$set({ ml: ml2 });
    flush();
  }
}
customElements.define("goa-link", create_custom_element(Link, { "leadingicon": {}, "trailingicon": {}, "mt": {}, "mr": {}, "mb": {}, "ml": {} }, ["default"], [], true));
function add_css$n(target) {
  append_styles(target, "svelte-1rfzrtr", ".link-button.svelte-1rfzrtr{display:inline-flex;align-items:center;color:var(--goa-color-interactive-default);padding:0;border:none;background:none;cursor:pointer;font:var(--goa-typography-body-m)}.link-button.svelte-1rfzrtr:hover{text-decoration:underline}::slotted(a){color:var(--goa-color-interactive-default)}");
}
function create_if_block_1$5(ctx) {
  let goa_icon;
  return {
    c() {
      goa_icon = element("goa-icon");
      set_custom_element_data(
        goa_icon,
        "type",
        /*leadingicon*/
        ctx[1]
      );
      set_custom_element_data(goa_icon, "fillcolor", "#0070C4");
    },
    m(target, anchor) {
      insert(target, goa_icon, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*leadingicon*/
      2) {
        set_custom_element_data(
          goa_icon,
          "type",
          /*leadingicon*/
          ctx2[1]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(goa_icon);
      }
    }
  };
}
function create_if_block$e(ctx) {
  let goa_icon;
  return {
    c() {
      goa_icon = element("goa-icon");
      set_custom_element_data(
        goa_icon,
        "type",
        /*trailingicon*/
        ctx[2]
      );
      set_custom_element_data(goa_icon, "fillcolor", "#0070C4");
    },
    m(target, anchor) {
      insert(target, goa_icon, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*trailingicon*/
      4) {
        set_custom_element_data(
          goa_icon,
          "type",
          /*trailingicon*/
          ctx2[2]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(goa_icon);
      }
    }
  };
}
function create_fragment$q(ctx) {
  let button;
  let t0;
  let t1;
  let button_class_value;
  let button_style_value;
  let current;
  let mounted;
  let dispose;
  let if_block0 = (
    /*leadingicon*/
    ctx[1] && create_if_block_1$5(ctx)
  );
  const default_slot_template = (
    /*#slots*/
    ctx[10].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[9],
    null
  );
  let if_block1 = (
    /*trailingicon*/
    ctx[2] && create_if_block$e(ctx)
  );
  return {
    c() {
      button = element("button");
      if (if_block0) if_block0.c();
      t0 = space();
      if (default_slot) default_slot.c();
      t1 = space();
      if (if_block1) if_block1.c();
      attr(button, "class", button_class_value = null_to_empty(`link-button ${/*type*/
      ctx[0]}`) + " svelte-1rfzrtr");
      attr(button, "style", button_style_value = calculateMargin(
        /*mt*/
        ctx[3],
        /*mr*/
        ctx[4],
        /*mb*/
        ctx[5],
        /*ml*/
        ctx[6]
      ));
    },
    m(target, anchor) {
      insert(target, button, anchor);
      if (if_block0) if_block0.m(button, null);
      append(button, t0);
      if (default_slot) {
        default_slot.m(button, null);
      }
      append(button, t1);
      if (if_block1) if_block1.m(button, null);
      ctx[11](button);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*onClick*/
          ctx[8]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (
        /*leadingicon*/
        ctx2[1]
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_1$5(ctx2);
          if_block0.c();
          if_block0.m(button, t0);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        512)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[9],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[9]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[9],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (
        /*trailingicon*/
        ctx2[2]
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block$e(ctx2);
          if_block1.c();
          if_block1.m(button, null);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (!current || dirty & /*type*/
      1 && button_class_value !== (button_class_value = null_to_empty(`link-button ${/*type*/
      ctx2[0]}`) + " svelte-1rfzrtr")) {
        attr(button, "class", button_class_value);
      }
      if (!current || dirty & /*mt, mr, mb, ml*/
      120 && button_style_value !== (button_style_value = calculateMargin(
        /*mt*/
        ctx2[3],
        /*mr*/
        ctx2[4],
        /*mb*/
        ctx2[5],
        /*ml*/
        ctx2[6]
      ))) {
        attr(button, "style", button_style_value);
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(button);
      }
      if (if_block0) if_block0.d();
      if (default_slot) default_slot.d(detaching);
      if (if_block1) if_block1.d();
      ctx[11](null);
      mounted = false;
      dispose();
    }
  };
}
function instance$q($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { type = "tertiary" } = $$props;
  let { leadingicon } = $$props;
  let { trailingicon } = $$props;
  let { mt = null } = $$props;
  let { mr = null } = $$props;
  let { mb: mb2 = null } = $$props;
  let { ml: ml2 = null } = $$props;
  let _el;
  function onClick(e) {
    dispatch$1(_el, "_click", null, { bubbles: true });
    e.stopPropagation();
  }
  function button_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _el = $$value;
      $$invalidate(7, _el);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("type" in $$props2) $$invalidate(0, type = $$props2.type);
    if ("leadingicon" in $$props2) $$invalidate(1, leadingicon = $$props2.leadingicon);
    if ("trailingicon" in $$props2) $$invalidate(2, trailingicon = $$props2.trailingicon);
    if ("mt" in $$props2) $$invalidate(3, mt = $$props2.mt);
    if ("mr" in $$props2) $$invalidate(4, mr = $$props2.mr);
    if ("mb" in $$props2) $$invalidate(5, mb2 = $$props2.mb);
    if ("ml" in $$props2) $$invalidate(6, ml2 = $$props2.ml);
    if ("$$scope" in $$props2) $$invalidate(9, $$scope = $$props2.$$scope);
  };
  return [
    type,
    leadingicon,
    trailingicon,
    mt,
    mr,
    mb2,
    ml2,
    _el,
    onClick,
    $$scope,
    slots,
    button_binding
  ];
}
class LinkButton extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$q,
      create_fragment$q,
      safe_not_equal,
      {
        type: 0,
        leadingicon: 1,
        trailingicon: 2,
        mt: 3,
        mr: 4,
        mb: 5,
        ml: 6
      },
      add_css$n
    );
  }
  get type() {
    return this.$$.ctx[0];
  }
  set type(type) {
    this.$$set({ type });
    flush();
  }
  get leadingicon() {
    return this.$$.ctx[1];
  }
  set leadingicon(leadingicon) {
    this.$$set({ leadingicon });
    flush();
  }
  get trailingicon() {
    return this.$$.ctx[2];
  }
  set trailingicon(trailingicon) {
    this.$$set({ trailingicon });
    flush();
  }
  get mt() {
    return this.$$.ctx[3];
  }
  set mt(mt) {
    this.$$set({ mt });
    flush();
  }
  get mr() {
    return this.$$.ctx[4];
  }
  set mr(mr) {
    this.$$set({ mr });
    flush();
  }
  get mb() {
    return this.$$.ctx[5];
  }
  set mb(mb2) {
    this.$$set({ mb: mb2 });
    flush();
  }
  get ml() {
    return this.$$.ctx[6];
  }
  set ml(ml2) {
    this.$$set({ ml: ml2 });
    flush();
  }
}
customElements.define("goa-link-button", create_custom_element(LinkButton, { "type": {}, "leadingicon": {}, "trailingicon": {}, "mt": {}, "mr": {}, "mb": {}, "ml": {} }, ["default"], [], true));
function add_css$m(target) {
  append_styles(target, "svelte-uvipa1", ':host{--goa-microsite-header-color-bg:var(--goa-color-greyscale-100);--goa-microsite-header-padding-large-screen:var(--goa-space-2xs) var(--goa-space-3xl);--goa-microsite-header-padding-medium-screen:var(--goa-space-2xs) var(--goa-space-xl);--goa-microsite-header-padding-small-screen:var(--goa-space-2xs) var(--goa-space-m);--goa-microsite-header-typography:var(--goa-typography-body-xs);--goa-microsite-header-typography-version-number:var(--goa-font-size-1);--goa-microsite-header-color-version-number:var(--goa-color-text-secondary);--goa-microsite-header-color-links:var(--goa-color-interactive-default);--goa-microsite-header-color-links-hover:var(--goa-color-interactive-hover);--goa-microsite-header-link-focus-border:var(--goa-border-width-l) solid var(--goa-color-interactive-focus);--goa-microsite-header-alpha-badge-color:var(--goa-color-warning-default);--goa-microsite-header-alpha-badge-color-text:var(--goa-color-text-default);--goa-microsite-header-beta-badge-color:var(--goa-color-brand-default);--goa-microsite-header-beta-badge-color-text:var(--goa-color-text-light);--goa-microsite-header-gap:var(--goa-space-m);box-sizing:border-box;font-family:var(--goa-font-family-sans)}.feedback-link.svelte-uvipa1{display:inline-flex}#container.svelte-uvipa1{container:self / inline-size;background-color:var(--goa-microsite-header-color-bg)}a.svelte-uvipa1{color:var(--goa-microsite-header-color-links);cursor:pointer}a.svelte-uvipa1:hover{color:var(--goa-microsite-header-color-links-hover)}a.svelte-uvipa1:focus{outline:var(--goa-microsite-header-link-focus-border)}a[target="_blank"].svelte-uvipa1::after{content:"";width:var(--goa-icon-size-s);height:var(--goa-icon-size-s);background-color:var(--goa-color-interactive-default);display:inline-block;margin-left:var(--goa-space-2xs);vertical-align:sub;mask:url("data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20class%3D%22ionicon%22%20viewBox%3D%220%200%20512%20512%22%3E%3Cpath%20d%3D%22M384%20224v184a40%2040%200%200%201-40%2040H104a40%2040%200%200%201-40-40V168a40%2040%200%200%201%2040-40h167.48M336%2064h112v112M224%20288%20440%2072%22%20fill%3D%22none%22%20stroke%3D%22currentColor%22%20stroke-linecap%3D%22round%22%20stroke-linejoin%3D%22round%22%20stroke-width%3D%2232%22%2F%3E%3C%2Fsvg%3E")\n      center bottom no-repeat;-webkit-mask:url("data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20class%3D%22ionicon%22%20viewBox%3D%220%200%20512%20512%22%3E%3Cpath%20d%3D%22M384%20224v184a40%2040%200%200%201-40%2040H104a40%2040%200%200%201-40-40V168a40%2040%200%200%201%2040-40h167.48M336%2064h112v112M224%20288%20440%2072%22%20fill%3D%22none%22%20stroke%3D%22currentColor%22%20stroke-linecap%3D%22round%22%20stroke-linejoin%3D%22round%22%20stroke-width%3D%2232%22%2F%3E%3C%2Fsvg%3E")\n      center bottom no-repeat}a[target="_blank"].svelte-uvipa1:hover:after{background-color:var(--goa-color-interactive-hover)}.content-container.svelte-uvipa1{font:var(--goa-microsite-header-typography);padding:var(--goa-microsite-header-padding-small-screen);display:flex;align-items:flex-start;justify-content:space-between;max-width:min(var(--max-content-width), 100%);margin:0 auto}@container self (min-width: 624px){.content-container.svelte-uvipa1{padding:var(--goa-microsite-header-padding-medium-screen)}}@container self (min-width: 1024px){.content-container.svelte-uvipa1{padding:var(--goa-microsite-header-padding-large-screen)}}.spacer.svelte-uvipa1{flex:1 1 auto}.version.svelte-uvipa1{color:var(--goa-microsite-header-color-version-number);margin-left:var(--goa-microsite-header-gap);font-size:var(--goa-microsite-header-typography-version-number)}::slotted([slot="version"]){display:flex;align-items:center}.service-type.svelte-uvipa1{font-weight:bold;padding:0px 3px 3px 3px;display:flex;line-height:initial;margin-right:var(--goa-microsite-header-gap)}.service-type--alpha.svelte-uvipa1{background-color:var(--goa-microsite-header-alpha-badge-color);color:var(--goa-microsite-header-alpha-badge-color-text)}.service-type--beta.svelte-uvipa1{background-color:var(--goa-microsite-header-beta-badge-color);color:var(--goa-microsite-header-beta-badge-color-text)}.site-text.svelte-uvipa1{font:var(--goa-microsite-header-typography);margin-bottom:4px}');
}
const get_version_slot_changes = (dirty) => ({});
const get_version_slot_context = (ctx) => ({});
function create_if_block_4(ctx) {
  let div;
  let t0;
  let a;
  let t1;
  let a_target_value;
  let t2;
  function select_block_type(ctx2, dirty) {
    if (
      /*feedbackurl*/
      ctx2[2]
    ) return create_if_block_5;
    if (
      /*_hasfeedbackhandler*/
      ctx2[8]
    ) return create_if_block_6;
  }
  let current_block_type = select_block_type(ctx);
  let if_block = current_block_type && current_block_type(ctx);
  return {
    c() {
      div = element("div");
      t0 = text("An official site of the ");
      a = element("a");
      t1 = text("Alberta Government");
      t2 = space();
      if (if_block) if_block.c();
      attr(a, "href", "https://www.alberta.ca/index.aspx");
      attr(a, "target", a_target_value = `_${/*headerurltarget*/
      ctx[4]}`);
      attr(a, "class", "svelte-uvipa1");
      attr(div, "data-testid", "type");
      attr(div, "class", "site-text svelte-uvipa1");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, t0);
      append(div, a);
      append(a, t1);
      append(div, t2);
      if (if_block) if_block.m(div, null);
    },
    p(ctx2, dirty) {
      if (dirty & /*headerurltarget*/
      16 && a_target_value !== (a_target_value = `_${/*headerurltarget*/
      ctx2[4]}`)) {
        attr(a, "target", a_target_value);
      }
      if (current_block_type === (current_block_type = select_block_type(ctx2)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if (if_block) if_block.d(1);
        if_block = current_block_type && current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(div, null);
        }
      }
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (if_block) {
        if_block.d();
      }
    }
  };
}
function create_if_block_6(ctx) {
  let span;
  let t0;
  let a;
  let mounted;
  let dispose;
  return {
    c() {
      span = element("span");
      t0 = text("— help us improve it by giving\n            \n            ");
      a = element("a");
      a.textContent = "feedback";
      attr(a, "href", "#");
      attr(a, "class", "svelte-uvipa1");
      attr(span, "data-testid", "feedback-click");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t0);
      append(span, a);
      ctx[14](span);
      if (!mounted) {
        dispose = listen(
          a,
          "click",
          /*handleFeedbackClick*/
          ctx[9]
        );
        mounted = true;
      }
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
      ctx[14](null);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_5(ctx) {
  let span1;
  let t0;
  let span0;
  let a;
  let t1;
  let a_target_value;
  return {
    c() {
      span1 = element("span");
      t0 = text("— help us improve it by giving\n            ");
      span0 = element("span");
      a = element("a");
      t1 = text("feedback");
      attr(
        a,
        "href",
        /*feedbackurl*/
        ctx[2]
      );
      attr(a, "target", a_target_value = `_${/*feedbackurltarget*/
      ctx[5]}`);
      attr(a, "class", "svelte-uvipa1");
      attr(span0, "class", "feedback-link svelte-uvipa1");
      attr(span1, "data-testid", "feedback");
    },
    m(target, anchor) {
      insert(target, span1, anchor);
      append(span1, t0);
      append(span1, span0);
      append(span0, a);
      append(a, t1);
    },
    p(ctx2, dirty) {
      if (dirty & /*feedbackurl*/
      4) {
        attr(
          a,
          "href",
          /*feedbackurl*/
          ctx2[2]
        );
      }
      if (dirty & /*feedbackurltarget*/
      32 && a_target_value !== (a_target_value = `_${/*feedbackurltarget*/
      ctx2[5]}`)) {
        attr(a, "target", a_target_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(span1);
      }
    }
  };
}
function create_if_block_1$4(ctx) {
  let div0;
  let t0_value = capitalize(
    /*type*/
    ctx[0]
  ) + "";
  let t0;
  let div0_class_value;
  let t1;
  let div1;
  let t2;
  let a;
  let t3;
  let a_target_value;
  let t4;
  function select_block_type_1(ctx2, dirty) {
    if (
      /*feedbackurl*/
      ctx2[2]
    ) return create_if_block_2$3;
    if (
      /*_hasfeedbackhandler*/
      ctx2[8]
    ) return create_if_block_3$3;
  }
  let current_block_type = select_block_type_1(ctx);
  let if_block = current_block_type && current_block_type(ctx);
  return {
    c() {
      div0 = element("div");
      t0 = text(t0_value);
      t1 = space();
      div1 = element("div");
      t2 = text("This is a new ");
      a = element("a");
      t3 = text("Alberta Government");
      t4 = text("\n        service\n\n        ");
      if (if_block) if_block.c();
      attr(div0, "data-testid", "type");
      attr(div0, "class", div0_class_value = "service-type service-type--" + /*type*/
      ctx[0].toLowerCase() + " svelte-uvipa1");
      attr(a, "href", "https://www.alberta.ca/index.aspx");
      attr(a, "target", a_target_value = `_${/*headerurltarget*/
      ctx[4]}`);
      attr(a, "class", "svelte-uvipa1");
      attr(div1, "data-testid", "site-text");
      attr(div1, "class", "site-text svelte-uvipa1");
    },
    m(target, anchor) {
      insert(target, div0, anchor);
      append(div0, t0);
      insert(target, t1, anchor);
      insert(target, div1, anchor);
      append(div1, t2);
      append(div1, a);
      append(a, t3);
      append(div1, t4);
      if (if_block) if_block.m(div1, null);
    },
    p(ctx2, dirty) {
      if (dirty & /*type*/
      1 && t0_value !== (t0_value = capitalize(
        /*type*/
        ctx2[0]
      ) + "")) set_data(t0, t0_value);
      if (dirty & /*type*/
      1 && div0_class_value !== (div0_class_value = "service-type service-type--" + /*type*/
      ctx2[0].toLowerCase() + " svelte-uvipa1")) {
        attr(div0, "class", div0_class_value);
      }
      if (dirty & /*headerurltarget*/
      16 && a_target_value !== (a_target_value = `_${/*headerurltarget*/
      ctx2[4]}`)) {
        attr(a, "target", a_target_value);
      }
      if (current_block_type === (current_block_type = select_block_type_1(ctx2)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if (if_block) if_block.d(1);
        if_block = current_block_type && current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(div1, null);
        }
      }
    },
    d(detaching) {
      if (detaching) {
        detach(div0);
        detach(t1);
        detach(div1);
      }
      if (if_block) {
        if_block.d();
      }
    }
  };
}
function create_if_block_3$3(ctx) {
  let span;
  let t0;
  let a;
  let mounted;
  let dispose;
  return {
    c() {
      span = element("span");
      t0 = text("— help us improve it by giving\n            \n            ");
      a = element("a");
      a.textContent = "feedback";
      attr(a, "href", "#");
      attr(a, "class", "svelte-uvipa1");
      attr(span, "data-testid", "feedback-click");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t0);
      append(span, a);
      ctx[15](span);
      if (!mounted) {
        dispose = listen(
          a,
          "click",
          /*handleFeedbackClick*/
          ctx[9]
        );
        mounted = true;
      }
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
      ctx[15](null);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_2$3(ctx) {
  let span1;
  let t0;
  let span0;
  let a;
  let t1;
  let a_target_value;
  return {
    c() {
      span1 = element("span");
      t0 = text("— help us improve it by giving\n            ");
      span0 = element("span");
      a = element("a");
      t1 = text("feedback");
      attr(
        a,
        "href",
        /*feedbackurl*/
        ctx[2]
      );
      attr(a, "target", a_target_value = `_${/*feedbackurltarget*/
      ctx[5]}`);
      attr(a, "class", "svelte-uvipa1");
      attr(span0, "class", "feedback-link svelte-uvipa1");
      attr(span1, "data-testid", "feedback");
    },
    m(target, anchor) {
      insert(target, span1, anchor);
      append(span1, t0);
      append(span1, span0);
      append(span0, a);
      append(a, t1);
    },
    p(ctx2, dirty) {
      if (dirty & /*feedbackurl*/
      4) {
        attr(
          a,
          "href",
          /*feedbackurl*/
          ctx2[2]
        );
      }
      if (dirty & /*feedbackurltarget*/
      32 && a_target_value !== (a_target_value = `_${/*feedbackurltarget*/
      ctx2[5]}`)) {
        attr(a, "target", a_target_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(span1);
      }
    }
  };
}
function create_if_block$d(ctx) {
  let div;
  let current;
  const version_slot_template = (
    /*#slots*/
    ctx[13].version
  );
  const version_slot = create_slot(
    version_slot_template,
    ctx,
    /*$$scope*/
    ctx[12],
    get_version_slot_context
  );
  const version_slot_or_fallback = version_slot || fallback_block$1(ctx);
  return {
    c() {
      div = element("div");
      if (version_slot_or_fallback) version_slot_or_fallback.c();
      attr(div, "data-testid", "version");
      attr(div, "class", "version svelte-uvipa1");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (version_slot_or_fallback) {
        version_slot_or_fallback.m(div, null);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (version_slot) {
        if (version_slot.p && (!current || dirty & /*$$scope*/
        4096)) {
          update_slot_base(
            version_slot,
            version_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[12],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[12]
            ) : get_slot_changes(
              version_slot_template,
              /*$$scope*/
              ctx2[12],
              dirty,
              get_version_slot_changes
            ),
            get_version_slot_context
          );
        }
      } else {
        if (version_slot_or_fallback && version_slot_or_fallback.p && (!current || dirty & /*version*/
        2)) {
          version_slot_or_fallback.p(ctx2, !current ? -1 : dirty);
        }
      }
    },
    i(local) {
      if (current) return;
      transition_in(version_slot_or_fallback, local);
      current = true;
    },
    o(local) {
      transition_out(version_slot_or_fallback, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (version_slot_or_fallback) version_slot_or_fallback.d(detaching);
    }
  };
}
function fallback_block$1(ctx) {
  let t2;
  return {
    c() {
      t2 = text(
        /*version*/
        ctx[1]
      );
    },
    m(target, anchor) {
      insert(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*version*/
      2) set_data(
        t2,
        /*version*/
        ctx2[1]
      );
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_fragment$p(ctx) {
  let div2;
  let div1;
  let t0;
  let show_if = ["alpha", "beta"].includes(
    /*type*/
    ctx[0]
  );
  let t1;
  let div0;
  let t2;
  let div1_style_value;
  let current;
  let if_block0 = (
    /*type*/
    ctx[0] === "live" && create_if_block_4(ctx)
  );
  let if_block1 = show_if && create_if_block_1$4(ctx);
  let if_block2 = (
    /*$$slots*/
    (ctx[10].version || /*version*/
    ctx[1]) && create_if_block$d(ctx)
  );
  return {
    c() {
      div2 = element("div");
      div1 = element("div");
      if (if_block0) if_block0.c();
      t0 = space();
      if (if_block1) if_block1.c();
      t1 = space();
      div0 = element("div");
      t2 = space();
      if (if_block2) if_block2.c();
      attr(div0, "class", "spacer svelte-uvipa1");
      attr(div1, "class", "content-container svelte-uvipa1");
      attr(div1, "style", div1_style_value = `--max-content-width: ${/*maxcontentwidth*/
      ctx[3]}`);
      attr(div2, "id", "container");
      attr(
        div2,
        "data-testid",
        /*testid*/
        ctx[6]
      );
      attr(div2, "class", "svelte-uvipa1");
    },
    m(target, anchor) {
      insert(target, div2, anchor);
      append(div2, div1);
      if (if_block0) if_block0.m(div1, null);
      append(div1, t0);
      if (if_block1) if_block1.m(div1, null);
      append(div1, t1);
      append(div1, div0);
      append(div1, t2);
      if (if_block2) if_block2.m(div1, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*type*/
        ctx2[0] === "live"
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_4(ctx2);
          if_block0.c();
          if_block0.m(div1, t0);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (dirty & /*type*/
      1) show_if = ["alpha", "beta"].includes(
        /*type*/
        ctx2[0]
      );
      if (show_if) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block_1$4(ctx2);
          if_block1.c();
          if_block1.m(div1, t1);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (
        /*$$slots*/
        ctx2[10].version || /*version*/
        ctx2[1]
      ) {
        if (if_block2) {
          if_block2.p(ctx2, dirty);
          if (dirty & /*$$slots, version*/
          1026) {
            transition_in(if_block2, 1);
          }
        } else {
          if_block2 = create_if_block$d(ctx2);
          if_block2.c();
          transition_in(if_block2, 1);
          if_block2.m(div1, null);
        }
      } else if (if_block2) {
        group_outros();
        transition_out(if_block2, 1, 1, () => {
          if_block2 = null;
        });
        check_outros();
      }
      if (!current || dirty & /*maxcontentwidth*/
      8 && div1_style_value !== (div1_style_value = `--max-content-width: ${/*maxcontentwidth*/
      ctx2[3]}`)) {
        attr(div1, "style", div1_style_value);
      }
      if (!current || dirty & /*testid*/
      64) {
        attr(
          div2,
          "data-testid",
          /*testid*/
          ctx2[6]
        );
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block2);
      current = true;
    },
    o(local) {
      transition_out(if_block2);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div2);
      }
      if (if_block0) if_block0.d();
      if (if_block1) if_block1.d();
      if (if_block2) if_block2.d();
    }
  };
}
function capitalize(val) {
  if (!val || val && val.length === 0) return "";
  return val[0].toUpperCase() + val.slice(1);
}
function instance$p($$self, $$props, $$invalidate) {
  let _hasfeedbackhandler;
  let { $$slots: slots = {}, $$scope } = $$props;
  const $$slots = compute_slots(slots);
  const [Types, validateType] = typeValidator("Microsite header type", ["live", "alpha", "beta"], true);
  let { type } = $$props;
  let { version = "" } = $$props;
  let { feedbackurl = "" } = $$props;
  let { maxcontentwidth = "100%" } = $$props;
  let { headerurltarget = "blank" } = $$props;
  let { feedbackurltarget = "blank" } = $$props;
  let { hasfeedbackhandler = "false" } = $$props;
  let { testid = "" } = $$props;
  const [UrlTarget, validateUrlTargetType] = typeValidator("URL target values", ["self", "blank"]);
  let _feedbackElement;
  function handleFeedbackClick(event) {
    if (_hasfeedbackhandler == true) {
      event.preventDefault();
      _feedbackElement.dispatchEvent(new CustomEvent("_feedbackClick", { composed: true, bubbles: true }));
    }
  }
  onMount(async () => {
    setTimeout(() => validateType(type), 1);
    validateUrlTargetType(headerurltarget);
    validateUrlTargetType(feedbackurltarget);
  });
  function span_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _feedbackElement = $$value;
      $$invalidate(7, _feedbackElement);
    });
  }
  function span_binding_1($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _feedbackElement = $$value;
      $$invalidate(7, _feedbackElement);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("type" in $$props2) $$invalidate(0, type = $$props2.type);
    if ("version" in $$props2) $$invalidate(1, version = $$props2.version);
    if ("feedbackurl" in $$props2) $$invalidate(2, feedbackurl = $$props2.feedbackurl);
    if ("maxcontentwidth" in $$props2) $$invalidate(3, maxcontentwidth = $$props2.maxcontentwidth);
    if ("headerurltarget" in $$props2) $$invalidate(4, headerurltarget = $$props2.headerurltarget);
    if ("feedbackurltarget" in $$props2) $$invalidate(5, feedbackurltarget = $$props2.feedbackurltarget);
    if ("hasfeedbackhandler" in $$props2) $$invalidate(11, hasfeedbackhandler = $$props2.hasfeedbackhandler);
    if ("testid" in $$props2) $$invalidate(6, testid = $$props2.testid);
    if ("$$scope" in $$props2) $$invalidate(12, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*hasfeedbackhandler*/
    2048) {
      $$invalidate(8, _hasfeedbackhandler = toBoolean(hasfeedbackhandler));
    }
  };
  return [
    type,
    version,
    feedbackurl,
    maxcontentwidth,
    headerurltarget,
    feedbackurltarget,
    testid,
    _feedbackElement,
    _hasfeedbackhandler,
    handleFeedbackClick,
    $$slots,
    hasfeedbackhandler,
    $$scope,
    slots,
    span_binding,
    span_binding_1
  ];
}
class MicrositeHeader extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$p,
      create_fragment$p,
      safe_not_equal,
      {
        type: 0,
        version: 1,
        feedbackurl: 2,
        maxcontentwidth: 3,
        headerurltarget: 4,
        feedbackurltarget: 5,
        hasfeedbackhandler: 11,
        testid: 6
      },
      add_css$m
    );
  }
  get type() {
    return this.$$.ctx[0];
  }
  set type(type) {
    this.$$set({ type });
    flush();
  }
  get version() {
    return this.$$.ctx[1];
  }
  set version(version) {
    this.$$set({ version });
    flush();
  }
  get feedbackurl() {
    return this.$$.ctx[2];
  }
  set feedbackurl(feedbackurl) {
    this.$$set({ feedbackurl });
    flush();
  }
  get maxcontentwidth() {
    return this.$$.ctx[3];
  }
  set maxcontentwidth(maxcontentwidth) {
    this.$$set({ maxcontentwidth });
    flush();
  }
  get headerurltarget() {
    return this.$$.ctx[4];
  }
  set headerurltarget(headerurltarget) {
    this.$$set({ headerurltarget });
    flush();
  }
  get feedbackurltarget() {
    return this.$$.ctx[5];
  }
  set feedbackurltarget(feedbackurltarget) {
    this.$$set({ feedbackurltarget });
    flush();
  }
  get hasfeedbackhandler() {
    return this.$$.ctx[11];
  }
  set hasfeedbackhandler(hasfeedbackhandler) {
    this.$$set({ hasfeedbackhandler });
    flush();
  }
  get testid() {
    return this.$$.ctx[6];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
}
customElements.define("goa-microsite-header", create_custom_element(MicrositeHeader, { "type": {}, "version": {}, "feedbackurl": {}, "maxcontentwidth": {}, "headerurltarget": {}, "feedbackurltarget": {}, "hasfeedbackhandler": {}, "testid": {} }, ["version"], [], true));
function add_css$l(target) {
  append_styles(target, "svelte-e8cl89", ":host{--goa-modal-header-typography:var(--goa-typography-heading-m);--goa-modal-border-radius:var(--goa-border-radius-m);--goa-modal-shadow:6px 6px 6px 0px rgba(0,0,0,0.16);--goa-modal-overlay-color:var(--goa-color-greyscale-black);--goa-modal-overlay-opacity:var(--goa-opacity-background-modal);--goa-modal-padding:var(--goa-space-xl);--goa-modal-padding-small-screen:var(--goa-space-l);--goa-modal-content-gap:var(--goa-space-l);--goa-modal-content-gap-small-screen:var(--goa-space-m);--goa-modal-callout-bar-padding:var(--goa-space-xl);--goa-modal-callout-bar-padding-small-screen:var(--goa-space-s) var(--goa-space-s) var(--goa-space-s) var(--goa-space-l);--scrollable-padding-mobile:1.5rem;--scrollable-padding-desktop:2rem;box-sizing:border-box;font-family:var(--goa-font-family-sans);position:relative;z-index:99999}:host .svelte-e8cl89.svelte-e8cl89{box-sizing:border-box}.modal.svelte-e8cl89.svelte-e8cl89{font-family:var(--goa-font-family-sans);position:fixed;inset:0;display:flex;align-items:center;justify-content:center;height:100vh;width:100%;z-index:3}.modal-overlay.svelte-e8cl89.svelte-e8cl89{position:absolute;top:0;left:0;width:100%;height:100%;background-color:var(--goa-modal-overlay-color);z-index:1;opacity:var(--goa-modal-overlay-opacity)}.emergency.svelte-e8cl89.svelte-e8cl89{background-color:var(--goa-color-emergency-default)}.important.svelte-e8cl89.svelte-e8cl89{background-color:var(--goa-color-warning-default)}.information.svelte-e8cl89.svelte-e8cl89{background-color:var(--goa-color-info-default)}.event.svelte-e8cl89.svelte-e8cl89{background-color:var(--goa-color-info-default)}.success.svelte-e8cl89.svelte-e8cl89{background-color:var(--goa-color-success-default)}.callout-bar.svelte-e8cl89.svelte-e8cl89{flex:0 0 3rem;text-align:center;padding:var(--goa-modal-callout-bar-padding) 0 0 0;border-radius:var(--goa-modal-border-radius) 0px 0px var(--goa-modal-border-radius)}.content.svelte-e8cl89.svelte-e8cl89{flex:1 1 auto;width:100%;padding:var(--goa-modal-padding) var(--goa-modal-padding) 0 var(--goa-modal-padding)}.content.svelte-e8cl89 header.svelte-e8cl89{display:flex;justify-content:space-between;margin-bottom:var(--goa-space-xl)}header.has-content.svelte-e8cl89.svelte-e8cl89{margin-bottom:var(--goa-modal-content-gap)}@media(max-width: 623px){.content.svelte-e8cl89.svelte-e8cl89{padding:var(--goa-modal-padding-small-screen) var(--goa-modal-padding-small-screen) 0 var(--goa-modal-padding-small-screen)}header.has-content.svelte-e8cl89.svelte-e8cl89{margin-bottom:var(--goa-modal-content-gap-small-screen)}.modal-actions.svelte-e8cl89 ::slotted(*){padding:0}.modal-content.svelte-e8cl89 ::slotted(:last-child){margin-bottom:var(--goa-space-xs) !important}.modal-pane.svelte-e8cl89.svelte-e8cl89{flex-direction:column}.callout-bar.svelte-e8cl89.svelte-e8cl89{text-align:left;padding:var(--goa-modal-callout-bar-padding-small-screen);border-radius:var(--goa-modal-border-radius) var(--goa-modal-border-radius) 0px 0px;height:var(--goa-space-2xl)}.modal-content.svelte-e8cl89.svelte-e8cl89{margin:0 -1.5rem;box-shadow:none}:host{--scrollable-padding:var(--scrollable-padding-mobile)}}@media(min-width: 624px){.modal-pane.svelte-e8cl89.svelte-e8cl89{max-width:var(--maxwidth)}.modal-content.svelte-e8cl89.svelte-e8cl89{margin:0 -2rem;box-shadow:none}:host{--scrollable-padding:var(--scrollable-padding-desktop)}}.modal-pane.svelte-e8cl89.svelte-e8cl89{background-color:#fff;z-index:2;width:90%;display:flex;box-shadow:var(--goa-shadow-modal);border-radius:var(--goa-modal-border-radius)}.modal-content.svelte-e8cl89 ::slotted(:last-child){margin-bottom:var(--goa-space-m) !important}.modal-title.svelte-e8cl89.svelte-e8cl89{font:var(--goa-modal-header-typography)}.modal-close.svelte-e8cl89.svelte-e8cl89{padding-left:var(--goa-space-m)}.modal-actions.svelte-e8cl89.svelte-e8cl89{width:100%;padding:var(--goa-space-m) 0 var(--goa-modal-padding) 0;margin:auto 0 0 0;text-align:right}.modal-actions.empty-actions.svelte-e8cl89.svelte-e8cl89{padding:0 0 var(--goa-modal-padding) 0}.modal.top.svelte-e8cl89 .modal-content.svelte-e8cl89{box-shadow:inset 0 -8px 8px -8px rgba(0, 0, 0, 0.3)}.modal.bottom.svelte-e8cl89 .modal-content.svelte-e8cl89{box-shadow:inset 0 8px 8px -8px rgba(0, 0, 0, 0.3)}.modal.middle.svelte-e8cl89 .modal-content.svelte-e8cl89{box-shadow:inset 0 8px 8px -8px rgba(0, 0, 0, 0.2),\n      inset 0 -8px 8px -8px rgba(0, 0, 0, 0.2)}");
}
const get_actions_slot_changes = (dirty) => ({});
const get_actions_slot_context = (ctx) => ({});
const get_content_slot_changes = (dirty) => ({});
const get_content_slot_context = (ctx) => ({});
const get_heading_slot_changes$1 = (dirty) => ({});
const get_heading_slot_context$1 = (ctx) => ({});
function create_if_block$c(ctx) {
  let goa_focus_trap;
  let div6;
  let div0;
  let t0;
  let div5;
  let t1;
  let div4;
  let header;
  let div1;
  let current_block_type_index;
  let if_block1;
  let t2;
  let header_resize_listener;
  let t3;
  let div2;
  let goa_scrollable;
  let goa_scrollable_maxheight_value;
  let t4;
  let div3;
  let div3_resize_listener;
  let div5_intro;
  let div5_outro;
  let div6_class_value;
  let div6_style_value;
  let noscroll_action;
  let div6_intro;
  let div6_outro;
  let current;
  let mounted;
  let dispose;
  let if_block0 = (
    /*calloutvariant*/
    ctx[3] !== null && create_if_block_3$2(ctx)
  );
  const if_block_creators = [create_if_block_2$2, create_else_block$4];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*heading*/
      ctx2[1]
    ) return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  let if_block2 = (
    /*_isClosable*/
    ctx[15] && create_if_block_1$3(ctx)
  );
  const content_slot_template = (
    /*#slots*/
    ctx[24].content
  );
  const content_slot = create_slot(
    content_slot_template,
    ctx,
    /*$$scope*/
    ctx[23],
    get_content_slot_context
  );
  const content_slot_or_fallback = content_slot || fallback_block(ctx);
  const actions_slot_template = (
    /*#slots*/
    ctx[24].actions
  );
  const actions_slot = create_slot(
    actions_slot_template,
    ctx,
    /*$$scope*/
    ctx[23],
    get_actions_slot_context
  );
  return {
    c() {
      goa_focus_trap = element("goa-focus-trap");
      div6 = element("div");
      div0 = element("div");
      t0 = space();
      div5 = element("div");
      if (if_block0) if_block0.c();
      t1 = space();
      div4 = element("div");
      header = element("header");
      div1 = element("div");
      if_block1.c();
      t2 = space();
      if (if_block2) if_block2.c();
      t3 = space();
      div2 = element("div");
      goa_scrollable = element("goa-scrollable");
      if (content_slot_or_fallback) content_slot_or_fallback.c();
      t4 = space();
      div3 = element("div");
      if (actions_slot) actions_slot.c();
      attr(div0, "data-testid", "modal-overlay");
      attr(div0, "class", "modal-overlay svelte-e8cl89");
      attr(div1, "data-testid", "modal-title");
      attr(div1, "class", "modal-title svelte-e8cl89");
      attr(div1, "id", "goa-modal-heading");
      attr(header, "class", "svelte-e8cl89");
      add_render_callback(() => (
        /*header_elementresize_handler*/
        ctx[26].call(header)
      ));
      toggle_class(
        header,
        "has-content",
        /*_requiresTopPadding*/
        ctx[11]
      );
      set_custom_element_data(goa_scrollable, "direction", "vertical");
      set_custom_element_data(goa_scrollable, "hpadding", "var(--scrollable-padding)");
      set_custom_element_data(goa_scrollable, "maxheight", goa_scrollable_maxheight_value = "calc(100vh - " + /*_headerHeight*/
      ctx[14] + "px - var(--goa-space-xl) - " + /*_actionsHeight*/
      ctx[12] + "px - " + _edgeMargin + "px)");
      set_custom_element_data(goa_scrollable, "class", "svelte-e8cl89");
      attr(div2, "data-testid", "modal-content");
      attr(div2, "class", "modal-content svelte-e8cl89");
      attr(div3, "class", "modal-actions svelte-e8cl89");
      attr(div3, "data-testid", "modal-actions");
      add_render_callback(() => (
        /*div3_elementresize_handler*/
        ctx[28].call(div3)
      ));
      toggle_class(div3, "empty-actions", !/*_actionsSlotHasContent*/
      ctx[13]);
      attr(div4, "class", "content svelte-e8cl89");
      attr(div5, "class", "modal-pane svelte-e8cl89");
      attr(div5, "tabindex", "-1");
      attr(
        div5,
        "role",
        /*role*/
        ctx[5]
      );
      attr(div5, "aria-modal", "true");
      attr(div5, "aria-labelledby", "goa-modal-heading");
      attr(
        div6,
        "data-testid",
        /*testid*/
        ctx[4]
      );
      attr(div6, "class", div6_class_value = null_to_empty(`modal ${/*_scrollPos*/
      ctx[10] ?? ""}`) + " svelte-e8cl89");
      attr(div6, "style", div6_style_value = `--maxwidth: ${/*maxwidth*/
      ctx[0]}; --actions-height: ${/*_actionsHeight*/
      ctx[12]}px; --header-height: ${/*_headerHeight*/
      ctx[14]}`);
      attr(div6, "role", "presentation");
      set_custom_element_data(
        goa_focus_trap,
        "open",
        /*open*/
        ctx[2]
      );
      set_custom_element_data(goa_focus_trap, "class", "svelte-e8cl89");
    },
    m(target, anchor) {
      insert(target, goa_focus_trap, anchor);
      append(goa_focus_trap, div6);
      append(div6, div0);
      append(div6, t0);
      append(div6, div5);
      if (if_block0) if_block0.m(div5, null);
      append(div5, t1);
      append(div5, div4);
      append(div4, header);
      append(header, div1);
      if_blocks[current_block_type_index].m(div1, null);
      append(header, t2);
      if (if_block2) if_block2.m(header, null);
      ctx[25](header);
      header_resize_listener = add_iframe_resize_listener(
        header,
        /*header_elementresize_handler*/
        ctx[26].bind(header)
      );
      append(div4, t3);
      append(div4, div2);
      append(div2, goa_scrollable);
      if (content_slot_or_fallback) {
        content_slot_or_fallback.m(goa_scrollable, null);
      }
      ctx[27](goa_scrollable);
      append(div4, t4);
      append(div4, div3);
      if (actions_slot) {
        actions_slot.m(div3, null);
      }
      div3_resize_listener = add_iframe_resize_listener(
        div3,
        /*div3_elementresize_handler*/
        ctx[28].bind(div3)
      );
      ctx[29](div6);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            div0,
            "click",
            /*close*/
            ctx[18]
          ),
          listen(
            goa_scrollable,
            "_scroll",
            /*handleScroll*/
            ctx[19]
          ),
          action_destroyer(noscroll_action = noscroll.call(null, div6, { enable: (
            /*_isOpen*/
            ctx[9]
          ) }))
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (
        /*calloutvariant*/
        ctx[3] !== null
      ) {
        if (if_block0) {
          if_block0.p(ctx, dirty);
        } else {
          if_block0 = create_if_block_3$2(ctx);
          if_block0.c();
          if_block0.m(div5, t1);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block1 = if_blocks[current_block_type_index];
        if (!if_block1) {
          if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
          if_block1.c();
        } else {
          if_block1.p(ctx, dirty);
        }
        transition_in(if_block1, 1);
        if_block1.m(div1, null);
      }
      if (
        /*_isClosable*/
        ctx[15]
      ) {
        if (if_block2) {
          if_block2.p(ctx, dirty);
        } else {
          if_block2 = create_if_block_1$3(ctx);
          if_block2.c();
          if_block2.m(header, null);
        }
      } else if (if_block2) {
        if_block2.d(1);
        if_block2 = null;
      }
      if (!current || dirty[0] & /*_requiresTopPadding*/
      2048) {
        toggle_class(
          header,
          "has-content",
          /*_requiresTopPadding*/
          ctx[11]
        );
      }
      if (content_slot) {
        if (content_slot.p && (!current || dirty[0] & /*$$scope*/
        8388608)) {
          update_slot_base(
            content_slot,
            content_slot_template,
            ctx,
            /*$$scope*/
            ctx[23],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx[23]
            ) : get_slot_changes(
              content_slot_template,
              /*$$scope*/
              ctx[23],
              dirty,
              get_content_slot_changes
            ),
            get_content_slot_context
          );
        }
      } else {
        if (content_slot_or_fallback && content_slot_or_fallback.p && (!current || dirty[0] & /*$$scope*/
        8388608)) {
          content_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
        }
      }
      if (!current || dirty[0] & /*_headerHeight, _actionsHeight*/
      20480 && goa_scrollable_maxheight_value !== (goa_scrollable_maxheight_value = "calc(100vh - " + /*_headerHeight*/
      ctx[14] + "px - var(--goa-space-xl) - " + /*_actionsHeight*/
      ctx[12] + "px - " + _edgeMargin + "px)")) {
        set_custom_element_data(goa_scrollable, "maxheight", goa_scrollable_maxheight_value);
      }
      if (actions_slot) {
        if (actions_slot.p && (!current || dirty[0] & /*$$scope*/
        8388608)) {
          update_slot_base(
            actions_slot,
            actions_slot_template,
            ctx,
            /*$$scope*/
            ctx[23],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx[23]
            ) : get_slot_changes(
              actions_slot_template,
              /*$$scope*/
              ctx[23],
              dirty,
              get_actions_slot_changes
            ),
            get_actions_slot_context
          );
        }
      }
      if (!current || dirty[0] & /*_actionsSlotHasContent*/
      8192) {
        toggle_class(div3, "empty-actions", !/*_actionsSlotHasContent*/
        ctx[13]);
      }
      if (!current || dirty[0] & /*role*/
      32) {
        attr(
          div5,
          "role",
          /*role*/
          ctx[5]
        );
      }
      if (!current || dirty[0] & /*testid*/
      16) {
        attr(
          div6,
          "data-testid",
          /*testid*/
          ctx[4]
        );
      }
      if (!current || dirty[0] & /*_scrollPos*/
      1024 && div6_class_value !== (div6_class_value = null_to_empty(`modal ${/*_scrollPos*/
      ctx[10] ?? ""}`) + " svelte-e8cl89")) {
        attr(div6, "class", div6_class_value);
      }
      if (!current || dirty[0] & /*maxwidth, _actionsHeight, _headerHeight*/
      20481 && div6_style_value !== (div6_style_value = `--maxwidth: ${/*maxwidth*/
      ctx[0]}; --actions-height: ${/*_actionsHeight*/
      ctx[12]}px; --header-height: ${/*_headerHeight*/
      ctx[14]}`)) {
        attr(div6, "style", div6_style_value);
      }
      if (noscroll_action && is_function(noscroll_action.update) && dirty[0] & /*_isOpen*/
      512) noscroll_action.update.call(null, { enable: (
        /*_isOpen*/
        ctx[9]
      ) });
      if (!current || dirty[0] & /*open*/
      4) {
        set_custom_element_data(
          goa_focus_trap,
          "open",
          /*open*/
          ctx[2]
        );
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block1);
      transition_in(content_slot_or_fallback, local);
      transition_in(actions_slot, local);
      if (local) {
        add_render_callback(() => {
          if (!current) return;
          if (div5_outro) div5_outro.end(1);
          div5_intro = create_in_transition(div5, fly, {
            duration: (
              /*_transitionTime*/
              ctx[17]
            ),
            y: 200
          });
          div5_intro.start();
        });
      }
      if (local) {
        add_render_callback(() => {
          if (!current) return;
          if (div6_outro) div6_outro.end(1);
          div6_intro = create_in_transition(div6, fade, { duration: (
            /*_transitionTime*/
            ctx[17]
          ) });
          div6_intro.start();
        });
      }
      current = true;
    },
    o(local) {
      transition_out(if_block1);
      transition_out(content_slot_or_fallback, local);
      transition_out(actions_slot, local);
      if (div5_intro) div5_intro.invalidate();
      if (local) {
        div5_outro = create_out_transition(div5, fly, {
          delay: (
            /*_transitionTime*/
            ctx[17]
          ),
          duration: (
            /*_transitionTime*/
            ctx[17]
          ),
          y: -100
        });
      }
      if (div6_intro) div6_intro.invalidate();
      if (local) {
        div6_outro = create_out_transition(div6, fade, {
          delay: (
            /*_transitionTime*/
            ctx[17]
          ),
          duration: (
            /*_transitionTime*/
            ctx[17]
          )
        });
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(goa_focus_trap);
      }
      if (if_block0) if_block0.d();
      if_blocks[current_block_type_index].d();
      if (if_block2) if_block2.d();
      ctx[25](null);
      header_resize_listener();
      if (content_slot_or_fallback) content_slot_or_fallback.d(detaching);
      ctx[27](null);
      if (actions_slot) actions_slot.d(detaching);
      div3_resize_listener();
      if (detaching && div5_outro) div5_outro.end();
      ctx[29](null);
      if (detaching && div6_outro) div6_outro.end();
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_if_block_3$2(ctx) {
  let div;
  let goa_icon;
  let goa_icon_inverted_value;
  let div_class_value;
  return {
    c() {
      div = element("div");
      goa_icon = element("goa-icon");
      set_custom_element_data(
        goa_icon,
        "type",
        /*_iconType*/
        ctx[16]
      );
      set_custom_element_data(goa_icon, "inverted", goa_icon_inverted_value = /*calloutvariant*/
      ctx[3] === "important" ? "false" : "true");
      set_custom_element_data(goa_icon, "class", "svelte-e8cl89");
      attr(div, "class", div_class_value = "callout-bar " + /*calloutvariant*/
      ctx[3] + " svelte-e8cl89");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, goa_icon);
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*_iconType*/
      65536) {
        set_custom_element_data(
          goa_icon,
          "type",
          /*_iconType*/
          ctx2[16]
        );
      }
      if (dirty[0] & /*calloutvariant*/
      8 && goa_icon_inverted_value !== (goa_icon_inverted_value = /*calloutvariant*/
      ctx2[3] === "important" ? "false" : "true")) {
        set_custom_element_data(goa_icon, "inverted", goa_icon_inverted_value);
      }
      if (dirty[0] & /*calloutvariant*/
      8 && div_class_value !== (div_class_value = "callout-bar " + /*calloutvariant*/
      ctx2[3] + " svelte-e8cl89")) {
        attr(div, "class", div_class_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_else_block$4(ctx) {
  let current;
  const heading_slot_template = (
    /*#slots*/
    ctx[24].heading
  );
  const heading_slot = create_slot(
    heading_slot_template,
    ctx,
    /*$$scope*/
    ctx[23],
    get_heading_slot_context$1
  );
  return {
    c() {
      if (heading_slot) heading_slot.c();
    },
    m(target, anchor) {
      if (heading_slot) {
        heading_slot.m(target, anchor);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (heading_slot) {
        if (heading_slot.p && (!current || dirty[0] & /*$$scope*/
        8388608)) {
          update_slot_base(
            heading_slot,
            heading_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[23],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[23]
            ) : get_slot_changes(
              heading_slot_template,
              /*$$scope*/
              ctx2[23],
              dirty,
              get_heading_slot_changes$1
            ),
            get_heading_slot_context$1
          );
        }
      }
    },
    i(local) {
      if (current) return;
      transition_in(heading_slot, local);
      current = true;
    },
    o(local) {
      transition_out(heading_slot, local);
      current = false;
    },
    d(detaching) {
      if (heading_slot) heading_slot.d(detaching);
    }
  };
}
function create_if_block_2$2(ctx) {
  let t2;
  return {
    c() {
      t2 = text(
        /*heading*/
        ctx[1]
      );
    },
    m(target, anchor) {
      insert(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*heading*/
      2) set_data(
        t2,
        /*heading*/
        ctx2[1]
      );
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
    }
  };
}
function create_if_block_1$3(ctx) {
  let div;
  let goa_icon_button;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      goa_icon_button = element("goa-icon-button");
      set_custom_element_data(goa_icon_button, "size", "medium");
      set_custom_element_data(goa_icon_button, "data-ignore-focus", "true");
      set_custom_element_data(goa_icon_button, "data-testid", "modal-close-button");
      set_custom_element_data(goa_icon_button, "arialabel", "Close the modal");
      set_custom_element_data(goa_icon_button, "icon", "close");
      set_custom_element_data(goa_icon_button, "theme", "filled");
      set_custom_element_data(goa_icon_button, "variant", "dark");
      set_custom_element_data(goa_icon_button, "class", "svelte-e8cl89");
      attr(div, "class", "modal-close svelte-e8cl89");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, goa_icon_button);
      if (!mounted) {
        dispose = listen(
          goa_icon_button,
          "click",
          /*close*/
          ctx[18]
        );
        mounted = true;
      }
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      mounted = false;
      dispose();
    }
  };
}
function fallback_block(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[24].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[23],
    null
  );
  return {
    c() {
      if (default_slot) default_slot.c();
    },
    m(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty[0] & /*$$scope*/
        8388608)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[23],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[23]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[23],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (default_slot) default_slot.d(detaching);
    }
  };
}
function create_fragment$o(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*_isOpen*/
    ctx[9] && create_if_block$c(ctx)
  );
  return {
    c() {
      if (if_block) if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block) if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*_isOpen*/
        ctx2[9]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*_isOpen*/
          512) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$c(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block) if_block.d(detaching);
    }
  };
}
let _edgeMargin = 128;
function instance$o($$self, $$props, $$invalidate) {
  let _isClosable;
  let _transitionTime;
  let _iconType;
  let { $$slots: slots = {}, $$scope } = $$props;
  let { heading = "" } = $$props;
  let { closable = "false" } = $$props;
  let { open = "false" } = $$props;
  let { transition = "none" } = $$props;
  let { calloutvariant = null } = $$props;
  let { maxwidth = "60ch" } = $$props;
  let { testid = "modal" } = $$props;
  let { width = "" } = $$props;
  let { role = "dialog" } = $$props;
  let _rootEl = null;
  let _scrollPos = "top";
  let _scrollEl;
  let _headerEl;
  let _isOpen = false;
  let _requiresTopPadding;
  let _actionsHeight;
  let _actionsSlotHasContent = false;
  let _headerHeight;
  const [CALLOUT_VARIANT, validateCalloutVariant] = typeValidator("Callout variant", ["emergency", "important", "information", "success", "event"]);
  const [Transitions, validateTransition] = typeValidator("Modal transition", ["fast", "slow", "none"]);
  const [Role, validateRole] = typeValidator("Modal Role", ["dialog", "alertdialog"]);
  onMount(async () => {
    await tick();
    validateCalloutVariant(calloutvariant);
    validateTransition(transition);
    validateRole(role);
    window.addEventListener("keydown", onInputKeyDown);
    if (width) {
      $$invalidate(0, maxwidth = width);
      console.warn("`width` is deprecated. Please use `maxwidth` instead.");
    }
  });
  onDestroy(() => {
    window.removeEventListener("keydown", onInputKeyDown);
  });
  async function checkActionsSlotContent() {
    await tick();
    $$invalidate(13, _actionsSlotHasContent = !!(_rootEl == null ? void 0 : _rootEl.querySelector('[name="actions"]')));
  }
  function close(e) {
    if (!_isClosable) {
      return;
    }
    _rootEl == null ? void 0 : _rootEl.dispatchEvent(new CustomEvent("_close", { composed: true }));
    e.stopPropagation();
  }
  const onInputKeyDown = (e) => {
    if (!_isOpen) {
      return;
    }
    switch (e.key) {
      case "Escape":
        close(e);
        e.preventDefault();
        break;
    }
  };
  function handleScroll(e) {
    const hasScroll = e.detail.scrollHeight > e.detail.offsetHeight;
    if (!_isOpen || !hasScroll) return;
    if (e.detail.scrollTop == 0) {
      $$invalidate(10, _scrollPos = "top");
    } else if (
      // bottom
      Math.abs(e.detail.scrollHeight - e.detail.scrollTop - e.detail.offsetHeight) < 1
    ) {
      $$invalidate(10, _scrollPos = "bottom");
    } else {
      $$invalidate(10, _scrollPos = "middle");
    }
  }
  function header_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _headerEl = $$value;
      $$invalidate(8, _headerEl);
    });
  }
  function header_elementresize_handler() {
    _headerHeight = this.clientHeight;
    $$invalidate(14, _headerHeight);
  }
  function goa_scrollable_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _scrollEl = $$value;
      $$invalidate(7, _scrollEl);
    });
  }
  function div3_elementresize_handler() {
    _actionsHeight = this.clientHeight;
    $$invalidate(12, _actionsHeight);
  }
  function div6_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _rootEl = $$value;
      $$invalidate(6, _rootEl);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("heading" in $$props2) $$invalidate(1, heading = $$props2.heading);
    if ("closable" in $$props2) $$invalidate(20, closable = $$props2.closable);
    if ("open" in $$props2) $$invalidate(2, open = $$props2.open);
    if ("transition" in $$props2) $$invalidate(21, transition = $$props2.transition);
    if ("calloutvariant" in $$props2) $$invalidate(3, calloutvariant = $$props2.calloutvariant);
    if ("maxwidth" in $$props2) $$invalidate(0, maxwidth = $$props2.maxwidth);
    if ("testid" in $$props2) $$invalidate(4, testid = $$props2.testid);
    if ("width" in $$props2) $$invalidate(22, width = $$props2.width);
    if ("role" in $$props2) $$invalidate(5, role = $$props2.role);
    if ("$$scope" in $$props2) $$invalidate(23, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    var _a;
    if ($$self.$$.dirty[0] & /*closable*/
    1048576) {
      $$invalidate(15, _isClosable = toBoolean(closable));
    }
    if ($$self.$$.dirty[0] & /*open*/
    4) {
      setTimeout(() => $$invalidate(9, _isOpen = toBoolean(open)), 1);
    }
    if ($$self.$$.dirty[0] & /*_isOpen, _scrollEl*/
    640) {
      if (_isOpen && _scrollEl) {
        const hasScroll = _scrollEl.scrollHeight > _scrollEl.offsetHeight;
        $$invalidate(10, _scrollPos = hasScroll ? "top" : null);
      }
    }
    if ($$self.$$.dirty[0] & /*_isOpen, _rootEl, _headerEl*/
    832) {
      if (_isOpen && _rootEl) {
        $$invalidate(11, _requiresTopPadding = !!((_a = _headerEl == null ? void 0 : _headerEl.querySelector("div.modal-title")) == null ? void 0 : _a.textContent) || !!(_headerEl == null ? void 0 : _headerEl.querySelector("div.modal-close")) || getSlottedChildren(_headerEl).length > 0);
      }
    }
    if ($$self.$$.dirty[0] & /*transition*/
    2097152) {
      $$invalidate(17, _transitionTime = transition === "none" ? 0 : transition === "slow" ? 400 : 200);
    }
    if ($$self.$$.dirty[0] & /*_isOpen*/
    512) {
      if (_isOpen) {
        checkActionsSlotContent();
      }
    }
    if ($$self.$$.dirty[0] & /*calloutvariant*/
    8) {
      $$invalidate(16, _iconType = calloutvariant === "emergency" ? "warning" : calloutvariant === "important" ? "alert-circle" : calloutvariant === "information" ? "information-circle" : calloutvariant === "success" ? "checkmark-circle" : calloutvariant === "event" ? "calendar" : "");
    }
  };
  return [
    maxwidth,
    heading,
    open,
    calloutvariant,
    testid,
    role,
    _rootEl,
    _scrollEl,
    _headerEl,
    _isOpen,
    _scrollPos,
    _requiresTopPadding,
    _actionsHeight,
    _actionsSlotHasContent,
    _headerHeight,
    _isClosable,
    _iconType,
    _transitionTime,
    close,
    handleScroll,
    closable,
    transition,
    width,
    $$scope,
    slots,
    header_binding,
    header_elementresize_handler,
    goa_scrollable_binding,
    div3_elementresize_handler,
    div6_binding
  ];
}
class Modal extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$o,
      create_fragment$o,
      safe_not_equal,
      {
        heading: 1,
        closable: 20,
        open: 2,
        transition: 21,
        calloutvariant: 3,
        maxwidth: 0,
        testid: 4,
        width: 22,
        role: 5
      },
      add_css$l,
      [-1, -1]
    );
  }
  get heading() {
    return this.$$.ctx[1];
  }
  set heading(heading) {
    this.$$set({ heading });
    flush();
  }
  get closable() {
    return this.$$.ctx[20];
  }
  set closable(closable) {
    this.$$set({ closable });
    flush();
  }
  get open() {
    return this.$$.ctx[2];
  }
  set open(open) {
    this.$$set({ open });
    flush();
  }
  get transition() {
    return this.$$.ctx[21];
  }
  set transition(transition) {
    this.$$set({ transition });
    flush();
  }
  get calloutvariant() {
    return this.$$.ctx[3];
  }
  set calloutvariant(calloutvariant) {
    this.$$set({ calloutvariant });
    flush();
  }
  get maxwidth() {
    return this.$$.ctx[0];
  }
  set maxwidth(maxwidth) {
    this.$$set({ maxwidth });
    flush();
  }
  get testid() {
    return this.$$.ctx[4];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
  get width() {
    return this.$$.ctx[22];
  }
  set width(width) {
    this.$$set({ width });
    flush();
  }
  get role() {
    return this.$$.ctx[5];
  }
  set role(role) {
    this.$$set({ role });
    flush();
  }
}
customElements.define("goa-modal", create_custom_element(Modal, { "heading": {}, "closable": {}, "open": {}, "transition": {}, "calloutvariant": {}, "maxwidth": {}, "testid": {}, "width": {}, "role": {} }, ["heading", "default", "content", "actions"], [], true));
function add_css$k(target) {
  append_styles(target, "svelte-1vjgyrf", ":host{--goa-notification-banner-text-size:var(--goa-typography-body-m);--goa-notification-banner-padding-tb:var(--goa-space-l);--goa-notification-banner-padding-lr-small-screen:var(--goa-space-m);--goa-notification-banner-padding-lr-medium-screen:var(--goa-space-l);--goa-notification-banner-padding-lr-large-screen:var(--goa-space-3xl);--goa-notification-banner-gap:var(--goa-space-m);--goa-notification-banner-information-color-bg:var(--goa-color-info-default);--goa-notification-banner-information-color-text:var(--goa-color-text-light);--goa-notification-banner-important-color-bg:var(--goa-color-warning-default);--goa-notification-banner-important-color-text:var(--goa-color-text-default);--goa-notification-banner-emergency-color-bg:var(--goa-color-emergency-default);--goa-notification-banner-emergency-color-text:var(--goa-color-text-light);--goa-notification-banner-event-color-bg:var(--goa-color-info-default);--goa-notification-banner-event-color-text:var(--goa-color-text-light);--goa-notification-banner-size-icon:var(--goa-icon-size-4);--goa-notification-banner-information-color-icon:var(--goa-color-greyscale-white);--goa-notification-banner-important-color-icon:var(--goa-color-greyscale-black);--goa-notification-banner-emergency-color-icon:var(--goa-color-greyscale-white);--goa-notification-banner-event-color-icon:var(--goa-color-greyscale-white);--goa-notification-banner-custom-color-bg:var(--goa-color-info-default);--goa-notification-banner-custom-color-text:var(--goa-color-text-light);--goa-notification-banner-custom-color-icon:var(--goa-color-greyscale-white);box-sizing:border-box;font-family:var(--goa-font-family-sans)}#container.svelte-1vjgyrf.svelte-1vjgyrf{container:self / inline-size}.notification.svelte-1vjgyrf.svelte-1vjgyrf{padding:var(--goa-notification-banner-padding-tb) var(--goa-notification-banner-padding-lr-small-screen);display:flex}@container self (min-width: 624px){.notification.svelte-1vjgyrf.svelte-1vjgyrf{padding:var(--goa-notification-banner-padding-tb) var(--goa-notification-banner-padding-lr-medium-screen)}}@container self (min-width: 1024px){.notification.svelte-1vjgyrf.svelte-1vjgyrf{padding:var(--goa-notification-banner-padding-tb) var(--goa-notification-banner-padding-lr-large-screen)}}.emergency.svelte-1vjgyrf.svelte-1vjgyrf{background-color:var(--goa-notification-banner-emergency-color-bg);color:var(--goa-notification-banner-emergency-color-text)}.important.svelte-1vjgyrf.svelte-1vjgyrf{background-color:var(--goa-notification-banner-important-color-bg);color:var(--goa-notification-banner-important-color-text)}.information.svelte-1vjgyrf.svelte-1vjgyrf{background-color:var(--goa-notification-banner-information-color-bg);color:var(--goa-notification-banner-information-color-text)}.event.svelte-1vjgyrf.svelte-1vjgyrf{background-color:var(--goa-notification-banner-event-color-bg);color:var(--goa-notification-banner-event-color-text)}.icon.svelte-1vjgyrf.svelte-1vjgyrf{flex:0 0 auto;margin-top:3px}.content-container.svelte-1vjgyrf.svelte-1vjgyrf{display:flex;flex-direction:row;flex:1 1 auto;gap:var(--goa-notification-banner-gap);margin:0 auto;max-width:min(var(--max-content-width), 100%)}.content.svelte-1vjgyrf.svelte-1vjgyrf{flex:1 1 auto;font:var(--goa-notification-banner-text-size)}::slotted(a){color:unset !important;outline:unset !important}::slotted(a:focus){outline:auto !important;border-radius:var(--goa-border-radius-m)}.notification.important.svelte-1vjgyrf ::slotted(a:focus){outline:unset !important;box-shadow:0 0 0 3px var(--goa-color-greyscale-black);border-radius:var(--goa-border-radius-m)}.close.svelte-1vjgyrf.svelte-1vjgyrf{flex:0 0 auto}.close.svelte-1vjgyrf button.svelte-1vjgyrf{background-color:transparent;border:none;cursor:pointer;padding:var(--goa-space-2xs);margin:0;outline:none;border-radius:var(--goa-border-radius-m);display:inline-flex;transition:transform 100ms ease-in-out}.close.svelte-1vjgyrf button.svelte-1vjgyrf:active{transform:translateY(2px)}.close.svelte-1vjgyrf button.information.svelte-1vjgyrf:hover,.close.svelte-1vjgyrf button.information.svelte-1vjgyrf:focus-visible{background-color:var(--goa-color-info-dark)}.close.svelte-1vjgyrf button.information.svelte-1vjgyrf:focus-visible{box-shadow:0 0 0 3px var(--goa-color-greyscale-white)}.close.svelte-1vjgyrf button.event.svelte-1vjgyrf:hover,.close.svelte-1vjgyrf button.event.svelte-1vjgyrf:focus-visible{background-color:var(--goa-color-info-dark)}.close.svelte-1vjgyrf button.event.svelte-1vjgyrf:focus-visible{box-shadow:0 0 0 3px var(--goa-color-greyscale-white)}.close.svelte-1vjgyrf button.important.svelte-1vjgyrf:hover,.close.svelte-1vjgyrf button.important.svelte-1vjgyrf:focus-visible{background-color:var(--goa-color-warning-dark)}.close.svelte-1vjgyrf button.important.svelte-1vjgyrf:focus-visible{box-shadow:0 0 0 3px var(--goa-color-greyscale-black)}.close.svelte-1vjgyrf button.emergency.svelte-1vjgyrf:hover,.close.svelte-1vjgyrf button.emergency.svelte-1vjgyrf:focus-visible{background-color:var(--goa-color-emergency-dark)}.close.svelte-1vjgyrf button.emergency.svelte-1vjgyrf:focus-visible{box-shadow:0 0 0 3px var(--goa-color-greyscale-white)}");
}
function create_if_block$b(ctx) {
  let div5;
  let div4;
  let div3;
  let div0;
  let goa_icon0;
  let goa_icon0_inverted_value;
  let t0;
  let div1;
  let t1;
  let div2;
  let button;
  let goa_icon1;
  let goa_icon1_inverted_value;
  let button_class_value;
  let div4_class_value;
  let div4_style_value;
  let div4_transition;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = (
    /*#slots*/
    ctx[8].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[7],
    null
  );
  return {
    c() {
      div5 = element("div");
      div4 = element("div");
      div3 = element("div");
      div0 = element("div");
      goa_icon0 = element("goa-icon");
      t0 = space();
      div1 = element("div");
      if (default_slot) default_slot.c();
      t1 = space();
      div2 = element("div");
      button = element("button");
      goa_icon1 = element("goa-icon");
      set_custom_element_data(
        goa_icon0,
        "type",
        /*iconType*/
        ctx[5]
      );
      set_custom_element_data(goa_icon0, "inverted", goa_icon0_inverted_value = /*type*/
      ctx[0] === "important" ? "false" : "true");
      attr(div0, "class", "icon svelte-1vjgyrf");
      attr(div1, "class", "content svelte-1vjgyrf");
      set_custom_element_data(goa_icon1, "type", "close");
      set_custom_element_data(goa_icon1, "inverted", goa_icon1_inverted_value = /*type*/
      ctx[0] === "important" ? "false" : "true");
      set_custom_element_data(goa_icon1, "theme", "filled");
      attr(button, "class", button_class_value = null_to_empty(
        /*type*/
        ctx[0]
      ) + " svelte-1vjgyrf");
      attr(div2, "class", "close svelte-1vjgyrf");
      attr(div3, "class", "content-container svelte-1vjgyrf");
      attr(div3, "role", "alert");
      attr(
        div3,
        "aria-live",
        /*arialive*/
        ctx[2]
      );
      attr(div3, "aria-atomic", "true");
      attr(div4, "class", div4_class_value = "notification " + /*type*/
      ctx[0] + " svelte-1vjgyrf");
      attr(div4, "style", div4_style_value = `--max-content-width: ${/*maxcontentwidth*/
      ctx[1]}`);
      attr(div5, "id", "container");
      attr(
        div5,
        "data-testid",
        /*testid*/
        ctx[3]
      );
      attr(div5, "class", "svelte-1vjgyrf");
    },
    m(target, anchor) {
      insert(target, div5, anchor);
      append(div5, div4);
      append(div4, div3);
      append(div3, div0);
      append(div0, goa_icon0);
      append(div3, t0);
      append(div3, div1);
      if (default_slot) {
        default_slot.m(div1, null);
      }
      append(div3, t1);
      append(div3, div2);
      append(div2, button);
      append(button, goa_icon1);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*close*/
          ctx[6]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (!current || dirty & /*iconType*/
      32) {
        set_custom_element_data(
          goa_icon0,
          "type",
          /*iconType*/
          ctx2[5]
        );
      }
      if (!current || dirty & /*type*/
      1 && goa_icon0_inverted_value !== (goa_icon0_inverted_value = /*type*/
      ctx2[0] === "important" ? "false" : "true")) {
        set_custom_element_data(goa_icon0, "inverted", goa_icon0_inverted_value);
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        128)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[7],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[7]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[7],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*type*/
      1 && goa_icon1_inverted_value !== (goa_icon1_inverted_value = /*type*/
      ctx2[0] === "important" ? "false" : "true")) {
        set_custom_element_data(goa_icon1, "inverted", goa_icon1_inverted_value);
      }
      if (!current || dirty & /*type*/
      1 && button_class_value !== (button_class_value = null_to_empty(
        /*type*/
        ctx2[0]
      ) + " svelte-1vjgyrf")) {
        attr(button, "class", button_class_value);
      }
      if (!current || dirty & /*arialive*/
      4) {
        attr(
          div3,
          "aria-live",
          /*arialive*/
          ctx2[2]
        );
      }
      if (!current || dirty & /*type*/
      1 && div4_class_value !== (div4_class_value = "notification " + /*type*/
      ctx2[0] + " svelte-1vjgyrf")) {
        attr(div4, "class", div4_class_value);
      }
      if (!current || dirty & /*maxcontentwidth*/
      2 && div4_style_value !== (div4_style_value = `--max-content-width: ${/*maxcontentwidth*/
      ctx2[1]}`)) {
        attr(div4, "style", div4_style_value);
      }
      if (!current || dirty & /*testid*/
      8) {
        attr(
          div5,
          "data-testid",
          /*testid*/
          ctx2[3]
        );
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      if (local) {
        add_render_callback(() => {
          if (!current) return;
          if (!div4_transition) div4_transition = create_bidirectional_transition(div4, fade, {}, true);
          div4_transition.run(1);
        });
      }
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      if (local) {
        if (!div4_transition) div4_transition = create_bidirectional_transition(div4, fade, {}, false);
        div4_transition.run(0);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div5);
      }
      if (default_slot) default_slot.d(detaching);
      if (detaching && div4_transition) div4_transition.end();
      mounted = false;
      dispose();
    }
  };
}
function create_fragment$n(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*show*/
    ctx[4] && create_if_block$b(ctx)
  );
  return {
    c() {
      if (if_block) if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block) if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*show*/
        ctx2[4]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*show*/
          16) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$b(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block) if_block.d(detaching);
    }
  };
}
function instance$n($$self, $$props, $$invalidate) {
  let iconType;
  let { $$slots: slots = {}, $$scope } = $$props;
  const [Types, validateType] = typeValidator("Notification type", ["emergency", "important", "information", "event"], true);
  const [AriaLiveTypes, validateAriaLiveType] = typeValidator("Aria-Live type", ["assertive", "off", "polite"], true);
  let { type = "" } = $$props;
  let { maxcontentwidth = "100%" } = $$props;
  let { arialive = "polite" } = $$props;
  let { testid = "" } = $$props;
  let show = true;
  onMount(() => {
    validateAriaLiveType(arialive);
    setTimeout(() => validateType(type), 1);
  });
  function close(e) {
    var _a;
    $$invalidate(4, show = false);
    (_a = e.target) == null ? void 0 : _a.dispatchEvent(new CustomEvent("_dismiss", { composed: true }));
    e.stopPropagation();
  }
  $$self.$$set = ($$props2) => {
    if ("type" in $$props2) $$invalidate(0, type = $$props2.type);
    if ("maxcontentwidth" in $$props2) $$invalidate(1, maxcontentwidth = $$props2.maxcontentwidth);
    if ("arialive" in $$props2) $$invalidate(2, arialive = $$props2.arialive);
    if ("testid" in $$props2) $$invalidate(3, testid = $$props2.testid);
    if ("$$scope" in $$props2) $$invalidate(7, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*type*/
    1) {
      $$invalidate(5, iconType = type === "emergency" ? "warning" : type === "important" ? "alert-circle" : type === "information" ? "information-circle" : type === "event" ? "calendar" : "");
    }
  };
  return [type, maxcontentwidth, arialive, testid, show, iconType, close, $$scope, slots];
}
class Notification extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$n,
      create_fragment$n,
      safe_not_equal,
      {
        type: 0,
        maxcontentwidth: 1,
        arialive: 2,
        testid: 3
      },
      add_css$k
    );
  }
  get type() {
    return this.$$.ctx[0];
  }
  set type(type) {
    this.$$set({ type });
    flush();
  }
  get maxcontentwidth() {
    return this.$$.ctx[1];
  }
  set maxcontentwidth(maxcontentwidth) {
    this.$$set({ maxcontentwidth });
    flush();
  }
  get arialive() {
    return this.$$.ctx[2];
  }
  set arialive(arialive) {
    this.$$set({ arialive });
    flush();
  }
  get testid() {
    return this.$$.ctx[3];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
}
customElements.define("goa-notification", create_custom_element(Notification, { "type": {}, "maxcontentwidth": {}, "arialive": {}, "testid": {} }, ["default"], [], true));
function add_css$j(target) {
  append_styles(target, "svelte-13nsbkv", ".page.svelte-13nsbkv{min-height:100vh;display:flex;flex-direction:column}.header.svelte-13nsbkv,.footer.svelte-13nsbkv{flex:0 0 auto}main.svelte-13nsbkv{flex:1 1 auto}");
}
const get_footer_slot_changes$2 = (dirty) => ({});
const get_footer_slot_context$2 = (ctx) => ({});
const get_header_slot_changes$2 = (dirty) => ({});
const get_header_slot_context$2 = (ctx) => ({});
function create_fragment$m(ctx) {
  let div;
  let section0;
  let t0;
  let main;
  let t1;
  let section1;
  let current;
  const header_slot_template = (
    /*#slots*/
    ctx[1].header
  );
  const header_slot = create_slot(
    header_slot_template,
    ctx,
    /*$$scope*/
    ctx[0],
    get_header_slot_context$2
  );
  const default_slot_template = (
    /*#slots*/
    ctx[1].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[0],
    null
  );
  const footer_slot_template = (
    /*#slots*/
    ctx[1].footer
  );
  const footer_slot = create_slot(
    footer_slot_template,
    ctx,
    /*$$scope*/
    ctx[0],
    get_footer_slot_context$2
  );
  return {
    c() {
      div = element("div");
      section0 = element("section");
      if (header_slot) header_slot.c();
      t0 = space();
      main = element("main");
      if (default_slot) default_slot.c();
      t1 = space();
      section1 = element("section");
      if (footer_slot) footer_slot.c();
      attr(section0, "class", "header svelte-13nsbkv");
      attr(main, "class", "svelte-13nsbkv");
      attr(section1, "class", "footer svelte-13nsbkv");
      attr(div, "class", "page svelte-13nsbkv");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, section0);
      if (header_slot) {
        header_slot.m(section0, null);
      }
      append(div, t0);
      append(div, main);
      if (default_slot) {
        default_slot.m(main, null);
      }
      append(div, t1);
      append(div, section1);
      if (footer_slot) {
        footer_slot.m(section1, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (header_slot) {
        if (header_slot.p && (!current || dirty & /*$$scope*/
        1)) {
          update_slot_base(
            header_slot,
            header_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[0],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[0]
            ) : get_slot_changes(
              header_slot_template,
              /*$$scope*/
              ctx2[0],
              dirty,
              get_header_slot_changes$2
            ),
            get_header_slot_context$2
          );
        }
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        1)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[0],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[0]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[0],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (footer_slot) {
        if (footer_slot.p && (!current || dirty & /*$$scope*/
        1)) {
          update_slot_base(
            footer_slot,
            footer_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[0],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[0]
            ) : get_slot_changes(
              footer_slot_template,
              /*$$scope*/
              ctx2[0],
              dirty,
              get_footer_slot_changes$2
            ),
            get_footer_slot_context$2
          );
        }
      }
    },
    i(local) {
      if (current) return;
      transition_in(header_slot, local);
      transition_in(default_slot, local);
      transition_in(footer_slot, local);
      current = true;
    },
    o(local) {
      transition_out(header_slot, local);
      transition_out(default_slot, local);
      transition_out(footer_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (header_slot) header_slot.d(detaching);
      if (default_slot) default_slot.d(detaching);
      if (footer_slot) footer_slot.d(detaching);
    }
  };
}
function instance$m($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  $$self.$$set = ($$props2) => {
    if ("$$scope" in $$props2) $$invalidate(0, $$scope = $$props2.$$scope);
  };
  return [$$scope, slots];
}
class OneColumnLayout extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$m, create_fragment$m, safe_not_equal, {}, add_css$j);
  }
}
customElements.define("goa-one-column-layout", create_custom_element(OneColumnLayout, {}, ["header", "default", "footer"], [], true));
const dimensionRegex = /^[1-9]+[0-9]*(px|em|rem|ch|vh|vw|%)$/;
function isValidDimension(value) {
  return dimensionRegex.test(value);
}
function add_css$i(target) {
  append_styles(target, "svelte-13np3sb", ":host{box-sizing:border-box;font-family:var(--goa-font-family-sans)}.page-content.svelte-13np3sb{max-width:var(--max-width);margin:0 auto;padding:0 var(--goa-space-m)}@media not (max-width: 623px){.page-content.svelte-13np3sb{padding:0 var(--goa-space-xl)}}@media(min-width: 1024px){.page-content.svelte-13np3sb{padding:0 var(--goa-space-3xl)}}");
}
function create_fragment$l(ctx) {
  let div;
  let div_style_value;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[4].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[3],
    null
  );
  return {
    c() {
      div = element("div");
      if (default_slot) default_slot.c();
      attr(div, "class", "page-content svelte-13np3sb");
      attr(div, "style", div_style_value = `--max-width: ${/*_width*/
      ctx[0]}`);
      attr(
        div,
        "data-testid",
        /*testid*/
        ctx[1]
      );
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        8)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[3],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[3]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[3],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*_width*/
      1 && div_style_value !== (div_style_value = `--max-width: ${/*_width*/
      ctx2[0]}`)) {
        attr(div, "style", div_style_value);
      }
      if (!current || dirty & /*testid*/
      2) {
        attr(
          div,
          "data-testid",
          /*testid*/
          ctx2[1]
        );
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (default_slot) default_slot.d(detaching);
    }
  };
}
function instance$l($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  const Sizes = { full: "100%" };
  let { width } = $$props;
  let { testid = "" } = $$props;
  let { _width } = $$props;
  function isValidSize(value) {
    if (["full"].includes(width)) return true;
    if (isValidDimension(value)) return true;
    return false;
  }
  onMount(() => {
    if (!isValidSize(width)) {
      console.error("Invalid PageBlock width");
    }
    $$invalidate(0, _width = Sizes[width] || width);
  });
  $$self.$$set = ($$props2) => {
    if ("width" in $$props2) $$invalidate(2, width = $$props2.width);
    if ("testid" in $$props2) $$invalidate(1, testid = $$props2.testid);
    if ("_width" in $$props2) $$invalidate(0, _width = $$props2._width);
    if ("$$scope" in $$props2) $$invalidate(3, $$scope = $$props2.$$scope);
  };
  return [_width, testid, width, $$scope, slots];
}
class PageBlock extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$l, create_fragment$l, safe_not_equal, { width: 2, testid: 1, _width: 0 }, add_css$i);
  }
  get width() {
    return this.$$.ctx[2];
  }
  set width(width) {
    this.$$set({ width });
    flush();
  }
  get testid() {
    return this.$$.ctx[1];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
  get _width() {
    return this.$$.ctx[0];
  }
  set _width(_width) {
    this.$$set({ _width });
    flush();
  }
}
customElements.define("goa-page-block", create_custom_element(PageBlock, { "width": {}, "testid": {}, "_width": {} }, ["default"], [], true));
function create_fragment$k(ctx) {
  let div;
  let div_style_value;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[7].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[6],
    null
  );
  return {
    c() {
      div = element("div");
      if (default_slot) default_slot.c();
      attr(div, "style", div_style_value = calculateMargin(
        /*mt*/
        ctx[0],
        /*mr*/
        ctx[1],
        /*mb*/
        ctx[2],
        /*ml*/
        ctx[3]
      ));
      attr(div, "class", "pages");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      ctx[8](div);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        64)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[6],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[6]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[6],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*mt, mr, mb, ml*/
      15 && div_style_value !== (div_style_value = calculateMargin(
        /*mt*/
        ctx2[0],
        /*mr*/
        ctx2[1],
        /*mb*/
        ctx2[2],
        /*ml*/
        ctx2[3]
      ))) {
        attr(div, "style", div_style_value);
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (default_slot) default_slot.d(detaching);
      ctx[8](null);
    }
  };
}
function instance$k($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { current = 1 } = $$props;
  let { mt = null } = $$props;
  let { mr = null } = $$props;
  let { mb: mb2 = null } = $$props;
  let { ml: ml2 = null } = $$props;
  let _rootEl;
  onMount(async () => {
    await tick();
    setCurrentPage(current);
  });
  function setCurrentPage(current2) {
    if (!_rootEl) return;
    const children2 = getSlottedChildren(_rootEl);
    children2.forEach((child, index) => {
      const _child = child;
      _child.style.display = index + 1 === +current2 ? "block" : "none";
    });
  }
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _rootEl = $$value;
      $$invalidate(4, _rootEl);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("current" in $$props2) $$invalidate(5, current = $$props2.current);
    if ("mt" in $$props2) $$invalidate(0, mt = $$props2.mt);
    if ("mr" in $$props2) $$invalidate(1, mr = $$props2.mr);
    if ("mb" in $$props2) $$invalidate(2, mb2 = $$props2.mb);
    if ("ml" in $$props2) $$invalidate(3, ml2 = $$props2.ml);
    if ("$$scope" in $$props2) $$invalidate(6, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*current*/
    32) {
      setCurrentPage(current);
    }
  };
  return [mt, mr, mb2, ml2, _rootEl, current, $$scope, slots, div_binding];
}
class Pages extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$k, create_fragment$k, safe_not_equal, { current: 5, mt: 0, mr: 1, mb: 2, ml: 3 });
  }
  get current() {
    return this.$$.ctx[5];
  }
  set current(current) {
    this.$$set({ current });
    flush();
  }
  get mt() {
    return this.$$.ctx[0];
  }
  set mt(mt) {
    this.$$set({ mt });
    flush();
  }
  get mr() {
    return this.$$.ctx[1];
  }
  set mr(mr) {
    this.$$set({ mr });
    flush();
  }
  get mb() {
    return this.$$.ctx[2];
  }
  set mb(mb2) {
    this.$$set({ mb: mb2 });
    flush();
  }
  get ml() {
    return this.$$.ctx[3];
  }
  set ml(ml2) {
    this.$$set({ ml: ml2 });
    flush();
  }
}
customElements.define("goa-pages", create_custom_element(Pages, { "current": {}, "mt": {}, "mr": {}, "mb": {}, "ml": {} }, ["default"], [], true));
function add_css$h(target) {
  append_styles(target, "svelte-1wkmzn8", "span.svelte-1wkmzn8{white-space:nowrap}.controls.svelte-1wkmzn8{display:flex;gap:1rem;flex-direction:column;align-items:center;width:100%}@media(min-width: 624px){.controls.svelte-1wkmzn8{flex-direction:row;justify-content:space-between}}");
}
function get_each_context$1(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[20] = list[i];
  child_ctx[22] = i;
  return child_ctx;
}
function create_if_block$a(ctx) {
  let goa_block;
  let span0;
  let t1;
  let input;
  let t2;
  let previous_key = (
    /*_pageCount*/
    ctx[7]
  );
  let t3;
  let span1;
  let t4;
  let t5;
  let key_block = create_key_block(ctx);
  return {
    c() {
      goa_block = element("goa-block");
      span0 = element("span");
      span0.textContent = "Page";
      t1 = space();
      input = element("input");
      t2 = space();
      key_block.c();
      t3 = space();
      span1 = element("span");
      t4 = text("of ");
      t5 = text(
        /*_pageCount*/
        ctx[7]
      );
      attr(span0, "class", "svelte-1wkmzn8");
      attr(input, "type", "hidden");
      attr(span1, "class", "svelte-1wkmzn8");
      set_custom_element_data(goa_block, "data-testid", "page-selector");
      set_custom_element_data(goa_block, "alignment", "center");
      set_custom_element_data(goa_block, "gap", "s");
    },
    m(target, anchor) {
      insert(target, goa_block, anchor);
      append(goa_block, span0);
      append(goa_block, t1);
      append(goa_block, input);
      ctx[13](input);
      append(goa_block, t2);
      key_block.m(goa_block, null);
      append(goa_block, t3);
      append(goa_block, span1);
      append(span1, t4);
      append(span1, t5);
    },
    p(ctx2, dirty) {
      if (dirty & /*_pageCount*/
      128 && safe_not_equal(previous_key, previous_key = /*_pageCount*/
      ctx2[7])) {
        key_block.d(1);
        key_block = create_key_block(ctx2);
        key_block.c();
        key_block.m(goa_block, t3);
      } else {
        key_block.p(ctx2, dirty);
      }
      if (dirty & /*_pageCount*/
      128) set_data(
        t5,
        /*_pageCount*/
        ctx2[7]
      );
    },
    d(detaching) {
      if (detaching) {
        detach(goa_block);
      }
      ctx[13](null);
      key_block.d(detaching);
    }
  };
}
function create_each_block$1(ctx) {
  let goa_dropdown_item;
  return {
    c() {
      goa_dropdown_item = element("goa-dropdown-item");
      set_custom_element_data(
        goa_dropdown_item,
        "value",
        /*i*/
        ctx[22] + 1
      );
      set_custom_element_data(
        goa_dropdown_item,
        "label",
        /*i*/
        ctx[22] + 1
      );
    },
    m(target, anchor) {
      insert(target, goa_dropdown_item, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(goa_dropdown_item);
      }
    }
  };
}
function create_key_block(ctx) {
  let goa_dropdown;
  let each_value = ensure_array_like({ length: (
    /*_pageCount*/
    ctx[7]
  ) });
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
  }
  return {
    c() {
      goa_dropdown = element("goa-dropdown");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      set_custom_element_data(
        goa_dropdown,
        "value",
        /*pagenumber*/
        ctx[0]
      );
    },
    m(target, anchor) {
      insert(target, goa_dropdown, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(goa_dropdown, null);
        }
      }
      ctx[14](goa_dropdown);
    },
    p(ctx2, dirty) {
      if (dirty & /*_pageCount*/
      128) {
        each_value = ensure_array_like({ length: (
          /*_pageCount*/
          ctx2[7]
        ) });
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context$1(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block$1(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(goa_dropdown, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
      if (dirty & /*pagenumber*/
      1) {
        set_custom_element_data(
          goa_dropdown,
          "value",
          /*pagenumber*/
          ctx2[0]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(goa_dropdown);
      }
      destroy_each(each_blocks, detaching);
      ctx[14](null);
    }
  };
}
function create_fragment$j(ctx) {
  let goa_block1;
  let div;
  let t0;
  let goa_block0;
  let goa_button0;
  let t1;
  let goa_button0_disabled_value;
  let t2;
  let goa_button1;
  let t3;
  let goa_button1_disabled_value;
  let mounted;
  let dispose;
  let if_block = (
    /*variant*/
    ctx[1] === "all" && create_if_block$a(ctx)
  );
  return {
    c() {
      goa_block1 = element("goa-block");
      div = element("div");
      if (if_block) if_block.c();
      t0 = space();
      goa_block0 = element("goa-block");
      goa_button0 = element("goa-button");
      t1 = text("Previous");
      t2 = space();
      goa_button1 = element("goa-button");
      t3 = text("Next");
      set_custom_element_data(goa_button0, "type", "tertiary");
      set_custom_element_data(goa_button0, "leadingicon", "arrow-back");
      set_custom_element_data(goa_button0, "disabled", goa_button0_disabled_value = /*pagenumber*/
      ctx[0] == 1 ? "true" : "false");
      set_custom_element_data(goa_button1, "type", "tertiary");
      set_custom_element_data(goa_button1, "trailingicon", "arrow-forward");
      set_custom_element_data(goa_button1, "disabled", goa_button1_disabled_value = /*pagenumber*/
      ctx[0] == /*_pageCount*/
      ctx[7] ? "true" : "false");
      set_custom_element_data(goa_block0, "alignment", "center");
      set_custom_element_data(goa_block0, "gap", "m");
      set_custom_element_data(goa_block0, "data-testid", "page-links");
      attr(div, "class", "controls svelte-1wkmzn8");
      attr(
        div,
        "data-testid",
        /*testid*/
        ctx[2]
      );
      set_custom_element_data(goa_block1, "id", "root");
      set_custom_element_data(
        goa_block1,
        "ml",
        /*ml*/
        ctx[6]
      );
      set_custom_element_data(
        goa_block1,
        "mr",
        /*mr*/
        ctx[4]
      );
      set_custom_element_data(
        goa_block1,
        "mb",
        /*mb*/
        ctx[5]
      );
      set_custom_element_data(
        goa_block1,
        "mt",
        /*mt*/
        ctx[3]
      );
    },
    m(target, anchor) {
      insert(target, goa_block1, anchor);
      append(goa_block1, div);
      if (if_block) if_block.m(div, null);
      append(div, t0);
      append(div, goa_block0);
      append(goa_block0, goa_button0);
      append(goa_button0, t1);
      append(goa_block0, t2);
      append(goa_block0, goa_button1);
      append(goa_button1, t3);
      if (!mounted) {
        dispose = [
          listen(
            goa_button0,
            "click",
            /*click_handler*/
            ctx[15]
          ),
          listen(
            goa_button1,
            "click",
            /*click_handler_1*/
            ctx[16]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (
        /*variant*/
        ctx2[1] === "all"
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block$a(ctx2);
          if_block.c();
          if_block.m(div, t0);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (dirty & /*pagenumber*/
      1 && goa_button0_disabled_value !== (goa_button0_disabled_value = /*pagenumber*/
      ctx2[0] == 1 ? "true" : "false")) {
        set_custom_element_data(goa_button0, "disabled", goa_button0_disabled_value);
      }
      if (dirty & /*pagenumber, _pageCount*/
      129 && goa_button1_disabled_value !== (goa_button1_disabled_value = /*pagenumber*/
      ctx2[0] == /*_pageCount*/
      ctx2[7] ? "true" : "false")) {
        set_custom_element_data(goa_button1, "disabled", goa_button1_disabled_value);
      }
      if (dirty & /*testid*/
      4) {
        attr(
          div,
          "data-testid",
          /*testid*/
          ctx2[2]
        );
      }
      if (dirty & /*ml*/
      64) {
        set_custom_element_data(
          goa_block1,
          "ml",
          /*ml*/
          ctx2[6]
        );
      }
      if (dirty & /*mr*/
      16) {
        set_custom_element_data(
          goa_block1,
          "mr",
          /*mr*/
          ctx2[4]
        );
      }
      if (dirty & /*mb*/
      32) {
        set_custom_element_data(
          goa_block1,
          "mb",
          /*mb*/
          ctx2[5]
        );
      }
      if (dirty & /*mt*/
      8) {
        set_custom_element_data(
          goa_block1,
          "mt",
          /*mt*/
          ctx2[3]
        );
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(goa_block1);
      }
      if (if_block) if_block.d();
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$j($$self, $$props, $$invalidate) {
  let _pageCount;
  const [Variants, validateVariant] = typeValidator("Pagination variant", ["all", "links-only"]);
  let { pagenumber } = $$props;
  let { itemcount } = $$props;
  let { perpagecount = 10 } = $$props;
  let { variant = "all" } = $$props;
  let { testid = "" } = $$props;
  let { mt = "none" } = $$props;
  let { mr = "none" } = $$props;
  let { mb: mb2 = "m" } = $$props;
  let { ml: ml2 = "none" } = $$props;
  let pageDropdownEl;
  let hiddenEl;
  onMount(async () => {
    await tick();
    validateRequired("GoAPagination", { itemcount, pagenumber });
    validateVariant(variant);
    setupPageDropdownListener();
  });
  function goto(e, offset) {
    var _a;
    const newPage = Number.parseInt(pagenumber + "") + offset;
    if (newPage > 0 && newPage <= _pageCount) {
      (_a = e.target) == null ? void 0 : _a.dispatchEvent(new CustomEvent(
        "_change",
        {
          composed: true,
          bubbles: true,
          detail: { page: newPage }
        }
      ));
    }
    e.preventDefault();
  }
  function setupPageDropdownListener() {
    if (!pageDropdownEl) {
      console.error("Missing pageDropdownEl");
      return;
    }
    pageDropdownEl.addEventListener("_change", (e) => {
      const ce2 = e;
      const page = Number.parseInt(ce2.detail.value);
      e.stopPropagation();
      hiddenEl.dispatchEvent(new CustomEvent(
        "_change",
        {
          composed: true,
          bubbles: true,
          detail: { page }
        }
      ));
    });
  }
  function input_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      hiddenEl = $$value;
      $$invalidate(9, hiddenEl);
    });
  }
  function goa_dropdown_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      pageDropdownEl = $$value;
      $$invalidate(8, pageDropdownEl);
    });
  }
  const click_handler = (e) => goto(e, -1);
  const click_handler_1 = (e) => goto(e, 1);
  $$self.$$set = ($$props2) => {
    if ("pagenumber" in $$props2) $$invalidate(0, pagenumber = $$props2.pagenumber);
    if ("itemcount" in $$props2) $$invalidate(11, itemcount = $$props2.itemcount);
    if ("perpagecount" in $$props2) $$invalidate(12, perpagecount = $$props2.perpagecount);
    if ("variant" in $$props2) $$invalidate(1, variant = $$props2.variant);
    if ("testid" in $$props2) $$invalidate(2, testid = $$props2.testid);
    if ("mt" in $$props2) $$invalidate(3, mt = $$props2.mt);
    if ("mr" in $$props2) $$invalidate(4, mr = $$props2.mr);
    if ("mb" in $$props2) $$invalidate(5, mb2 = $$props2.mb);
    if ("ml" in $$props2) $$invalidate(6, ml2 = $$props2.ml);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*itemcount, perpagecount*/
    6144) {
      $$invalidate(7, _pageCount = Math.ceil(itemcount / perpagecount));
    }
    if ($$self.$$.dirty & /*_pageCount*/
    128) {
      if (_pageCount) {
        tick().then(() => {
          setupPageDropdownListener();
        });
      }
    }
  };
  return [
    pagenumber,
    variant,
    testid,
    mt,
    mr,
    mb2,
    ml2,
    _pageCount,
    pageDropdownEl,
    hiddenEl,
    goto,
    itemcount,
    perpagecount,
    input_binding,
    goa_dropdown_binding,
    click_handler,
    click_handler_1
  ];
}
class Pagination extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$j,
      create_fragment$j,
      safe_not_equal,
      {
        pagenumber: 0,
        itemcount: 11,
        perpagecount: 12,
        variant: 1,
        testid: 2,
        mt: 3,
        mr: 4,
        mb: 5,
        ml: 6
      },
      add_css$h
    );
  }
  get pagenumber() {
    return this.$$.ctx[0];
  }
  set pagenumber(pagenumber) {
    this.$$set({ pagenumber });
    flush();
  }
  get itemcount() {
    return this.$$.ctx[11];
  }
  set itemcount(itemcount) {
    this.$$set({ itemcount });
    flush();
  }
  get perpagecount() {
    return this.$$.ctx[12];
  }
  set perpagecount(perpagecount) {
    this.$$set({ perpagecount });
    flush();
  }
  get variant() {
    return this.$$.ctx[1];
  }
  set variant(variant) {
    this.$$set({ variant });
    flush();
  }
  get testid() {
    return this.$$.ctx[2];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
  get mt() {
    return this.$$.ctx[3];
  }
  set mt(mt) {
    this.$$set({ mt });
    flush();
  }
  get mr() {
    return this.$$.ctx[4];
  }
  set mr(mr) {
    this.$$set({ mr });
    flush();
  }
  get mb() {
    return this.$$.ctx[5];
  }
  set mb(mb2) {
    this.$$set({ mb: mb2 });
    flush();
  }
  get ml() {
    return this.$$.ctx[6];
  }
  set ml(ml2) {
    this.$$set({ ml: ml2 });
    flush();
  }
}
customElements.define("goa-pagination", create_custom_element(Pagination, { "pagenumber": {}, "itemcount": {}, "perpagecount": {}, "variant": {}, "testid": {}, "mt": {}, "mr": {}, "mb": {}, "ml": {} }, [], [], true));
function add_css$g(target) {
  append_styles(target, "svelte-1xdbyh6", ":host{--goa-popover-border-radius:var(--goa-border-radius-m);--goa-popover-padding:var(--goa-space-s);--goa-popover-color-bg:var(--goa-color-greyscale-white);--goa-popover-shadow:drop-shadow(0px 3px 6px rgba(0, 0, 0, 0.25));--goa-popover-border-focus:var(--goa-border-width-l) solid var(--goa-color-interactive-focus);box-sizing:border-box;font-family:var(--goa-font-family-sans);font:var(--goa-typography-body-m);display:flex;align-items:center;height:100%}.popover-target.svelte-1xdbyh6{cursor:pointer;height:100%}.popover-target.svelte-1xdbyh6:has(:focus-visible){outline:var(--goa-popover-border-focus)}.popover-content.svelte-1xdbyh6{color:var(--goa-color-text-default);position:absolute;width:-moz-fit-content;width:fit-content;list-style-type:none;background:var(--goa-popover-color-bg);border-radius:var(--goa-popover-border-radius);outline:none;filter:var(--goa-popover-shadow);z-index:99;width:-moz-max-content;width:max-content;margin-top:var(--offset-top, 3px);margin-bottom:var(--offset-bottom, 3px);margin-left:var(--offset-left, 0);margin-right:var(--offset-right, 0)}::slotted(ul){display:block;padding:0;margin:0;list-style-type:none;line-height:2rem}.popover-background.svelte-1xdbyh6{cursor:default;position:fixed;z-index:98;inset:0}");
}
const get_target_slot_changes = (dirty) => ({});
const get_target_slot_context = (ctx) => ({});
function create_if_block$9(ctx) {
  let div0;
  let t2;
  let div2;
  let section;
  let goa_focus_trap;
  let div1;
  let section_style_value;
  let section_resize_listener;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = (
    /*#slots*/
    ctx[30].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[29],
    null
  );
  return {
    c() {
      div0 = element("div");
      t2 = space();
      div2 = element("div");
      section = element("section");
      goa_focus_trap = element("goa-focus-trap");
      div1 = element("div");
      if (default_slot) default_slot.c();
      attr(div0, "data-testid", "popover-background");
      attr(div0, "class", "popover-background svelte-1xdbyh6");
      set_custom_element_data(goa_focus_trap, "open", "true");
      attr(section, "data-testid", "popover-content");
      attr(section, "class", "popover-content svelte-1xdbyh6");
      attr(section, "style", section_style_value = styles(style(
        "width",
        /*width*/
        ctx[3]
      ), style(
        "min-width",
        /*minwidth*/
        ctx[2]
      ), style(
        "max-width",
        /*maxwidth*/
        ctx[1]
      ), style(
        "padding",
        /*_padded*/
        ctx[21] ? "var(--goa-space-m)" : "0"
      )));
      add_render_callback(() => (
        /*section_elementresize_handler*/
        ctx[33].call(section)
      ));
      attr(div2, "class", "popover-container");
    },
    m(target, anchor) {
      insert(target, div0, anchor);
      insert(target, t2, anchor);
      insert(target, div2, anchor);
      append(div2, section);
      append(section, goa_focus_trap);
      append(goa_focus_trap, div1);
      if (default_slot) {
        default_slot.m(div1, null);
      }
      ctx[32](div1);
      section_resize_listener = add_iframe_resize_listener(
        section,
        /*section_elementresize_handler*/
        ctx[33].bind(section)
      );
      ctx[34](section);
      current = true;
      if (!mounted) {
        dispose = listen(
          div0,
          "click",
          /*closePopover*/
          ctx[23]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty[0] & /*$$scope*/
        536870912)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[29],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[29]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[29],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty[0] & /*width, minwidth, maxwidth, _padded*/
      2097166 && section_style_value !== (section_style_value = styles(style(
        "width",
        /*width*/
        ctx2[3]
      ), style(
        "min-width",
        /*minwidth*/
        ctx2[2]
      ), style(
        "max-width",
        /*maxwidth*/
        ctx2[1]
      ), style(
        "padding",
        /*_padded*/
        ctx2[21] ? "var(--goa-space-m)" : "0"
      )))) {
        attr(section, "style", section_style_value);
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div0);
        detach(t2);
        detach(div2);
      }
      if (default_slot) default_slot.d(detaching);
      ctx[32](null);
      section_resize_listener();
      ctx[34](null);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment$i(ctx) {
  let div1;
  let div0;
  let div0_tabindex_value;
  let t2;
  let div1_style_value;
  let current;
  let mounted;
  let dispose;
  const target_slot_template = (
    /*#slots*/
    ctx[30].target
  );
  const target_slot = create_slot(
    target_slot_template,
    ctx,
    /*$$scope*/
    ctx[29],
    get_target_slot_context
  );
  let if_block = (
    /*_open*/
    ctx[15] && create_if_block$9(ctx)
  );
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      if (target_slot) target_slot.c();
      t2 = space();
      if (if_block) if_block.c();
      attr(div0, "class", "popover-target svelte-1xdbyh6");
      attr(div0, "tabindex", div0_tabindex_value = +/*tabindex*/
      ctx[9]);
      attr(div0, "data-testid", "popover-target");
      attr(
        div1,
        "data-testid",
        /*testid*/
        ctx[0]
      );
      attr(div1, "part", "popover");
      attr(div1, "style", div1_style_value = styles(
        /*_relative*/
        ctx[20] && "position: relative",
        /*height*/
        ctx[4] === "full" && "height: 100%;",
        calculateMargin(
          /*mt*/
          ctx[5],
          /*mr*/
          ctx[6],
          /*mb*/
          ctx[7],
          /*ml*/
          ctx[8]
        ),
        style(
          "--offset-top",
          /*voffset*/
          ctx[10]
        ),
        style(
          "--offset-bottom",
          /*voffset*/
          ctx[10]
        ),
        style(
          "--offset-left",
          /*hoffset*/
          ctx[11]
        ),
        style(
          "--offset-right",
          /*hoffset*/
          ctx[11]
        ),
        style(
          "--focus-border-width",
          /*focusborderwidth*/
          ctx[12]
        ),
        style(
          "--border-radius",
          /*borderradius*/
          ctx[13]
        ),
        style(
          "width",
          /*width*/
          ctx[3]
        )
      ));
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      if (target_slot) {
        target_slot.m(div0, null);
      }
      ctx[31](div0);
      append(div1, t2);
      if (if_block) if_block.m(div1, null);
      ctx[35](div1);
      current = true;
      if (!mounted) {
        dispose = listen(
          div0,
          "click",
          /*openPopover*/
          ctx[22]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (target_slot) {
        if (target_slot.p && (!current || dirty[0] & /*$$scope*/
        536870912)) {
          update_slot_base(
            target_slot,
            target_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[29],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[29]
            ) : get_slot_changes(
              target_slot_template,
              /*$$scope*/
              ctx2[29],
              dirty,
              get_target_slot_changes
            ),
            get_target_slot_context
          );
        }
      }
      if (!current || dirty[0] & /*tabindex*/
      512 && div0_tabindex_value !== (div0_tabindex_value = +/*tabindex*/
      ctx2[9])) {
        attr(div0, "tabindex", div0_tabindex_value);
      }
      if (
        /*_open*/
        ctx2[15]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*_open*/
          32768) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$9(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div1, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      if (!current || dirty[0] & /*testid*/
      1) {
        attr(
          div1,
          "data-testid",
          /*testid*/
          ctx2[0]
        );
      }
      if (!current || dirty[0] & /*_relative, height, mt, mr, mb, ml, voffset, hoffset, focusborderwidth, borderradius, width*/
      1064440 && div1_style_value !== (div1_style_value = styles(
        /*_relative*/
        ctx2[20] && "position: relative",
        /*height*/
        ctx2[4] === "full" && "height: 100%;",
        calculateMargin(
          /*mt*/
          ctx2[5],
          /*mr*/
          ctx2[6],
          /*mb*/
          ctx2[7],
          /*ml*/
          ctx2[8]
        ),
        style(
          "--offset-top",
          /*voffset*/
          ctx2[10]
        ),
        style(
          "--offset-bottom",
          /*voffset*/
          ctx2[10]
        ),
        style(
          "--offset-left",
          /*hoffset*/
          ctx2[11]
        ),
        style(
          "--offset-right",
          /*hoffset*/
          ctx2[11]
        ),
        style(
          "--focus-border-width",
          /*focusborderwidth*/
          ctx2[12]
        ),
        style(
          "--border-radius",
          /*borderradius*/
          ctx2[13]
        ),
        style(
          "width",
          /*width*/
          ctx2[3]
        )
      ))) {
        attr(div1, "style", div1_style_value);
      }
    },
    i(local) {
      if (current) return;
      transition_in(target_slot, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(target_slot, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      if (target_slot) target_slot.d(detaching);
      ctx[31](null);
      if (if_block) if_block.d();
      ctx[35](null);
      mounted = false;
      dispose();
    }
  };
}
function getBoundingClientRectWithMargins(el2) {
  const rect = el2.getBoundingClientRect();
  const style2 = window.getComputedStyle(el2);
  const mTop = parseInt(style2.marginTop, 10) || 0;
  const mRight = parseInt(style2.marginRight, 10) || 0;
  const mBottom = parseInt(style2.marginBottom, 10) || 0;
  const mLeft = parseInt(style2.marginLeft, 10) || 0;
  return {
    top: rect.top - mTop,
    right: rect.right + mRight,
    bottom: rect.bottom + mBottom,
    left: rect.left - mLeft,
    width: rect.width + mLeft + mRight,
    height: rect.height + mTop + mBottom,
    x: rect.x - mLeft,
    y: rect.y - mTop
  };
}
function instance$i($$self, $$props, $$invalidate) {
  let _padded;
  let _open;
  let _disabled;
  let _relative;
  let { $$slots: slots = {}, $$scope } = $$props;
  let { testid = "popover" } = $$props;
  let { position = "auto" } = $$props;
  let { maxwidth = "320px" } = $$props;
  let { minwidth = "" } = $$props;
  let { width = "" } = $$props;
  let { height = "wrap-content" } = $$props;
  let { padded = "true" } = $$props;
  let { relative = "false" } = $$props;
  let { mt = null } = $$props;
  let { mr = null } = $$props;
  let { mb: mb2 = null } = $$props;
  let { ml: ml2 = null } = $$props;
  let { open = "false" } = $$props;
  let { disabled = "false" } = $$props;
  let { tabindex = "0" } = $$props;
  let { voffset = "" } = $$props;
  let { hoffset = "" } = $$props;
  let { focusborderwidth = "var(--goa-border-width-l)" } = $$props;
  let { borderradius = "var(--goa-border-radius-m)" } = $$props;
  let _rootEl;
  let _targetEl;
  let _popoverEl;
  let _focusTrapEl;
  let _initFocusedEl;
  let _sectionHeight;
  onMount(async () => {
    await tick();
    _targetEl.addEventListener("keydown", onTargetEvent);
    const children2 = getSlottedChildren(_targetEl);
    _initFocusedEl = children2.find((el2) => el2.tabIndex >= 0) || _targetEl;
  });
  function handleUrlChange(_e) {
    closePopover();
  }
  function onTargetEvent(e) {
    switch (e.key) {
      case " ":
      case "Enter":
        openPopover();
        break;
      case "Escape":
        closePopover();
        break;
    }
  }
  function onFocusTrapEvent(e) {
    switch (e.key) {
      case "Escape":
        closePopover();
        break;
    }
  }
  function openPopover() {
    if (_disabled) return;
    (async () => {
      $$invalidate(15, _open = true);
      await tick();
      _focusTrapEl.addEventListener("keydown", onFocusTrapEvent, true);
      _rootEl.dispatchEvent(new CustomEvent("_open", { composed: true }));
    })();
  }
  function closePopover() {
    _initFocusedEl.focus();
    $$invalidate(15, _open = false);
    window.removeEventListener("popstate", handleUrlChange, true);
    _rootEl.dispatchEvent(new CustomEvent("_close", { composed: true }));
  }
  async function setPopoverPosition() {
    await tick();
    const targetRect = getBoundingClientRectWithMargins(_targetEl);
    const popoverRect = getBoundingClientRectWithMargins(_popoverEl);
    if (popoverRect.height < 20) return;
    const spaceAbove = targetRect.top;
    const spaceBelow = window.innerHeight - targetRect.bottom;
    const displayOnTop = position === "auto" ? spaceBelow < popoverRect.height && spaceAbove > popoverRect.height && spaceAbove > spaceBelow : position === "above";
    if (displayOnTop) {
      $$invalidate(
        18,
        _popoverEl.style.top = _relative ? `${-popoverRect.height}px` : `${targetRect.y - popoverRect.height + window.scrollY}px`,
        _popoverEl
      );
    } else {
      $$invalidate(18, _popoverEl.style.top = "", _popoverEl);
    }
    const rightAligned = document.body.clientWidth - targetRect.left < popoverRect.width && targetRect.left > popoverRect.width;
    if (rightAligned) {
      $$invalidate(18, _popoverEl.style.left = `${targetRect.x - (popoverRect.width - targetRect.width)}px`, _popoverEl);
    }
  }
  function div0_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _targetEl = $$value;
      $$invalidate(17, _targetEl);
    });
  }
  function div1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _focusTrapEl = $$value;
      $$invalidate(19, _focusTrapEl);
    });
  }
  function section_elementresize_handler() {
    _sectionHeight = this.clientHeight;
    $$invalidate(14, _sectionHeight);
  }
  function section_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _popoverEl = $$value;
      $$invalidate(18, _popoverEl);
    });
  }
  function div1_binding_1($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _rootEl = $$value;
      $$invalidate(16, _rootEl);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("testid" in $$props2) $$invalidate(0, testid = $$props2.testid);
    if ("position" in $$props2) $$invalidate(24, position = $$props2.position);
    if ("maxwidth" in $$props2) $$invalidate(1, maxwidth = $$props2.maxwidth);
    if ("minwidth" in $$props2) $$invalidate(2, minwidth = $$props2.minwidth);
    if ("width" in $$props2) $$invalidate(3, width = $$props2.width);
    if ("height" in $$props2) $$invalidate(4, height = $$props2.height);
    if ("padded" in $$props2) $$invalidate(25, padded = $$props2.padded);
    if ("relative" in $$props2) $$invalidate(26, relative = $$props2.relative);
    if ("mt" in $$props2) $$invalidate(5, mt = $$props2.mt);
    if ("mr" in $$props2) $$invalidate(6, mr = $$props2.mr);
    if ("mb" in $$props2) $$invalidate(7, mb2 = $$props2.mb);
    if ("ml" in $$props2) $$invalidate(8, ml2 = $$props2.ml);
    if ("open" in $$props2) $$invalidate(27, open = $$props2.open);
    if ("disabled" in $$props2) $$invalidate(28, disabled = $$props2.disabled);
    if ("tabindex" in $$props2) $$invalidate(9, tabindex = $$props2.tabindex);
    if ("voffset" in $$props2) $$invalidate(10, voffset = $$props2.voffset);
    if ("hoffset" in $$props2) $$invalidate(11, hoffset = $$props2.hoffset);
    if ("focusborderwidth" in $$props2) $$invalidate(12, focusborderwidth = $$props2.focusborderwidth);
    if ("borderradius" in $$props2) $$invalidate(13, borderradius = $$props2.borderradius);
    if ("$$scope" in $$props2) $$invalidate(29, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*padded*/
    33554432) {
      $$invalidate(21, _padded = toBoolean(padded));
    }
    if ($$self.$$.dirty[0] & /*open*/
    134217728) {
      $$invalidate(15, _open = toBoolean(open));
    }
    if ($$self.$$.dirty[0] & /*disabled*/
    268435456) {
      _disabled = toBoolean(disabled);
    }
    if ($$self.$$.dirty[0] & /*relative*/
    67108864) {
      $$invalidate(20, _relative = toBoolean(relative));
    }
    if ($$self.$$.dirty[0] & /*_open*/
    32768) {
      (async () => _open && await setPopoverPosition())();
    }
    if ($$self.$$.dirty[0] & /*_sectionHeight*/
    16384) {
      (async () => _sectionHeight && await setPopoverPosition())();
    }
    if ($$self.$$.dirty[0] & /*_open*/
    32768) {
      {
        if (_open) {
          window.addEventListener("popstate", handleUrlChange, true);
        } else {
          window.removeEventListener("popstate", handleUrlChange, true);
        }
      }
    }
  };
  return [
    testid,
    maxwidth,
    minwidth,
    width,
    height,
    mt,
    mr,
    mb2,
    ml2,
    tabindex,
    voffset,
    hoffset,
    focusborderwidth,
    borderradius,
    _sectionHeight,
    _open,
    _rootEl,
    _targetEl,
    _popoverEl,
    _focusTrapEl,
    _relative,
    _padded,
    openPopover,
    closePopover,
    position,
    padded,
    relative,
    open,
    disabled,
    $$scope,
    slots,
    div0_binding,
    div1_binding,
    section_elementresize_handler,
    section_binding,
    div1_binding_1
  ];
}
class Popover extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$i,
      create_fragment$i,
      safe_not_equal,
      {
        testid: 0,
        position: 24,
        maxwidth: 1,
        minwidth: 2,
        width: 3,
        height: 4,
        padded: 25,
        relative: 26,
        mt: 5,
        mr: 6,
        mb: 7,
        ml: 8,
        open: 27,
        disabled: 28,
        tabindex: 9,
        voffset: 10,
        hoffset: 11,
        focusborderwidth: 12,
        borderradius: 13
      },
      add_css$g,
      [-1, -1]
    );
  }
  get testid() {
    return this.$$.ctx[0];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
  get position() {
    return this.$$.ctx[24];
  }
  set position(position) {
    this.$$set({ position });
    flush();
  }
  get maxwidth() {
    return this.$$.ctx[1];
  }
  set maxwidth(maxwidth) {
    this.$$set({ maxwidth });
    flush();
  }
  get minwidth() {
    return this.$$.ctx[2];
  }
  set minwidth(minwidth) {
    this.$$set({ minwidth });
    flush();
  }
  get width() {
    return this.$$.ctx[3];
  }
  set width(width) {
    this.$$set({ width });
    flush();
  }
  get height() {
    return this.$$.ctx[4];
  }
  set height(height) {
    this.$$set({ height });
    flush();
  }
  get padded() {
    return this.$$.ctx[25];
  }
  set padded(padded) {
    this.$$set({ padded });
    flush();
  }
  get relative() {
    return this.$$.ctx[26];
  }
  set relative(relative) {
    this.$$set({ relative });
    flush();
  }
  get mt() {
    return this.$$.ctx[5];
  }
  set mt(mt) {
    this.$$set({ mt });
    flush();
  }
  get mr() {
    return this.$$.ctx[6];
  }
  set mr(mr) {
    this.$$set({ mr });
    flush();
  }
  get mb() {
    return this.$$.ctx[7];
  }
  set mb(mb2) {
    this.$$set({ mb: mb2 });
    flush();
  }
  get ml() {
    return this.$$.ctx[8];
  }
  set ml(ml2) {
    this.$$set({ ml: ml2 });
    flush();
  }
  get open() {
    return this.$$.ctx[27];
  }
  set open(open) {
    this.$$set({ open });
    flush();
  }
  get disabled() {
    return this.$$.ctx[28];
  }
  set disabled(disabled) {
    this.$$set({ disabled });
    flush();
  }
  get tabindex() {
    return this.$$.ctx[9];
  }
  set tabindex(tabindex) {
    this.$$set({ tabindex });
    flush();
  }
  get voffset() {
    return this.$$.ctx[10];
  }
  set voffset(voffset) {
    this.$$set({ voffset });
    flush();
  }
  get hoffset() {
    return this.$$.ctx[11];
  }
  set hoffset(hoffset) {
    this.$$set({ hoffset });
    flush();
  }
  get focusborderwidth() {
    return this.$$.ctx[12];
  }
  set focusborderwidth(focusborderwidth) {
    this.$$set({ focusborderwidth });
    flush();
  }
  get borderradius() {
    return this.$$.ctx[13];
  }
  set borderradius(borderradius) {
    this.$$set({ borderradius });
    flush();
  }
}
customElements.define("goa-popover", create_custom_element(Popover, { "testid": {}, "position": {}, "maxwidth": {}, "minwidth": {}, "width": {}, "height": {}, "padded": {}, "relative": {}, "mt": {}, "mr": {}, "mb": {}, "ml": {}, "open": { "reflect": true, "type": "String" }, "disabled": {}, "tabindex": {}, "voffset": {}, "hoffset": {}, "focusborderwidth": {}, "borderradius": {} }, ["target", "default"], [], true));
function add_css$f(target) {
  append_styles(target, "svelte-1rdulsk", ':host{--goa-radio-size:var(--goa-space-l);--goa-radio-border-radius:50%;--goa-radio-label:var(--goa-typography-body-m);--goa-radio-label-color-disabled:var(--goa-color-greyscale-500);--goa-radio-description:var(--goa-typography-body-xs);--goa-radio-border:var(--goa-border-width-s) solid var(--goa-color-greyscale-700);--goa-radio-border-hover:var(--goa-border-width-m) solid var(--goa-color-interactive-hover);--goa-radio-border-error:var(--goa-border-width-m) solid var(--goa-color-interactive-error);--goa-radio-border-error-hover:var(--goa-border-width-m) solid #ba0000;--goa-radio-border-error-disabled:var(--goa-border-width-m) solid #f58185;--goa-radio-border-disabled:var(--goa-border-width-s) solid var(--goa-color-greyscale-400);--goa-radio-border-checked:7px solid var(--goa-color-interactive-default);--goa-radio-border-checked-hover:7px solid var(--goa-color-interactive-hover);--goa-radio-border-checked-error:7px solid var(--goa-color-interactive-error);--goa-radio-border-checked-error-hover:7px solid #ba0000;--goa-radio-border-checked-error-disabled:7px solid #f58185;--goa-radio-border-checked-disabled:7px solid var(--goa-color-interactive-disabled);--goa-radio-border-focus:var(--goa-border-width-l) solid var(--goa-color-interactive-focus);--goa-radio-color-bg:var(--goa-color-greyscale-white);--goa-radio-:var(--goa-color-greyscale-100)}.goa-radio.svelte-1rdulsk.svelte-1rdulsk.svelte-1rdulsk{display:inline-flex}label.goa-radio.svelte-1rdulsk.svelte-1rdulsk.svelte-1rdulsk{box-sizing:border-box;display:inline-flex}.goa-radio-container.svelte-1rdulsk.svelte-1rdulsk.svelte-1rdulsk{display:flex;flex-direction:column}.goa-radio.svelte-1rdulsk.svelte-1rdulsk.svelte-1rdulsk:hover{cursor:pointer}.goa-radio.svelte-1rdulsk .svelte-1rdulsk.svelte-1rdulsk,.goa-radio.svelte-1rdulsk .svelte-1rdulsk.svelte-1rdulsk:before,.goa-radio.svelte-1rdulsk .svelte-1rdulsk.svelte-1rdulsk:after{box-sizing:border-box}.goa-radio.svelte-1rdulsk input[type="radio"].svelte-1rdulsk.svelte-1rdulsk{width:0;min-height:28px;margin:0;opacity:0}.goa-radio-label.svelte-1rdulsk.svelte-1rdulsk.svelte-1rdulsk{padding:0 var(--goa-space-xs);font:var(--goa-radio-label)}.goa-radio-description.svelte-1rdulsk.svelte-1rdulsk.svelte-1rdulsk{font:var(--goa-radio-description);margin-left:var(--goa-space-xl);margin-top:var(--goa-space-2xs);color:var(--goa-color-text-default)}.goa-radio-icon.svelte-1rdulsk.svelte-1rdulsk.svelte-1rdulsk{display:inline-block;height:var(--goa-radio-size);width:var(--goa-radio-size);border-radius:var(--goa-radio-border-radius);background-color:var(--goa-radio-color-bg);transition:box-shadow 100ms ease-in-out;flex:0 0 auto;margin-top:var(--font-valign-fix)}.goa-radio--disabled.svelte-1rdulsk .goa-radio-label.svelte-1rdulsk.svelte-1rdulsk,.goa-radio--disabled.svelte-1rdulsk~.goa-radio-description.svelte-1rdulsk.svelte-1rdulsk{color:var(--goa-radio-label-color-disabled)}.goa-radio--disabled.svelte-1rdulsk.svelte-1rdulsk.svelte-1rdulsk:hover{cursor:default}input[type="radio"].svelte-1rdulsk:not(:checked)~.goa-radio-icon.svelte-1rdulsk.svelte-1rdulsk{border:var(--goa-radio-border);margin-top:3px}input[type="radio"].svelte-1rdulsk:hover~.goa-radio-icon.svelte-1rdulsk.svelte-1rdulsk{border:var(--goa-radio-border-hover)}input[type="radio"].svelte-1rdulsk:focus-visible~.goa-radio-icon.svelte-1rdulsk.svelte-1rdulsk,input[type="radio"].svelte-1rdulsk:hover:focus-visible~.goa-radio-icon.svelte-1rdulsk.svelte-1rdulsk{outline:var(--goa-radio-border-focus)}input[type="radio"].svelte-1rdulsk:hover:focus-visible~.goa-radio-icon.svelte-1rdulsk.svelte-1rdulsk{border:var(--goa-radio-border)}input[type="radio"].svelte-1rdulsk:checked~.goa-radio-icon.svelte-1rdulsk.svelte-1rdulsk{border:var(--goa-radio-border-checked);margin-top:3px}input[type="radio"].svelte-1rdulsk:checked:hover~.goa-radio-icon.svelte-1rdulsk.svelte-1rdulsk{border:var(--goa-radio-border-checked-hover)}input[type="radio"].svelte-1rdulsk:checked:hover:focus-visible~.goa-radio-icon.svelte-1rdulsk.svelte-1rdulsk{border:var(--goa-radio-border-checked)}input[type="radio"].svelte-1rdulsk:disabled~.goa-radio-icon.svelte-1rdulsk.svelte-1rdulsk,input[type="radio"].svelte-1rdulsk:disabled:focus-visible~.goa-radio-icon.svelte-1rdulsk.svelte-1rdulsk{border:var(--goa-radio-border-disabled)}input[type="radio"].svelte-1rdulsk:disabled:checked~.goa-radio-icon.svelte-1rdulsk.svelte-1rdulsk,input[type="radio"].svelte-1rdulsk:disabled:checked:focus-visible~.goa-radio-icon.svelte-1rdulsk.svelte-1rdulsk{border:var(--goa-radio-border-checked-disabled)}.goa-radio--error.svelte-1rdulsk input[type="radio"].svelte-1rdulsk~.goa-radio-icon.svelte-1rdulsk{border:var(--goa-radio-border-error)}.goa-radio--error.svelte-1rdulsk input[type="radio"].svelte-1rdulsk:hover~.goa-radio-icon.svelte-1rdulsk{border:var(--goa-radio-border-error-hover)}.goa-radio--error.svelte-1rdulsk input[type="radio"].svelte-1rdulsk:hover:focus-visible~.goa-radio-icon.svelte-1rdulsk{outline:var(--goa-radio-border-focus);border:var(--goa-radio-border-error)}.goa-radio--error.svelte-1rdulsk input[type="radio"].svelte-1rdulsk:checked~.goa-radio-icon.svelte-1rdulsk{border:var(--goa-radio-border-checked-error)}.goa-radio--error.svelte-1rdulsk input[type="radio"].svelte-1rdulsk:checked:hover~.goa-radio-icon.svelte-1rdulsk{border:var(--goa-radio-border-checked-error-hover)}.goa-radio--error.svelte-1rdulsk input[type="radio"].svelte-1rdulsk:checked:hover:focus-visible~.goa-radio-icon.svelte-1rdulsk{outline:var(--goa-radio-border-focus);border:var(--goa-radio-border-checked-error)}.goa-radio--error.svelte-1rdulsk input[type="radio"].svelte-1rdulsk:disabled~.goa-radio-icon.svelte-1rdulsk{border:var(--goa-radio-border-error-disabled)}.goa-radio--error.svelte-1rdulsk input[type="radio"].svelte-1rdulsk:disabled:checked~.goa-radio-icon.svelte-1rdulsk{border:var(--goa-radio-border-checked-error-disabled)}');
}
const get_description_slot_changes = (dirty) => ({});
const get_description_slot_context = (ctx) => ({});
function create_if_block$8(ctx) {
  let div;
  let t0;
  let t1;
  let div_id_value;
  let current;
  const description_slot_template = (
    /*#slots*/
    ctx[20].description
  );
  const description_slot = create_slot(
    description_slot_template,
    ctx,
    /*$$scope*/
    ctx[19],
    get_description_slot_context
  );
  return {
    c() {
      div = element("div");
      if (description_slot) description_slot.c();
      t0 = space();
      t1 = text(
        /*description*/
        ctx[1]
      );
      attr(div, "class", "goa-radio-description svelte-1rdulsk");
      attr(div, "id", div_id_value = `${/*name*/
      ctx[0]}-${/*value*/
      ctx[2]}-description`);
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (description_slot) {
        description_slot.m(div, null);
      }
      append(div, t0);
      append(div, t1);
      current = true;
    },
    p(ctx2, dirty) {
      if (description_slot) {
        if (description_slot.p && (!current || dirty & /*$$scope*/
        524288)) {
          update_slot_base(
            description_slot,
            description_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[19],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[19]
            ) : get_slot_changes(
              description_slot_template,
              /*$$scope*/
              ctx2[19],
              dirty,
              get_description_slot_changes
            ),
            get_description_slot_context
          );
        }
      }
      if (!current || dirty & /*description*/
      2) set_data(
        t1,
        /*description*/
        ctx2[1]
      );
      if (!current || dirty & /*name, value*/
      5 && div_id_value !== (div_id_value = `${/*name*/
      ctx2[0]}-${/*value*/
      ctx2[2]}-description`)) {
        attr(div, "id", div_id_value);
      }
    },
    i(local) {
      if (current) return;
      transition_in(description_slot, local);
      current = true;
    },
    o(local) {
      transition_out(description_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (description_slot) description_slot.d(detaching);
    }
  };
}
function create_fragment$h(ctx) {
  let div1;
  let label_1;
  let input;
  let input_aria_describedby_value;
  let t0;
  let div0;
  let t1;
  let span;
  let t2_value = (
    /*label*/
    (ctx[3] || /*value*/
    ctx[2]) + ""
  );
  let t2;
  let label_1_data_testid_value;
  let t3;
  let div1_style_value;
  let current;
  let mounted;
  let dispose;
  let if_block = (
    /*$$slots*/
    (ctx[15].description || /*description*/
    ctx[1]) && create_if_block$8(ctx)
  );
  return {
    c() {
      div1 = element("div");
      label_1 = element("label");
      input = element("input");
      t0 = space();
      div0 = element("div");
      t1 = space();
      span = element("span");
      t2 = text(t2_value);
      t3 = space();
      if (if_block) if_block.c();
      attr(input, "type", "radio");
      attr(
        input,
        "name",
        /*name*/
        ctx[0]
      );
      input.value = /*value*/
      ctx[2];
      input.disabled = /*isDisabled*/
      ctx[12];
      input.checked = /*isChecked*/
      ctx[11];
      attr(
        input,
        "aria-label",
        /*arialabel*/
        ctx[4]
      );
      attr(input, "aria-describedby", input_aria_describedby_value = /*$$slots*/
      ctx[15].description || /*description*/
      ctx[1] ? `${/*name*/
      ctx[0]}-${/*value*/
      ctx[2]}-description` : void 0);
      attr(
        input,
        "aria-checked",
        /*isChecked*/
        ctx[11]
      );
      attr(input, "class", "svelte-1rdulsk");
      attr(div0, "class", "goa-radio-icon svelte-1rdulsk");
      attr(span, "class", "goa-radio-label svelte-1rdulsk");
      attr(label_1, "data-testid", label_1_data_testid_value = "radio-option-" + /*value*/
      ctx[2]);
      attr(label_1, "class", "goa-radio svelte-1rdulsk");
      toggle_class(
        label_1,
        "goa-radio--disabled",
        /*isDisabled*/
        ctx[12]
      );
      toggle_class(
        label_1,
        "goa-radio--error",
        /*isError*/
        ctx[13]
      );
      attr(div1, "style", div1_style_value = `
    ${calculateMargin(
        /*mt*/
        ctx[6],
        /*mr*/
        ctx[7],
        /*mb*/
        ctx[8],
        /*ml*/
        ctx[9]
      )}
    max-width: ${/*maxwidth*/
      ctx[5]};
  `);
      attr(div1, "class", "goa-radio-container svelte-1rdulsk");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, label_1);
      append(label_1, input);
      append(label_1, t0);
      append(label_1, div0);
      append(label_1, t1);
      append(label_1, span);
      append(span, t2);
      ctx[21](label_1);
      append(div1, t3);
      if (if_block) if_block.m(div1, null);
      current = true;
      if (!mounted) {
        dispose = listen(
          input,
          "click",
          /*onChange*/
          ctx[14]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & /*name*/
      1) {
        attr(
          input,
          "name",
          /*name*/
          ctx2[0]
        );
      }
      if (!current || dirty & /*value*/
      4) {
        input.value = /*value*/
        ctx2[2];
      }
      if (!current || dirty & /*isDisabled*/
      4096) {
        input.disabled = /*isDisabled*/
        ctx2[12];
      }
      if (!current || dirty & /*isChecked*/
      2048) {
        input.checked = /*isChecked*/
        ctx2[11];
      }
      if (!current || dirty & /*arialabel*/
      16) {
        attr(
          input,
          "aria-label",
          /*arialabel*/
          ctx2[4]
        );
      }
      if (!current || dirty & /*$$slots, description, name, value*/
      32775 && input_aria_describedby_value !== (input_aria_describedby_value = /*$$slots*/
      ctx2[15].description || /*description*/
      ctx2[1] ? `${/*name*/
      ctx2[0]}-${/*value*/
      ctx2[2]}-description` : void 0)) {
        attr(input, "aria-describedby", input_aria_describedby_value);
      }
      if (!current || dirty & /*isChecked*/
      2048) {
        attr(
          input,
          "aria-checked",
          /*isChecked*/
          ctx2[11]
        );
      }
      if ((!current || dirty & /*label, value*/
      12) && t2_value !== (t2_value = /*label*/
      (ctx2[3] || /*value*/
      ctx2[2]) + "")) set_data(t2, t2_value);
      if (!current || dirty & /*value*/
      4 && label_1_data_testid_value !== (label_1_data_testid_value = "radio-option-" + /*value*/
      ctx2[2])) {
        attr(label_1, "data-testid", label_1_data_testid_value);
      }
      if (!current || dirty & /*isDisabled*/
      4096) {
        toggle_class(
          label_1,
          "goa-radio--disabled",
          /*isDisabled*/
          ctx2[12]
        );
      }
      if (!current || dirty & /*isError*/
      8192) {
        toggle_class(
          label_1,
          "goa-radio--error",
          /*isError*/
          ctx2[13]
        );
      }
      if (
        /*$$slots*/
        ctx2[15].description || /*description*/
        ctx2[1]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*$$slots, description*/
          32770) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$8(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div1, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      if (!current || dirty & /*mt, mr, mb, ml, maxwidth*/
      992 && div1_style_value !== (div1_style_value = `
    ${calculateMargin(
        /*mt*/
        ctx2[6],
        /*mr*/
        ctx2[7],
        /*mb*/
        ctx2[8],
        /*ml*/
        ctx2[9]
      )}
    max-width: ${/*maxwidth*/
      ctx2[5]};
  `)) {
        attr(div1, "style", div1_style_value);
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      ctx[21](null);
      if (if_block) if_block.d();
      mounted = false;
      dispose();
    }
  };
}
function instance$h($$self, $$props, $$invalidate) {
  let isDisabled;
  let isError;
  let isChecked;
  let { $$slots: slots = {}, $$scope } = $$props;
  const $$slots = compute_slots(slots);
  let { value } = $$props;
  let { name = "" } = $$props;
  let { label = "" } = $$props;
  let { description = "" } = $$props;
  let { disabled = "false" } = $$props;
  let { error = "false" } = $$props;
  let { checked = "false" } = $$props;
  let { arialabel = "" } = $$props;
  let { maxwidth = "none" } = $$props;
  let { mt = null } = $$props;
  let { mr = null } = $$props;
  let { mb: mb2 = null } = $$props;
  let { ml: ml2 = null } = $$props;
  let _radioItemEl;
  onMount(() => {
    dispatchInit();
    addInitListener();
    addSelectListener();
  });
  function dispatchInit() {
    setTimeout(
      () => {
        _radioItemEl == null ? void 0 : _radioItemEl.dispatchEvent(new CustomEvent(
          "radio-item:mounted",
          {
            composed: true,
            bubbles: true,
            detail: {
              el: _radioItemEl,
              name,
              value,
              label,
              description,
              disabled: isDisabled,
              error: isError,
              checked: isChecked,
              ariaLabel: arialabel,
              maxWidth: maxwidth
            }
          }
        ));
      },
      10
    );
  }
  function addInitListener() {
    _radioItemEl.addEventListener("radio-group:init", (e) => {
      const data = e.detail;
      $$invalidate(12, isDisabled = data.disabled);
      $$invalidate(16, error = fromBoolean(data.error));
      $$invalidate(17, checked = fromBoolean(data.checked));
      $$invalidate(1, description = data.description);
      $$invalidate(0, name = data.name);
    });
  }
  function addSelectListener() {
    _radioItemEl.addEventListener("radio-group:select", (e) => {
      $$invalidate(11, isChecked = e.detail.checked);
    });
  }
  function onChange2() {
    if (isDisabled) return;
    if (isChecked) return;
    const event = new CustomEvent(
      "_radioItemChange",
      {
        detail: value,
        composed: true,
        bubbles: true
      }
    );
    _radioItemEl.dispatchEvent(event);
  }
  function label_1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _radioItemEl = $$value;
      $$invalidate(10, _radioItemEl);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("value" in $$props2) $$invalidate(2, value = $$props2.value);
    if ("name" in $$props2) $$invalidate(0, name = $$props2.name);
    if ("label" in $$props2) $$invalidate(3, label = $$props2.label);
    if ("description" in $$props2) $$invalidate(1, description = $$props2.description);
    if ("disabled" in $$props2) $$invalidate(18, disabled = $$props2.disabled);
    if ("error" in $$props2) $$invalidate(16, error = $$props2.error);
    if ("checked" in $$props2) $$invalidate(17, checked = $$props2.checked);
    if ("arialabel" in $$props2) $$invalidate(4, arialabel = $$props2.arialabel);
    if ("maxwidth" in $$props2) $$invalidate(5, maxwidth = $$props2.maxwidth);
    if ("mt" in $$props2) $$invalidate(6, mt = $$props2.mt);
    if ("mr" in $$props2) $$invalidate(7, mr = $$props2.mr);
    if ("mb" in $$props2) $$invalidate(8, mb2 = $$props2.mb);
    if ("ml" in $$props2) $$invalidate(9, ml2 = $$props2.ml);
    if ("$$scope" in $$props2) $$invalidate(19, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*disabled*/
    262144) {
      $$invalidate(12, isDisabled = toBoolean(disabled));
    }
    if ($$self.$$.dirty & /*error*/
    65536) {
      $$invalidate(13, isError = toBoolean(error));
    }
    if ($$self.$$.dirty & /*checked*/
    131072) {
      $$invalidate(11, isChecked = toBoolean(checked));
    }
  };
  return [
    name,
    description,
    value,
    label,
    arialabel,
    maxwidth,
    mt,
    mr,
    mb2,
    ml2,
    _radioItemEl,
    isChecked,
    isDisabled,
    isError,
    onChange2,
    $$slots,
    error,
    checked,
    disabled,
    $$scope,
    slots,
    label_1_binding
  ];
}
class RadioItem extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$h,
      create_fragment$h,
      safe_not_equal,
      {
        value: 2,
        name: 0,
        label: 3,
        description: 1,
        disabled: 18,
        error: 16,
        checked: 17,
        arialabel: 4,
        maxwidth: 5,
        mt: 6,
        mr: 7,
        mb: 8,
        ml: 9
      },
      add_css$f
    );
  }
  get value() {
    return this.$$.ctx[2];
  }
  set value(value) {
    this.$$set({ value });
    flush();
  }
  get name() {
    return this.$$.ctx[0];
  }
  set name(name) {
    this.$$set({ name });
    flush();
  }
  get label() {
    return this.$$.ctx[3];
  }
  set label(label) {
    this.$$set({ label });
    flush();
  }
  get description() {
    return this.$$.ctx[1];
  }
  set description(description) {
    this.$$set({ description });
    flush();
  }
  get disabled() {
    return this.$$.ctx[18];
  }
  set disabled(disabled) {
    this.$$set({ disabled });
    flush();
  }
  get error() {
    return this.$$.ctx[16];
  }
  set error(error) {
    this.$$set({ error });
    flush();
  }
  get checked() {
    return this.$$.ctx[17];
  }
  set checked(checked) {
    this.$$set({ checked });
    flush();
  }
  get arialabel() {
    return this.$$.ctx[4];
  }
  set arialabel(arialabel) {
    this.$$set({ arialabel });
    flush();
  }
  get maxwidth() {
    return this.$$.ctx[5];
  }
  set maxwidth(maxwidth) {
    this.$$set({ maxwidth });
    flush();
  }
  get mt() {
    return this.$$.ctx[6];
  }
  set mt(mt) {
    this.$$set({ mt });
    flush();
  }
  get mr() {
    return this.$$.ctx[7];
  }
  set mr(mr) {
    this.$$set({ mr });
    flush();
  }
  get mb() {
    return this.$$.ctx[8];
  }
  set mb(mb2) {
    this.$$set({ mb: mb2 });
    flush();
  }
  get ml() {
    return this.$$.ctx[9];
  }
  set ml(ml2) {
    this.$$set({ ml: ml2 });
    flush();
  }
}
customElements.define("goa-radio-item", create_custom_element(RadioItem, { "value": { "reflect": true }, "name": {}, "label": {}, "description": { "reflect": true }, "disabled": {}, "error": { "reflect": true }, "checked": { "reflect": true }, "arialabel": { "reflect": true }, "maxwidth": {}, "mt": {}, "mr": {}, "mb": {}, "ml": {} }, ["description"], [], true));
function add_css$e(target) {
  append_styles(target, "svelte-1e6qk09", ":host{--goa-radio-group-gap-horizontal:var(--goa-space-l);--goa-radio-group-gap-vertical:var(--goa-space-m);font-family:var(--goa-font-family-sans)}.goa-radio-group--horizontal.svelte-1e6qk09{display:flex;flex-direction:row;gap:var(--goa-radio-group-gap-horizontal)}.goa-radio-group--vertical.svelte-1e6qk09{display:inline-flex;flex-direction:column;gap:var(--goa-radio-group-gap-vertical)}");
}
function create_fragment$g(ctx) {
  let div;
  let div_style_value;
  let div_class_value;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[13].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[12],
    null
  );
  return {
    c() {
      div = element("div");
      if (default_slot) default_slot.c();
      attr(div, "style", div_style_value = calculateMargin(
        /*mt*/
        ctx[3],
        /*mr*/
        ctx[4],
        /*mb*/
        ctx[5],
        /*ml*/
        ctx[6]
      ));
      attr(div, "class", div_class_value = null_to_empty(`goa-radio-group--${/*orientation*/
      ctx[0]}`) + " svelte-1e6qk09");
      attr(
        div,
        "data-testid",
        /*testid*/
        ctx[1]
      );
      attr(div, "role", "radiogroup");
      attr(
        div,
        "aria-label",
        /*arialabel*/
        ctx[2]
      );
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      ctx[14](div);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        4096)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[12],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[12]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[12],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*mt, mr, mb, ml*/
      120 && div_style_value !== (div_style_value = calculateMargin(
        /*mt*/
        ctx2[3],
        /*mr*/
        ctx2[4],
        /*mb*/
        ctx2[5],
        /*ml*/
        ctx2[6]
      ))) {
        attr(div, "style", div_style_value);
      }
      if (!current || dirty & /*orientation*/
      1 && div_class_value !== (div_class_value = null_to_empty(`goa-radio-group--${/*orientation*/
      ctx2[0]}`) + " svelte-1e6qk09")) {
        attr(div, "class", div_class_value);
      }
      if (!current || dirty & /*testid*/
      2) {
        attr(
          div,
          "data-testid",
          /*testid*/
          ctx2[1]
        );
      }
      if (!current || dirty & /*arialabel*/
      4) {
        attr(
          div,
          "aria-label",
          /*arialabel*/
          ctx2[2]
        );
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (default_slot) default_slot.d(detaching);
      ctx[14](null);
    }
  };
}
function instance$g($$self, $$props, $$invalidate) {
  let isDisabled;
  let { $$slots: slots = {}, $$scope } = $$props;
  const [Orientations, validateOrientation] = typeValidator("Radio group orientation", ["vertical", "horizontal"]);
  let { name } = $$props;
  let { value } = $$props;
  let { orientation = "vertical" } = $$props;
  let { disabled = "false" } = $$props;
  let { error = "false" } = $$props;
  let { testid = "" } = $$props;
  let { arialabel = "" } = $$props;
  let { mt = null } = $$props;
  let { mr = null } = $$props;
  let { mb: mb2 = null } = $$props;
  let { ml: ml2 = null } = $$props;
  let isError;
  let _rootEl;
  let _radioItems = [];
  let _bindTimeoutId;
  onMount(async () => {
    validateOrientation(orientation);
    addRelayListener();
    sendMountedMessage();
    getChildren();
    _rootEl.addEventListener("_radioItemChange", (e) => {
      onChange2(e.detail);
    });
  });
  function addRelayListener() {
    receive(_rootEl, (action, data) => {
      switch (action) {
        case FormSetValueMsg:
          onSetValue(data);
          break;
        case FieldsetSetErrorMsg:
          $$invalidate(9, error = "true");
          break;
        case FieldsetResetErrorsMsg:
          $$invalidate(9, error = "false");
          break;
      }
    });
  }
  function onSetValue(detail) {
    $$invalidate(8, value = detail.value);
    dispatch$1(_rootEl, "_change", { name, value }, { bubbles: true });
  }
  function sendMountedMessage() {
    relay(_rootEl, FormFieldMountMsg, { name, el: _rootEl }, { bubbles: true, timeout: 10 });
  }
  function getChildren() {
    _rootEl.addEventListener("radio-item:mounted", (e) => {
      const radioItemProps = e.detail;
      _radioItems = [..._radioItems, radioItemProps];
      if (_bindTimeoutId) {
        clearTimeout(_bindTimeoutId);
      }
      _bindTimeoutId = setTimeout(
        () => {
          bindOptions();
        },
        1
      );
    });
  }
  function bindOptions() {
    _radioItems.forEach((props) => {
      props.el.dispatchEvent(new CustomEvent(
        "radio-group:init",
        {
          composed: true,
          detail: {
            disabled: isDisabled,
            error: isError,
            description: props.description,
            name,
            checked: props.value === value
          }
        }
      ));
    });
  }
  function onChange2(newValue) {
    if (newValue === value) return;
    $$invalidate(8, value = newValue);
    _rootEl.dispatchEvent(new CustomEvent(
      "_change",
      {
        composed: true,
        bubbles: true,
        detail: { name, value }
      }
    ));
    setCurrentSelectedOption(value);
  }
  function setCurrentSelectedOption(value2) {
    _radioItems.forEach((item) => {
      item.el.dispatchEvent(new CustomEvent(
        "radio-group:select",
        {
          composed: true,
          detail: { checked: item.value === value2 }
        }
      ));
    });
  }
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _rootEl = $$value;
      $$invalidate(7, _rootEl);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("name" in $$props2) $$invalidate(10, name = $$props2.name);
    if ("value" in $$props2) $$invalidate(8, value = $$props2.value);
    if ("orientation" in $$props2) $$invalidate(0, orientation = $$props2.orientation);
    if ("disabled" in $$props2) $$invalidate(11, disabled = $$props2.disabled);
    if ("error" in $$props2) $$invalidate(9, error = $$props2.error);
    if ("testid" in $$props2) $$invalidate(1, testid = $$props2.testid);
    if ("arialabel" in $$props2) $$invalidate(2, arialabel = $$props2.arialabel);
    if ("mt" in $$props2) $$invalidate(3, mt = $$props2.mt);
    if ("mr" in $$props2) $$invalidate(4, mr = $$props2.mr);
    if ("mb" in $$props2) $$invalidate(5, mb2 = $$props2.mb);
    if ("ml" in $$props2) $$invalidate(6, ml2 = $$props2.ml);
    if ("$$scope" in $$props2) $$invalidate(12, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*disabled*/
    2048) {
      isDisabled = toBoolean(disabled);
    }
    if ($$self.$$.dirty & /*value*/
    256) {
      value !== void 0 && setCurrentSelectedOption(value);
    }
    if ($$self.$$.dirty & /*error*/
    512) {
      {
        isError = toBoolean(error);
        bindOptions();
      }
    }
  };
  return [
    orientation,
    testid,
    arialabel,
    mt,
    mr,
    mb2,
    ml2,
    _rootEl,
    value,
    error,
    name,
    disabled,
    $$scope,
    slots,
    div_binding
  ];
}
class RadioGroup extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$g,
      create_fragment$g,
      safe_not_equal,
      {
        name: 10,
        value: 8,
        orientation: 0,
        disabled: 11,
        error: 9,
        testid: 1,
        arialabel: 2,
        mt: 3,
        mr: 4,
        mb: 5,
        ml: 6
      },
      add_css$e
    );
  }
  get name() {
    return this.$$.ctx[10];
  }
  set name(name) {
    this.$$set({ name });
    flush();
  }
  get value() {
    return this.$$.ctx[8];
  }
  set value(value) {
    this.$$set({ value });
    flush();
  }
  get orientation() {
    return this.$$.ctx[0];
  }
  set orientation(orientation) {
    this.$$set({ orientation });
    flush();
  }
  get disabled() {
    return this.$$.ctx[11];
  }
  set disabled(disabled) {
    this.$$set({ disabled });
    flush();
  }
  get error() {
    return this.$$.ctx[9];
  }
  set error(error) {
    this.$$set({ error });
    flush();
  }
  get testid() {
    return this.$$.ctx[1];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
  get arialabel() {
    return this.$$.ctx[2];
  }
  set arialabel(arialabel) {
    this.$$set({ arialabel });
    flush();
  }
  get mt() {
    return this.$$.ctx[3];
  }
  set mt(mt) {
    this.$$set({ mt });
    flush();
  }
  get mr() {
    return this.$$.ctx[4];
  }
  set mr(mr) {
    this.$$set({ mr });
    flush();
  }
  get mb() {
    return this.$$.ctx[5];
  }
  set mb(mb2) {
    this.$$set({ mb: mb2 });
    flush();
  }
  get ml() {
    return this.$$.ctx[6];
  }
  set ml(ml2) {
    this.$$set({ ml: ml2 });
    flush();
  }
}
customElements.define("goa-radio-group", create_custom_element(RadioGroup, { "name": {}, "value": {}, "orientation": {}, "disabled": {}, "error": {}, "testid": {}, "arialabel": {}, "mt": {}, "mr": {}, "mb": {}, "ml": {} }, ["default"], [], true));
function add_css$d(target) {
  append_styles(target, "svelte-1y2cug5", ".goa-scrollable.svelte-1y2cug5{scroll-behavior:smooth;margin:2px;width:auto}.goa-scrollable.svelte-1y2cug5::-webkit-scrollbar{width:var(--goa-space-xs)}.goa-scrollable.svelte-1y2cug5::-webkit-scrollbar-track{border-radius:var(--goa-border-radius-m)}.goa-scrollable.svelte-1y2cug5::-webkit-scrollbar-track:hover{background:var(--goa-color-greyscale-200)}.goa-scrollable.svelte-1y2cug5::-webkit-scrollbar-thumb{background:var(--goa-color-greyscale-400);border-radius:var(--goa-border-radius-m)}.goa-scrollable.svelte-1y2cug5::-webkit-scrollbar-thumb:hover{background:var(--goa-color-greyscale-600)}");
}
function create_fragment$f(ctx) {
  let div;
  let div_style_value;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = (
    /*#slots*/
    ctx[9].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[8],
    null
  );
  return {
    c() {
      div = element("div");
      if (default_slot) default_slot.c();
      attr(div, "class", "goa-scrollable svelte-1y2cug5");
      attr(div, "style", div_style_value = `
  max-height: ${/*maxheight*/
      ctx[3] || "50vh"};
  overflow-y: ${/*direction*/
      ctx[0] === "vertical" ? "auto" : "hidden"};
  overflow-x: ${/*direction*/
      ctx[0] === "horizontal" ? "auto" : "hidden"};
  margin: ${/*vpadding*/
      ctx[2]};
  padding: 0 ${/*hpadding*/
      ctx[1]} 3px;
`);
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      ctx[10](div);
      current = true;
      if (!mounted) {
        dispose = listen(
          div,
          "scroll",
          /*onScroll*/
          ctx[5]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        256)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[8],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[8]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[8],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*maxheight, direction, vpadding, hpadding*/
      15 && div_style_value !== (div_style_value = `
  max-height: ${/*maxheight*/
      ctx2[3] || "50vh"};
  overflow-y: ${/*direction*/
      ctx2[0] === "vertical" ? "auto" : "hidden"};
  overflow-x: ${/*direction*/
      ctx2[0] === "horizontal" ? "auto" : "hidden"};
  margin: ${/*vpadding*/
      ctx2[2]};
  padding: 0 ${/*hpadding*/
      ctx2[1]} 3px;
`)) {
        attr(div, "style", div_style_value);
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (default_slot) default_slot.d(detaching);
      ctx[10](null);
      mounted = false;
      dispose();
    }
  };
}
function instance$f($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { direction = "vertical" } = $$props;
  let { hpadding = "" } = $$props;
  let { vpadding = "" } = $$props;
  let { maxheight = "" } = $$props;
  let { offsetHeight } = $$props;
  let { scrollHeight } = $$props;
  let _el;
  function onScroll(e) {
    e.target.dispatchEvent(new CustomEvent(
      "_scroll",
      {
        composed: true,
        detail: {
          offsetHeight: _el.offsetHeight,
          scrollHeight: _el.scrollHeight,
          scrollTop: _el.scrollTop
        }
      }
    ));
    e.stopPropagation();
  }
  onMount(async () => {
    await tick();
    $$invalidate(6, offsetHeight = _el.offsetHeight);
    $$invalidate(7, scrollHeight = _el.scrollHeight);
  });
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _el = $$value;
      $$invalidate(4, _el);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("direction" in $$props2) $$invalidate(0, direction = $$props2.direction);
    if ("hpadding" in $$props2) $$invalidate(1, hpadding = $$props2.hpadding);
    if ("vpadding" in $$props2) $$invalidate(2, vpadding = $$props2.vpadding);
    if ("maxheight" in $$props2) $$invalidate(3, maxheight = $$props2.maxheight);
    if ("offsetHeight" in $$props2) $$invalidate(6, offsetHeight = $$props2.offsetHeight);
    if ("scrollHeight" in $$props2) $$invalidate(7, scrollHeight = $$props2.scrollHeight);
    if ("$$scope" in $$props2) $$invalidate(8, $$scope = $$props2.$$scope);
  };
  return [
    direction,
    hpadding,
    vpadding,
    maxheight,
    _el,
    onScroll,
    offsetHeight,
    scrollHeight,
    $$scope,
    slots,
    div_binding
  ];
}
class Scrollable extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$f,
      create_fragment$f,
      safe_not_equal,
      {
        direction: 0,
        hpadding: 1,
        vpadding: 2,
        maxheight: 3,
        offsetHeight: 6,
        scrollHeight: 7
      },
      add_css$d
    );
  }
  get direction() {
    return this.$$.ctx[0];
  }
  set direction(direction) {
    this.$$set({ direction });
    flush();
  }
  get hpadding() {
    return this.$$.ctx[1];
  }
  set hpadding(hpadding) {
    this.$$set({ hpadding });
    flush();
  }
  get vpadding() {
    return this.$$.ctx[2];
  }
  set vpadding(vpadding) {
    this.$$set({ vpadding });
    flush();
  }
  get maxheight() {
    return this.$$.ctx[3];
  }
  set maxheight(maxheight) {
    this.$$set({ maxheight });
    flush();
  }
  get offsetHeight() {
    return this.$$.ctx[6];
  }
  set offsetHeight(offsetHeight) {
    this.$$set({ offsetHeight });
    flush();
  }
  get scrollHeight() {
    return this.$$.ctx[7];
  }
  set scrollHeight(scrollHeight) {
    this.$$set({ scrollHeight });
    flush();
  }
}
customElements.define("goa-scrollable", create_custom_element(Scrollable, { "direction": {}, "hpadding": {}, "vpadding": {}, "maxheight": {}, "offsetHeight": {}, "scrollHeight": {} }, ["default"], [], true));
function add_css$c(target) {
  append_styles(target, "svelte-1lnvhp4", ':host{--goa-side-menu-color-bg:var(--goa-color-greyscale-white);--goa-side-menu-color-menu-item:var(--goa-color-text-default);--goa-side-menu-color-bg-menu-item-hover:#cedfee;--goa-side-menu-color-bg-menu-item-current:#cedfee;--goa-side-menu-typography-item:var(--goa-typography-body-m);--goa-side-menu-typography-item-current:var(--goa-typography-heading-s);--goa-side-menu-items-gap:var(--goa-space-none);--goa-side-menu-padding:var(--goa-space-m) var(--goa-space-none) var(--goa-space-l) var(--goa-space-none);--goa-side-menu-border-right:var(--goa-border-width-s) solid var(--goa-color-greyscale-200);;;--goa-side-menu-width:256px;--goa-side-menu-padding-item:8px var(--goa-space-s) 10px var(--goa-space-xl);--goa-side-menu-item-focus-border:var(--goa-border-width-l) solid var(--goa-color-interactive-focus);--goa-side-menu-heading-margin:var(--goa-space-none) 0 0 0;--goa-side-menu-heading-padding:var(--goa-space-s) var(--goa-space-s) var(--goa-space-xs) var(--goa-space-l);--goa-side-menu-heading-color:var(--goa-color-text-secondary);--goa-side-menu-heading-color-bg:var(--goa-color-greyscale-100);--goa-side-menu-heading-typography:var(--goa-typography-heading-s);--goa-side-menu-heading-border:var(--goa-border-width-m) solid var(--goa-color-greyscale-200);--goa-side-menu-heading-icon-gap:var(--goa-space-xs);--goa-side-menu-icon-size:var(--goa-icon-size-l);--goa-side-menu-icon-color:var(--goa-color-text-secondary);--goa-side-menu-sub-item-margin:var(--goa-space-m);--goa-side-menu-padding-sub-item:8px var(--goa-space-s) 10px var(--goa-space-m);--goa-side-menu-sub-item-border-left:4px solid var(--goa-color-greyscale-100);--goa-side-menu-sub-item-border-left-hover:4px solid var(--goa-color-greyscale-200);--goa-side-menu-sub-item-border-left-current:4px solid var(--goa-color-interactive-disabled);--goa-side-menu-sub-item-color-bg:none;--goa-side-menu-sub-item-color-bg-hover:var(--goa-color-info-background);--goa-side-menu-sub-item-color-bg-current:var(--goa-color-info-background)}::slotted(a),::slotted(goa-side-menu-heading),::slotted(a:visited){color:var(--goa-side-menu-color-menu-item) !important;display:block;font:var(--goa-side-menu-typography-item);margin-left:var(--goa-side-menu-sub-item-margin)}::slotted(a),::slotted(a:visited){padding:var(--goa-side-menu-padding-sub-item);text-decoration:none;border-left:var(--goa-side-menu-sub-item-border-left)}::slotted(a.current){font:var(--goa-side-menu-typography-item-current);border-left:var(--goa-side-menu-sub-item-border-left-current);background:var(--goa-side-menu-sub-item-color-bg-current)}::slotted(a:hover:not(.current)){background:var(--goa-side-menu-sub-item-color-bg-hover);border-left:var(--goa-side-menu-sub-item-border-left-hover)}::slotted(a:focus-visible),.heading.svelte-1lnvhp4.svelte-1lnvhp4:focus-visible{outline:var(--goa-side-menu-item-focus-border)}.heading.svelte-1lnvhp4.svelte-1lnvhp4{gap:var(--goa-space-xs);display:flex;flex-direction:row;align-items:flex-start}goa-icon.svelte-1lnvhp4.svelte-1lnvhp4{margin-top:var(--goa-space-2xs)}:host([child="true"]) a.heading.svelte-1lnvhp4.svelte-1lnvhp4,.heading.svelte-1lnvhp4.svelte-1lnvhp4{color:var(--goa-side-menu-color-menu-item);display:flex;justify-content:space-between;font:var(--goa-side-menu-typography-item);padding:var(--goa-side-menu-padding-item);text-decoration:none}:host([child="true"]) a.heading.svelte-1lnvhp4.svelte-1lnvhp4{margin-left:var(--goa-side-menu-sub-item-margin);border-left:var(--goa-side-menu-sub-item-border-left);padding:var(--goa-side-menu-padding-sub-item)}:host([child="true"]) a.heading.svelte-1lnvhp4.svelte-1lnvhp4:hover{border-left:var(--goa-side-menu-sub-item-border-left-hover);background:var(--goa-side-menu-sub-item-color-bg-hover)}:host([child="true"]) .side-menu-group.current a.heading.svelte-1lnvhp4.svelte-1lnvhp4{background:var(--goa-side-menu-sub-item-color-bg-current);border-left:var(--goa-side-menu-sub-item-border-left)}.side-menu-group.current.svelte-1lnvhp4 .heading.svelte-1lnvhp4{background:var(--goa-side-menu-color-bg-menu-item-current)}.heading.svelte-1lnvhp4.svelte-1lnvhp4:hover{background:var(--goa-side-menu-color-bg-menu-item-hover)}.hidden.svelte-1lnvhp4.svelte-1lnvhp4{display:none}.group.svelte-1lnvhp4.svelte-1lnvhp4{padding-left:var(--goa-side-menu-sub-item-margin)}');
}
function create_else_block$3(ctx) {
  let goa_icon;
  return {
    c() {
      goa_icon = element("goa-icon");
      set_custom_element_data(goa_icon, "type", "chevron-forward");
      set_custom_element_data(goa_icon, "class", "svelte-1lnvhp4");
    },
    m(target, anchor) {
      insert(target, goa_icon, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(goa_icon);
      }
    }
  };
}
function create_if_block$7(ctx) {
  let goa_icon;
  return {
    c() {
      goa_icon = element("goa-icon");
      set_custom_element_data(goa_icon, "type", "chevron-down");
      set_custom_element_data(goa_icon, "class", "svelte-1lnvhp4");
    },
    m(target, anchor) {
      insert(target, goa_icon, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(goa_icon);
      }
    }
  };
}
function create_fragment$e(ctx) {
  let div1;
  let a;
  let t0;
  let t1;
  let a_href_value;
  let t2;
  let div0;
  let current;
  let mounted;
  let dispose;
  function select_block_type(ctx2, dirty) {
    if (
      /*_open*/
      ctx2[2]
    ) return create_if_block$7;
    return create_else_block$3;
  }
  let current_block_type = select_block_type(ctx);
  let if_block = current_block_type(ctx);
  const default_slot_template = (
    /*#slots*/
    ctx[8].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[7],
    null
  );
  return {
    c() {
      div1 = element("div");
      a = element("a");
      t0 = text(
        /*heading*/
        ctx[0]
      );
      t1 = space();
      if_block.c();
      t2 = space();
      div0 = element("div");
      if (default_slot) default_slot.c();
      attr(a, "href", a_href_value = `#${/*_slug*/
      ctx[5]}`);
      attr(a, "class", "heading svelte-1lnvhp4");
      attr(div0, "class", "group svelte-1lnvhp4");
      attr(div0, "data-testid", "group");
      toggle_class(div0, "hidden", !/*_open*/
      ctx[2]);
      attr(div1, "class", "side-menu-group svelte-1lnvhp4");
      attr(
        div1,
        "data-testid",
        /*testid*/
        ctx[1]
      );
      toggle_class(
        div1,
        "current",
        /*_current*/
        ctx[3]
      );
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, a);
      append(a, t0);
      append(a, t1);
      if_block.m(a, null);
      append(div1, t2);
      append(div1, div0);
      if (default_slot) {
        default_slot.m(div0, null);
      }
      ctx[9](div1);
      current = true;
      if (!mounted) {
        dispose = listen(
          a,
          "click",
          /*handleClick*/
          ctx[6]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & /*heading*/
      1) set_data(
        t0,
        /*heading*/
        ctx2[0]
      );
      if (current_block_type !== (current_block_type = select_block_type(ctx2))) {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(a, null);
        }
      }
      if (!current || dirty & /*_slug*/
      32 && a_href_value !== (a_href_value = `#${/*_slug*/
      ctx2[5]}`)) {
        attr(a, "href", a_href_value);
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        128)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[7],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[7]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[7],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*_open*/
      4) {
        toggle_class(div0, "hidden", !/*_open*/
        ctx2[2]);
      }
      if (!current || dirty & /*testid*/
      2) {
        attr(
          div1,
          "data-testid",
          /*testid*/
          ctx2[1]
        );
      }
      if (!current || dirty & /*_current*/
      8) {
        toggle_class(
          div1,
          "current",
          /*_current*/
          ctx2[3]
        );
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      if_block.d();
      if (default_slot) default_slot.d(detaching);
      ctx[9](null);
      mounted = false;
      dispose();
    }
  };
}
function toSlug(path) {
  return path == null ? void 0 : path.toLowerCase().replace(/ /g, "-");
}
function instance$e($$self, $$props, $$invalidate) {
  let _slug;
  let { $$slots: slots = {}, $$scope } = $$props;
  let { heading } = $$props;
  let { testid = "" } = $$props;
  let _open = false;
  let _current = false;
  let _rootEl;
  onMount(() => {
    dispatchInit();
    addEventListeners();
  });
  function dispatchInit() {
    if (!_rootEl) return;
    const slottedChildren = getSlottedChildren(_rootEl);
    if (slottedChildren.length === 0) return;
    const links = slottedChildren.filter((el2) => el2.tagName === "A").map((el2) => {
      el2.classList.remove("current");
      return el2;
    });
    setTimeout(
      () => {
        _rootEl.dispatchEvent(new CustomEvent(
          "sidemenugroup:mounted",
          {
            detail: { el: _rootEl, links },
            composed: true,
            bubbles: true
          }
        ));
      },
      1
    );
  }
  function addEventListeners() {
    _rootEl.addEventListener("sidemenu:current:change", (e) => {
      const href = e.detail;
      setCurrent(href);
    });
    _rootEl.addEventListener("_open", (e) => {
      $$invalidate(2, _open = $$invalidate(3, _current = e.detail.current));
    });
  }
  function setCurrent(matchedHref) {
    const children2 = getSlottedChildren(_rootEl);
    if (children2.length === 0) return;
    let matchedChild = null;
    $$invalidate(3, _current = false);
    children2.forEach((child) => {
      const url = child.getAttribute("href");
      if (url === matchedHref) matchedChild = child;
      child.classList.remove("current");
      if (child.tagName === "GOA-SIDE-MENU-GROUP") {
        child.setAttribute("child", "true");
      }
    });
    if (matchedChild) {
      matchedChild.classList.add("current");
    }
    $$invalidate(3, _current = $$invalidate(2, _open = !!matchedChild));
    notifyParent(_open);
  }
  function handleClick2(e) {
    $$invalidate(2, _open = !_open);
    e.preventDefault();
  }
  function notifyParent(current) {
    _rootEl.dispatchEvent(new CustomEvent(
      "_open",
      {
        bubbles: true,
        composed: true,
        detail: { current }
      }
    ));
  }
  function div1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _rootEl = $$value;
      $$invalidate(4, _rootEl);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("heading" in $$props2) $$invalidate(0, heading = $$props2.heading);
    if ("testid" in $$props2) $$invalidate(1, testid = $$props2.testid);
    if ("$$scope" in $$props2) $$invalidate(7, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*heading*/
    1) {
      $$invalidate(5, _slug = toSlug(heading));
    }
  };
  return [
    heading,
    testid,
    _open,
    _current,
    _rootEl,
    _slug,
    handleClick2,
    $$scope,
    slots,
    div1_binding
  ];
}
class SideMenuGroup extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$e, create_fragment$e, safe_not_equal, { heading: 0, testid: 1 }, add_css$c);
  }
  get heading() {
    return this.$$.ctx[0];
  }
  set heading(heading) {
    this.$$set({ heading });
    flush();
  }
  get testid() {
    return this.$$.ctx[1];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
}
customElements.define("goa-side-menu-group", create_custom_element(SideMenuGroup, { "heading": {}, "testid": {} }, ["default"], [], true));
function add_css$b(target) {
  append_styles(target, "svelte-1uum5g2", ":host{--goa-side-menu-color-bg:var(--goa-color-greyscale-white);--goa-side-menu-color-menu-item:var(--goa-color-text-default);--goa-side-menu-color-bg-menu-item-hover:#cedfee;--goa-side-menu-color-bg-menu-item-current:#cedfee;--goa-side-menu-typography-item:var(--goa-typography-body-m);--goa-side-menu-typography-item-current:var(--goa-typography-heading-s);--goa-side-menu-items-gap:var(--goa-space-none);--goa-side-menu-padding:var(--goa-space-m) var(--goa-space-none) var(--goa-space-l) var(--goa-space-none);--goa-side-menu-border-right:var(--goa-border-width-s) solid var(--goa-color-greyscale-200);;;--goa-side-menu-width:256px;--goa-side-menu-padding-item:8px var(--goa-space-s) 10px var(--goa-space-xl);--goa-side-menu-item-focus-border:var(--goa-border-width-l) solid var(--goa-color-interactive-focus);--goa-side-menu-heading-margin:var(--goa-space-none) 0 0 0;--goa-side-menu-heading-padding:var(--goa-space-s) var(--goa-space-s) var(--goa-space-xs) var(--goa-space-l);--goa-side-menu-heading-color:var(--goa-color-text-secondary);--goa-side-menu-heading-color-bg:var(--goa-color-greyscale-100);--goa-side-menu-heading-typography:var(--goa-typography-heading-s);--goa-side-menu-heading-border:var(--goa-border-width-m) solid var(--goa-color-greyscale-200);--goa-side-menu-heading-icon-gap:var(--goa-space-xs);--goa-side-menu-icon-size:var(--goa-icon-size-l);--goa-side-menu-icon-color:var(--goa-color-text-secondary);--goa-side-menu-sub-item-margin:var(--goa-space-m);--goa-side-menu-padding-sub-item:8px var(--goa-space-s) 10px var(--goa-space-m);--goa-side-menu-sub-item-border-left:4px solid var(--goa-color-greyscale-100);--goa-side-menu-sub-item-border-left-hover:4px solid var(--goa-color-greyscale-200);--goa-side-menu-sub-item-border-left-current:4px solid var(--goa-color-interactive-disabled);--goa-side-menu-sub-item-color-bg:none;--goa-side-menu-sub-item-color-bg-hover:var(--goa-color-info-background);--goa-side-menu-sub-item-color-bg-current:var(--goa-color-info-background)}::slotted(a),::slotted(a:visited){color:var(--goa-side-menu-color-menu-item) !important;display:block;font:var(--goa-side-menu-typography-item);padding:var(--goa-side-menu-padding-item);text-decoration:none}::slotted(a.current){font:var(--goa-side-menu-typography-item-active);background:var(--goa-side-menu-color-bg-menu-item-hover)}::slotted(a:hover:not(.current)){background:var(--goa-side-menu-color-bg-menu-item-hover)}::slotted(a:focus-visible){outline:var(--goa-side-menu-item-focus-border)}.side-menu.svelte-1uum5g2{width:var(--goa-side-menu-width);display:flex;height:100%;flex-direction:column;gap:var(--goa-side-menu-items-gap);border-right:var(--goa-side-menu-border-right)}");
}
function create_fragment$d(ctx) {
  let div;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[3].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[2],
    null
  );
  return {
    c() {
      div = element("div");
      if (default_slot) default_slot.c();
      attr(div, "class", "side-menu svelte-1uum5g2");
      attr(
        div,
        "data-testid",
        /*testid*/
        ctx[0]
      );
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      ctx[4](div);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        4)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[2],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[2]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[2],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*testid*/
      1) {
        attr(
          div,
          "data-testid",
          /*testid*/
          ctx2[0]
        );
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (default_slot) default_slot.d(detaching);
      ctx[4](null);
    }
  };
}
function instance$d($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { testid = "" } = $$props;
  let _rootEl;
  let _sideMenuLinks = [];
  let _sideMenuGroupItems = [];
  let observer = null;
  onMount(async () => {
    await tick();
    getChildren();
    addEventListeners();
  });
  onDestroy(() => {
    removeEventListeners();
  });
  function getChildren() {
    if (!_rootEl) return;
    const slotChildren = getSlottedChildren(_rootEl);
    if (slotChildren.length === 0) return;
    _sideMenuLinks = slotChildren.filter((el2) => el2.tagName === "A").map((el2) => {
      el2.classList.remove("current");
      return el2;
    });
    _rootEl.addEventListener("sidemenugroup:mounted", handleSideMenuGroupMount);
  }
  function handleSideMenuGroupMount(e) {
    const sideMenuGroupProps = e.detail;
    _sideMenuGroupItems = [..._sideMenuGroupItems, sideMenuGroupProps];
    setCurrentUrl();
  }
  function setCurrentUrl() {
    let links = [..._sideMenuLinks];
    _sideMenuGroupItems.forEach((el2) => {
      links = [...links, ...el2.links];
    });
    links.forEach((link) => link.classList.remove("current"));
    const currentEl = getMatchedLink(links, window.location);
    currentEl == null ? void 0 : currentEl.classList.add("current");
    dispatchCurrentUrl((currentEl == null ? void 0 : currentEl.getAttribute("href")) || "");
  }
  function dispatchCurrentUrl(href) {
    _sideMenuGroupItems.forEach((item) => {
      item.el.dispatchEvent(new CustomEvent("sidemenu:current:change", { composed: true, detail: href }));
    });
  }
  function addEventListeners() {
    let currentLocation = document.location.href;
    observer = new MutationObserver((_mutationList) => {
      if (isUrlMatch(document.location, currentLocation)) {
        currentLocation = document.location.href;
        setCurrentUrl();
      }
    });
    observer.observe(document.body, { childList: true, subtree: true });
    window.addEventListener("popstate", setCurrentUrl);
  }
  function removeEventListeners() {
    if (observer) {
      observer.disconnect();
      observer = null;
    }
    window.removeEventListener("popstate", setCurrentUrl);
    if (_rootEl) {
      _rootEl.removeEventListener("sidemenugroup:mounted", handleSideMenuGroupMount);
    }
  }
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _rootEl = $$value;
      $$invalidate(1, _rootEl);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("testid" in $$props2) $$invalidate(0, testid = $$props2.testid);
    if ("$$scope" in $$props2) $$invalidate(2, $$scope = $$props2.$$scope);
  };
  return [testid, _rootEl, $$scope, slots, div_binding];
}
class SideMenu extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$d, create_fragment$d, safe_not_equal, { testid: 0 }, add_css$b);
  }
  get testid() {
    return this.$$.ctx[0];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
}
customElements.define("goa-side-menu", create_custom_element(SideMenu, { "testid": {} }, ["default"], [], true));
function add_css$a(target) {
  append_styles(target, "svelte-1nu346z", ":host{--goa-side-menu-color-bg:var(--goa-color-greyscale-white);--goa-side-menu-color-menu-item:var(--goa-color-text-default);--goa-side-menu-color-bg-menu-item-hover:#cedfee;--goa-side-menu-color-bg-menu-item-current:#cedfee;--goa-side-menu-typography-item:var(--goa-typography-body-m);--goa-side-menu-typography-item-current:var(--goa-typography-heading-s);--goa-side-menu-items-gap:var(--goa-space-none);--goa-side-menu-padding:var(--goa-space-m) var(--goa-space-none) var(--goa-space-l) var(--goa-space-none);--goa-side-menu-border-right:var(--goa-border-width-s) solid var(--goa-color-greyscale-200);;;--goa-side-menu-width:256px;--goa-side-menu-padding-item:8px var(--goa-space-s) 10px var(--goa-space-xl);--goa-side-menu-item-focus-border:var(--goa-border-width-l) solid var(--goa-color-interactive-focus);--goa-side-menu-heading-margin:var(--goa-space-none) 0 0 0;--goa-side-menu-heading-padding:var(--goa-space-s) var(--goa-space-s) var(--goa-space-xs) var(--goa-space-l);--goa-side-menu-heading-color:var(--goa-color-text-secondary);--goa-side-menu-heading-color-bg:var(--goa-color-greyscale-100);--goa-side-menu-heading-typography:var(--goa-typography-heading-s);--goa-side-menu-heading-border:var(--goa-border-width-m) solid var(--goa-color-greyscale-200);--goa-side-menu-heading-icon-gap:var(--goa-space-xs);--goa-side-menu-icon-size:var(--goa-icon-size-l);--goa-side-menu-icon-color:var(--goa-color-text-secondary);--goa-side-menu-sub-item-margin:var(--goa-space-m);--goa-side-menu-padding-sub-item:8px var(--goa-space-s) 10px var(--goa-space-m);--goa-side-menu-sub-item-border-left:4px solid var(--goa-color-greyscale-100);--goa-side-menu-sub-item-border-left-hover:4px solid var(--goa-color-greyscale-200);--goa-side-menu-sub-item-border-left-current:4px solid var(--goa-color-interactive-disabled);--goa-side-menu-sub-item-color-bg:none;--goa-side-menu-sub-item-color-bg-hover:var(--goa-color-info-background);--goa-side-menu-sub-item-color-bg-current:var(--goa-color-info-background)}h2.icon.svelte-1nu346z{display:flex;align-items:center}goa-icon.svelte-1nu346z{color:var(--goa-side-menu-icon-color);font-size:var(--goa-side-menu-icon-size);margin-right:var(--goa-side-menu-heading-icon-gap)}h2.svelte-1nu346z{border-top:var(--goa-side-menu-heading-border);background:var(--goa-side-menu-heading-color-bg);padding:var(--goa-side-menu-heading-padding);color:var(--goa-side-menu-heading-color, #666);font:var(--goa-side-menu-heading-typography);display:flex;align-items:flex-start;margin:var(--goa-side-menu-heading-margin)}");
}
const get_meta_slot_changes = (dirty) => ({});
const get_meta_slot_context = (ctx) => ({});
function create_if_block$6(ctx) {
  let goa_icon;
  return {
    c() {
      goa_icon = element("goa-icon");
      set_custom_element_data(goa_icon, "id", "heading-icon");
      set_custom_element_data(
        goa_icon,
        "type",
        /*icon*/
        ctx[0]
      );
      set_custom_element_data(goa_icon, "theme", "filled");
      set_custom_element_data(goa_icon, "class", "svelte-1nu346z");
    },
    m(target, anchor) {
      insert(target, goa_icon, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*icon*/
      1) {
        set_custom_element_data(
          goa_icon,
          "type",
          /*icon*/
          ctx2[0]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(goa_icon);
      }
    }
  };
}
function create_fragment$c(ctx) {
  let h2;
  let t0;
  let t1;
  let current;
  let if_block = (
    /*icon*/
    ctx[0] && create_if_block$6(ctx)
  );
  const default_slot_template = (
    /*#slots*/
    ctx[3].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[2],
    null
  );
  const meta_slot_template = (
    /*#slots*/
    ctx[3].meta
  );
  const meta_slot = create_slot(
    meta_slot_template,
    ctx,
    /*$$scope*/
    ctx[2],
    get_meta_slot_context
  );
  return {
    c() {
      h2 = element("h2");
      if (if_block) if_block.c();
      t0 = space();
      if (default_slot) default_slot.c();
      t1 = space();
      if (meta_slot) meta_slot.c();
      attr(
        h2,
        "data-testid",
        /*testid*/
        ctx[1]
      );
      attr(h2, "class", "svelte-1nu346z");
      toggle_class(
        h2,
        "icon",
        /*icon*/
        ctx[0]
      );
    },
    m(target, anchor) {
      insert(target, h2, anchor);
      if (if_block) if_block.m(h2, null);
      append(h2, t0);
      if (default_slot) {
        default_slot.m(h2, null);
      }
      append(h2, t1);
      if (meta_slot) {
        meta_slot.m(h2, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*icon*/
        ctx2[0]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block$6(ctx2);
          if_block.c();
          if_block.m(h2, t0);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        4)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[2],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[2]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[2],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (meta_slot) {
        if (meta_slot.p && (!current || dirty & /*$$scope*/
        4)) {
          update_slot_base(
            meta_slot,
            meta_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[2],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[2]
            ) : get_slot_changes(
              meta_slot_template,
              /*$$scope*/
              ctx2[2],
              dirty,
              get_meta_slot_changes
            ),
            get_meta_slot_context
          );
        }
      }
      if (!current || dirty & /*testid*/
      2) {
        attr(
          h2,
          "data-testid",
          /*testid*/
          ctx2[1]
        );
      }
      if (!current || dirty & /*icon*/
      1) {
        toggle_class(
          h2,
          "icon",
          /*icon*/
          ctx2[0]
        );
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      transition_in(meta_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      transition_out(meta_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(h2);
      }
      if (if_block) if_block.d();
      if (default_slot) default_slot.d(detaching);
      if (meta_slot) meta_slot.d(detaching);
    }
  };
}
function instance$c($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { icon = null } = $$props;
  let { testid = "section-heading" } = $$props;
  $$self.$$set = ($$props2) => {
    if ("icon" in $$props2) $$invalidate(0, icon = $$props2.icon);
    if ("testid" in $$props2) $$invalidate(1, testid = $$props2.testid);
    if ("$$scope" in $$props2) $$invalidate(2, $$scope = $$props2.$$scope);
  };
  return [icon, testid, $$scope, slots];
}
class SideMenuHeading extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$c, create_fragment$c, safe_not_equal, { icon: 0, testid: 1 }, add_css$a);
  }
  get icon() {
    return this.$$.ctx[0];
  }
  set icon(icon) {
    this.$$set({ icon });
    flush();
  }
  get testid() {
    return this.$$.ctx[1];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
}
customElements.define("goa-side-menu-heading", create_custom_element(SideMenuHeading, { "icon": {}, "testid": {} }, ["default", "meta"], [], true));
function add_css$9(target) {
  append_styles(target, "svelte-zwb9yh", ":host{--goa-skeleton-loading-color-bg:var(--goa-color-greyscale-100);box-sizing:border-box;font-family:var(--goa-font-family-sans)}@keyframes svelte-zwb9yh-pulse{0%{opacity:0.5}50%{opacity:1}100%{opacity:0.5}}.skeleton.svelte-zwb9yh.svelte-zwb9yh{background-color:var(--goa-skeleton-loading-color-bg);animation:svelte-zwb9yh-pulse 2s infinite ease-in-out;overflow:hidden;margin:10px 0}.image.svelte-zwb9yh.svelte-zwb9yh,.image-1.svelte-zwb9yh.svelte-zwb9yh{background-color:var(--goa-skeleton-loading-color-bg);flex:1 1 100px;height:100px;margin:0}.image-2.svelte-zwb9yh.svelte-zwb9yh{height:140px}.image-3.svelte-zwb9yh.svelte-zwb9yh{height:200px}.image-4.svelte-zwb9yh.svelte-zwb9yh{height:300px}.text.svelte-zwb9yh.svelte-zwb9yh,.text-1.svelte-zwb9yh.svelte-zwb9yh,.text-2.svelte-zwb9yh.svelte-zwb9yh,.text-3.svelte-zwb9yh.svelte-zwb9yh,.text-4.svelte-zwb9yh.svelte-zwb9yh{width:100%;height:12px;border-radius:0.25rem;margin:6px 0}.title.svelte-zwb9yh.svelte-zwb9yh,.title-1.svelte-zwb9yh.svelte-zwb9yh,.title-2.svelte-zwb9yh.svelte-zwb9yh{width:100%;height:0.75rem;border-radius:0.25rem}.title-3.svelte-zwb9yh.svelte-zwb9yh{height:0.8rem}.title-4.svelte-zwb9yh.svelte-zwb9yh{height:1rem}.text-small.svelte-zwb9yh.svelte-zwb9yh,.text-small-1.svelte-zwb9yh.svelte-zwb9yh{width:30%;height:6px;border-radius:2px}.text-small-2.svelte-zwb9yh.svelte-zwb9yh{width:40%;height:8px;border-radius:2px}.text-small-3.svelte-zwb9yh.svelte-zwb9yh{width:50%;height:10px;border-radius:3px}.text-small-4.svelte-zwb9yh.svelte-zwb9yh{width:70%;height:12px;border-radius:4px}.paragraph.svelte-zwb9yh.svelte-zwb9yh{width:100%;height:70px;border-radius:4px}.header.svelte-zwb9yh.svelte-zwb9yh,.header-1.svelte-zwb9yh.svelte-zwb9yh{width:50%;height:18px;margin:12px 0;border-radius:0.25rem}.header-2.svelte-zwb9yh.svelte-zwb9yh{width:60%;height:20px;margin:14px 0;border-radius:0.25rem}.header-3.svelte-zwb9yh.svelte-zwb9yh{width:70%;height:22px;margin:16px 0;border-radius:0.25rem}.header-4.svelte-zwb9yh.svelte-zwb9yh{width:80%;height:24px;margin:18px 0;border-radius:0.3rem}.avatar.svelte-zwb9yh.svelte-zwb9yh{display:inline-block}.avatar.svelte-zwb9yh.svelte-zwb9yh,.avatar-1.svelte-zwb9yh.svelte-zwb9yh{width:40px;height:40px;border-radius:50%}.avatar-2.svelte-zwb9yh.svelte-zwb9yh{width:60px;height:60px;border-radius:50%}.avatar-3.svelte-zwb9yh.svelte-zwb9yh{width:80px;height:80px;border-radius:50%}.avatar-4.svelte-zwb9yh.svelte-zwb9yh{width:120px;height:120px;border-radius:50%}.thumbnail.svelte-zwb9yh.svelte-zwb9yh{display:inline-block}.thumbnail.svelte-zwb9yh.svelte-zwb9yh,.thumbnail-1.svelte-zwb9yh.svelte-zwb9yh{width:40px;height:40px;border-radius:4px}.thumbnail-2.svelte-zwb9yh.svelte-zwb9yh{width:60px;height:60px;border-radius:4px}.thumbnail-3.svelte-zwb9yh.svelte-zwb9yh{width:80px;height:80px;border-radius:4px}.thumbnail-4.svelte-zwb9yh.svelte-zwb9yh{width:120px;height:120px;border-radius:4px}.card.svelte-zwb9yh.svelte-zwb9yh,.card-1.svelte-zwb9yh.svelte-zwb9yh,.card-2.svelte-zwb9yh.svelte-zwb9yh,.card-3.svelte-zwb9yh.svelte-zwb9yh,.card-4.svelte-zwb9yh.svelte-zwb9yh{border:1px solid var(--goa-color-greyscale-100);border-radius:4px}@container self (max-width: 623px){.card.svelte-zwb9yh.svelte-zwb9yh{width:100%}}@container self (min-width: 624px){.card.svelte-zwb9yh.svelte-zwb9yh{width:var(--max-width)}}.card-content.svelte-zwb9yh.svelte-zwb9yh{flex:1 1 auto;padding:1rem}.profile.svelte-zwb9yh.svelte-zwb9yh{display:flex;flex-direction:row;align-items:center;gap:1rem}.profile-1.svelte-zwb9yh.svelte-zwb9yh{max-width:280px}.profile-2.svelte-zwb9yh.svelte-zwb9yh{max-width:360px}.profile-3.svelte-zwb9yh.svelte-zwb9yh{max-width:480px}.profile-4.svelte-zwb9yh.svelte-zwb9yh{max-width:560px}.profile.svelte-zwb9yh .profile-avatar.svelte-zwb9yh{flex-shrink:0}.profile.svelte-zwb9yh .profile-name.svelte-zwb9yh{flex:1 1 auto}");
}
function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[13] = list[i];
  return child_ctx;
}
function create_else_block$2(ctx) {
  let div;
  let div_class_value;
  return {
    c() {
      div = element("div");
      attr(div, "class", div_class_value = "skeleton " + /*type*/
      ctx[3] + ` ${/*type*/
      ctx[3]}-${/*size*/
      ctx[1]} svelte-zwb9yh`);
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*type, size*/
      10 && div_class_value !== (div_class_value = "skeleton " + /*type*/
      ctx2[3] + ` ${/*type*/
      ctx2[3]}-${/*size*/
      ctx2[1]} svelte-zwb9yh`)) {
        attr(div, "class", div_class_value);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_if_block_3$1(ctx) {
  let div3;
  let div2;
  let div0;
  let skeleton0;
  let t0;
  let div1;
  let skeleton1;
  let t1;
  let skeleton2;
  let t2;
  let skeleton3;
  let current;
  skeleton0 = new Skeleton({
    props: { type: "image", size: (
      /*size*/
      ctx[1]
    ) }
  });
  skeleton1 = new Skeleton({ props: { type: "header", size: "4" } });
  skeleton2 = new Skeleton({ props: { type: "header", size: "1" } });
  skeleton3 = new Skeleton({
    props: { type: "lines", size: (
      /*size*/
      ctx[1]
    ) }
  });
  return {
    c() {
      div3 = element("div");
      div2 = element("div");
      div0 = element("div");
      create_component(skeleton0.$$.fragment);
      t0 = space();
      div1 = element("div");
      create_component(skeleton1.$$.fragment);
      t1 = space();
      create_component(skeleton2.$$.fragment);
      t2 = space();
      create_component(skeleton3.$$.fragment);
      set_style(div0, "flex", "1 1 auto");
      set_style(div1, "flex", "2 2 auto");
      set_style(div2, "display", "flex");
      set_style(div2, "gap", "1rem");
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      append(div3, div2);
      append(div2, div0);
      mount_component(skeleton0, div0, null);
      append(div2, t0);
      append(div2, div1);
      mount_component(skeleton1, div1, null);
      append(div1, t1);
      mount_component(skeleton2, div1, null);
      append(div3, t2);
      mount_component(skeleton3, div3, null);
      current = true;
    },
    p(ctx2, dirty) {
      const skeleton0_changes = {};
      if (dirty & /*size*/
      2) skeleton0_changes.size = /*size*/
      ctx2[1];
      skeleton0.$set(skeleton0_changes);
      const skeleton3_changes = {};
      if (dirty & /*size*/
      2) skeleton3_changes.size = /*size*/
      ctx2[1];
      skeleton3.$set(skeleton3_changes);
    },
    i(local) {
      if (current) return;
      transition_in(skeleton0.$$.fragment, local);
      transition_in(skeleton1.$$.fragment, local);
      transition_in(skeleton2.$$.fragment, local);
      transition_in(skeleton3.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(skeleton0.$$.fragment, local);
      transition_out(skeleton1.$$.fragment, local);
      transition_out(skeleton2.$$.fragment, local);
      transition_out(skeleton3.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div3);
      }
      destroy_component(skeleton0);
      destroy_component(skeleton1);
      destroy_component(skeleton2);
      destroy_component(skeleton3);
    }
  };
}
function create_if_block_2$1(ctx) {
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(Array(Number.parseInt(
    /*linecount*/
    ctx[2] + ""
  )));
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(target, anchor);
        }
      }
      insert(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*size, linecount*/
      6) {
        each_value = ensure_array_like(Array(Number.parseInt(
          /*linecount*/
          ctx2[2] + ""
        )));
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current) return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_if_block_1$2(ctx) {
  let div2;
  let div0;
  let skeleton0;
  let t0;
  let div1;
  let skeleton1;
  let t1;
  let skeleton2;
  let div2_class_value;
  let current;
  skeleton0 = new Skeleton({
    props: { type: "avatar", size: (
      /*size*/
      ctx[1]
    ) }
  });
  skeleton1 = new Skeleton({
    props: { type: "title", size: (
      /*size*/
      ctx[1]
    ) }
  });
  skeleton2 = new Skeleton({
    props: {
      type: "text-small",
      size: (
        /*size*/
        ctx[1]
      )
    }
  });
  return {
    c() {
      div2 = element("div");
      div0 = element("div");
      create_component(skeleton0.$$.fragment);
      t0 = space();
      div1 = element("div");
      create_component(skeleton1.$$.fragment);
      t1 = space();
      create_component(skeleton2.$$.fragment);
      attr(div0, "class", "profile-avatar svelte-zwb9yh");
      attr(div1, "class", "profile-name svelte-zwb9yh");
      attr(div2, "class", div2_class_value = "profile profile-" + /*size*/
      ctx[1] + " svelte-zwb9yh");
    },
    m(target, anchor) {
      insert(target, div2, anchor);
      append(div2, div0);
      mount_component(skeleton0, div0, null);
      append(div2, t0);
      append(div2, div1);
      mount_component(skeleton1, div1, null);
      append(div1, t1);
      mount_component(skeleton2, div1, null);
      current = true;
    },
    p(ctx2, dirty) {
      const skeleton0_changes = {};
      if (dirty & /*size*/
      2) skeleton0_changes.size = /*size*/
      ctx2[1];
      skeleton0.$set(skeleton0_changes);
      const skeleton1_changes = {};
      if (dirty & /*size*/
      2) skeleton1_changes.size = /*size*/
      ctx2[1];
      skeleton1.$set(skeleton1_changes);
      const skeleton2_changes = {};
      if (dirty & /*size*/
      2) skeleton2_changes.size = /*size*/
      ctx2[1];
      skeleton2.$set(skeleton2_changes);
      if (!current || dirty & /*size*/
      2 && div2_class_value !== (div2_class_value = "profile profile-" + /*size*/
      ctx2[1] + " svelte-zwb9yh")) {
        attr(div2, "class", div2_class_value);
      }
    },
    i(local) {
      if (current) return;
      transition_in(skeleton0.$$.fragment, local);
      transition_in(skeleton1.$$.fragment, local);
      transition_in(skeleton2.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(skeleton0.$$.fragment, local);
      transition_out(skeleton1.$$.fragment, local);
      transition_out(skeleton2.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div2);
      }
      destroy_component(skeleton0);
      destroy_component(skeleton1);
      destroy_component(skeleton2);
    }
  };
}
function create_if_block$5(ctx) {
  let div1;
  let skeleton0;
  let t0;
  let div0;
  let skeleton1;
  let t1;
  let skeleton2;
  let div1_class_value;
  let current;
  skeleton0 = new Skeleton({
    props: { type: "image", size: (
      /*size*/
      ctx[1]
    ) }
  });
  skeleton1 = new Skeleton({
    props: { type: "header", size: (
      /*size*/
      ctx[1]
    ) }
  });
  skeleton2 = new Skeleton({
    props: {
      type: "lines",
      size: (
        /*size*/
        ctx[1]
      ),
      linecount: (
        /*linecount*/
        ctx[2]
      )
    }
  });
  return {
    c() {
      div1 = element("div");
      create_component(skeleton0.$$.fragment);
      t0 = space();
      div0 = element("div");
      create_component(skeleton1.$$.fragment);
      t1 = space();
      create_component(skeleton2.$$.fragment);
      attr(div0, "class", "card-content svelte-zwb9yh");
      attr(div1, "class", div1_class_value = "card card-" + /*size*/
      ctx[1] + " svelte-zwb9yh");
      set_style(
        div1,
        "--max-width",
        /*maxwidth*/
        ctx[0]
      );
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      mount_component(skeleton0, div1, null);
      append(div1, t0);
      append(div1, div0);
      mount_component(skeleton1, div0, null);
      append(div0, t1);
      mount_component(skeleton2, div0, null);
      current = true;
    },
    p(ctx2, dirty) {
      const skeleton0_changes = {};
      if (dirty & /*size*/
      2) skeleton0_changes.size = /*size*/
      ctx2[1];
      skeleton0.$set(skeleton0_changes);
      const skeleton1_changes = {};
      if (dirty & /*size*/
      2) skeleton1_changes.size = /*size*/
      ctx2[1];
      skeleton1.$set(skeleton1_changes);
      const skeleton2_changes = {};
      if (dirty & /*size*/
      2) skeleton2_changes.size = /*size*/
      ctx2[1];
      if (dirty & /*linecount*/
      4) skeleton2_changes.linecount = /*linecount*/
      ctx2[2];
      skeleton2.$set(skeleton2_changes);
      if (!current || dirty & /*size*/
      2 && div1_class_value !== (div1_class_value = "card card-" + /*size*/
      ctx2[1] + " svelte-zwb9yh")) {
        attr(div1, "class", div1_class_value);
      }
      if (!current || dirty & /*maxwidth*/
      1) {
        set_style(
          div1,
          "--max-width",
          /*maxwidth*/
          ctx2[0]
        );
      }
    },
    i(local) {
      if (current) return;
      transition_in(skeleton0.$$.fragment, local);
      transition_in(skeleton1.$$.fragment, local);
      transition_in(skeleton2.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(skeleton0.$$.fragment, local);
      transition_out(skeleton1.$$.fragment, local);
      transition_out(skeleton2.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      destroy_component(skeleton0);
      destroy_component(skeleton1);
      destroy_component(skeleton2);
    }
  };
}
function create_each_block(ctx) {
  let skeleton;
  let current;
  skeleton = new Skeleton({
    props: {
      type: "text",
      size: (
        /*size*/
        ctx[1]
      ),
      linecount: (
        /*linecount*/
        ctx[2]
      )
    }
  });
  return {
    c() {
      create_component(skeleton.$$.fragment);
    },
    m(target, anchor) {
      mount_component(skeleton, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const skeleton_changes = {};
      if (dirty & /*size*/
      2) skeleton_changes.size = /*size*/
      ctx2[1];
      if (dirty & /*linecount*/
      4) skeleton_changes.linecount = /*linecount*/
      ctx2[2];
      skeleton.$set(skeleton_changes);
    },
    i(local) {
      if (current) return;
      transition_in(skeleton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(skeleton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(skeleton, detaching);
    }
  };
}
function create_fragment$b(ctx) {
  let div;
  let current_block_type_index;
  let if_block;
  let div_style_value;
  let current;
  const if_block_creators = [
    create_if_block$5,
    create_if_block_1$2,
    create_if_block_2$1,
    create_if_block_3$1,
    create_else_block$2
  ];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*type*/
      ctx2[3] === "card"
    ) return 0;
    if (
      /*type*/
      ctx2[3] === "profile"
    ) return 1;
    if (
      /*type*/
      ctx2[3] === "lines"
    ) return 2;
    if (
      /*type*/
      ctx2[3] === "article"
    ) return 3;
    return 4;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      div = element("div");
      if_block.c();
      attr(div, "id", "container");
      attr(
        div,
        "data-testid",
        /*testid*/
        ctx[4]
      );
      attr(div, "style", div_style_value = calculateMargin(
        /*mt*/
        ctx[5],
        /*mr*/
        ctx[6],
        /*mb*/
        ctx[7],
        /*ml*/
        ctx[8]
      ));
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if_blocks[current_block_type_index].m(div, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(div, null);
      }
      if (!current || dirty & /*testid*/
      16) {
        attr(
          div,
          "data-testid",
          /*testid*/
          ctx2[4]
        );
      }
      if (!current || dirty & /*mt, mr, mb, ml*/
      480 && div_style_value !== (div_style_value = calculateMargin(
        /*mt*/
        ctx2[5],
        /*mr*/
        ctx2[6],
        /*mb*/
        ctx2[7],
        /*ml*/
        ctx2[8]
      ))) {
        attr(div, "style", div_style_value);
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if_blocks[current_block_type_index].d();
    }
  };
}
function instance$b($$self, $$props, $$invalidate) {
  const [Types, validateType] = typeValidator(
    "Skeleton type",
    [
      "image",
      "text",
      "title",
      "text-small",
      "avatar",
      "header",
      "paragraph",
      "thumbnail",
      "card",
      "lines",
      "profile",
      "article"
    ],
    true
  );
  const [Sizes, validateSize] = typeValidator("Skeleton size", ["1", "2", "3", "4"]);
  let { maxwidth = "300px" } = $$props;
  let { size = "1" } = $$props;
  let { linecount = 3 } = $$props;
  let { type } = $$props;
  let { testid = "" } = $$props;
  let { mt = null } = $$props;
  let { mr = null } = $$props;
  let { mb: mb2 = null } = $$props;
  let { ml: ml2 = null } = $$props;
  onMount(() => {
    setTimeout(() => validateType(type), 1);
    validateSize(size);
  });
  $$self.$$set = ($$props2) => {
    if ("maxwidth" in $$props2) $$invalidate(0, maxwidth = $$props2.maxwidth);
    if ("size" in $$props2) $$invalidate(1, size = $$props2.size);
    if ("linecount" in $$props2) $$invalidate(2, linecount = $$props2.linecount);
    if ("type" in $$props2) $$invalidate(3, type = $$props2.type);
    if ("testid" in $$props2) $$invalidate(4, testid = $$props2.testid);
    if ("mt" in $$props2) $$invalidate(5, mt = $$props2.mt);
    if ("mr" in $$props2) $$invalidate(6, mr = $$props2.mr);
    if ("mb" in $$props2) $$invalidate(7, mb2 = $$props2.mb);
    if ("ml" in $$props2) $$invalidate(8, ml2 = $$props2.ml);
  };
  return [maxwidth, size, linecount, type, testid, mt, mr, mb2, ml2];
}
class Skeleton extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$b,
      create_fragment$b,
      safe_not_equal,
      {
        maxwidth: 0,
        size: 1,
        linecount: 2,
        type: 3,
        testid: 4,
        mt: 5,
        mr: 6,
        mb: 7,
        ml: 8
      },
      add_css$9
    );
  }
  get maxwidth() {
    return this.$$.ctx[0];
  }
  set maxwidth(maxwidth) {
    this.$$set({ maxwidth });
    flush();
  }
  get size() {
    return this.$$.ctx[1];
  }
  set size(size) {
    this.$$set({ size });
    flush();
  }
  get linecount() {
    return this.$$.ctx[2];
  }
  set linecount(linecount) {
    this.$$set({ linecount });
    flush();
  }
  get type() {
    return this.$$.ctx[3];
  }
  set type(type) {
    this.$$set({ type });
    flush();
  }
  get testid() {
    return this.$$.ctx[4];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
  get mt() {
    return this.$$.ctx[5];
  }
  set mt(mt) {
    this.$$set({ mt });
    flush();
  }
  get mr() {
    return this.$$.ctx[6];
  }
  set mr(mr) {
    this.$$set({ mr });
    flush();
  }
  get mb() {
    return this.$$.ctx[7];
  }
  set mb(mb2) {
    this.$$set({ mb: mb2 });
    flush();
  }
  get ml() {
    return this.$$.ctx[8];
  }
  set ml(ml2) {
    this.$$set({ ml: ml2 });
    flush();
  }
}
customElements.define("goa-skeleton", create_custom_element(Skeleton, { "maxwidth": {}, "size": {}, "linecount": {}, "type": {}, "testid": {}, "mt": {}, "mr": {}, "mb": {}, "ml": {} }, [], [], true));
function create_fragment$a(ctx) {
  let div;
  let div_style_value;
  return {
    c() {
      div = element("div");
      attr(div, "style", div_style_value = `
    height: var(--goa-space-${/*vspacing*/
      ctx[1]});
    width: var(--goa-space-${/*hspacing*/
      ctx[0]});
  `);
      attr(
        div,
        "data-testid",
        /*testid*/
        ctx[2]
      );
    },
    m(target, anchor) {
      insert(target, div, anchor);
      ctx[4](div);
    },
    p(ctx2, [dirty]) {
      if (dirty & /*vspacing, hspacing*/
      3 && div_style_value !== (div_style_value = `
    height: var(--goa-space-${/*vspacing*/
      ctx2[1]});
    width: var(--goa-space-${/*hspacing*/
      ctx2[0]});
  `)) {
        attr(div, "style", div_style_value);
      }
      if (dirty & /*testid*/
      4) {
        attr(
          div,
          "data-testid",
          /*testid*/
          ctx2[2]
        );
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      ctx[4](null);
    }
  };
}
function instance$a($$self, $$props, $$invalidate) {
  let { hspacing = "none" } = $$props;
  let { vspacing = "none" } = $$props;
  let { testid = "" } = $$props;
  let rootEl;
  onMount(() => {
    const height = `var(--goa-space-${vspacing})`;
    const width = hspacing === "fill" ? "100%" : `var(--goa-space-${hspacing})`;
    injectCss(rootEl, ":host", { width, height });
  });
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      rootEl = $$value;
      $$invalidate(3, rootEl);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("hspacing" in $$props2) $$invalidate(0, hspacing = $$props2.hspacing);
    if ("vspacing" in $$props2) $$invalidate(1, vspacing = $$props2.vspacing);
    if ("testid" in $$props2) $$invalidate(2, testid = $$props2.testid);
  };
  return [hspacing, vspacing, testid, rootEl, div_binding];
}
class Spacer extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$a, create_fragment$a, safe_not_equal, { hspacing: 0, vspacing: 1, testid: 2 });
  }
  get hspacing() {
    return this.$$.ctx[0];
  }
  set hspacing(hspacing) {
    this.$$set({ hspacing });
    flush();
  }
  get vspacing() {
    return this.$$.ctx[1];
  }
  set vspacing(vspacing) {
    this.$$set({ vspacing });
    flush();
  }
  get testid() {
    return this.$$.ctx[2];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
}
customElements.define("goa-spacer", create_custom_element(Spacer, { "hspacing": {}, "vspacing": {}, "testid": {} }, [], [], true));
const subscriber_queue = [];
function writable(value, start = noop) {
  let stop;
  const subscribers = /* @__PURE__ */ new Set();
  function set(new_value) {
    if (safe_not_equal(value, new_value)) {
      value = new_value;
      if (stop) {
        const run_queue = !subscriber_queue.length;
        for (const subscriber of subscribers) {
          subscriber[1]();
          subscriber_queue.push(subscriber, value);
        }
        if (run_queue) {
          for (let i = 0; i < subscriber_queue.length; i += 2) {
            subscriber_queue[i][0](subscriber_queue[i + 1]);
          }
          subscriber_queue.length = 0;
        }
      }
    }
  }
  function update2(fn) {
    set(fn(value));
  }
  function subscribe2(run2, invalidate = noop) {
    const subscriber = [run2, invalidate];
    subscribers.add(subscriber);
    if (subscribers.size === 1) {
      stop = start(set, update2) || noop;
    }
    run2(value);
    return () => {
      subscribers.delete(subscriber);
      if (subscribers.size === 0 && stop) {
        stop();
        stop = null;
      }
    };
  }
  return { set, update: update2, subscribe: subscribe2 };
}
function is_date(obj) {
  return Object.prototype.toString.call(obj) === "[object Date]";
}
function get_interpolator(a, b) {
  if (a === b || a !== a) return () => a;
  const type = typeof a;
  if (type !== typeof b || Array.isArray(a) !== Array.isArray(b)) {
    throw new Error("Cannot interpolate values of different type");
  }
  if (Array.isArray(a)) {
    const arr = b.map((bi2, i) => {
      return get_interpolator(a[i], bi2);
    });
    return (t2) => arr.map((fn) => fn(t2));
  }
  if (type === "object") {
    if (!a || !b) throw new Error("Object cannot be null");
    if (is_date(a) && is_date(b)) {
      a = a.getTime();
      b = b.getTime();
      const delta = b - a;
      return (t2) => new Date(a + t2 * delta);
    }
    const keys = Object.keys(b);
    const interpolators = {};
    keys.forEach((key) => {
      interpolators[key] = get_interpolator(a[key], b[key]);
    });
    return (t2) => {
      const result = {};
      keys.forEach((key) => {
        result[key] = interpolators[key](t2);
      });
      return result;
    };
  }
  if (type === "number") {
    const delta = b - a;
    return (t2) => a + t2 * delta;
  }
  throw new Error(`Cannot interpolate ${type} values`);
}
function tweened(value, defaults = {}) {
  const store = writable(value);
  let task;
  let target_value = value;
  function set(new_value, opts) {
    if (value == null) {
      store.set(value = new_value);
      return Promise.resolve();
    }
    target_value = new_value;
    let previous_task = task;
    let started = false;
    let {
      delay = 0,
      duration = 400,
      easing = identity,
      interpolate = get_interpolator
    } = assign(assign({}, defaults), opts);
    if (duration === 0) {
      if (previous_task) {
        previous_task.abort();
        previous_task = null;
      }
      store.set(value = target_value);
      return Promise.resolve();
    }
    const start = now() + delay;
    let fn;
    task = loop((now2) => {
      if (now2 < start) return true;
      if (!started) {
        fn = interpolate(value, new_value);
        if (typeof duration === "function") duration = duration(value, new_value);
        started = true;
      }
      if (previous_task) {
        previous_task.abort();
        previous_task = null;
      }
      const elapsed = now2 - start;
      if (elapsed > /** @type {number} */
      duration) {
        store.set(value = new_value);
        return false;
      }
      store.set(value = fn(easing(elapsed / duration)));
      return true;
    });
    return task.promise;
  }
  return {
    set,
    update: (fn, opts) => set(fn(target_value, value), opts),
    subscribe: store.subscribe
  };
}
function add_css$8(target) {
  append_styles(target, "svelte-1n1bmdf", ":host{box-sizing:border-box;font-family:var(--goa-font-family-sans)}@keyframes svelte-1n1bmdf-rotate{100%{transform:rotate(360deg)}}.spinner-infinite.svelte-1n1bmdf{animation:svelte-1n1bmdf-rotate 2s linear infinite}");
}
function create_if_block$4(ctx) {
  let svg;
  let circle;
  let circle_stroke_value;
  let circle_r_value;
  let path;
  let path_d_value;
  let path_stroke_value;
  let svg_class_value;
  let svg_viewBox_value;
  return {
    c() {
      svg = svg_element("svg");
      circle = svg_element("circle");
      path = svg_element("path");
      attr(
        circle,
        "cx",
        /*radius*/
        ctx[3]
      );
      attr(
        circle,
        "cy",
        /*radius*/
        ctx[3]
      );
      attr(circle, "stroke", circle_stroke_value = /*invert*/
      ctx[0] ? "var(--goa-color-info-hover)" : "var(--goa-color-brand-light)");
      attr(
        circle,
        "stroke-width",
        /*strokewidth*/
        ctx[4]
      );
      attr(circle, "r", circle_r_value = /*radius*/
      ctx[3] - /*strokewidth*/
      ctx[4] / 2);
      attr(path, "d", path_d_value = /*getArc*/
      ctx[9](
        /*$_progress*/
        ctx[7]
      ));
      attr(
        path,
        "stroke-width",
        /*strokewidth*/
        ctx[4]
      );
      attr(path, "stroke", path_stroke_value = /*invert*/
      ctx[0] ? "var(--goa-color-brand-light)" : "var(--goa-color-info-default)");
      attr(path, "stroke-linecap", "round");
      attr(svg, "class", svg_class_value = null_to_empty(`spinner-${/*type*/
      ctx[2]}`) + " svelte-1n1bmdf");
      attr(svg, "fill", "none");
      attr(svg, "viewBox", svg_viewBox_value = "0 0 " + /*diameter*/
      ctx[5] + " " + /*diameter*/
      ctx[5]);
      attr(
        svg,
        "width",
        /*diameter*/
        ctx[5]
      );
      attr(
        svg,
        "height",
        /*diameter*/
        ctx[5]
      );
      attr(
        svg,
        "data-testid",
        /*testid*/
        ctx[1]
      );
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, circle);
      append(svg, path);
    },
    p(ctx2, dirty) {
      if (dirty & /*radius*/
      8) {
        attr(
          circle,
          "cx",
          /*radius*/
          ctx2[3]
        );
      }
      if (dirty & /*radius*/
      8) {
        attr(
          circle,
          "cy",
          /*radius*/
          ctx2[3]
        );
      }
      if (dirty & /*invert*/
      1 && circle_stroke_value !== (circle_stroke_value = /*invert*/
      ctx2[0] ? "var(--goa-color-info-hover)" : "var(--goa-color-brand-light)")) {
        attr(circle, "stroke", circle_stroke_value);
      }
      if (dirty & /*strokewidth*/
      16) {
        attr(
          circle,
          "stroke-width",
          /*strokewidth*/
          ctx2[4]
        );
      }
      if (dirty & /*radius, strokewidth*/
      24 && circle_r_value !== (circle_r_value = /*radius*/
      ctx2[3] - /*strokewidth*/
      ctx2[4] / 2)) {
        attr(circle, "r", circle_r_value);
      }
      if (dirty & /*$_progress*/
      128 && path_d_value !== (path_d_value = /*getArc*/
      ctx2[9](
        /*$_progress*/
        ctx2[7]
      ))) {
        attr(path, "d", path_d_value);
      }
      if (dirty & /*strokewidth*/
      16) {
        attr(
          path,
          "stroke-width",
          /*strokewidth*/
          ctx2[4]
        );
      }
      if (dirty & /*invert*/
      1 && path_stroke_value !== (path_stroke_value = /*invert*/
      ctx2[0] ? "var(--goa-color-brand-light)" : "var(--goa-color-info-default)")) {
        attr(path, "stroke", path_stroke_value);
      }
      if (dirty & /*type*/
      4 && svg_class_value !== (svg_class_value = null_to_empty(`spinner-${/*type*/
      ctx2[2]}`) + " svelte-1n1bmdf")) {
        attr(svg, "class", svg_class_value);
      }
      if (dirty & /*diameter*/
      32 && svg_viewBox_value !== (svg_viewBox_value = "0 0 " + /*diameter*/
      ctx2[5] + " " + /*diameter*/
      ctx2[5])) {
        attr(svg, "viewBox", svg_viewBox_value);
      }
      if (dirty & /*diameter*/
      32) {
        attr(
          svg,
          "width",
          /*diameter*/
          ctx2[5]
        );
      }
      if (dirty & /*diameter*/
      32) {
        attr(
          svg,
          "height",
          /*diameter*/
          ctx2[5]
        );
      }
      if (dirty & /*testid*/
      2) {
        attr(
          svg,
          "data-testid",
          /*testid*/
          ctx2[1]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(svg);
      }
    }
  };
}
function create_fragment$9(ctx) {
  let if_block_anchor;
  let if_block = (
    /*ready*/
    ctx[6] && create_if_block$4(ctx)
  );
  return {
    c() {
      if (if_block) if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block) if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, [dirty]) {
      if (
        /*ready*/
        ctx2[6]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block$4(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block) if_block.d(detaching);
    }
  };
}
function instance$9($$self, $$props, $$invalidate) {
  let diameter;
  let strokewidth;
  let radius;
  let pathRadius;
  let ready;
  let $_progress;
  let { size } = $$props;
  let { invert = false } = $$props;
  let { progress = -1 } = $$props;
  let { testid = "" } = $$props;
  let type = "infinite";
  const _progress = tweened(0, { duration: 500, easing: quartOut });
  component_subscribe($$self, _progress, (value) => $$invalidate(7, $_progress = value));
  function getCoords(radians) {
    const x2 = radius + pathRadius * Math.cos(radians);
    const y2 = radius + pathRadius * Math.sin(radians);
    return x2 + " " + y2;
  }
  function getArc(progress2) {
    switch (type) {
      case "progress": {
        const start = getCoords(-Math.PI / 2);
        const end = getCoords(-Math.PI / 2 + 2 * Math.PI * (progress2 / 100));
        const largeArcFlag = progress2 % 100 < 50 ? 0 : 1;
        return `M ${start} A ${pathRadius} ${pathRadius} 0 ${largeArcFlag} 1 ${end}`;
      }
      case "infinite": {
        const start = getCoords(Math.PI * 1.5);
        const end = getCoords(0);
        return `M ${start} A ${pathRadius} ${pathRadius} 0 1 0 ${end}`;
      }
    }
  }
  $$self.$$set = ($$props2) => {
    if ("size" in $$props2) $$invalidate(10, size = $$props2.size);
    if ("invert" in $$props2) $$invalidate(0, invert = $$props2.invert);
    if ("progress" in $$props2) $$invalidate(11, progress = $$props2.progress);
    if ("testid" in $$props2) $$invalidate(1, testid = $$props2.testid);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*progress*/
    2048) {
      {
        const p2 = parseFloat(progress + "");
        if (p2 >= 0) {
          _progress.set(p2 || 1);
          $$invalidate(2, type = "progress");
        }
      }
    }
    if ($$self.$$.dirty & /*size*/
    1024) {
      $$invalidate(5, diameter = size && {
        small: 16,
        medium: 32,
        large: 64,
        xlarge: 100
      }[size]);
    }
    if ($$self.$$.dirty & /*size*/
    1024) {
      $$invalidate(4, strokewidth = size && { small: 2, medium: 4, large: 7, xlarge: 9 }[size]);
    }
    if ($$self.$$.dirty & /*diameter*/
    32) {
      $$invalidate(3, radius = diameter / 2);
    }
    if ($$self.$$.dirty & /*radius, strokewidth*/
    24) {
      $$invalidate(12, pathRadius = radius - strokewidth / 2);
    }
    if ($$self.$$.dirty & /*type, pathRadius, progress*/
    6148) {
      $$invalidate(6, ready = type === "infinite" ? pathRadius : pathRadius && progress);
    }
  };
  return [
    invert,
    testid,
    type,
    radius,
    strokewidth,
    diameter,
    ready,
    $_progress,
    _progress,
    getArc,
    size,
    progress,
    pathRadius
  ];
}
class Spinner extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$9,
      create_fragment$9,
      safe_not_equal,
      {
        size: 10,
        invert: 0,
        progress: 11,
        testid: 1
      },
      add_css$8
    );
  }
  get size() {
    return this.$$.ctx[10];
  }
  set size(size) {
    this.$$set({ size });
    flush();
  }
  get invert() {
    return this.$$.ctx[0];
  }
  set invert(invert) {
    this.$$set({ invert });
    flush();
  }
  get progress() {
    return this.$$.ctx[11];
  }
  set progress(progress) {
    this.$$set({ progress });
    flush();
  }
  get testid() {
    return this.$$.ctx[1];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
}
customElements.define("goa-spinner", create_custom_element(Spinner, { "size": {}, "invert": { "type": "Boolean" }, "progress": {}, "testid": {} }, [], [], true));
const get_heading_slot_changes = (dirty) => ({});
const get_heading_slot_context = (ctx) => ({});
function create_if_block$3(ctx) {
  let div;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[5].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[4],
    null
  );
  return {
    c() {
      div = element("div");
      if (default_slot) default_slot.c();
      attr(div, "role", "tabpanel");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        16)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[4],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[4]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[4],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (default_slot) default_slot.d(detaching);
    }
  };
}
function create_fragment$8(ctx) {
  let section;
  let div;
  let t0;
  let t1;
  let t2;
  let current;
  const heading_slot_template = (
    /*#slots*/
    ctx[5].heading
  );
  const heading_slot = create_slot(
    heading_slot_template,
    ctx,
    /*$$scope*/
    ctx[4],
    get_heading_slot_context
  );
  let if_block = (
    /*open*/
    ctx[0] && create_if_block$3(ctx)
  );
  return {
    c() {
      section = element("section");
      div = element("div");
      if (heading_slot) heading_slot.c();
      t0 = space();
      t1 = text(
        /*heading*/
        ctx[1]
      );
      t2 = space();
      if (if_block) if_block.c();
      set_style(div, "display", "none");
    },
    m(target, anchor) {
      insert(target, section, anchor);
      append(section, div);
      if (heading_slot) {
        heading_slot.m(div, null);
      }
      append(div, t0);
      append(div, t1);
      ctx[6](div);
      append(section, t2);
      if (if_block) if_block.m(section, null);
      ctx[7](section);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (heading_slot) {
        if (heading_slot.p && (!current || dirty & /*$$scope*/
        16)) {
          update_slot_base(
            heading_slot,
            heading_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[4],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[4]
            ) : get_slot_changes(
              heading_slot_template,
              /*$$scope*/
              ctx2[4],
              dirty,
              get_heading_slot_changes
            ),
            get_heading_slot_context
          );
        }
      }
      if (!current || dirty & /*heading*/
      2) set_data(
        t1,
        /*heading*/
        ctx2[1]
      );
      if (
        /*open*/
        ctx2[0]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*open*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$3(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(section, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current) return;
      transition_in(heading_slot, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(heading_slot, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(section);
      }
      if (heading_slot) heading_slot.d(detaching);
      ctx[6](null);
      if (if_block) if_block.d();
      ctx[7](null);
    }
  };
}
function instance$8($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  const $$slots = compute_slots(slots);
  let { heading = "" } = $$props;
  let { open = false } = $$props;
  let _rootEl;
  let _headingSlotEl;
  onMount(() => {
    dispatchInit();
    addSetOpenEventListener();
  });
  function dispatchInit() {
    setTimeout(
      () => {
        const headingType = $$slots.heading ? "slot" : "string";
        _rootEl == null ? void 0 : _rootEl.dispatchEvent(new CustomEvent(
          "tab:mounted",
          {
            composed: true,
            bubbles: true,
            detail: {
              el: _rootEl,
              headingType,
              heading: headingType === "string" ? heading : getHeadingContents(),
              open
            }
          }
        ));
      },
      1
    );
  }
  function getHeadingContents() {
    return getSlottedChildren(_headingSlotEl, "*")[0];
  }
  function addSetOpenEventListener() {
    _rootEl.addEventListener("tabs:set-open", (e) => {
      const props = e.detail;
      $$invalidate(0, open = !!props.open);
    });
  }
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _headingSlotEl = $$value;
      $$invalidate(3, _headingSlotEl);
    });
  }
  function section_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _rootEl = $$value;
      $$invalidate(2, _rootEl);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("heading" in $$props2) $$invalidate(1, heading = $$props2.heading);
    if ("open" in $$props2) $$invalidate(0, open = $$props2.open);
    if ("$$scope" in $$props2) $$invalidate(4, $$scope = $$props2.$$scope);
  };
  return [
    open,
    heading,
    _rootEl,
    _headingSlotEl,
    $$scope,
    slots,
    div_binding,
    section_binding
  ];
}
class Tab extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$8, create_fragment$8, safe_not_equal, { heading: 1, open: 0 });
  }
  get heading() {
    return this.$$.ctx[1];
  }
  set heading(heading) {
    this.$$set({ heading });
    flush();
  }
  get open() {
    return this.$$.ctx[0];
  }
  set open(open) {
    this.$$set({ open });
    flush();
  }
}
customElements.define("goa-tab", create_custom_element(Tab, { "heading": {}, "open": { "reflect": true, "type": "String" } }, ["heading", "default"], [], true));
function add_css$7(target) {
  append_styles(target, "svelte-1wrp53x", ".goatable.svelte-1wrp53x{width:0}table.svelte-1wrp53x{border-collapse:collapse}");
}
function create_else_block$1(ctx) {
  let table;
  let table_style_value;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[12].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[11],
    null
  );
  return {
    c() {
      table = element("table");
      if (default_slot) default_slot.c();
      attr(table, "style", table_style_value = /*width*/
      ctx[0] && "width: 100%;");
      attr(table, "class", "svelte-1wrp53x");
    },
    m(target, anchor) {
      insert(target, table, anchor);
      if (default_slot) {
        default_slot.m(table, null);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        2048)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[11],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[11]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[11],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*width*/
      1 && table_style_value !== (table_style_value = /*width*/
      ctx2[0] && "width: 100%;")) {
        attr(table, "style", table_style_value);
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(table);
      }
      if (default_slot) default_slot.d(detaching);
    }
  };
}
function create_if_block$2(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[12].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[11],
    null
  );
  return {
    c() {
      if (default_slot) default_slot.c();
    },
    m(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        2048)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[11],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[11]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[11],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (default_slot) default_slot.d(detaching);
    }
  };
}
function create_fragment$7(ctx) {
  let div;
  let current_block_type_index;
  let if_block;
  let div_class_value;
  let div_style_value;
  let current;
  const if_block_creators = [create_if_block$2, create_else_block$1];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*_isTableRoot*/
      ctx2[8]
    ) return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      div = element("div");
      if_block.c();
      attr(div, "class", div_class_value = null_to_empty(`goatable ${/*variant*/
      ctx[1]}`) + " svelte-1wrp53x");
      attr(div, "style", div_style_value = `
    overflow-x: auto;
    ${`width: ${/*width*/
      ctx[0] || "100%"};`}
    ${calculateMargin(
        /*mt*/
        ctx[3],
        /*mr*/
        ctx[4],
        /*mb*/
        ctx[5],
        /*ml*/
        ctx[6]
      )}
  `);
      attr(
        div,
        "data-testid",
        /*testid*/
        ctx[2]
      );
      toggle_class(
        div,
        "sticky",
        /*_stickyHeader*/
        ctx[9]
      );
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if_blocks[current_block_type_index].m(div, null);
      ctx[13](div);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(div, null);
      }
      if (!current || dirty & /*variant*/
      2 && div_class_value !== (div_class_value = null_to_empty(`goatable ${/*variant*/
      ctx2[1]}`) + " svelte-1wrp53x")) {
        attr(div, "class", div_class_value);
      }
      if (!current || dirty & /*width, mt, mr, mb, ml*/
      121 && div_style_value !== (div_style_value = `
    overflow-x: auto;
    ${`width: ${/*width*/
      ctx2[0] || "100%"};`}
    ${calculateMargin(
        /*mt*/
        ctx2[3],
        /*mr*/
        ctx2[4],
        /*mb*/
        ctx2[5],
        /*ml*/
        ctx2[6]
      )}
  `)) {
        attr(div, "style", div_style_value);
      }
      if (!current || dirty & /*testid*/
      4) {
        attr(
          div,
          "data-testid",
          /*testid*/
          ctx2[2]
        );
      }
      if (!current || dirty & /*variant, _stickyHeader*/
      514) {
        toggle_class(
          div,
          "sticky",
          /*_stickyHeader*/
          ctx2[9]
        );
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if_blocks[current_block_type_index].d();
      ctx[13](null);
    }
  };
}
function dispatch(el2, params) {
  el2.dispatchEvent(new CustomEvent(
    "_sort",
    {
      composed: true,
      bubbles: true,
      cancelable: false,
      detail: params
    }
  ));
}
function instance$7($$self, $$props, $$invalidate) {
  let _stickyHeader;
  let { $$slots: slots = {}, $$scope } = $$props;
  const [Variants, validateVariant] = typeValidator("Table variant", ["normal", "relaxed"], true);
  let { width = "" } = $$props;
  let { stickyheader = "false" } = $$props;
  let { variant = "normal" } = $$props;
  let { testid = "" } = $$props;
  let { mt = null } = $$props;
  let { mr = null } = $$props;
  let { mb: mb2 = null } = $$props;
  let { ml: ml2 = null } = $$props;
  let _rootEl;
  let _isTableRoot = false;
  onMount(() => {
    validateVariant(variant);
    setTimeout(attachSortEventHandling, 0);
    const slot = _rootEl.querySelector("slot");
    if (!slot || slot.assignedElements().length === 0) {
      return;
    }
    $$invalidate(8, _isTableRoot = slot.assignedElements()[0].tagName === "TABLE");
  });
  async function attachSortEventHandling() {
    var _a;
    await tick();
    const contentSlot = _rootEl == null ? void 0 : _rootEl.querySelector("slot");
    const headings = (_a = contentSlot == null ? void 0 : contentSlot.assignedElements().find((el2) => el2.tagName === "THEAD" || el2.tagName === "TABLE")) == null ? void 0 : _a.querySelectorAll("goa-table-sort-header");
    headings == null ? void 0 : headings.forEach((heading) => {
      heading.addEventListener("click", () => {
        const sortBy = heading.getAttribute("name");
        let sortDir = 0;
        headings.forEach((child) => {
          if (child.getAttribute("name") === sortBy) {
            const direction = child["direction"];
            const newDirection = direction === "asc" ? "desc" : "asc";
            sortDir = newDirection === "asc" ? 1 : -1;
            child.setAttribute("direction", newDirection);
          } else {
            child.setAttribute("direction", "none");
          }
        });
        if (sortBy && sortDir !== 0) {
          dispatch(heading, { sortBy, sortDir });
        }
      });
      const initialSortBy = heading.getAttribute("name");
      const initialDirection = heading["direction"];
      if (initialSortBy && initialDirection && initialDirection !== "none") {
        setTimeout(
          () => {
            dispatch(heading, {
              sortBy: initialSortBy,
              sortDir: initialDirection === "asc" ? 1 : -1
            });
          },
          10
        );
      }
    });
  }
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _rootEl = $$value;
      $$invalidate(7, _rootEl);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("width" in $$props2) $$invalidate(0, width = $$props2.width);
    if ("stickyheader" in $$props2) $$invalidate(10, stickyheader = $$props2.stickyheader);
    if ("variant" in $$props2) $$invalidate(1, variant = $$props2.variant);
    if ("testid" in $$props2) $$invalidate(2, testid = $$props2.testid);
    if ("mt" in $$props2) $$invalidate(3, mt = $$props2.mt);
    if ("mr" in $$props2) $$invalidate(4, mr = $$props2.mr);
    if ("mb" in $$props2) $$invalidate(5, mb2 = $$props2.mb);
    if ("ml" in $$props2) $$invalidate(6, ml2 = $$props2.ml);
    if ("$$scope" in $$props2) $$invalidate(11, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*stickyheader*/
    1024) {
      $$invalidate(9, _stickyHeader = toBoolean(stickyheader));
    }
  };
  return [
    width,
    variant,
    testid,
    mt,
    mr,
    mb2,
    ml2,
    _rootEl,
    _isTableRoot,
    _stickyHeader,
    stickyheader,
    $$scope,
    slots,
    div_binding
  ];
}
class Table extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$7,
      create_fragment$7,
      safe_not_equal,
      {
        width: 0,
        stickyheader: 10,
        variant: 1,
        testid: 2,
        mt: 3,
        mr: 4,
        mb: 5,
        ml: 6
      },
      add_css$7
    );
  }
  get width() {
    return this.$$.ctx[0];
  }
  set width(width) {
    this.$$set({ width });
    flush();
  }
  get stickyheader() {
    return this.$$.ctx[10];
  }
  set stickyheader(stickyheader) {
    this.$$set({ stickyheader });
    flush();
  }
  get variant() {
    return this.$$.ctx[1];
  }
  set variant(variant) {
    this.$$set({ variant });
    flush();
  }
  get testid() {
    return this.$$.ctx[2];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
  get mt() {
    return this.$$.ctx[3];
  }
  set mt(mt) {
    this.$$set({ mt });
    flush();
  }
  get mr() {
    return this.$$.ctx[4];
  }
  set mr(mr) {
    this.$$set({ mr });
    flush();
  }
  get mb() {
    return this.$$.ctx[5];
  }
  set mb(mb2) {
    this.$$set({ mb: mb2 });
    flush();
  }
  get ml() {
    return this.$$.ctx[6];
  }
  set ml(ml2) {
    this.$$set({ ml: ml2 });
    flush();
  }
}
customElements.define("goa-table", create_custom_element(Table, { "width": {}, "stickyheader": {}, "variant": { "reflect": true }, "testid": {}, "mt": {}, "mr": {}, "mb": {}, "ml": {} }, ["default"], [], true));
function add_css$6(target) {
  append_styles(target, "svelte-nanrkk", ":host{display:flex;align-items:flex-end}button.svelte-nanrkk.svelte-nanrkk{border:none;background:none;display:flex;font-family:inherit;font-size:inherit;font-weight:inherit;color:inherit;width:100%;height:var(--goa-space-2xl);padding:var(--goa-space-s) var(--goa-space-m);justify-content:var(--header-text-align, flex-start);gap:var(--goa-space-2xs);align-items:flex-end;text-align:var(--header-align, left)}button.svelte-nanrkk.svelte-nanrkk:hover{background-color:var(--goa-color-greyscale-100);cursor:pointer;color:var(--goa-color-interactive-hover)}button.svelte-nanrkk goa-icon.svelte-nanrkk{color:var(--goa-color-interactive-default)}button.svelte-nanrkk:hover goa-icon.svelte-nanrkk{color:var(--goa-color-interactive-hover)}button.svelte-nanrkk .direction--none goa-icon.svelte-nanrkk{color:var(--goa-color-greyscale-400)}button.svelte-nanrkk:hover .direction--none goa-icon.svelte-nanrkk{color:var(--goa-color-interactive-hover)}goa-icon.svelte-nanrkk.svelte-nanrkk{scale:0.8}.direction--none.svelte-nanrkk goa-icon.svelte-nanrkk{height:0.625rem}.direction--none.svelte-nanrkk.svelte-nanrkk{display:inline-flex;flex-direction:column;align-items:center}");
}
function create_else_block(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      div.innerHTML = `<goa-icon type="caret-up" size="small" class="svelte-nanrkk"></goa-icon> <goa-icon type="caret-down" size="small" class="svelte-nanrkk"></goa-icon>`;
      attr(div, "class", "direction--none svelte-nanrkk");
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_if_block_1$1(ctx) {
  let goa_icon;
  return {
    c() {
      goa_icon = element("goa-icon");
      set_custom_element_data(goa_icon, "type", "caret-up");
      set_custom_element_data(goa_icon, "size", "small");
      set_custom_element_data(goa_icon, "class", "svelte-nanrkk");
    },
    m(target, anchor) {
      insert(target, goa_icon, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(goa_icon);
      }
    }
  };
}
function create_if_block$1(ctx) {
  let goa_icon;
  return {
    c() {
      goa_icon = element("goa-icon");
      set_custom_element_data(goa_icon, "type", "caret-down");
      set_custom_element_data(goa_icon, "size", "small");
      set_custom_element_data(goa_icon, "class", "svelte-nanrkk");
    },
    m(target, anchor) {
      insert(target, goa_icon, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(goa_icon);
      }
    }
  };
}
function create_fragment$6(ctx) {
  let button;
  let t2;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[3].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[2],
    null
  );
  function select_block_type(ctx2, dirty) {
    if (
      /*direction*/
      ctx2[0] === "desc"
    ) return create_if_block$1;
    if (
      /*direction*/
      ctx2[0] === "asc"
    ) return create_if_block_1$1;
    return create_else_block;
  }
  let current_block_type = select_block_type(ctx);
  let if_block = current_block_type(ctx);
  return {
    c() {
      button = element("button");
      if (default_slot) default_slot.c();
      t2 = space();
      if_block.c();
      attr(button, "class", "svelte-nanrkk");
    },
    m(target, anchor) {
      insert(target, button, anchor);
      if (default_slot) {
        default_slot.m(button, null);
      }
      append(button, t2);
      if_block.m(button, null);
      ctx[4](button);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        4)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[2],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[2]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[2],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (current_block_type !== (current_block_type = select_block_type(ctx2))) {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(button, null);
        }
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(button);
      }
      if (default_slot) default_slot.d(detaching);
      if_block.d();
      ctx[4](null);
    }
  };
}
function instance$6($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { direction = "none" } = $$props;
  let _rootEl;
  onMount(() => {
    if (_rootEl) {
      const hostEl = _rootEl.getRootNode().host;
      const parentThead = hostEl == null ? void 0 : hostEl.closest("th");
      parentThead == null ? void 0 : parentThead.style.setProperty("--goa-table-header-padding", "0");
      const ancestor = hostEl == null ? void 0 : hostEl.closest("th.goa-table-number-header");
      if (ancestor) {
        _rootEl.style.setProperty("--header-text-align", "flex-end");
        _rootEl.style.setProperty("--header-align", "right");
      }
    }
  });
  function button_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _rootEl = $$value;
      $$invalidate(1, _rootEl);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("direction" in $$props2) $$invalidate(0, direction = $$props2.direction);
    if ("$$scope" in $$props2) $$invalidate(2, $$scope = $$props2.$$scope);
  };
  return [direction, _rootEl, $$scope, slots, button_binding];
}
class TableSortHeader extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$6, create_fragment$6, safe_not_equal, { direction: 0 }, add_css$6);
  }
  get direction() {
    return this.$$.ctx[0];
  }
  set direction(direction) {
    this.$$set({ direction });
    flush();
  }
}
customElements.define("goa-table-sort-header", create_custom_element(TableSortHeader, { "direction": {} }, ["default"], [], true));
function add_css$5(target) {
  append_styles(target, "svelte-1m4hi2j", ':host{--goa-tab-typography:var(--goa-typography-body-m);--goa-tab-typography-selected:var(--goa-typography-heading-s);--goa-tab-text-color:var(--goa-color-text-default);--goa-tab-border-selected:4px solid var(--goa-color-interactive-default);--goa-tab-border-not-selected:4px solid transparent;--goa-tab-color-bg-selected:transparent;--goa-tab-color-bg-selected-small-screen:var(--goa-color-info-background);--goa-tab-border-focus:var(--goa-border-width-l) solid var(--goa-color-interactive-focus);--goa-tab-border-hover:4px solid var(--goa-color-greyscale-200);--goa-tab-padding:var(--goa-space-xs) var(--goa-space-m);--goa-tab-padding-mobile:6px var(--goa-space-m);--goa-tabs-gap:var(--goa-space-xl);--goa-tabs-gap-small-screen:var(--goa-space-2xs);--goa-tabs-bottom-border:var(--goa-border-width-s) solid var(--goa-color-greyscale-200);box-sizing:border-box;font:var(--goa-tab-typography)}.tab{gap:var(--goa-space-xs)}[role="tab"]{display:block;background:none;overflow:hidden;white-space:nowrap;cursor:pointer;border:none;font:var(--goa-tab-typography);color:var(--goa-tab-text-color);text-decoration:none}[role="tab"][aria-selected="true"]{font:var(--goa-tab-typography-selected)}[role="tab"]:focus-visible{outline:var(--goa-tab-border-focus)}[role="tab"]:hover:not([aria-selected="true"]){border-bottom:var(--goa-tab-border-hover)}[role="tabpanel"]:focus-visible{outline:var(--goa-tab-border-focus);outline-offset:4px}@media(min-width: 624px){.tabs.svelte-1m4hi2j{border-bottom:var(--goa-tabs-bottom-border);display:flex;gap:var(--goa-tabs-gap);margin-bottom:2rem}[role="tab"]{padding:var(--goa-tab-padding);border-bottom:var(--goa-tab-border-not-selected);text-overflow:ellipsis;min-width:var(--goa-space-2xl);text-align:center}[role="tab"][aria-selected="true"]{border-bottom:var(--goa-tab-border-selected)}}@media(max-width: 623px){.tabs.svelte-1m4hi2j{border-left:var(--goa-tabs-bottom-border);border-bottom:var(--goa-tabs-bottom-border);display:flex;flex-direction:column;gap:var(--goa-tabs-gap-small-screen);padding-bottom:var(--goa-space-m);margin-bottom:2rem}[role="tab"]{padding:var(--goa-tab-padding-mobile);border-left:var(--goa-tab-border-not-selected);text-overflow:wrap;white-space:normal;word-break:break-word;overflow-wrap:break-word}[role="tab"][aria-selected="true"]{border-left:var(--goa-tab-border-selected);background:var(--goa-tab-color-bg-selected-small-screen)}[role="tab"]:hover:not([aria-selected="true"]){border-left:var(--goa-tab-border-hover);border-bottom:none}}');
}
function create_fragment$5(ctx) {
  let div2;
  let div0;
  let t2;
  let div1;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[6].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[5],
    null
  );
  return {
    c() {
      div2 = element("div");
      div0 = element("div");
      t2 = space();
      div1 = element("div");
      if (default_slot) default_slot.c();
      attr(div0, "class", "tabs svelte-1m4hi2j");
      attr(div1, "class", "tabpanel");
      attr(div1, "tabindex", "0");
      attr(div1, "role", "tabpanel");
      attr(div2, "role", "tablist");
      attr(
        div2,
        "data-testid",
        /*testid*/
        ctx[0]
      );
    },
    m(target, anchor) {
      insert(target, div2, anchor);
      append(div2, div0);
      ctx[7](div0);
      append(div2, t2);
      append(div2, div1);
      if (default_slot) {
        default_slot.m(div1, null);
      }
      ctx[8](div1);
      ctx[9](div2);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        32)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[5],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[5]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[5],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*testid*/
      1) {
        attr(
          div2,
          "data-testid",
          /*testid*/
          ctx2[0]
        );
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div2);
      }
      ctx[7](null);
      if (default_slot) default_slot.d(detaching);
      ctx[8](null);
      ctx[9](null);
    }
  };
}
function instance$5($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { initialtab = 1 } = $$props;
  let { testid = "" } = $$props;
  let _rootEl;
  let _tabsEl;
  let _panelEl;
  let _currentTab = 1;
  let _tabProps = [];
  let _bindTimeoutId;
  onMount(() => {
    addChildMountListener();
    addKeyboardEventListeners();
  });
  onDestroy(() => {
    removeKeyboardEventListeners();
  });
  function addChildMountListener() {
    _rootEl.addEventListener("tab:mounted", (e) => {
      const detail = e.detail;
      _tabProps = [..._tabProps, { ...detail, bound: false }];
      if (_bindTimeoutId) {
        clearTimeout(_bindTimeoutId);
      }
      _bindTimeoutId = setTimeout(
        () => {
          bindChildren();
          setCurrentTab(initialtab || 1);
        },
        1
      );
      e.stopPropagation();
    });
  }
  function bindChildren() {
    const path = window.location.pathname;
    _tabProps.forEach((tabProps, index) => {
      let tabSlug = "";
      let headingEl;
      if (tabProps.bound) return;
      tabProps.bound = true;
      tabProps.el.dispatchEvent(new CustomEvent(
        "tabs:set-open",
        {
          composed: true,
          detail: { open: index + 1 === _currentTab }
        }
      ));
      if (tabProps.headingType === "slot") {
        headingEl = tabProps.heading;
      } else {
        const heading = tabProps.heading;
        headingEl = document.createElement("div");
        headingEl.textContent = heading;
        tabSlug = heading;
      }
      headingEl.classList.add("tab");
      tabSlug || (tabSlug = "tab-" + index);
      const link = document.createElement("a");
      link.setAttribute("id", `tab-${index + 1}`);
      link.setAttribute("data-testid", `tab-${index + 1}`);
      link.setAttribute("role", "tab");
      link.setAttribute("href", path + "#" + tabSlug);
      link.addEventListener("click", () => setCurrentTab(index + 1));
      link.setAttribute("aria-controls", `tabpanel-${index + 1}`);
      link.appendChild(headingEl);
      _tabsEl == null ? void 0 : _tabsEl.appendChild(link);
    });
  }
  function addKeyboardEventListeners() {
    _rootEl.addEventListener("focus", handleKeydownEvents, true);
  }
  function removeKeyboardEventListeners() {
    _rootEl.removeEventListener("focus", handleKeydownEvents, true);
  }
  function setCurrentTab(tab) {
    if (!_tabsEl) return;
    const previousTab = _currentTab;
    _currentTab = clamp(tab, 1, _tabProps.length);
    if (previousTab != _currentTab) {
      _rootEl.dispatchEvent(new CustomEvent(
        "_change",
        {
          composed: true,
          bubbles: true,
          detail: { tab: _currentTab }
        }
      ));
    }
    let currentLocation = "";
    [..._tabsEl.querySelectorAll("[role=tab]")].map((el2, index) => {
      const isCurrent = index + 1 === +_currentTab;
      el2.setAttribute("aria-selected", fromBoolean(isCurrent));
      el2.setAttribute("tabindex", isCurrent ? "0" : "-1");
      if (isCurrent) {
        currentLocation = el2.href;
        el2.focus();
      }
    });
    for (const [i, props] of _tabProps.entries()) {
      props.el.dispatchEvent(new CustomEvent(
        "tabs:set-open",
        {
          composed: true,
          detail: { open: i + 1 === +tab }
        }
      ));
    }
    _panelEl.setAttribute("aria-labelledby", `tab-${_currentTab}`);
    _panelEl.setAttribute("id", `tabpanel-${_currentTab}`);
    if (currentLocation) {
      document.location = currentLocation;
    }
  }
  function handleKeydownEvents() {
    _rootEl.addEventListener("keydown", onKeyDown);
  }
  function onKeyDown(e) {
    let isHandled = false;
    const isTabButtonFocused = e.target && _tabsEl.contains(e.target);
    if (!isTabButtonFocused) {
      return;
    }
    switch (e.key) {
      case "ArrowUp":
      case "ArrowLeft":
        if (_currentTab === 1) {
          setCurrentTab(_tabProps.length);
        } else {
          setCurrentTab(_currentTab - 1);
        }
        isHandled = true;
        break;
      case "ArrowDown":
      case "ArrowRight":
        if (_currentTab === _tabProps.length) {
          setCurrentTab(1);
        } else {
          setCurrentTab(_currentTab + 1);
        }
        isHandled = true;
        break;
      case "Home":
        setCurrentTab(1);
        isHandled = true;
        break;
      case "End":
        setCurrentTab(_tabProps.length);
        isHandled = true;
        break;
    }
    if (isHandled) {
      e.stopPropagation();
      e.preventDefault();
    }
  }
  function div0_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _tabsEl = $$value;
      $$invalidate(2, _tabsEl);
    });
  }
  function div1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _panelEl = $$value;
      $$invalidate(3, _panelEl);
    });
  }
  function div2_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _rootEl = $$value;
      $$invalidate(1, _rootEl);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("initialtab" in $$props2) $$invalidate(4, initialtab = $$props2.initialtab);
    if ("testid" in $$props2) $$invalidate(0, testid = $$props2.testid);
    if ("$$scope" in $$props2) $$invalidate(5, $$scope = $$props2.$$scope);
  };
  return [
    testid,
    _rootEl,
    _tabsEl,
    _panelEl,
    initialtab,
    $$scope,
    slots,
    div0_binding,
    div1_binding,
    div2_binding
  ];
}
class Tabs extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$5, create_fragment$5, safe_not_equal, { initialtab: 4, testid: 0 }, add_css$5);
  }
  get initialtab() {
    return this.$$.ctx[4];
  }
  set initialtab(initialtab) {
    this.$$set({ initialtab });
    flush();
  }
  get testid() {
    return this.$$.ctx[0];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
}
customElements.define("goa-tabs", create_custom_element(Tabs, { "initialtab": {}, "testid": {} }, ["default"], [], true));
function add_css$4(target) {
  append_styles(target, "svelte-qirxao", "h1, h2, h3, h4, h5{margin:0}.heading-xl.svelte-qirxao{font:var(--goa-typography-heading-xl)}.heading-l.svelte-qirxao{font:var(--goa-typography-heading-l)}.heading-m.svelte-qirxao{font:var(--goa-typography-heading-m)}.heading-s.svelte-qirxao{font:var(--goa-typography-heading-s)}.heading-xs.svelte-qirxao{font:var(--goa-typography-heading-xs)}.body-l.svelte-qirxao{font:var(--goa-typography-body-l)}.body-m.svelte-qirxao{font:var(--goa-typography-body-m)}.body-s.svelte-qirxao{font:var(--goa-typography-body-s)}.body-xs.svelte-qirxao{font:var(--goa-typography-body-xs)}@media(max-width: 623px){.heading-xl.svelte-qirxao{font:var(--goa-typography-s-heading-xl)}.heading-l.svelte-qirxao{font:var(--goa-typography-s-heading-l)}.heading-m.svelte-qirxao{font:var(--goa-typography-s-heading-m)}.heading-s.svelte-qirxao{font:var(--goa-typography-s-heading-s)}.heading-xs.svelte-qirxao{font:var(--goa-typography-s-heading-xs)}.body-l.svelte-qirxao{font:var(--goa-typography-s-body-l)}.body-m.svelte-qirxao{font:var(--goa-typography-s-body-m)}.body-s.svelte-qirxao{font:var(--goa-typography-s-body-s)}.body-xs.svelte-qirxao{font:var(--goa-typography-s-body-xs)}}");
}
function create_dynamic_element(ctx) {
  let svelte_element;
  let svelte_element_class_value;
  let svelte_element_style_value;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[8].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[7],
    null
  );
  let svelte_element_levels = [
    {
      class: svelte_element_class_value = null_to_empty(
        /*size*/
        ctx[0]
      ) + " svelte-qirxao"
    },
    {
      style: svelte_element_style_value = styles(
        /*maxWidth*/
        ctx[2] === "none" ? "" : `max-width: ${/*maxWidth*/
        ctx[2]}`,
        calculateMargin(
          /*mt*/
          ctx[3],
          /*mr*/
          ctx[4],
          /*mb*/
          ctx[5],
          /*ml*/
          ctx[6]
        )
      )
    }
  ];
  let svelte_element_data = {};
  for (let i = 0; i < svelte_element_levels.length; i += 1) {
    svelte_element_data = assign(svelte_element_data, svelte_element_levels[i]);
  }
  return {
    c() {
      svelte_element = element(
        /*as*/
        ctx[1]
      );
      if (default_slot) default_slot.c();
      set_dynamic_element_data(
        /*as*/
        ctx[1]
      )(svelte_element, svelte_element_data);
    },
    m(target, anchor) {
      insert(target, svelte_element, anchor);
      if (default_slot) {
        default_slot.m(svelte_element, null);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        128)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[7],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[7]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[7],
              dirty,
              null
            ),
            null
          );
        }
      }
      set_dynamic_element_data(
        /*as*/
        ctx2[1]
      )(svelte_element, svelte_element_data = get_spread_update(svelte_element_levels, [
        (!current || dirty & /*size*/
        1 && svelte_element_class_value !== (svelte_element_class_value = null_to_empty(
          /*size*/
          ctx2[0]
        ) + " svelte-qirxao")) && { class: svelte_element_class_value },
        (!current || dirty & /*maxWidth, mt, mr, mb, ml*/
        124 && svelte_element_style_value !== (svelte_element_style_value = styles(
          /*maxWidth*/
          ctx2[2] === "none" ? "" : `max-width: ${/*maxWidth*/
          ctx2[2]}`,
          calculateMargin(
            /*mt*/
            ctx2[3],
            /*mr*/
            ctx2[4],
            /*mb*/
            ctx2[5],
            /*ml*/
            ctx2[6]
          )
        ))) && { style: svelte_element_style_value }
      ]));
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(svelte_element);
      }
      if (default_slot) default_slot.d(detaching);
    }
  };
}
function create_fragment$4(ctx) {
  let previous_tag = (
    /*as*/
    ctx[1]
  );
  let svelte_element_anchor;
  let current;
  let svelte_element = (
    /*as*/
    ctx[1] && create_dynamic_element(ctx)
  );
  return {
    c() {
      if (svelte_element) svelte_element.c();
      svelte_element_anchor = empty();
    },
    m(target, anchor) {
      if (svelte_element) svelte_element.m(target, anchor);
      insert(target, svelte_element_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*as*/
        ctx2[1]
      ) {
        if (!previous_tag) {
          svelte_element = create_dynamic_element(ctx2);
          previous_tag = /*as*/
          ctx2[1];
          svelte_element.c();
          svelte_element.m(svelte_element_anchor.parentNode, svelte_element_anchor);
        } else if (safe_not_equal(
          previous_tag,
          /*as*/
          ctx2[1]
        )) {
          svelte_element.d(1);
          svelte_element = create_dynamic_element(ctx2);
          previous_tag = /*as*/
          ctx2[1];
          svelte_element.c();
          svelte_element.m(svelte_element_anchor.parentNode, svelte_element_anchor);
        } else {
          svelte_element.p(ctx2, dirty);
        }
      } else if (previous_tag) {
        svelte_element.d(1);
        svelte_element = null;
        previous_tag = /*as*/
        ctx2[1];
      }
    },
    i(local) {
      if (current) return;
      transition_in(svelte_element, local);
      current = true;
    },
    o(local) {
      transition_out(svelte_element, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(svelte_element_anchor);
      }
      if (svelte_element) svelte_element.d(detaching);
    }
  };
}
function instance$4($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { as = "div" } = $$props;
  let { maxWidth = "65ch" } = $$props;
  let { size = void 0 } = $$props;
  let { mt = null } = $$props;
  let { mr = null } = $$props;
  let { mb: mb2 = "m" } = $$props;
  let { ml: ml2 = null } = $$props;
  const sizeMap = {
    h1: "heading-xl",
    h2: "heading-l",
    h3: "heading-m",
    h4: "heading-s",
    h5: "heading-xs",
    div: "body-m",
    p: "body-m",
    span: "body-m"
  };
  onMount(() => {
    $$invalidate(0, size || (size = sizeMap[as]));
  });
  $$self.$$set = ($$props2) => {
    if ("as" in $$props2) $$invalidate(1, as = $$props2.as);
    if ("maxWidth" in $$props2) $$invalidate(2, maxWidth = $$props2.maxWidth);
    if ("size" in $$props2) $$invalidate(0, size = $$props2.size);
    if ("mt" in $$props2) $$invalidate(3, mt = $$props2.mt);
    if ("mr" in $$props2) $$invalidate(4, mr = $$props2.mr);
    if ("mb" in $$props2) $$invalidate(5, mb2 = $$props2.mb);
    if ("ml" in $$props2) $$invalidate(6, ml2 = $$props2.ml);
    if ("$$scope" in $$props2) $$invalidate(7, $$scope = $$props2.$$scope);
  };
  return [size, as, maxWidth, mt, mr, mb2, ml2, $$scope, slots];
}
class Text extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$4,
      create_fragment$4,
      safe_not_equal,
      {
        as: 1,
        maxWidth: 2,
        size: 0,
        mt: 3,
        mr: 4,
        mb: 5,
        ml: 6
      },
      add_css$4
    );
  }
  get as() {
    return this.$$.ctx[1];
  }
  set as(as) {
    this.$$set({ as });
    flush();
  }
  get maxWidth() {
    return this.$$.ctx[2];
  }
  set maxWidth(maxWidth) {
    this.$$set({ maxWidth });
    flush();
  }
  get size() {
    return this.$$.ctx[0];
  }
  set size(size) {
    this.$$set({ size });
    flush();
  }
  get mt() {
    return this.$$.ctx[3];
  }
  set mt(mt) {
    this.$$set({ mt });
    flush();
  }
  get mr() {
    return this.$$.ctx[4];
  }
  set mr(mr) {
    this.$$set({ mr });
    flush();
  }
  get mb() {
    return this.$$.ctx[5];
  }
  set mb(mb2) {
    this.$$set({ mb: mb2 });
    flush();
  }
  get ml() {
    return this.$$.ctx[6];
  }
  set ml(ml2) {
    this.$$set({ ml: ml2 });
    flush();
  }
}
customElements.define("goa-text", create_custom_element(Text, { "as": {}, "maxWidth": {}, "size": {}, "mt": {}, "mr": {}, "mb": {}, "ml": {} }, ["default"], [], true));
function add_css$3(target) {
  append_styles(target, "svelte-o0spx0", ":host{--goa-text-area-padding:0.625rem var(--goa-space-s);--goa-text-area-typography:var(--goa-typography-body-m);--goa-text-area-typography-counter:var(--goa-typography-body-xs);--goa-text-area-color-text:var(--goa-color-text-default);--goa-text-area-color-text-counter:var(--goa-color-text-default);--goa-text-area-color-text-counter-error:var(--goa-color-interactive-error);--goa-text-area-color-text-disabled:var(--goa-color-text-disabled);--goa-text-area-color-text-placeholder:var(--goa-color-text-secondary);--goa-text-area-color-bg:var(--goa-color-greyscale-white);--goa-text-area-color-bg-disabled:var(--goa-color-greyscale-100);--goa-text-area-border-radius:var(--goa-border-radius-m);--goa-text-area-border:inset 0 0 0 var(--goa-border-width-s) var(--goa-color-greyscale-700);--goa-text-area-border-hover:inset 0 0 0 var(--goa-border-width-m) var(--goa-color-interactive-hover);--goa-text-area-border-focus:0 0 0 var(--goa-border-width-l) var(--goa-color-interactive-focus);--goa-text-area-border-error:inset 0 0 0 var(--goa-border-width-m) var(--goa-color-interactive-error);--goa-text-area-border-disabled:inset 0 0 0 var(--goa-border-width-s) var(--goa-color-greyscale-200);box-sizing:border-box;font-family:var(--goa-font-family-sans)}#container.svelte-o0spx0{container:self / inline-size;box-sizing:border-box}.root.svelte-o0spx0{transition:box-shadow 0.05s ease-in;position:relative;max-width:var(--width, 100%);padding-bottom:var(--char-count-padding);box-shadow:var(--goa-text-area-border);border-radius:var(--goa-text-area-border-radius)}.root.svelte-o0spx0:hover{box-shadow:var(--goa-text-area-border-hover)}.root.svelte-o0spx0:focus-within{box-shadow:var(--goa-text-area-border),\n      var(--goa-text-area-border-focus)}.error.svelte-o0spx0,.error.svelte-o0spx0:hover{box-shadow:var(--goa-text-area-border-error)}.error.svelte-o0spx0:focus{box-shadow:var(--goa-text-area-border),\n    var(--goa-text-area-border-focus)}.error.svelte-o0spx0:focus-within:hover{box-shadow:var(--goa-text-area-border),\n    var(--goa-text-area-border-focus);;}.disabled.svelte-o0spx0,.disabled.svelte-o0spx0:hover{background-color:var(--goa-text-area-color-bg-disabled);cursor:default;box-shadow:var(--goa-text-area-border-disabled);resize:none}textarea.svelte-o0spx0:disabled{resize:none;color:var(--goa-text-area-color-text-disabled)}textarea[readonly].svelte-o0spx0{cursor:pointer}textarea.svelte-o0spx0{display:block;box-sizing:border-box;outline:none;border:none;border-radius:var(--goa-text-area-border-radius);color:var(--goa-text-area-color-text);padding:var(--goa-text-area-padding);font:var(--goa-text-area-typography);min-width:100%;max-width:100%;resize:none;height:auto;background:none}.counter.svelte-o0spx0{position:absolute;right:var(--goa-space-m);bottom:var(--goa-space-s);font:var(--goa-text-area-typography-counter)}.counter-error.svelte-o0spx0{color:var(--goa-text-area-color-text-counter-error)}textarea.svelte-o0spx0{resize:none;scroll-behavior:smooth;max-height:calc(100vh * var(--max-height, 100) / 100);scrollbar-gutter:stable}textarea.svelte-o0spx0::-webkit-scrollbar{width:var(--goa-space-xs)}textarea.svelte-o0spx0::-webkit-scrollbar-track{border-radius:var(--goa-border-radius-m)}textarea.svelte-o0spx0::-webkit-scrollbar-track:hover{background:var(--goa-color-greyscale-200)}textarea.svelte-o0spx0::-webkit-scrollbar-thumb{background:var(--goa-color-greyscale-400);border-radius:var(--goa-border-radius-m)}textarea.svelte-o0spx0::-webkit-scrollbar-thumb:hover{background:var(--goa-color-greyscale-600)}.svelte-o0spx0::-moz-placeholder{color:var(--goa-text-area-color-text-placeholder);opacity:1}.svelte-o0spx0::placeholder{color:var(--goa-text-area-color-text-placeholder);opacity:1}@container self (max-width: 623px){textarea.svelte-o0spx0{width:100%;min-width:100%}}@container self (min-width: 624px){.root.svelte-o0spx0{max-width:var(--width, 100%)}textarea.svelte-o0spx0{min-width:0;width:var(--width, 100%)}}");
}
function create_if_block_1(ctx) {
  let div;
  function select_block_type(ctx2, dirty) {
    if (
      /*countby*/
      ctx2[7] && /*count*/
      ctx2[15] > /*maxcount*/
      ctx2[8]
    ) return create_if_block_2;
    if (
      /*countby*/
      ctx2[7] && /*count*/
      ctx2[15] <= /*maxcount*/
      ctx2[8]
    ) return create_if_block_3;
  }
  let current_block_type = select_block_type(ctx);
  let if_block = current_block_type && current_block_type(ctx);
  return {
    c() {
      div = element("div");
      if (if_block) if_block.c();
      attr(div, "class", "counter svelte-o0spx0");
      toggle_class(
        div,
        "counter-error",
        /*count*/
        ctx[15] > /*maxcount*/
        ctx[8]
      );
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (if_block) if_block.m(div, null);
    },
    p(ctx2, dirty) {
      if (current_block_type === (current_block_type = select_block_type(ctx2)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if (if_block) if_block.d(1);
        if_block = current_block_type && current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(div, null);
        }
      }
      if (dirty & /*count, maxcount*/
      33024) {
        toggle_class(
          div,
          "counter-error",
          /*count*/
          ctx2[15] > /*maxcount*/
          ctx2[8]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (if_block) {
        if_block.d();
      }
    }
  };
}
function create_if_block_3(ctx) {
  let t0_value = (
    /*maxcount*/
    ctx[8] - /*count*/
    ctx[15] + ""
  );
  let t0;
  let t1;
  let t2_value = pluralize(
    /*countby*/
    ctx[7],
    /*maxcount*/
    ctx[8] - /*count*/
    ctx[15]
  ) + "";
  let t2;
  let t3;
  return {
    c() {
      t0 = text(t0_value);
      t1 = space();
      t2 = text(t2_value);
      t3 = text(" remaining");
    },
    m(target, anchor) {
      insert(target, t0, anchor);
      insert(target, t1, anchor);
      insert(target, t2, anchor);
      insert(target, t3, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*maxcount, count*/
      33024 && t0_value !== (t0_value = /*maxcount*/
      ctx2[8] - /*count*/
      ctx2[15] + "")) set_data(t0, t0_value);
      if (dirty & /*countby, maxcount, count*/
      33152 && t2_value !== (t2_value = pluralize(
        /*countby*/
        ctx2[7],
        /*maxcount*/
        ctx2[8] - /*count*/
        ctx2[15]
      ) + "")) set_data(t2, t2_value);
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
        detach(t2);
        detach(t3);
      }
    }
  };
}
function create_if_block_2(ctx) {
  let t0_value = (
    /*count*/
    ctx[15] - /*maxcount*/
    ctx[8] + ""
  );
  let t0;
  let t1;
  let t2_value = pluralize(
    /*countby*/
    ctx[7],
    /*count*/
    ctx[15] - /*maxcount*/
    ctx[8]
  ) + "";
  let t2;
  let t3;
  return {
    c() {
      t0 = text(t0_value);
      t1 = space();
      t2 = text(t2_value);
      t3 = text(" too many");
    },
    m(target, anchor) {
      insert(target, t0, anchor);
      insert(target, t1, anchor);
      insert(target, t2, anchor);
      insert(target, t3, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*count, maxcount*/
      33024 && t0_value !== (t0_value = /*count*/
      ctx2[15] - /*maxcount*/
      ctx2[8] + "")) set_data(t0, t0_value);
      if (dirty & /*countby, count, maxcount*/
      33152 && t2_value !== (t2_value = pluralize(
        /*countby*/
        ctx2[7],
        /*count*/
        ctx2[15] - /*maxcount*/
        ctx2[8]
      ) + "")) set_data(t2, t2_value);
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
        detach(t2);
        detach(t3);
      }
    }
  };
}
function create_if_block(ctx) {
  let div;
  let t0;
  let t1;
  let t2_value = pluralize(
    /*countby*/
    ctx[7],
    /*count*/
    ctx[15]
  ) + "";
  let t2;
  return {
    c() {
      div = element("div");
      t0 = text(
        /*count*/
        ctx[15]
      );
      t1 = space();
      t2 = text(t2_value);
      attr(div, "class", "counter svelte-o0spx0");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, t0);
      append(div, t1);
      append(div, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*count*/
      32768) set_data(
        t0,
        /*count*/
        ctx2[15]
      );
      if (dirty & /*countby, count*/
      32896 && t2_value !== (t2_value = pluralize(
        /*countby*/
        ctx2[7],
        /*count*/
        ctx2[15]
      ) + "")) set_data(t2, t2_value);
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_fragment$3(ctx) {
  let div1;
  let div0;
  let textarea;
  let textarea_aria_label_value;
  let t0;
  let t1;
  let div0_style_value;
  let mounted;
  let dispose;
  let if_block0 = (
    /*maxcount*/
    ctx[8] > 0 && !/*isDisabled*/
    ctx[14] && create_if_block_1(ctx)
  );
  let if_block1 = (
    /*countby*/
    ctx[7] && /*maxcount*/
    ctx[8] < 0 && /*count*/
    ctx[15] > 0 && !/*isDisabled*/
    ctx[14] && create_if_block(ctx)
  );
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      textarea = element("textarea");
      t0 = space();
      if (if_block0) if_block0.c();
      t1 = space();
      if (if_block1) if_block1.c();
      attr(
        textarea,
        "name",
        /*name*/
        ctx[1]
      );
      attr(
        textarea,
        "placeholder",
        /*placeholder*/
        ctx[2]
      );
      attr(
        textarea,
        "rows",
        /*rows*/
        ctx[3]
      );
      attr(textarea, "aria-label", textarea_aria_label_value = /*arialabel*/
      ctx[6] || /*name*/
      ctx[1]);
      textarea.disabled = /*isDisabled*/
      ctx[14];
      textarea.readOnly = /*isReadonly*/
      ctx[16];
      attr(
        textarea,
        "data-testid",
        /*testid*/
        ctx[4]
      );
      attr(textarea, "class", "svelte-o0spx0");
      attr(div0, "data-testid", "root");
      attr(div0, "class", "root svelte-o0spx0");
      attr(div0, "style", div0_style_value = `
      ${calculateMargin(
        /*mt*/
        ctx[9],
        /*mr*/
        ctx[10],
        /*mb*/
        ctx[11],
        /*ml*/
        ctx[12]
      )};
      --width: ${/*width*/
      ctx[5]};
      --char-count-padding: ${/*countby*/
      ctx[7] ? "2rem" : "0"};
    `);
      toggle_class(
        div0,
        "error",
        /*isError*/
        ctx[17] || /*maxcount*/
        ctx[8] > 0 && /*count*/
        ctx[15] > /*maxcount*/
        ctx[8]
      );
      toggle_class(
        div0,
        "disabled",
        /*isDisabled*/
        ctx[14]
      );
      attr(div1, "id", "container");
      attr(div1, "class", "svelte-o0spx0");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      append(div0, textarea);
      ctx[23](textarea);
      set_input_value(
        textarea,
        /*value*/
        ctx[0]
      );
      append(div0, t0);
      if (if_block0) if_block0.m(div0, null);
      append(div0, t1);
      if (if_block1) if_block1.m(div0, null);
      if (!mounted) {
        dispose = [
          listen(
            textarea,
            "input",
            /*textarea_input_handler*/
            ctx[24]
          ),
          listen(
            textarea,
            "keyup",
            /*onKeyPress*/
            ctx[19]
          ),
          listen(
            textarea,
            "change",
            /*onChange*/
            ctx[18]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*name*/
      2) {
        attr(
          textarea,
          "name",
          /*name*/
          ctx2[1]
        );
      }
      if (dirty & /*placeholder*/
      4) {
        attr(
          textarea,
          "placeholder",
          /*placeholder*/
          ctx2[2]
        );
      }
      if (dirty & /*rows*/
      8) {
        attr(
          textarea,
          "rows",
          /*rows*/
          ctx2[3]
        );
      }
      if (dirty & /*arialabel, name*/
      66 && textarea_aria_label_value !== (textarea_aria_label_value = /*arialabel*/
      ctx2[6] || /*name*/
      ctx2[1])) {
        attr(textarea, "aria-label", textarea_aria_label_value);
      }
      if (dirty & /*isDisabled*/
      16384) {
        textarea.disabled = /*isDisabled*/
        ctx2[14];
      }
      if (dirty & /*isReadonly*/
      65536) {
        textarea.readOnly = /*isReadonly*/
        ctx2[16];
      }
      if (dirty & /*testid*/
      16) {
        attr(
          textarea,
          "data-testid",
          /*testid*/
          ctx2[4]
        );
      }
      if (dirty & /*value*/
      1) {
        set_input_value(
          textarea,
          /*value*/
          ctx2[0]
        );
      }
      if (
        /*maxcount*/
        ctx2[8] > 0 && !/*isDisabled*/
        ctx2[14]
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_1(ctx2);
          if_block0.c();
          if_block0.m(div0, t1);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (
        /*countby*/
        ctx2[7] && /*maxcount*/
        ctx2[8] < 0 && /*count*/
        ctx2[15] > 0 && !/*isDisabled*/
        ctx2[14]
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block(ctx2);
          if_block1.c();
          if_block1.m(div0, null);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (dirty & /*mt, mr, mb, ml, width, countby*/
      7840 && div0_style_value !== (div0_style_value = `
      ${calculateMargin(
        /*mt*/
        ctx2[9],
        /*mr*/
        ctx2[10],
        /*mb*/
        ctx2[11],
        /*ml*/
        ctx2[12]
      )};
      --width: ${/*width*/
      ctx2[5]};
      --char-count-padding: ${/*countby*/
      ctx2[7] ? "2rem" : "0"};
    `)) {
        attr(div0, "style", div0_style_value);
      }
      if (dirty & /*isError, maxcount, count*/
      164096) {
        toggle_class(
          div0,
          "error",
          /*isError*/
          ctx2[17] || /*maxcount*/
          ctx2[8] > 0 && /*count*/
          ctx2[15] > /*maxcount*/
          ctx2[8]
        );
      }
      if (dirty & /*isDisabled*/
      16384) {
        toggle_class(
          div0,
          "disabled",
          /*isDisabled*/
          ctx2[14]
        );
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      ctx[23](null);
      if (if_block0) if_block0.d();
      if (if_block1) if_block1.d();
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$3($$self, $$props, $$invalidate) {
  let isError;
  let isDisabled;
  let isReadonly;
  let count;
  let { name } = $$props;
  let { value = "" } = $$props;
  let { placeholder = "" } = $$props;
  let { rows = 3 } = $$props;
  let { testid = "" } = $$props;
  let { width = "60ch" } = $$props;
  let { error = "false" } = $$props;
  let { readonly = "false" } = $$props;
  let { disabled = "false" } = $$props;
  let { arialabel = "" } = $$props;
  let { countby = "" } = $$props;
  let { maxcount = -1 } = $$props;
  let { mt = null } = $$props;
  let { mr = null } = $$props;
  let { mb: mb2 = null } = $$props;
  let { ml: ml2 = null } = $$props;
  let _textareaEl;
  onMount(() => {
    addRelayListener();
    sendMountedMessage();
  });
  function addRelayListener() {
    receive(_textareaEl, (action, data) => {
      switch (action) {
        case FormSetValueMsg:
          onSetValue(data);
          break;
        case FieldsetSetErrorMsg:
          $$invalidate(20, error = "true");
          break;
        case FieldsetResetErrorsMsg:
          $$invalidate(20, error = "false");
          break;
      }
    });
  }
  function onSetValue(detail) {
    $$invalidate(0, value = detail.value);
    dispatch$1(_textareaEl, "_change", { name, value }, { bubbles: true });
  }
  function sendMountedMessage() {
    relay(_textareaEl, FormFieldMountMsg, { name, el: _textareaEl }, { bubbles: true, timeout: 10 });
  }
  function onChange2(e) {
    if (isDisabled) return;
    dispatchChange();
  }
  function onKeyPress(e) {
    if (isDisabled) return;
    dispatchKeyPress(e);
    dispatchChange();
  }
  function dispatchChange(_) {
    _textareaEl.dispatchEvent(new CustomEvent(
      "_change",
      {
        composed: true,
        detail: { name, value: _textareaEl.value },
        bubbles: true
      }
    ));
  }
  function dispatchKeyPress(e) {
    _textareaEl.dispatchEvent(new CustomEvent(
      "_keyPress",
      {
        composed: true,
        detail: { name, value, key: e.key }
      }
    ));
  }
  function textarea_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _textareaEl = $$value;
      $$invalidate(13, _textareaEl);
    });
  }
  function textarea_input_handler() {
    value = this.value;
    $$invalidate(0, value);
  }
  $$self.$$set = ($$props2) => {
    if ("name" in $$props2) $$invalidate(1, name = $$props2.name);
    if ("value" in $$props2) $$invalidate(0, value = $$props2.value);
    if ("placeholder" in $$props2) $$invalidate(2, placeholder = $$props2.placeholder);
    if ("rows" in $$props2) $$invalidate(3, rows = $$props2.rows);
    if ("testid" in $$props2) $$invalidate(4, testid = $$props2.testid);
    if ("width" in $$props2) $$invalidate(5, width = $$props2.width);
    if ("error" in $$props2) $$invalidate(20, error = $$props2.error);
    if ("readonly" in $$props2) $$invalidate(21, readonly = $$props2.readonly);
    if ("disabled" in $$props2) $$invalidate(22, disabled = $$props2.disabled);
    if ("arialabel" in $$props2) $$invalidate(6, arialabel = $$props2.arialabel);
    if ("countby" in $$props2) $$invalidate(7, countby = $$props2.countby);
    if ("maxcount" in $$props2) $$invalidate(8, maxcount = $$props2.maxcount);
    if ("mt" in $$props2) $$invalidate(9, mt = $$props2.mt);
    if ("mr" in $$props2) $$invalidate(10, mr = $$props2.mr);
    if ("mb" in $$props2) $$invalidate(11, mb2 = $$props2.mb);
    if ("ml" in $$props2) $$invalidate(12, ml2 = $$props2.ml);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*error*/
    1048576) {
      $$invalidate(17, isError = toBoolean(error));
    }
    if ($$self.$$.dirty & /*disabled*/
    4194304) {
      $$invalidate(14, isDisabled = toBoolean(disabled));
    }
    if ($$self.$$.dirty & /*readonly*/
    2097152) {
      $$invalidate(16, isReadonly = toBoolean(readonly));
    }
    if ($$self.$$.dirty & /*countby, value*/
    129) {
      $$invalidate(15, count = countby === "character" ? value == null ? void 0 : value.length : value == null ? void 0 : value.split(" ").filter((word) => word.trim().length > 0).length);
    }
  };
  return [
    value,
    name,
    placeholder,
    rows,
    testid,
    width,
    arialabel,
    countby,
    maxcount,
    mt,
    mr,
    mb2,
    ml2,
    _textareaEl,
    isDisabled,
    count,
    isReadonly,
    isError,
    onChange2,
    onKeyPress,
    error,
    readonly,
    disabled,
    textarea_binding,
    textarea_input_handler
  ];
}
class TextArea extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$3,
      create_fragment$3,
      safe_not_equal,
      {
        name: 1,
        value: 0,
        placeholder: 2,
        rows: 3,
        testid: 4,
        width: 5,
        error: 20,
        readonly: 21,
        disabled: 22,
        arialabel: 6,
        countby: 7,
        maxcount: 8,
        mt: 9,
        mr: 10,
        mb: 11,
        ml: 12
      },
      add_css$3
    );
  }
  get name() {
    return this.$$.ctx[1];
  }
  set name(name) {
    this.$$set({ name });
    flush();
  }
  get value() {
    return this.$$.ctx[0];
  }
  set value(value) {
    this.$$set({ value });
    flush();
  }
  get placeholder() {
    return this.$$.ctx[2];
  }
  set placeholder(placeholder) {
    this.$$set({ placeholder });
    flush();
  }
  get rows() {
    return this.$$.ctx[3];
  }
  set rows(rows) {
    this.$$set({ rows });
    flush();
  }
  get testid() {
    return this.$$.ctx[4];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
  get width() {
    return this.$$.ctx[5];
  }
  set width(width) {
    this.$$set({ width });
    flush();
  }
  get error() {
    return this.$$.ctx[20];
  }
  set error(error) {
    this.$$set({ error });
    flush();
  }
  get readonly() {
    return this.$$.ctx[21];
  }
  set readonly(readonly) {
    this.$$set({ readonly });
    flush();
  }
  get disabled() {
    return this.$$.ctx[22];
  }
  set disabled(disabled) {
    this.$$set({ disabled });
    flush();
  }
  get arialabel() {
    return this.$$.ctx[6];
  }
  set arialabel(arialabel) {
    this.$$set({ arialabel });
    flush();
  }
  get countby() {
    return this.$$.ctx[7];
  }
  set countby(countby) {
    this.$$set({ countby });
    flush();
  }
  get maxcount() {
    return this.$$.ctx[8];
  }
  set maxcount(maxcount) {
    this.$$set({ maxcount });
    flush();
  }
  get mt() {
    return this.$$.ctx[9];
  }
  set mt(mt) {
    this.$$set({ mt });
    flush();
  }
  get mr() {
    return this.$$.ctx[10];
  }
  set mr(mr) {
    this.$$set({ mr });
    flush();
  }
  get mb() {
    return this.$$.ctx[11];
  }
  set mb(mb2) {
    this.$$set({ mb: mb2 });
    flush();
  }
  get ml() {
    return this.$$.ctx[12];
  }
  set ml(ml2) {
    this.$$set({ ml: ml2 });
    flush();
  }
}
customElements.define("goa-textarea", create_custom_element(TextArea, { "name": {}, "value": {}, "placeholder": {}, "rows": {}, "testid": {}, "width": {}, "error": {}, "readonly": {}, "disabled": {}, "arialabel": {}, "countby": {}, "maxcount": {}, "mt": {}, "mr": {}, "mb": {}, "ml": {} }, [], [], true));
function add_css$2(target) {
  append_styles(target, "svelte-q0l82d", ".svelte-q0l82d.svelte-q0l82d{box-sizing:border-box}.page.svelte-q0l82d.svelte-q0l82d{min-height:100vh;display:flex;flex-direction:column}.content.svelte-q0l82d.svelte-q0l82d{flex:1 1 auto;display:flex;flex-direction:column;gap:2rem}.header.svelte-q0l82d.svelte-q0l82d,.footer.svelte-q0l82d.svelte-q0l82d{flex:0 0 auto}main.svelte-q0l82d.svelte-q0l82d{flex:1 1 auto;padding:0 1rem}.nav.svelte-q0l82d.svelte-q0l82d{transition:transform 200ms ease-in-out;background-color:var(--goa-color-greyscale-white)}.nav.svelte-q0l82d>.svelte-q0l82d{display:block;padding:0.5rem 0}@media not (max-width: 623px){.page.svelte-q0l82d.svelte-q0l82d{gap:2rem}.content.svelte-q0l82d.svelte-q0l82d{display:flex;flex-direction:row;justify-content:center;width:min(var(--max-content-width), 100vw);margin:0 auto}.nav.svelte-q0l82d.svelte-q0l82d{padding:0 2rem;transform:translateX(0)}.nav.svelte-q0l82d.svelte-q0l82d:not(.side-menu){flex:0 0 var(--nav-column-width)}.nav.side-menu.svelte-q0l82d.svelte-q0l82d{flex:0 0 var(--side-menu-column-width)}main.svelte-q0l82d.svelte-q0l82d{padding-right:2rem}}@media(min-width: 1024px){main.svelte-q0l82d.svelte-q0l82d{padding-right:4.5rem}}");
}
const get_footer_slot_changes$1 = (dirty) => ({});
const get_footer_slot_context$1 = (ctx) => ({});
const get_side_menu_slot_changes = (dirty) => ({});
const get_side_menu_slot_context = (ctx) => ({});
const get_sidebar_slot_changes = (dirty) => ({});
const get_sidebar_slot_context = (ctx) => ({});
const get_nav_slot_changes$1 = (dirty) => ({});
const get_nav_slot_context$1 = (ctx) => ({});
const get_header_slot_changes$1 = (dirty) => ({});
const get_header_slot_context$1 = (ctx) => ({});
function create_fragment$2(ctx) {
  let div;
  let header;
  let t0;
  let section;
  let nav0;
  let t1;
  let main;
  let t2;
  let nav1;
  let t3;
  let t4;
  let footer;
  let div_style_value;
  let current;
  const header_slot_template = (
    /*#slots*/
    ctx[4].header
  );
  const header_slot = create_slot(
    header_slot_template,
    ctx,
    /*$$scope*/
    ctx[3],
    get_header_slot_context$1
  );
  const nav_slot_template = (
    /*#slots*/
    ctx[4].nav
  );
  const nav_slot = create_slot(
    nav_slot_template,
    ctx,
    /*$$scope*/
    ctx[3],
    get_nav_slot_context$1
  );
  const default_slot_template = (
    /*#slots*/
    ctx[4].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[3],
    null
  );
  const sidebar_slot_template = (
    /*#slots*/
    ctx[4].sidebar
  );
  const sidebar_slot = create_slot(
    sidebar_slot_template,
    ctx,
    /*$$scope*/
    ctx[3],
    get_sidebar_slot_context
  );
  const side_menu_slot_template = (
    /*#slots*/
    ctx[4]["side-menu"]
  );
  const side_menu_slot = create_slot(
    side_menu_slot_template,
    ctx,
    /*$$scope*/
    ctx[3],
    get_side_menu_slot_context
  );
  const footer_slot_template = (
    /*#slots*/
    ctx[4].footer
  );
  const footer_slot = create_slot(
    footer_slot_template,
    ctx,
    /*$$scope*/
    ctx[3],
    get_footer_slot_context$1
  );
  return {
    c() {
      div = element("div");
      header = element("header");
      if (header_slot) header_slot.c();
      t0 = space();
      section = element("section");
      nav0 = element("nav");
      if (nav_slot) nav_slot.c();
      t1 = space();
      main = element("main");
      if (default_slot) default_slot.c();
      t2 = space();
      nav1 = element("nav");
      if (sidebar_slot) sidebar_slot.c();
      t3 = space();
      if (side_menu_slot) side_menu_slot.c();
      t4 = space();
      footer = element("footer");
      if (footer_slot) footer_slot.c();
      attr(header, "class", "header svelte-q0l82d");
      attr(nav0, "class", "nav svelte-q0l82d");
      attr(main, "class", "svelte-q0l82d");
      attr(nav1, "class", "nav side-menu svelte-q0l82d");
      attr(section, "class", "content svelte-q0l82d");
      attr(footer, "class", "footer svelte-q0l82d");
      attr(div, "class", "page svelte-q0l82d");
      attr(div, "style", div_style_value = `
    --max-content-width: ${/*maxcontentwidth*/
      ctx[2] || "100%"};
    --nav-column-width: ${/*leftcolumnwidth*/
      ctx[0] || "256px"};
    --side-menu-column-width: ${/*rightcolumnwidth*/
      ctx[1] || "256px"}
  `);
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, header);
      if (header_slot) {
        header_slot.m(header, null);
      }
      append(div, t0);
      append(div, section);
      append(section, nav0);
      if (nav_slot) {
        nav_slot.m(nav0, null);
      }
      append(section, t1);
      append(section, main);
      if (default_slot) {
        default_slot.m(main, null);
      }
      append(section, t2);
      append(section, nav1);
      if (sidebar_slot) {
        sidebar_slot.m(nav1, null);
      }
      append(nav1, t3);
      if (side_menu_slot) {
        side_menu_slot.m(nav1, null);
      }
      append(div, t4);
      append(div, footer);
      if (footer_slot) {
        footer_slot.m(footer, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (header_slot) {
        if (header_slot.p && (!current || dirty & /*$$scope*/
        8)) {
          update_slot_base(
            header_slot,
            header_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[3],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[3]
            ) : get_slot_changes(
              header_slot_template,
              /*$$scope*/
              ctx2[3],
              dirty,
              get_header_slot_changes$1
            ),
            get_header_slot_context$1
          );
        }
      }
      if (nav_slot) {
        if (nav_slot.p && (!current || dirty & /*$$scope*/
        8)) {
          update_slot_base(
            nav_slot,
            nav_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[3],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[3]
            ) : get_slot_changes(
              nav_slot_template,
              /*$$scope*/
              ctx2[3],
              dirty,
              get_nav_slot_changes$1
            ),
            get_nav_slot_context$1
          );
        }
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        8)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[3],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[3]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[3],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (sidebar_slot) {
        if (sidebar_slot.p && (!current || dirty & /*$$scope*/
        8)) {
          update_slot_base(
            sidebar_slot,
            sidebar_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[3],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[3]
            ) : get_slot_changes(
              sidebar_slot_template,
              /*$$scope*/
              ctx2[3],
              dirty,
              get_sidebar_slot_changes
            ),
            get_sidebar_slot_context
          );
        }
      }
      if (side_menu_slot) {
        if (side_menu_slot.p && (!current || dirty & /*$$scope*/
        8)) {
          update_slot_base(
            side_menu_slot,
            side_menu_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[3],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[3]
            ) : get_slot_changes(
              side_menu_slot_template,
              /*$$scope*/
              ctx2[3],
              dirty,
              get_side_menu_slot_changes
            ),
            get_side_menu_slot_context
          );
        }
      }
      if (footer_slot) {
        if (footer_slot.p && (!current || dirty & /*$$scope*/
        8)) {
          update_slot_base(
            footer_slot,
            footer_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[3],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[3]
            ) : get_slot_changes(
              footer_slot_template,
              /*$$scope*/
              ctx2[3],
              dirty,
              get_footer_slot_changes$1
            ),
            get_footer_slot_context$1
          );
        }
      }
      if (!current || dirty & /*maxcontentwidth, leftcolumnwidth, rightcolumnwidth*/
      7 && div_style_value !== (div_style_value = `
    --max-content-width: ${/*maxcontentwidth*/
      ctx2[2] || "100%"};
    --nav-column-width: ${/*leftcolumnwidth*/
      ctx2[0] || "256px"};
    --side-menu-column-width: ${/*rightcolumnwidth*/
      ctx2[1] || "256px"}
  `)) {
        attr(div, "style", div_style_value);
      }
    },
    i(local) {
      if (current) return;
      transition_in(header_slot, local);
      transition_in(nav_slot, local);
      transition_in(default_slot, local);
      transition_in(sidebar_slot, local);
      transition_in(side_menu_slot, local);
      transition_in(footer_slot, local);
      current = true;
    },
    o(local) {
      transition_out(header_slot, local);
      transition_out(nav_slot, local);
      transition_out(default_slot, local);
      transition_out(sidebar_slot, local);
      transition_out(side_menu_slot, local);
      transition_out(footer_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (header_slot) header_slot.d(detaching);
      if (nav_slot) nav_slot.d(detaching);
      if (default_slot) default_slot.d(detaching);
      if (sidebar_slot) sidebar_slot.d(detaching);
      if (side_menu_slot) side_menu_slot.d(detaching);
      if (footer_slot) footer_slot.d(detaching);
    }
  };
}
function instance$2($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { leftcolumnwidth } = $$props;
  let { rightcolumnwidth } = $$props;
  let { maxcontentwidth } = $$props;
  $$self.$$set = ($$props2) => {
    if ("leftcolumnwidth" in $$props2) $$invalidate(0, leftcolumnwidth = $$props2.leftcolumnwidth);
    if ("rightcolumnwidth" in $$props2) $$invalidate(1, rightcolumnwidth = $$props2.rightcolumnwidth);
    if ("maxcontentwidth" in $$props2) $$invalidate(2, maxcontentwidth = $$props2.maxcontentwidth);
    if ("$$scope" in $$props2) $$invalidate(3, $$scope = $$props2.$$scope);
  };
  return [leftcolumnwidth, rightcolumnwidth, maxcontentwidth, $$scope, slots];
}
class ThreeColumnLayout extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$2,
      create_fragment$2,
      safe_not_equal,
      {
        leftcolumnwidth: 0,
        rightcolumnwidth: 1,
        maxcontentwidth: 2
      },
      add_css$2
    );
  }
  get leftcolumnwidth() {
    return this.$$.ctx[0];
  }
  set leftcolumnwidth(leftcolumnwidth) {
    this.$$set({ leftcolumnwidth });
    flush();
  }
  get rightcolumnwidth() {
    return this.$$.ctx[1];
  }
  set rightcolumnwidth(rightcolumnwidth) {
    this.$$set({ rightcolumnwidth });
    flush();
  }
  get maxcontentwidth() {
    return this.$$.ctx[2];
  }
  set maxcontentwidth(maxcontentwidth) {
    this.$$set({ maxcontentwidth });
    flush();
  }
}
customElements.define("goa-three-column-layout", create_custom_element(ThreeColumnLayout, { "leftcolumnwidth": {}, "rightcolumnwidth": {}, "maxcontentwidth": {} }, ["header", "nav", "default", "sidebar", "side-menu", "footer"], [], true));
const { window: window_1 } = globals;
function add_css$1(target) {
  append_styles(target, "svelte-1rmmbyy", ':host{--goa-tooltip-color-bg:var(--goa-color-greyscale-700);--goa-tooltip-border-radius:var(--goa-border-radius-m);--goa-tooltip-padding:6px var(--goa-space-m) 10px var(--goa-space-m);--goa-tooltip-text-size:var(--goa-typography-body-m);--goa-tooltip-color-text:var(--goa-color-text-light);--goa-tootip-max-width:400px;--goa-tooltip-gap:var(--goa-space-2xs);--goa-tooltip-border-focus:var(--goa-border-width-l) solid var(--goa-color-interactive-focus);box-sizing:border-box;font-family:var(--goa-font-family-sans)}.tooltip.svelte-1rmmbyy.svelte-1rmmbyy{position:relative;display:inline-flex;justify-content:center;align-items:center}.tooltip.svelte-1rmmbyy.svelte-1rmmbyy:focus-visible{outline:var(--goa-tooltip-border-focus);outline-offset:-4px;border-radius:8px}.tooltip-text.svelte-1rmmbyy.svelte-1rmmbyy{visibility:hidden;font:var(--goa-tooltip-text-size);background-color:var(--goa-tooltip-color-bg);color:var(--goa-tooltip-color-text);text-align:center;border-radius:var(--goa-tooltip-border-radius);position:absolute;z-index:2;opacity:0;transition:opacity 0.3s;padding:var(--goa-tooltip-padding);text-align:left;white-space:nowrap;display:flex;flex-direction:column}.tooltip-target.svelte-1rmmbyy.svelte-1rmmbyy{margin:var(--goa-tooltip-gap);height:auto;display:flex}.tooltip-text.bottom.svelte-1rmmbyy.svelte-1rmmbyy{top:calc(100% + 10px)}.tooltip-text.top.svelte-1rmmbyy.svelte-1rmmbyy{bottom:calc(100% + 10px)}.tooltip-text.right.svelte-1rmmbyy.svelte-1rmmbyy{left:calc(100% + 10px)}.tooltip-text.left.svelte-1rmmbyy.svelte-1rmmbyy{right:calc(100% + 10px)}.tooltip.svelte-1rmmbyy:hover .tooltip-text.svelte-1rmmbyy,.tooltip.svelte-1rmmbyy:focus .tooltip-text.svelte-1rmmbyy{opacity:1}.tooltip-text.bottom.svelte-1rmmbyy.svelte-1rmmbyy::before,.tooltip-text.top.svelte-1rmmbyy.svelte-1rmmbyy::before,.tooltip-text.left.svelte-1rmmbyy.svelte-1rmmbyy::before,.tooltip-text.right.svelte-1rmmbyy.svelte-1rmmbyy::before{content:"";position:absolute;border-style:solid}.tooltip-text.bottom.svelte-1rmmbyy.svelte-1rmmbyy::before{top:-9px;left:50%;border-width:0 10px 10px 10px;transform:translateX(-50%);border-color:transparent transparent var(--goa-tooltip-color-bg)\n      transparent}.tooltip-text.top.svelte-1rmmbyy.svelte-1rmmbyy::before{bottom:-9px;left:50%;transform:translateX(-50%);border-width:10px 10px 0 10px;border-color:var(--goa-tooltip-color-bg) transparent transparent\n      transparent}.tooltip-text.left.svelte-1rmmbyy.svelte-1rmmbyy::before{top:50%;right:-9px;transform:translateY(-50%);border-width:10px 0 10px 10px;border-color:transparent transparent transparent\n      var(--goa-tooltip-color-bg)}.tooltip-text.right.svelte-1rmmbyy.svelte-1rmmbyy::before{top:50%;left:-9px;transform:translateY(-50%);border-width:10px 10px 10px 0;border-style:solid;border-color:transparent var(--goa-tooltip-color-bg) transparent\n      transparent}.tooltip-text.bottom.align-left.svelte-1rmmbyy.svelte-1rmmbyy::before,.tooltip-text.top.align-left.svelte-1rmmbyy.svelte-1rmmbyy::before{left:calc(100% - (var(--target-width) + 1rem))}.tooltip-text.bottom.align-right.svelte-1rmmbyy.svelte-1rmmbyy::before,.tooltip-text.top.align-right.svelte-1rmmbyy.svelte-1rmmbyy::before{left:calc(var(--target-width) + 1rem)}.tooltip.align-right.svelte-1rmmbyy.svelte-1rmmbyy{justify-content:flex-start}.tooltip.align-left.svelte-1rmmbyy.svelte-1rmmbyy{justify-content:flex-end}.tooltip-text.align-right.svelte-1rmmbyy.svelte-1rmmbyy{left:0;margin-left:-1rem}.tooltip-text.align-left.svelte-1rmmbyy.svelte-1rmmbyy{right:0;margin-right:-1rem}');
}
function create_fragment$1(ctx) {
  let div1;
  let div0;
  let t0;
  let span;
  let t1;
  let span_id_value;
  let span_class_value;
  let div1_class_value;
  let div1_aria_describedby_value;
  let div1_style_value;
  let current;
  let mounted;
  let dispose;
  add_render_callback(
    /*onwindowresize*/
    ctx[18]
  );
  const default_slot_template = (
    /*#slots*/
    ctx[17].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[16],
    null
  );
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      if (default_slot) default_slot.c();
      t0 = space();
      span = element("span");
      t1 = text(
        /*content*/
        ctx[2]
      );
      attr(div0, "class", "tooltip-target svelte-1rmmbyy");
      attr(span, "id", span_id_value = /*_tooltipInstanceId*/
      ctx[13] + "-tooltip");
      attr(span, "class", span_class_value = "tooltip-text " + /*position*/
      ctx[0] + " align-" + /*halign*/
      ctx[1] + " svelte-1rmmbyy");
      set_style(
        span,
        "visibility",
        /*_tooltipVisible*/
        ctx[11] ? "visible" : "hidden"
      );
      attr(div1, "class", div1_class_value = "tooltip align-" + /*halign*/
      ctx[1] + " svelte-1rmmbyy");
      attr(
        div1,
        "data-testid",
        /*testid*/
        ctx[3]
      );
      attr(div1, "role", "tooltip");
      attr(div1, "aria-describedby", div1_aria_describedby_value = /*_tooltipInstanceId*/
      ctx[13] + "-tooltip");
      attr(div1, "tabindex", "0");
      attr(div1, "style", div1_style_value = calculateMargin(
        /*mt*/
        ctx[4],
        /*mr*/
        ctx[5],
        /*mb*/
        ctx[6],
        /*ml*/
        ctx[7]
      ));
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      if (default_slot) {
        default_slot.m(div0, null);
      }
      append(div1, t0);
      append(div1, span);
      append(span, t1);
      ctx[19](span);
      ctx[20](div1);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            window_1,
            "resize",
            /*onwindowresize*/
            ctx[18]
          ),
          listen(
            div1,
            "mouseenter",
            /*mouseenter_handler*/
            ctx[21]
          ),
          listen(
            div1,
            "mouseleave",
            /*hideTooltip*/
            ctx[15]
          ),
          listen(
            div1,
            "focus",
            /*focus_handler*/
            ctx[22]
          ),
          listen(
            div1,
            "blur",
            /*hideTooltip*/
            ctx[15]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        65536)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[16],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[16]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[16],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*content*/
      4) set_data(
        t1,
        /*content*/
        ctx2[2]
      );
      if (!current || dirty & /*_tooltipInstanceId*/
      8192 && span_id_value !== (span_id_value = /*_tooltipInstanceId*/
      ctx2[13] + "-tooltip")) {
        attr(span, "id", span_id_value);
      }
      if (!current || dirty & /*position, halign*/
      3 && span_class_value !== (span_class_value = "tooltip-text " + /*position*/
      ctx2[0] + " align-" + /*halign*/
      ctx2[1] + " svelte-1rmmbyy")) {
        attr(span, "class", span_class_value);
      }
      if (!current || dirty & /*_tooltipVisible*/
      2048) {
        set_style(
          span,
          "visibility",
          /*_tooltipVisible*/
          ctx2[11] ? "visible" : "hidden"
        );
      }
      if (!current || dirty & /*halign*/
      2 && div1_class_value !== (div1_class_value = "tooltip align-" + /*halign*/
      ctx2[1] + " svelte-1rmmbyy")) {
        attr(div1, "class", div1_class_value);
      }
      if (!current || dirty & /*testid*/
      8) {
        attr(
          div1,
          "data-testid",
          /*testid*/
          ctx2[3]
        );
      }
      if (!current || dirty & /*_tooltipInstanceId*/
      8192 && div1_aria_describedby_value !== (div1_aria_describedby_value = /*_tooltipInstanceId*/
      ctx2[13] + "-tooltip")) {
        attr(div1, "aria-describedby", div1_aria_describedby_value);
      }
      if (!current || dirty & /*mt, mr, mb, ml*/
      240 && div1_style_value !== (div1_style_value = calculateMargin(
        /*mt*/
        ctx2[4],
        /*mr*/
        ctx2[5],
        /*mb*/
        ctx2[6],
        /*ml*/
        ctx2[7]
      ))) {
        attr(div1, "style", div1_style_value);
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      if (default_slot) default_slot.d(detaching);
      ctx[19](null);
      ctx[20](null);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$1($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { content = "" } = $$props;
  let { testid = "" } = $$props;
  let { position = "top" } = $$props;
  let { halign = "center" } = $$props;
  let { mt = null } = $$props;
  let { mr = null } = $$props;
  let { mb: mb2 = null } = $$props;
  let { ml: ml2 = null } = $$props;
  const [Positions, validatePosition] = typeValidator("Tooltip positions", ["top", "bottom", "left", "right"], false);
  const [Alignment, validateAlignment] = typeValidator("Tooltip alignment", ["left", "right", "center"], false);
  const validator = (position2, align) => {
    if (position2 === "left" || position2 === "right") {
      if (align !== "center") {
        console.error(`[${align}] is an invalid option for position ${position2}`);
      }
    }
  };
  let _screenSize = 0;
  let _rootEl;
  let _tooltipEl;
  let _initialPosition;
  let _tooltipVisible = false;
  let _showTooltipTimeout;
  let _hideTooltipTimeout;
  let _tooltipInstanceId;
  onMount(() => {
    setTimeout(
      () => {
        validatePosition(position);
        validateAlignment(halign);
        validator(position, halign);
      },
      1
    );
    _initialPosition = position;
    $$invalidate(13, _tooltipInstanceId = Math.random().toString(36));
    window.addEventListener("resize", checkAndAdjustPosition);
    checkAndAdjustPosition();
  });
  onDestroy(() => {
    window.removeEventListener("resize", checkAndAdjustPosition);
    clearTimeout(_showTooltipTimeout);
    clearTimeout(_hideTooltipTimeout);
  });
  const showTooltip = () => {
    _showTooltipTimeout = setTimeout(
      () => {
        $$invalidate(11, _tooltipVisible = true);
        checkAndAdjustPosition();
      },
      300
    );
  };
  const hideTooltip = () => {
    clearTimeout(_showTooltipTimeout);
    $$invalidate(12, _hideTooltipTimeout = setTimeout(
      () => {
        $$invalidate(11, _tooltipVisible = false);
        $$invalidate(0, position = _initialPosition);
      },
      500
    ));
  };
  async function checkAndAdjustPosition() {
    await tick();
    if (!_tooltipEl || !_rootEl) {
      return;
    }
    const tooltipRect = _tooltipEl.getBoundingClientRect();
    const rootRect = _rootEl.getBoundingClientRect();
    const spaceTop = rootRect.top;
    const spaceBottom = window.innerHeight - rootRect.bottom;
    const spaceLeft = rootRect.left;
    const spaceRight = window.innerWidth - rootRect.right;
    const newWidth = Math.min(_screenSize * 0.8, 400, tooltipRect.width, Math.max(spaceLeft, spaceRight) - 10);
    const shouldWrapContent = newWidth > rootRect.width || newWidth > spaceLeft || newWidth > spaceRight;
    $$invalidate(9, _tooltipEl.style.width = `${newWidth - 32}px`, _tooltipEl);
    if (shouldWrapContent) {
      $$invalidate(9, _tooltipEl.style.whiteSpace = "normal", _tooltipEl);
    } else {
      $$invalidate(9, _tooltipEl.style.whiteSpace = "nowrap", _tooltipEl);
    }
    let newPosition = position;
    let newAlign = halign;
    if (position === "bottom" && tooltipRect.height > spaceBottom) {
      newPosition = "top";
    } else if (position === "top" && tooltipRect.height > spaceTop) {
      newPosition = "bottom";
    }
    if (position === "right" && tooltipRect.width > spaceRight) {
      newPosition = "left";
    } else if (position === "left" && tooltipRect.width > spaceLeft) {
      newPosition = "right";
    }
    if (halign === "right" && tooltipRect.width > spaceRight) {
      newAlign = "left";
    } else if (halign === "left" && tooltipRect.width > spaceLeft) {
      newAlign = "right";
    } else if (halign === "center" && (position === "top" || position === "bottom") && (tooltipRect.width / 2 > spaceLeft || tooltipRect.width / 2 > spaceRight)) {
      newAlign = spaceLeft > spaceRight ? "left" : "right";
    }
    $$invalidate(0, position = newPosition);
    $$invalidate(1, halign = newAlign);
  }
  function onwindowresize() {
    $$invalidate(10, _screenSize = window_1.innerWidth);
  }
  function span_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _tooltipEl = $$value;
      $$invalidate(9, _tooltipEl);
    });
  }
  function div1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      _rootEl = $$value;
      $$invalidate(8, _rootEl);
    });
  }
  const mouseenter_handler = () => {
    clearTimeout(_hideTooltipTimeout);
    showTooltip();
  };
  const focus_handler = () => {
    clearTimeout(_hideTooltipTimeout);
    showTooltip();
  };
  $$self.$$set = ($$props2) => {
    if ("content" in $$props2) $$invalidate(2, content = $$props2.content);
    if ("testid" in $$props2) $$invalidate(3, testid = $$props2.testid);
    if ("position" in $$props2) $$invalidate(0, position = $$props2.position);
    if ("halign" in $$props2) $$invalidate(1, halign = $$props2.halign);
    if ("mt" in $$props2) $$invalidate(4, mt = $$props2.mt);
    if ("mr" in $$props2) $$invalidate(5, mr = $$props2.mr);
    if ("mb" in $$props2) $$invalidate(6, mb2 = $$props2.mb);
    if ("ml" in $$props2) $$invalidate(7, ml2 = $$props2.ml);
    if ("$$scope" in $$props2) $$invalidate(16, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*_rootEl, _tooltipEl*/
    768) {
      {
        if (_rootEl && _tooltipEl) {
          _rootEl.style.setProperty("--target-width", `${_rootEl.getBoundingClientRect().width / 2}px`);
        }
      }
    }
    if ($$self.$$.dirty & /*content*/
    4) {
      {
        content && checkAndAdjustPosition();
      }
    }
  };
  return [
    position,
    halign,
    content,
    testid,
    mt,
    mr,
    mb2,
    ml2,
    _rootEl,
    _tooltipEl,
    _screenSize,
    _tooltipVisible,
    _hideTooltipTimeout,
    _tooltipInstanceId,
    showTooltip,
    hideTooltip,
    $$scope,
    slots,
    onwindowresize,
    span_binding,
    div1_binding,
    mouseenter_handler,
    focus_handler
  ];
}
class Tooltip extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$1,
      create_fragment$1,
      safe_not_equal,
      {
        content: 2,
        testid: 3,
        position: 0,
        halign: 1,
        mt: 4,
        mr: 5,
        mb: 6,
        ml: 7
      },
      add_css$1
    );
  }
  get content() {
    return this.$$.ctx[2];
  }
  set content(content) {
    this.$$set({ content });
    flush();
  }
  get testid() {
    return this.$$.ctx[3];
  }
  set testid(testid) {
    this.$$set({ testid });
    flush();
  }
  get position() {
    return this.$$.ctx[0];
  }
  set position(position) {
    this.$$set({ position });
    flush();
  }
  get halign() {
    return this.$$.ctx[1];
  }
  set halign(halign) {
    this.$$set({ halign });
    flush();
  }
  get mt() {
    return this.$$.ctx[4];
  }
  set mt(mt) {
    this.$$set({ mt });
    flush();
  }
  get mr() {
    return this.$$.ctx[5];
  }
  set mr(mr) {
    this.$$set({ mr });
    flush();
  }
  get mb() {
    return this.$$.ctx[6];
  }
  set mb(mb2) {
    this.$$set({ mb: mb2 });
    flush();
  }
  get ml() {
    return this.$$.ctx[7];
  }
  set ml(ml2) {
    this.$$set({ ml: ml2 });
    flush();
  }
}
customElements.define("goa-tooltip", create_custom_element(Tooltip, { "content": {}, "testid": {}, "position": {}, "halign": {}, "mt": {}, "mr": {}, "mb": {}, "ml": {} }, ["default"], [], true));
function add_css(target) {
  append_styles(target, "svelte-luwgzc", ".svelte-luwgzc.svelte-luwgzc{box-sizing:border-box}.page.svelte-luwgzc.svelte-luwgzc{min-height:100vh;display:flex;flex-direction:column}.content.svelte-luwgzc.svelte-luwgzc{flex:1 1 auto;display:flex;flex-direction:column;gap:2rem}.header.svelte-luwgzc.svelte-luwgzc,.footer.svelte-luwgzc.svelte-luwgzc{flex:0 0 auto}main.svelte-luwgzc.svelte-luwgzc{flex:1 1 auto;padding:0 1rem}.nav.svelte-luwgzc.svelte-luwgzc{padding:0;transition:transform 200ms ease-in-out;background-color:var(--goa-color-greyscale-white)}.nav.svelte-luwgzc>.svelte-luwgzc{display:block;padding:0.5rem 0}@media not (max-width: 623px){.page.svelte-luwgzc.svelte-luwgzc{gap:2rem}.content.svelte-luwgzc.svelte-luwgzc{display:flex;flex-direction:row;justify-content:center;width:min(var(--max-content-width), 100vw);margin:0 auto}.nav.svelte-luwgzc.svelte-luwgzc{padding:0 2rem;transform:translateX(0);flex:0 0 var(--nav-column-width)}main.svelte-luwgzc.svelte-luwgzc{padding-right:2rem}}@media(min-width: 1024px){main.svelte-luwgzc.svelte-luwgzc{padding-right:4.5rem}}");
}
const get_footer_slot_changes = (dirty) => ({});
const get_footer_slot_context = (ctx) => ({});
const get_nav_slot_changes = (dirty) => ({});
const get_nav_slot_context = (ctx) => ({});
const get_header_slot_changes = (dirty) => ({});
const get_header_slot_context = (ctx) => ({});
function create_fragment(ctx) {
  let div;
  let header;
  let t0;
  let section;
  let nav;
  let t1;
  let main;
  let t2;
  let footer;
  let div_style_value;
  let current;
  const header_slot_template = (
    /*#slots*/
    ctx[3].header
  );
  const header_slot = create_slot(
    header_slot_template,
    ctx,
    /*$$scope*/
    ctx[2],
    get_header_slot_context
  );
  const nav_slot_template = (
    /*#slots*/
    ctx[3].nav
  );
  const nav_slot = create_slot(
    nav_slot_template,
    ctx,
    /*$$scope*/
    ctx[2],
    get_nav_slot_context
  );
  const default_slot_template = (
    /*#slots*/
    ctx[3].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[2],
    null
  );
  const footer_slot_template = (
    /*#slots*/
    ctx[3].footer
  );
  const footer_slot = create_slot(
    footer_slot_template,
    ctx,
    /*$$scope*/
    ctx[2],
    get_footer_slot_context
  );
  return {
    c() {
      div = element("div");
      header = element("header");
      if (header_slot) header_slot.c();
      t0 = space();
      section = element("section");
      nav = element("nav");
      if (nav_slot) nav_slot.c();
      t1 = space();
      main = element("main");
      if (default_slot) default_slot.c();
      t2 = space();
      footer = element("footer");
      if (footer_slot) footer_slot.c();
      attr(header, "class", "header svelte-luwgzc");
      attr(nav, "class", "nav svelte-luwgzc");
      attr(main, "class", "svelte-luwgzc");
      attr(section, "class", "content svelte-luwgzc");
      attr(footer, "class", "footer svelte-luwgzc");
      attr(div, "class", "page svelte-luwgzc");
      attr(div, "style", div_style_value = `
    --max-content-width: ${/*maxcontentwidth*/
      ctx[1] || "100%"};
    --nav-column-width: ${/*navcolumnwidth*/
      ctx[0] || "256px"};
  `);
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, header);
      if (header_slot) {
        header_slot.m(header, null);
      }
      append(div, t0);
      append(div, section);
      append(section, nav);
      if (nav_slot) {
        nav_slot.m(nav, null);
      }
      append(section, t1);
      append(section, main);
      if (default_slot) {
        default_slot.m(main, null);
      }
      append(div, t2);
      append(div, footer);
      if (footer_slot) {
        footer_slot.m(footer, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (header_slot) {
        if (header_slot.p && (!current || dirty & /*$$scope*/
        4)) {
          update_slot_base(
            header_slot,
            header_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[2],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[2]
            ) : get_slot_changes(
              header_slot_template,
              /*$$scope*/
              ctx2[2],
              dirty,
              get_header_slot_changes
            ),
            get_header_slot_context
          );
        }
      }
      if (nav_slot) {
        if (nav_slot.p && (!current || dirty & /*$$scope*/
        4)) {
          update_slot_base(
            nav_slot,
            nav_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[2],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[2]
            ) : get_slot_changes(
              nav_slot_template,
              /*$$scope*/
              ctx2[2],
              dirty,
              get_nav_slot_changes
            ),
            get_nav_slot_context
          );
        }
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        4)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[2],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[2]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[2],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (footer_slot) {
        if (footer_slot.p && (!current || dirty & /*$$scope*/
        4)) {
          update_slot_base(
            footer_slot,
            footer_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[2],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[2]
            ) : get_slot_changes(
              footer_slot_template,
              /*$$scope*/
              ctx2[2],
              dirty,
              get_footer_slot_changes
            ),
            get_footer_slot_context
          );
        }
      }
      if (!current || dirty & /*maxcontentwidth, navcolumnwidth*/
      3 && div_style_value !== (div_style_value = `
    --max-content-width: ${/*maxcontentwidth*/
      ctx2[1] || "100%"};
    --nav-column-width: ${/*navcolumnwidth*/
      ctx2[0] || "256px"};
  `)) {
        attr(div, "style", div_style_value);
      }
    },
    i(local) {
      if (current) return;
      transition_in(header_slot, local);
      transition_in(nav_slot, local);
      transition_in(default_slot, local);
      transition_in(footer_slot, local);
      current = true;
    },
    o(local) {
      transition_out(header_slot, local);
      transition_out(nav_slot, local);
      transition_out(default_slot, local);
      transition_out(footer_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (header_slot) header_slot.d(detaching);
      if (nav_slot) nav_slot.d(detaching);
      if (default_slot) default_slot.d(detaching);
      if (footer_slot) footer_slot.d(detaching);
    }
  };
}
function instance($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { navcolumnwidth = "" } = $$props;
  let { maxcontentwidth = "" } = $$props;
  $$self.$$set = ($$props2) => {
    if ("navcolumnwidth" in $$props2) $$invalidate(0, navcolumnwidth = $$props2.navcolumnwidth);
    if ("maxcontentwidth" in $$props2) $$invalidate(1, maxcontentwidth = $$props2.maxcontentwidth);
    if ("$$scope" in $$props2) $$invalidate(2, $$scope = $$props2.$$scope);
  };
  return [navcolumnwidth, maxcontentwidth, $$scope, slots];
}
class TwoColumnLayout extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance, create_fragment, safe_not_equal, { navcolumnwidth: 0, maxcontentwidth: 1 }, add_css);
  }
  get navcolumnwidth() {
    return this.$$.ctx[0];
  }
  set navcolumnwidth(navcolumnwidth) {
    this.$$set({ navcolumnwidth });
    flush();
  }
  get maxcontentwidth() {
    return this.$$.ctx[1];
  }
  set maxcontentwidth(maxcontentwidth) {
    this.$$set({ maxcontentwidth });
    flush();
  }
}
customElements.define("goa-two-column-layout", create_custom_element(TwoColumnLayout, { "navcolumnwidth": {}, "maxcontentwidth": {} }, ["header", "nav", "default", "footer"], [], true));
function GoAAppHeader({
  heading,
  url,
  maxContentWidth,
  fullMenuBreakpoint,
  testId,
  children: children2
}) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "goa-app-header",
    {
      heading,
      url,
      fullmenubreakpoint: fullMenuBreakpoint,
      maxcontentwidth: maxContentWidth,
      testid: testId,
      children: children2
    }
  );
}
function GoAAppHeaderMenu(props) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "goa-app-header-menu",
    {
      heading: props.heading,
      leadingicon: props.leadingIcon,
      testid: props.testId,
      children: props.children
    }
  );
}
function GoABadge({
  type,
  content,
  icon,
  testId,
  mt,
  mr,
  mb: mb2,
  ml: ml2,
  ariaLabel
}) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "goa-badge",
    {
      type,
      content,
      icon,
      testid: testId,
      arialabel: ariaLabel,
      mt,
      mr,
      mb: mb2,
      ml: ml2
    }
  );
}
function GoABlock(props) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "goa-block",
    {
      gap: props.gap,
      direction: props.direction,
      alignment: props.alignment,
      mt: props.mt,
      mr: props.mr,
      mb: props.mb,
      ml: props.ml,
      testid: props.testId,
      children: props.children
    }
  );
}
function GoAButton({
  disabled = false,
  type = "primary",
  size,
  variant,
  leadingIcon,
  trailingIcon,
  testId,
  children: children2,
  onClick,
  mt,
  mr,
  mb: mb2,
  ml: ml2
}) {
  const el2 = reactExports.useRef(null);
  reactExports.useEffect(() => {
    if (!el2.current) {
      return;
    }
    if (!onClick) {
      return;
    }
    const current = el2.current;
    const listener = () => {
      onClick();
    };
    current.addEventListener("_click", listener);
    return () => {
      current.removeEventListener("_click", listener);
    };
  }, [el2, onClick]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "goa-button",
    {
      ref: el2,
      type,
      size,
      variant,
      disabled,
      leadingicon: leadingIcon,
      trailingicon: trailingIcon,
      testid: testId,
      mt,
      mr,
      mb: mb2,
      ml: ml2,
      children: children2
    }
  );
}
function GoAButtonGroup({
  alignment,
  gap,
  testId,
  children: children2,
  mt,
  mr,
  mb: mb2,
  ml: ml2
}) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "goa-button-group",
    {
      alignment,
      gap,
      mt,
      mr,
      mb: mb2,
      ml: ml2,
      testid: testId,
      children: children2
    }
  );
}
function GoACheckbox({
  id: id2,
  name,
  testId,
  error,
  disabled,
  checked,
  value,
  text: text2,
  description,
  maxWidth,
  children: children2,
  onChange: onChange2,
  ariaLabel,
  mt,
  mr,
  mb: mb2,
  ml: ml2
}) {
  const el2 = reactExports.useRef(null);
  reactExports.useEffect(() => {
    if (!el2.current) {
      return;
    }
    const current = el2.current;
    const listener = (e) => {
      const ce2 = e;
      onChange2 == null ? void 0 : onChange2(name, ce2.detail.checked, ce2.detail.value);
    };
    current.addEventListener("_change", listener);
    return () => {
      current.removeEventListener("_change", listener);
    };
  }, [name, onChange2]);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    "goa-checkbox",
    {
      testid: testId,
      ref: el2,
      id: id2,
      name,
      error,
      checked: checked || false,
      disabled,
      text: text2,
      value,
      arialabel: ariaLabel,
      description: typeof description === "string" ? description : void 0,
      maxwidth: maxWidth,
      mt,
      mr,
      mb: mb2,
      ml: ml2,
      children: [
        description && typeof description !== "string" && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { slot: "description", children: description }),
        children2
      ]
    }
  );
}
const GoACircularProgress = ({
  visible,
  message: message2,
  progress,
  variant,
  size,
  testId
}) => {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "goa-circular-progress",
    {
      visible: visible ? "true" : "false",
      message: message2,
      progress,
      variant,
      size,
      testid: testId
    }
  );
};
function GoAContainer({
  accent,
  heading,
  title,
  padding,
  children: children2,
  actions,
  type,
  width,
  maxWidth,
  mt,
  mr,
  mb: mb2,
  ml: ml2,
  testId
}) {
  const headingContent = heading || title;
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    "goa-container",
    {
      type,
      padding,
      accent,
      width,
      maxwidth: maxWidth,
      mt,
      mr,
      mb: mb2,
      ml: ml2,
      testid: testId,
      children: [
        headingContent && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { slot: "title", children: headingContent }),
        children2,
        actions && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { slot: "actions", children: actions })
      ]
    }
  );
}
function GoADatePicker({
  name,
  value,
  error,
  min,
  max,
  testId,
  disabled,
  mt,
  mr,
  mb: mb2,
  ml: ml2,
  relative,
  onChange: onChange2
}) {
  const ref = reactExports.useRef(null);
  reactExports.useEffect(() => {
    if (!ref.current) {
      return;
    }
    const current = ref.current;
    const handleChange = (e) => {
      const newValue = e.detail.value;
      onChange2 == null ? void 0 : onChange2(name || "", newValue ? new Date(newValue) : void 0);
    };
    current.addEventListener("_change", handleChange);
    return () => {
      current.removeEventListener("_change", handleChange);
    };
  }, [onChange2]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "goa-date-picker",
    {
      ref,
      name,
      value: (value == null ? void 0 : value.toISOString()) || "",
      error,
      disabled,
      min: min == null ? void 0 : min.toISOString(),
      max: max == null ? void 0 : max.toISOString(),
      testid: testId,
      mt,
      mr,
      mb: mb2,
      ml: ml2,
      relative
    }
  );
}
function GoADetails(props) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "goa-details",
    {
      heading: props.heading,
      open: props.open,
      maxwidth: props.maxWidth,
      testid: props.testId,
      mt: props.mt,
      mr: props.mr,
      mb: props.mb,
      ml: props.ml,
      children: props.children
    }
  );
}
function GoADivider(props) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "goa-divider",
    {
      mt: props.mt,
      mr: props.mr,
      mb: props.mb,
      ml: props.ml,
      testid: props.testId
    }
  );
}
function stringify(value) {
  if (typeof value === "undefined") {
    return "";
  }
  if (typeof value === "string") {
    return value;
  }
  return JSON.stringify(value);
}
function GoADropdown(props) {
  const el2 = reactExports.useRef(null);
  reactExports.useEffect(() => {
    if (!el2.current) {
      return;
    }
    const current = el2.current;
    const handler = (e) => {
      var _a;
      const { name, value, values } = e.detail;
      (_a = props.onChange) == null ? void 0 : _a.call(props, name, props.multiselect ? values : value);
    };
    current.addEventListener("_change", handler);
    return () => {
      current.removeEventListener("_change", handler);
    };
  }, [el2, props]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "goa-dropdown",
    {
      ref: el2,
      name: props.name,
      value: stringify(props.value),
      arialabel: props.ariaLabel,
      arialabelledby: props.ariaLabelledBy,
      disabled: props.disabled,
      error: props.error,
      filterable: props.filterable,
      leadingicon: props.leadingIcon,
      maxheight: props.maxHeight,
      mb: props.mb,
      ml: props.ml,
      mr: props.mr,
      mt: props.mt,
      multiselect: props.multiselect,
      native: props.native,
      placeholder: props.placeholder,
      testid: props.testId,
      width: props.width,
      relative: props.relative,
      id: props.id,
      children: props.children
    }
  );
}
function GoADropdownItem({ value, label, filter, name, testId, mountType = "append" }) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "goa-dropdown-item",
    {
      "data-testid": testId,
      value,
      label,
      filter,
      name,
      mount: mountType
    }
  );
}
function GoAFileUploadInput({
  variant,
  accept,
  maxFileSize,
  testId,
  onSelectFile
}) {
  const el2 = reactExports.useRef(null);
  reactExports.useEffect(() => {
    if (!el2.current) return;
    const current = el2.current;
    const handler = (e) => {
      onSelectFile(e.detail.file);
    };
    current.addEventListener("_selectFile", handler);
    return () => {
      current.removeEventListener("_selectFile", handler);
    };
  }, [el2, onSelectFile]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "goa-file-upload-input",
    {
      ref: el2,
      variant,
      accept,
      maxfilesize: maxFileSize,
      testid: testId
    }
  );
}
function GoAAppFooter({
  maxContentWidth,
  children: children2,
  testId,
  url
}) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx("goa-app-footer", { maxcontentwidth: maxContentWidth, testid: testId, url, children: children2 });
}
function GoAAppFooterMetaSection({ testId, children: children2 }) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "goa-app-footer-meta-section",
    {
      testid: testId,
      slot: "meta",
      children: children2
    }
  );
}
function GoAAppFooterNavSection({
  heading,
  maxColumnCount = 1,
  testId,
  children: children2
}) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "goa-app-footer-nav-section",
    {
      slot: "nav",
      heading,
      maxcolumncount: maxColumnCount,
      testid: testId,
      children: children2
    }
  );
}
function GoAFormItem({
  children: children2,
  helpText,
  error,
  requirement,
  label,
  labelSize,
  maxWidth,
  mt,
  mr,
  mb: mb2,
  ml: ml2,
  testId,
  id: id2
}) {
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    "goa-form-item",
    {
      label,
      labelsize: labelSize,
      error: typeof error === "string" ? error : void 0,
      requirement,
      helptext: typeof helpText === "string" ? helpText : void 0,
      maxwidth: maxWidth,
      mt,
      mr,
      mb: mb2,
      ml: ml2,
      testid: testId,
      id: id2,
      children: [
        error && typeof error !== "string" && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { slot: "error", children: error }),
        helpText && typeof helpText !== "string" && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { slot: "helptext", children: helpText }),
        children2
      ]
    }
  );
}
function GoAFormStep(props) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx("goa-form-step", { text: props.text, status: props.status });
}
function GoAFormStepper({
  testId,
  step,
  mt,
  mb: mb2,
  ml: ml2,
  mr,
  onChange: onChange2,
  children: children2
}) {
  const ref = reactExports.useRef(null);
  reactExports.useEffect(() => {
    if (!ref.current) {
      return;
    }
    const current = ref.current;
    const changeListener = (e) => {
      const { step: step2 } = e.detail;
      onChange2 == null ? void 0 : onChange2(+step2);
    };
    current.addEventListener("_change", changeListener);
    return () => {
      current.removeEventListener("_change", changeListener);
    };
  }, [ref, onChange2]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "goa-form-stepper",
    {
      ref,
      testid: testId,
      step,
      mt,
      mr,
      mb: mb2,
      ml: ml2,
      children: children2
    }
  );
}
function GoAGrid({
  gap,
  minChildWidth,
  mt,
  mr,
  mb: mb2,
  ml: ml2,
  testId,
  children: children2
}) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "goa-grid",
    {
      gap,
      mt,
      minchildwidth: minChildWidth,
      mr,
      mb: mb2,
      ml: ml2,
      testid: testId,
      children: children2
    }
  );
}
function GoAHeroBanner({
  heading,
  backgroundUrl,
  minHeight,
  maxContentWidth,
  backgroundColor,
  textColor,
  children: children2,
  testId
}) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "goa-hero-banner",
    {
      heading,
      backgroundurl: backgroundUrl,
      minheight: minHeight,
      maxcontentwidth: maxContentWidth,
      backgroundcolor: backgroundColor,
      textcolor: textColor,
      testid: testId,
      children: children2
    }
  );
}
function GoAHeroBannerActions({
  children: children2
}) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { slot: "actions", children: children2 });
}
function GoAIconButton({
  icon,
  disabled,
  variant = "color",
  onClick,
  size = "medium",
  title,
  ariaLabel,
  testId,
  children: children2,
  mt,
  mr,
  mb: mb2,
  ml: ml2
}) {
  const ref = reactExports.useRef(null);
  reactExports.useEffect(() => {
    if (!ref.current) {
      return;
    }
    if (!onClick) {
      return;
    }
    const current = ref.current;
    const listener = () => {
      onClick();
    };
    current.addEventListener("_click", listener);
    return () => {
      current.removeEventListener("_click", listener);
    };
  }, [ref, onClick]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "goa-icon-button",
    {
      ref,
      icon,
      disabled,
      variant,
      size,
      title,
      arialabel: ariaLabel,
      mt,
      mr,
      mb: mb2,
      ml: ml2,
      testid: testId,
      children: children2
    }
  );
}
function GoAIcon({
  type,
  theme,
  size,
  inverted,
  fillColor,
  opacity,
  title,
  ariaLabel,
  mt,
  mr,
  mb: mb2,
  ml: ml2,
  testId
}) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "goa-icon",
    {
      type,
      theme,
      size,
      inverted,
      fillcolor: fillColor,
      opacity,
      title,
      arialabel: ariaLabel,
      mt,
      mr,
      mb: mb2,
      ml: ml2,
      testid: testId
    }
  );
}
function GoAInput({
  id: id2,
  debounce,
  name,
  type,
  autoCapitalize,
  leadingIcon,
  trailingIcon,
  variant = "goa",
  focused,
  disabled,
  readonly,
  value,
  placeholder,
  error,
  width,
  testId,
  min,
  max,
  step,
  prefix,
  suffix,
  ariaLabel,
  mt,
  mr,
  mb: mb2,
  ml: ml2,
  leadingContent,
  trailingContent,
  maxLength,
  onTrailingIconClick,
  onChange: onChange2,
  onFocus,
  onBlur,
  onKeyPress
}) {
  const ref = reactExports.useRef(null);
  reactExports.useEffect(() => {
    if (!ref.current) {
      return;
    }
    const current = ref.current;
    const changeListener = (e) => {
      const { name: name2, value: value2 } = e.detail;
      onChange2 == null ? void 0 : onChange2(name2, value2);
    };
    const clickListener = () => {
      onTrailingIconClick == null ? void 0 : onTrailingIconClick();
    };
    const focusListener = (e) => {
      const { name: name2, value: value2 } = e.detail;
      onFocus == null ? void 0 : onFocus(name2, value2);
    };
    const blurListener = (e) => {
      const { name: name2, value: value2 } = e.detail;
      onBlur == null ? void 0 : onBlur(name2, value2);
    };
    const keypressListener = (e) => {
      const { name: name2, value: value2, key } = e.detail;
      onKeyPress == null ? void 0 : onKeyPress(name2, value2, key);
    };
    current.addEventListener("_change", changeListener);
    current.addEventListener("_trailingIconClick", clickListener);
    current.addEventListener("_focus", focusListener);
    current.addEventListener("_blur", blurListener);
    current.addEventListener("_keyPress", keypressListener);
    return () => {
      current.removeEventListener("_change", changeListener);
      current.removeEventListener("_trailingIconClick", clickListener);
      current.removeEventListener("_focus", focusListener);
      current.removeEventListener("_blur", blurListener);
      current.removeEventListener("_keyPress", keypressListener);
    };
  }, [ref, onChange2, onTrailingIconClick, onFocus, onBlur, onKeyPress]);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    "goa-input",
    {
      ref,
      debounce,
      focused,
      type,
      name,
      autocapitalize: autoCapitalize,
      id: id2,
      leadingicon: leadingIcon,
      trailingicon: trailingIcon,
      variant,
      disabled,
      readonly,
      placeholder,
      error,
      testid: testId,
      value,
      width,
      min,
      max,
      step,
      maxlength: maxLength,
      prefix,
      suffix,
      arialabel: ariaLabel,
      mt,
      mr,
      mb: mb2,
      ml: ml2,
      handletrailingiconclick: !!onTrailingIconClick,
      children: [
        leadingContent && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { slot: "leadingContent", children: leadingContent }),
        trailingContent && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { slot: "trailingContent", children: trailingContent })
      ]
    }
  );
}
function GoALink(props) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "goa-link",
    {
      leadingicon: props.leadingIcon,
      trailingicon: props.trailingIcon,
      mt: props.mt,
      mb: props.mb,
      ml: props.ml,
      mr: props.mr,
      children: props.children
    }
  );
}
function GoAMicrositeHeader({
  type,
  version,
  feedbackUrl,
  maxContentWidth,
  feedbackUrlTarget,
  headerUrlTarget,
  testId,
  onFeedbackClick
}) {
  const el2 = reactExports.useRef(null);
  reactExports.useEffect(() => {
    if (!el2.current) {
      return;
    }
    if (!onFeedbackClick) {
      return;
    }
    const current = el2.current;
    const listener = () => {
      onFeedbackClick();
    };
    current.addEventListener("_feedbackClick", listener);
    return () => {
      current.removeEventListener("_feedbackClick", listener);
    };
  }, [el2, onFeedbackClick]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "goa-microsite-header",
    {
      ref: el2,
      type,
      version: typeof version === "string" ? version : void 0,
      feedbackurl: feedbackUrl,
      testid: testId,
      maxcontentwidth: maxContentWidth,
      feedbackurltarget: feedbackUrlTarget,
      headerurltarget: headerUrlTarget,
      hasfeedbackhandler: !!onFeedbackClick,
      children: version && typeof version !== "string" && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { slot: "version", children: version })
    }
  );
}
function GoAModal({
  heading,
  children: children2,
  maxWidth,
  open,
  actions,
  transition,
  type,
  calloutVariant,
  onClose,
  testId,
  role,
  width
}) {
  const el2 = reactExports.useRef(null);
  reactExports.useEffect(() => {
    if (type) {
      console.warn("GoAModal [type] is deprecated.");
    }
  }, [type]);
  reactExports.useEffect(() => {
    maxWidth = width;
  }, [width]);
  reactExports.useEffect(() => {
    if (!el2.current) {
      return;
    }
    const current = el2.current;
    const listener = () => {
      onClose == null ? void 0 : onClose();
    };
    current.addEventListener("_close", listener);
    return () => {
      current.removeEventListener("_close", listener);
    };
  }, [el2, onClose]);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    "goa-modal",
    {
      ref: el2,
      open,
      closable: !!onClose,
      maxwidth: maxWidth,
      transition,
      calloutvariant: calloutVariant,
      testid: testId,
      role,
      children: [
        heading && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { slot: "heading", children: heading }),
        actions && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { slot: "actions", children: actions }),
        children2
      ]
    }
  );
}
const GoANotification = ({
  type = "information",
  ariaLive,
  maxContentWidth,
  children: children2,
  testId,
  onDismiss
}) => {
  const el2 = reactExports.useRef(null);
  reactExports.useEffect(() => {
    if (!el2.current) {
      return;
    }
    const current = el2.current;
    const listener = () => {
      onDismiss == null ? void 0 : onDismiss();
    };
    current.addEventListener("_dismiss", listener);
    return () => {
      current.removeEventListener("_dismiss", listener);
    };
  }, [el2, onDismiss]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "goa-notification",
    {
      ref: el2,
      type,
      testid: testId,
      maxcontentwidth: maxContentWidth,
      arialive: ariaLive,
      children: children2
    }
  );
};
function GoAOneColumnLayout(props) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx("goa-one-column-layout", { children: props.children });
}
function GoAPageBlock(props) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx("goa-page-block", { width: props.width, testid: props.testId, children: props.children });
}
function GoAPages(props) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "goa-pages",
    {
      current: props.current,
      ml: props.ml,
      mr: props.mr,
      mt: props.mt,
      mb: props.mb,
      children: props.children
    }
  );
}
function GoAPopover({
  target,
  testId,
  maxWidth,
  minWidth,
  padded,
  position,
  relative,
  children: children2,
  mt,
  mr,
  mb: mb2,
  ml: ml2
}) {
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    "goa-popover",
    {
      testid: testId,
      maxwidth: maxWidth,
      minwidth: minWidth,
      padded,
      position,
      relative,
      mt,
      mr,
      mb: mb2,
      ml: ml2,
      children: [
        children2,
        target && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { slot: "target", children: target })
      ]
    }
  );
}
function GoARadioItem({
  name,
  label,
  value,
  description,
  maxWidth,
  disabled,
  checked,
  error,
  testId,
  ariaLabel,
  children: children2,
  mt,
  mr,
  mb: mb2,
  ml: ml2
}) {
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    "goa-radio-item",
    {
      name,
      label,
      value,
      description: typeof description === "string" ? description : void 0,
      maxwidth: maxWidth,
      error,
      disabled,
      checked,
      "data-testid": testId,
      arialabel: ariaLabel,
      mt,
      mr,
      mb: mb2,
      ml: ml2,
      children: [
        description && typeof description !== "string" && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { slot: "description", children: description }),
        children2
      ]
    }
  );
}
function GoARadioGroup({
  name,
  value,
  children: children2,
  orientation,
  disabled = false,
  error = false,
  testId,
  ariaLabel,
  mt,
  mr,
  mb: mb2,
  ml: ml2,
  onChange: onChange2
}) {
  const el2 = reactExports.useRef(null);
  reactExports.useEffect(() => {
    if (!el2.current) {
      return;
    }
    const listener = (e) => {
      if (!onChange2) {
        console.warn("Missing onChange function");
        return;
      }
      onChange2(name, e.detail.value);
    };
    const currentEl = el2.current;
    currentEl.addEventListener("_change", listener);
    return () => {
      currentEl.removeEventListener("_change", listener);
    };
  }, [name, onChange2]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "goa-radio-group",
    {
      testid: testId,
      ref: el2,
      name,
      value,
      orientation,
      disabled,
      error,
      arialabel: ariaLabel,
      mt,
      mr,
      mb: mb2,
      ml: ml2,
      children: children2
    }
  );
}
function GoASideMenuGroup(props) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "goa-side-menu-group",
    {
      heading: props.heading,
      testid: props.testId,
      children: props.children
    }
  );
}
function GoASideMenuHeading(props) {
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    "goa-side-menu-heading",
    {
      icon: props.icon,
      testid: props.testId,
      children: [
        props.children,
        props.meta && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { slot: "meta", children: props.meta })
      ]
    }
  );
}
function GoASideMenu(props) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx("goa-side-menu", { testid: props.testId, children: props.children });
}
const GoASkeleton = ({
  maxWidth,
  size,
  lineCount,
  type,
  testId,
  mt,
  mr,
  mb: mb2,
  ml: ml2
}) => {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "goa-skeleton",
    {
      maxwidth: maxWidth,
      linecount: lineCount,
      type,
      size,
      mt,
      mr,
      mb: mb2,
      ml: ml2,
      testid: testId
    }
  );
};
function GoASpacer(props) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "goa-spacer",
    {
      hspacing: props.hSpacing,
      vspacing: props.vSpacing,
      testid: props.testId
    }
  );
}
function GoATable({ onSort, ...props }) {
  const ref = reactExports.useRef(null);
  reactExports.useEffect(() => {
    if (!ref.current) {
      return;
    }
    const current = ref.current;
    const sortListener = (e) => {
      const { sortBy, sortDir } = e.detail;
      onSort == null ? void 0 : onSort(sortBy, sortDir);
    };
    current.addEventListener("_sort", sortListener);
    return () => {
      current.removeEventListener("_sort", sortListener);
    };
  }, [ref, onSort]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "goa-table",
    {
      ref,
      width: props.width,
      stickyheader: false,
      variant: props.variant,
      testid: props.testId,
      mt: props.mt,
      mb: props.mb,
      ml: props.ml,
      mr: props.mr,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx("table", { style: { width: "100%" }, children: props.children })
    }
  );
}
function GoATableSortHeader({
  name,
  direction = "none",
  children: children2
}) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx("goa-table-sort-header", { name, direction, children: children2 });
}
function GoATabs({
  initialTab,
  children: children2,
  testId,
  onChange: onChange2
}) {
  const ref = reactExports.useRef(null);
  reactExports.useEffect(() => {
    const element2 = ref.current;
    if (element2 && onChange2) {
      const handler = (event) => {
        const customEvent = event;
        onChange2(customEvent.detail.tab);
      };
      element2.addEventListener("_change", handler);
      return () => {
        element2.removeEventListener("_change", handler);
      };
    }
  }, [onChange2]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx("goa-tabs", { ref, initialtab: initialTab, testid: testId, children: children2 });
}
function GoATab({ heading, children: children2 }) {
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("goa-tab", { children: [
    heading && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { slot: "heading", children: heading }),
    children2
  ] });
}
function GoAText(props) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "goa-text",
    {
      as: props.as || "div",
      size: props.size,
      maxwidth: props.maxWidth || "65ch",
      mt: props.mt,
      mb: props.mb,
      ml: props.ml,
      mr: props.mr,
      children: props.children
    }
  );
}
function GoATextarea({
  name,
  value,
  placeholder,
  rows,
  disabled,
  countBy,
  maxCount,
  width,
  maxWidth,
  testId,
  error,
  ariaLabel,
  mt,
  mr,
  mb: mb2,
  ml: ml2,
  onChange: onChange2,
  onKeyPress
}) {
  const el2 = reactExports.useRef(null);
  reactExports.useEffect(() => {
    if (!el2.current) {
      return;
    }
    const current = el2.current;
    const listener = (e) => {
      const { name: name2, value: value2 } = e.detail;
      onChange2 == null ? void 0 : onChange2(name2, value2);
    };
    current.addEventListener("_change", listener);
    return () => {
      current.removeEventListener("_change", listener);
    };
  }, [el2, onChange2]);
  reactExports.useEffect(() => {
    if (!el2.current) {
      return;
    }
    const current = el2.current;
    const keypressListener = (e) => {
      const { name: name2, value: value2, key } = e.detail;
      onKeyPress == null ? void 0 : onKeyPress(name2, value2, key);
    };
    current.addEventListener("_keyPress", keypressListener);
    return () => {
      current.removeEventListener("_keyPress", keypressListener);
    };
  }, [el2, onKeyPress]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "goa-textarea",
    {
      ref: el2,
      name,
      placeholder,
      value,
      rows,
      disabled,
      countby: countBy,
      maxcount: maxCount,
      width,
      maxwidth: maxWidth,
      error,
      testid: testId,
      arialabel: ariaLabel,
      mt,
      mr,
      mb: mb2,
      ml: ml2
    }
  );
}
function GoATooltip(props) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "goa-tooltip",
    {
      position: props.position,
      content: props.content,
      halign: props.hAlign,
      testid: props.testId,
      mt: props.mt,
      mr: props.mr,
      mb: props.mb,
      ml: props.ml,
      children: props.children
    }
  );
}
function onChange(tabIndex) {
  console.log("Tab changed to ", tabIndex);
}
function App() {
  const [destructiveModalOpen, setDestructiveModalOpen] = reactExports.useState();
  const [basicModalOpen, setBasicModalOpen] = reactExports.useState();
  const [basicModal2Open, setBasicModal2Open] = reactExports.useState();
  const [basicModal3Open, setBasicModal3Open] = reactExports.useState();
  const [contentModalOpen, setContentModalOpen] = reactExports.useState();
  const [contentModalScrollOpen, setContentModalScrollOpen] = reactExports.useState();
  const [contentModal2Open, setContentModal2Open] = reactExports.useState();
  const [NoHeaderModalOpen, setNoHeaderModalOpen] = reactExports.useState();
  const [step, setStep] = reactExports.useState(-1);
  const [step2, setStep2] = reactExports.useState(-1);
  function radio1(name, value2) {
    console.log("onChange", name, value2);
  }
  function radio2(name, value2) {
    console.log("onChange", name, value2);
  }
  function radio3(name, value2) {
    console.log("onChange", name, value2);
  }
  const popovertarget = /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "secondary", size: "compact", children: "Click me" });
  const [value, setValue] = reactExports.useState("");
  function onChangeDropdown(name, values) {
    setValue(value);
  }
  function onChangeTextArea(name, value2) {
    console.log(value2);
  }
  const [users, setUsers] = reactExports.useState([]);
  const _users = [
    {
      firstName: "Christian",
      lastName: "Batz",
      age: 18
    },
    {
      firstName: "Brain",
      lastName: "Wisozk",
      age: 19
    },
    {
      firstName: "Neha",
      lastName: "Jones",
      age: 23
    },
    {
      firstName: "Tristin",
      lastName: "Buckridge",
      age: 31
    }
  ];
  React.useEffect(() => {
    setUsers(_users);
  }, []);
  function sortData(sortBy, sortDir) {
    const _users2 = [...users];
    _users2.sort((a, b) => {
      return (a[sortBy] > b[sortBy] ? 1 : -1) * sortDir;
    });
    setUsers(_users2);
  }
  const containeractions = /* @__PURE__ */ jsxRuntimeExports.jsxs(GoABlock, { alignment: "center", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "important", content: "Badge text", icon: true }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", size: "compact", leadingIcon: "pencil", children: "Edit" })
  ] });
  const containeractionsinverse = /* @__PURE__ */ jsxRuntimeExports.jsxs(GoABlock, { alignment: "center", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "important", content: "Badge text", icon: true }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", size: "compact", leadingIcon: "pencil", children: "Edit" })
  ] });
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAOneColumnLayout, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("section", { slot: "header", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(GoAMicrositeHeader, { type: "alpha", version: "PLAYGROUND" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(GoAAppHeader, { url: "/", heading: "Tom's playground" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(GoASpacer, { vSpacing: "3xl" }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAAppHeader, { url: "", heading: "Service name", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Support" }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAAppHeaderMenu, { heading: "More", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Cases" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Payments" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Outstanding" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Another" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Secondary item" })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Another" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Another" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Another" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Another" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", className: "interactive", children: "Sign in" })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(
        GoAAppHeader,
        {
          url: "",
          heading: "A header name that spans so far that it goes farther and farther until it hits it's max width or one of the menu items",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Menu item" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Menu item" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Menu item" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAAppHeaderMenu, { heading: "Edna Mode", leadingIcon: "person-circle", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "My profile" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Settings" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", className: "interactive", children: "Sign out" })
            ] })
          ]
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(
        GoAAppHeader,
        {
          url: "#",
          heading: "Find housing",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Support" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAAppHeaderMenu, { heading: "Menu items", leadingIcon: "notifications", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Menu item" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Payments" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Outstanding" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Another" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Another" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Another" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", className: "interactive", children: "Sign in" })
          ]
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(
        GoAAppHeader,
        {
          url: "#",
          heading: "Pay your traffic ticket",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAAppHeaderMenu, { heading: "Tickets", leadingIcon: "ticket", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Cases" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Payments" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Outstanding" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Another" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Another" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", className: "interactive", children: "Sign in" })
          ]
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx(GoAAppHeader, { url: "#", heading: "Service name", children: /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", className: "interactive", children: "Sign in" }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAAppHeader, { url: "", heading: "Service name", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Support" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Another" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Another" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", className: "interactive", children: "Sign in" })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(GoAAppHeader, { url: "", maxContentWidth: "100%" })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("section", { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(Outlet, {}),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAPageBlock, { width: "full", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(GoASpacer, { vSpacing: "2xl" }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(GoATabs, { onChange, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs(GoATab, { heading: "All components", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(GoABlock, { gap: "2xl", direction: "column", mt: "3xl", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-m", mt: "none", mb: "xl", children: "Badge" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoABlock, { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "information", content: "Information", icon: false }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "important", content: "Important", icon: true }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "emergency", content: "Emergency", icon: true }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "success", content: "Success", icon: true })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoABlock, { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "dark", content: "Dark", icon: true }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "midtone", content: "Midtone", icon: true }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "light", content: "Light", icon: true })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoABlock, { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "information", content: "", icon: true }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "important", content: "", icon: true }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "emergency", content: "", icon: true }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "success", content: "", icon: true })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-m", mt: "3xl", mb: "xl", children: "Button" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAButtonGroup, { alignment: "start", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { children: "Primary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "secondary", children: "Secondary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", children: "Tertiary" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAButtonGroup, { alignment: "start", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { leadingIcon: "add", children: "Primary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "secondary", leadingIcon: "add", children: "Secondary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", leadingIcon: "add", children: "Tertiary" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAButtonGroup, { alignment: "start", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { trailingIcon: "add", children: "Primary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "secondary", trailingIcon: "add", children: "Secondary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", trailingIcon: "add", children: "Tertiary" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAButtonGroup, { alignment: "start", gap: "compact", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { size: "compact", children: "Compact primary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "secondary", size: "compact", children: "Compact secondary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", size: "compact", children: "Compact tertiary" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAButtonGroup, { alignment: "start", gap: "compact", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { size: "compact", leadingIcon: "add", children: "Compact primary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "secondary", size: "compact", leadingIcon: "add", children: "Compact secondary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", size: "compact", leadingIcon: "add", children: "Compact tertiary" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAButtonGroup, { alignment: "start", gap: "compact", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { size: "compact", trailingIcon: "add", children: "Compact primary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "secondary", size: "compact", trailingIcon: "add", children: "Compact secondary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", size: "compact", trailingIcon: "add", children: "Compact tertiary" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAButtonGroup, { alignment: "start", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { variant: "destructive", children: "Destructive primary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "secondary", variant: "destructive", children: "Destructive secondary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", variant: "destructive", children: "Destructive tertiary" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAButtonGroup, { alignment: "start", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { variant: "destructive", leadingIcon: "add", children: "Destructive primary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "secondary", variant: "destructive", leadingIcon: "add", children: "Destructive secondary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", variant: "destructive", leadingIcon: "add", children: "Destructive tertiary" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAButtonGroup, { alignment: "start", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { variant: "destructive", trailingIcon: "add", children: "Destructive primary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "secondary", variant: "destructive", trailingIcon: "add", children: "Destructive secondary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", variant: "destructive", trailingIcon: "add", children: "Destructive tertiary" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAButtonGroup, { alignment: "start", gap: "compact", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { size: "compact", variant: "destructive", children: "Compact destructive primary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "secondary", size: "compact", variant: "destructive", children: "Compact destructive secondary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", size: "compact", variant: "destructive", children: "Compact destructive tertiary" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAButtonGroup, { alignment: "start", gap: "compact", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { size: "compact", variant: "destructive", leadingIcon: "add", children: "Compact destructive primary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  GoAButton,
                  {
                    type: "secondary",
                    size: "compact",
                    variant: "destructive",
                    leadingIcon: "add",
                    children: "Compact destructive secondary"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", size: "compact", variant: "destructive", leadingIcon: "add", children: "Compact destructive tertiary" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAButtonGroup, { alignment: "start", gap: "compact", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { size: "compact", variant: "destructive", trailingIcon: "add", children: "Compact destructive primary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  GoAButton,
                  {
                    type: "secondary",
                    size: "compact",
                    variant: "destructive",
                    trailingIcon: "add",
                    children: "Compact destructive secondary"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  GoAButton,
                  {
                    type: "tertiary",
                    size: "compact",
                    variant: "destructive",
                    trailingIcon: "add",
                    children: "Compact destructive tertiary"
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButtonGroup, { alignment: "start", children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "start", children: "Start" }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-s", mt: "l", mb: "none", children: "Disabled" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAButtonGroup, { alignment: "start", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { disabled: true, children: "Primary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "secondary", disabled: true, children: "Secondary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", disabled: true, children: "Tertiary" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAButtonGroup, { alignment: "start", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { leadingIcon: "add", disabled: true, children: "Primary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "secondary", leadingIcon: "add", disabled: true, children: "Secondary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", leadingIcon: "add", disabled: true, children: "Tertiary" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAButtonGroup, { alignment: "start", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { trailingIcon: "add", disabled: true, children: "Primary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "secondary", trailingIcon: "add", disabled: true, children: "Secondary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", trailingIcon: "add", disabled: true, children: "Tertiary" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAButtonGroup, { alignment: "start", gap: "compact", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { size: "compact", disabled: true, children: "Cmpact primary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "secondary", size: "compact", disabled: true, children: "Compact secondary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", size: "compact", disabled: true, children: "Compact tertiary" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAButtonGroup, { alignment: "start", gap: "compact", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { size: "compact", leadingIcon: "add", disabled: true, children: "Compact primary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "secondary", size: "compact", leadingIcon: "add", disabled: true, children: "Compact secondary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", size: "compact", leadingIcon: "add", disabled: true, children: "Compact tertiary" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAButtonGroup, { alignment: "start", gap: "compact", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { size: "compact", trailingIcon: "add", disabled: true, children: "Compact primary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "secondary", size: "compact", trailingIcon: "add", disabled: true, children: "Compact secondary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", size: "compact", trailingIcon: "add", disabled: true, children: "Compact tertiary" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAButtonGroup, { alignment: "start", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { variant: "destructive", disabled: true, children: "Destructive primary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "secondary", variant: "destructive", disabled: true, children: "Destructive secondary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", variant: "destructive", disabled: true, children: "Destructive tertiary" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAButtonGroup, { alignment: "start", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { variant: "destructive", leadingIcon: "add", disabled: true, children: "Destructive primary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "secondary", variant: "destructive", leadingIcon: "add", disabled: true, children: "Destructive secondary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", variant: "destructive", leadingIcon: "add", disabled: true, children: "Destructive tertiary" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAButtonGroup, { alignment: "start", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { variant: "destructive", trailingIcon: "add", disabled: true, children: "Destructive primary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "secondary", variant: "destructive", trailingIcon: "add", disabled: true, children: "Destructive secondary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", variant: "destructive", trailingIcon: "add", disabled: true, children: "Destructive tertiary" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAButtonGroup, { alignment: "start", gap: "compact", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { size: "compact", variant: "destructive", disabled: true, children: "Compact destructive primary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "secondary", size: "compact", variant: "destructive", disabled: true, children: "Compact destructive secondary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", size: "compact", variant: "destructive", disabled: true, children: "Compact destructive tertiary" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAButtonGroup, { alignment: "start", gap: "compact", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { size: "compact", variant: "destructive", leadingIcon: "add", disabled: true, children: "Compact destructive primary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "secondary", size: "compact", variant: "destructive", leadingIcon: "add", disabled: true, children: "Compact destructive secondary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", size: "compact", variant: "destructive", leadingIcon: "add", disabled: true, children: "Compact destructive tertiary" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAButtonGroup, { alignment: "start", gap: "compact", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { size: "compact", variant: "destructive", trailingIcon: "add", disabled: true, children: "Compact destructive primary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "secondary", size: "compact", variant: "destructive", trailingIcon: "add", disabled: true, children: "Compact destructive secondary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", size: "compact", variant: "destructive", trailingIcon: "add", disabled: true, children: "Compact destructive tertiary" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButtonGroup, { alignment: "start", children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "start", disabled: true, children: "Disabled start" }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-m", mt: "3xl", mb: "xl", children: "Button group" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAButtonGroup, { alignment: "start", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { children: "Default" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "secondary", children: "Button" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", children: "Group" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAButtonGroup, { alignment: "start", gap: "compact", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { size: "compact", children: "Compact" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "secondary", size: "compact", children: "Button" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", size: "compact", children: "Group" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-m", mt: "3xl", mb: "s", children: "Checkbox" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoABlock, { gap: "xl", mb: "none", direction: "column", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoACheckbox, { name: "item 1", text: "Single checkbox option - I consent to...", value: "" }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAFormItem, { label: "Basic checkbox list", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoACheckbox,
                    {
                      name: "item 1",
                      text: "Option 1",
                      value: ""
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoACheckbox,
                    {
                      name: "item 2",
                      text: "Option 2",
                      value: ""
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoACheckbox,
                    {
                      name: "item 3",
                      text: "Option 3",
                      value: ""
                    }
                  )
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAFormItem, { label: "Basic checkbox list with helper text", helpText: "Helper text to help answer the question", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoACheckbox,
                    {
                      name: "item 1",
                      text: "Option 1",
                      value: ""
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoACheckbox,
                    {
                      name: "item 2",
                      text: "Option 2",
                      value: ""
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoACheckbox,
                    {
                      name: "item 3",
                      text: "Option 3",
                      value: ""
                    }
                  )
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAFormItem, { label: "Checkbox list with descriptions", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoACheckbox,
                    {
                      name: "item 1",
                      text: "Option 1",
                      value: "",
                      description: "here is a description"
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoACheckbox,
                    {
                      name: "item 2",
                      text: "Option 2",
                      value: "",
                      description: "here is a description"
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoACheckbox,
                    {
                      name: "item 3",
                      text: "Option 3",
                      value: "",
                      description: "here is a description",
                      disabled: true
                    }
                  )
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAFormItem, { label: "Checkbox list with some disabled", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoACheckbox, { name: "item 1", text: "Option 1", value: "" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoACheckbox, { name: "item 2", text: "Option 2", value: "" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoACheckbox, { name: "item 3", text: "Option 3", value: "", disabled: true }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoACheckbox,
                    {
                      name: "item 4",
                      text: "Option 4",
                      value: "",
                      disabled: true,
                      checked: true
                    }
                  )
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAFormItem, { label: "Basic", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoACheckbox,
                    {
                      name: "Option 1",
                      text: "An option that wraps a long time until it goes to the next line that wraps a long time until it goes to the next line",
                      value: ""
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoACheckbox, { name: "Option 2", text: "Option 2", value: "" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAFormItem, { label: "Checkbox list with error", error: "Error message.", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoACheckbox, { name: "item 1", text: "Option 1", value: "", error: true }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoACheckbox, { name: "item 2", text: "Option 2", value: "", error: true }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoACheckbox,
                    {
                      name: "item 3",
                      text: "Option 3",
                      value: "",
                      error: true,
                      disabled: true
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoACheckbox,
                    {
                      name: "item 4",
                      text: "Option 4",
                      value: "",
                      error: true,
                      disabled: true,
                      checked: true
                    }
                  )
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  GoAFormItem,
                  {
                    label: "Checkbox list with error and helper text",
                    error: "Error message.",
                    helpText: "Helper text",
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoACheckbox, { name: "item 1", text: "Option 1", value: "", error: true }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoACheckbox, { name: "item 2", text: "Option 2", value: "", error: true }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoACheckbox, { name: "item 3", text: "Option 3", value: "", error: true, mb: "none" })
                    ]
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  GoAFormItem,
                  {
                    label: "Checkbox list with helper text by default",
                    helpText: "Helper text",
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoACheckbox, { name: "item 1", text: "Option 1", value: "" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoACheckbox, { name: "item 2", text: "Option 2", value: "" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoACheckbox, { name: "item 3", text: "Option 3", value: "" })
                    ]
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  GoAFormItem,
                  {
                    label: "Checkbox list with helper text and margin-bottom=none set on last checkbox item",
                    helpText: "Helper text",
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoACheckbox, { name: "item 1", text: "Option 1", value: "" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoACheckbox, { name: "item 2", text: "Option 2", value: "" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoACheckbox, { name: "item 3", text: "Option 3", value: "", mb: "none" })
                    ]
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-m", mt: "3xl", mb: "xl", children: "Container" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAGrid, { gap: "xl", minChildWidth: "400px", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  GoAContainer,
                  {
                    accent: "thick",
                    heading: "Non-interactive with text",
                    type: "non-interactive",
                    actions: containeractions,
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "success", content: "Badge text", icon: true }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "body-m", mt: "m", mb: "2xl", children: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam at risus et magna interdum vestibulum in at ligula." }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Test", helpText: "This is some help text.", mb: "2xl", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                        GoAInput,
                        {
                          name: "name1",
                          type: "text",
                          value: "",
                          trailingContent: "@gov.ab.ca",
                          width: "20ch"
                        }
                      ) }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { children: "Button" })
                    ]
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAContainer, { accent: "thick", type: "non-interactive", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-l", mb: "l", children: "Non-interactive with accent" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "success", content: "Badge text", icon: true }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "body-m", mt: "m", mb: "2xl", children: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam at risus et magna interdum vestibulum in at ligula." }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Test", helpText: "This is some help text.", mb: "2xl", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoAInput,
                    {
                      name: "name1",
                      type: "text",
                      value: "",
                      trailingContent: "@gov.ab.ca",
                      width: "20ch"
                    }
                  ) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { children: "Button" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAContainer, { accent: "thin", type: "non-interactive", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-l", mb: "l", children: "Non-interactive with accent" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "success", content: "Badge text", icon: true }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "body-m", mt: "m", mb: "2xl", children: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam at risus et magna interdum vestibulum in at ligula." }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Test", helpText: "This is some help text.", mb: "2xl", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoAInput,
                    {
                      name: "name1",
                      type: "text",
                      value: "",
                      trailingContent: "@gov.ab.ca",
                      width: "20ch"
                    }
                  ) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { children: "Button" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAContainer, { type: "non-interactive", accent: "filled", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-l", mb: "l", children: "Non-interactive filled" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "body-m", mb: "2xl", children: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam at risus et magna interdum vestibulum in at ligula." }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Test", helpText: "This is some help text.", mb: "2xl", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoAInput,
                    {
                      name: "name1",
                      type: "text",
                      value: "",
                      trailingContent: "@gov.ab.ca",
                      width: "20ch"
                    }
                  ) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { children: "Button" })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAGrid, { gap: "xl", minChildWidth: "400px", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  GoAContainer,
                  {
                    accent: "thick",
                    heading: "Interactive with text",
                    type: "interactive",
                    actions: containeractionsinverse,
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "success", content: "Badge text", icon: true }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "body-m", mt: "m", mb: "2xl", children: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam at risus et magna interdum vestibulum in at ligula." }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Test", helpText: "This is some help text.", mb: "2xl", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                        GoAInput,
                        {
                          name: "name1",
                          type: "text",
                          value: "",
                          trailingContent: "@gov.ab.ca",
                          width: "20ch"
                        }
                      ) }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { children: "Button" })
                    ]
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAContainer, { accent: "thick", type: "interactive", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-l", mb: "l", children: "Interactive with accent" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "success", content: "Badge text", icon: true }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "body-m", mt: "m", mb: "2xl", children: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam at risus et magna interdum vestibulum in at ligula." }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Test", helpText: "This is some help text.", mb: "2xl", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoAInput,
                    {
                      name: "name1",
                      type: "text",
                      value: "",
                      trailingContent: "@gov.ab.ca",
                      width: "20ch"
                    }
                  ) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { children: "Button" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAContainer, { accent: "thin", type: "interactive", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-l", mb: "l", children: "Interactive with accent" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "success", content: "Badge text", icon: true }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "body-m", mt: "m", mb: "2xl", children: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam at risus et magna interdum vestibulum in at ligula." }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Test", helpText: "This is some help text.", mb: "2xl", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoAInput,
                    {
                      name: "name1",
                      type: "text",
                      value: "",
                      trailingContent: "@gov.ab.ca",
                      width: "20ch"
                    }
                  ) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { children: "Button" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAContainer, { type: "interactive", accent: "filled", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-l", mb: "l", children: "Interactive filled" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "body-m", mb: "2xl", children: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam at risus et magna interdum vestibulum in at ligula." }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Test", helpText: "This is some help text.", mb: "2xl", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoAInput,
                    {
                      name: "name1",
                      type: "text",
                      value: "",
                      trailingContent: "@gov.ab.ca",
                      width: "20ch"
                    }
                  ) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { children: "Button" })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAGrid, { gap: "xl", minChildWidth: "400px", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  GoAContainer,
                  {
                    accent: "thick",
                    heading: "Info with text",
                    type: "info",
                    actions: containeractionsinverse,
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "success", content: "Badge text", icon: true }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "body-m", mt: "m", mb: "2xl", children: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam at risus et magna interdum vestibulum in at ligula." }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Test", helpText: "This is some help text.", mb: "2xl", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                        GoAInput,
                        {
                          name: "name1",
                          type: "text",
                          value: "",
                          trailingContent: "@gov.ab.ca",
                          width: "20ch"
                        }
                      ) }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { children: "Button" })
                    ]
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAContainer, { accent: "thick", type: "info", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-l", mb: "l", children: "Info with accent" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "success", content: "Badge text", icon: true }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "body-m", mt: "m", mb: "2xl", children: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam at risus et magna interdum vestibulum in at ligula." }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Test", helpText: "This is some help text.", mb: "2xl", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoAInput,
                    {
                      name: "name1",
                      type: "text",
                      value: "",
                      trailingContent: "@gov.ab.ca",
                      width: "20ch"
                    }
                  ) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { children: "Button" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAContainer, { accent: "thin", type: "info", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-l", mb: "l", children: "Info with accent" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "success", content: "Badge text", icon: true }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "body-m", mt: "m", mb: "2xl", children: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam at risus et magna interdum vestibulum in at ligula." }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Test", helpText: "This is some help text.", mb: "2xl", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoAInput,
                    {
                      name: "name1",
                      type: "text",
                      value: "",
                      trailingContent: "@gov.ab.ca",
                      width: "20ch"
                    }
                  ) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { children: "Button" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAContainer, { type: "info", accent: "filled", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-l", mb: "l", children: "Info filled" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "body-m", mb: "2xl", children: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam at risus et magna interdum vestibulum in at ligula." }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Test", helpText: "This is some help text.", mb: "2xl", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoAInput,
                    {
                      name: "name1",
                      type: "text",
                      value: "",
                      trailingContent: "@gov.ab.ca",
                      width: "20ch"
                    }
                  ) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { children: "Button" })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAGrid, { gap: "xl", minChildWidth: "400px", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  GoAContainer,
                  {
                    accent: "thick",
                    heading: "Error with text",
                    type: "error",
                    actions: containeractionsinverse,
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "success", content: "Badge text", icon: true }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "body-m", mt: "m", mb: "2xl", children: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam at risus et magna interdum vestibulum in at ligula." }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Test", helpText: "This is some help text.", mb: "2xl", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                        GoAInput,
                        {
                          name: "name1",
                          type: "text",
                          value: "",
                          trailingContent: "@gov.ab.ca",
                          width: "20ch"
                        }
                      ) }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { children: "Button" })
                    ]
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAContainer, { accent: "thick", type: "error", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-l", mb: "l", children: "Error with accent" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "success", content: "Badge text", icon: true }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "body-m", mt: "m", mb: "2xl", children: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam at risus et magna interdum vestibulum in at ligula." }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Test", helpText: "This is some help text.", mb: "2xl", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoAInput,
                    {
                      name: "name1",
                      type: "text",
                      value: "",
                      trailingContent: "@gov.ab.ca",
                      width: "20ch"
                    }
                  ) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { children: "Button" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAContainer, { accent: "thin", type: "error", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-l", mb: "l", children: "Error with accent" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "success", content: "Badge text", icon: true }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "body-m", mt: "m", mb: "2xl", children: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam at risus et magna interdum vestibulum in at ligula." }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Test", helpText: "This is some help text.", mb: "2xl", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoAInput,
                    {
                      name: "name1",
                      type: "text",
                      value: "",
                      trailingContent: "@gov.ab.ca",
                      width: "20ch"
                    }
                  ) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { children: "Button" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAContainer, { type: "error", accent: "filled", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-l", mb: "l", children: "Error filled" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "body-m", mb: "2xl", children: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam at risus et magna interdum vestibulum in at ligula." }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Test", helpText: "This is some help text.", mb: "2xl", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoAInput,
                    {
                      name: "name1",
                      type: "text",
                      value: "",
                      trailingContent: "@gov.ab.ca",
                      width: "20ch"
                    }
                  ) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { children: "Button" })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAGrid, { gap: "xl", minChildWidth: "400px", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  GoAContainer,
                  {
                    accent: "thick",
                    heading: "Success with text",
                    type: "success",
                    actions: containeractionsinverse,
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "success", content: "Badge text", icon: true }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "body-m", mt: "m", mb: "2xl", children: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam at risus et magna interdum vestibulum in at ligula." }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Test", helpText: "This is some help text.", mb: "2xl", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                        GoAInput,
                        {
                          name: "name1",
                          type: "text",
                          value: "",
                          trailingContent: "@gov.ab.ca",
                          width: "20ch"
                        }
                      ) }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { children: "Button" })
                    ]
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAContainer, { accent: "thick", type: "success", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-l", mb: "l", children: "Success with accent" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "success", content: "Badge text", icon: true }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "body-m", mt: "m", mb: "2xl", children: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam at risus et magna interdum vestibulum in at ligula." }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Test", helpText: "This is some help text.", mb: "2xl", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoAInput,
                    {
                      name: "name1",
                      type: "text",
                      value: "",
                      trailingContent: "@gov.ab.ca",
                      width: "20ch"
                    }
                  ) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { children: "Button" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAContainer, { accent: "thin", type: "success", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-l", mb: "l", children: "Success with accent" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "success", content: "Badge text", icon: true }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "body-m", mt: "m", mb: "2xl", children: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam at risus et magna interdum vestibulum in at ligula." }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Test", helpText: "This is some help text.", mb: "2xl", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoAInput,
                    {
                      name: "name1",
                      type: "text",
                      value: "",
                      trailingContent: "@gov.ab.ca",
                      width: "20ch"
                    }
                  ) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { children: "Button" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAContainer, { type: "success", accent: "filled", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-l", mb: "l", children: "Success filled" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "body-m", mb: "2xl", children: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam at risus et magna interdum vestibulum in at ligula." }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Test", helpText: "This is some help text.", mb: "2xl", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoAInput,
                    {
                      name: "name1",
                      type: "text",
                      value: "",
                      trailingContent: "@gov.ab.ca",
                      width: "20ch"
                    }
                  ) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { children: "Button" })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAGrid, { gap: "xl", minChildWidth: "400px", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  GoAContainer,
                  {
                    accent: "thick",
                    heading: "Important with text",
                    type: "important",
                    actions: containeractions,
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "success", content: "Badge text", icon: true }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "body-m", mt: "m", mb: "2xl", children: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam at risus et magna interdum vestibulum in at ligula." }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Test", helpText: "This is some help text.", mb: "2xl", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                        GoAInput,
                        {
                          name: "name1",
                          type: "text",
                          value: "",
                          trailingContent: "@gov.ab.ca",
                          width: "20ch"
                        }
                      ) }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { children: "Button" })
                    ]
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAContainer, { accent: "thick", type: "important", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-l", mb: "l", children: "Important with accent" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "success", content: "Badge text", icon: true }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "body-m", mt: "m", mb: "2xl", children: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam at risus et magna interdum vestibulum in at ligula." }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Test", helpText: "This is some help text.", mb: "2xl", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoAInput,
                    {
                      name: "name1",
                      type: "text",
                      value: "",
                      trailingContent: "@gov.ab.ca",
                      width: "20ch"
                    }
                  ) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { children: "Button" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAContainer, { accent: "thin", type: "important", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-l", mb: "l", children: "Important with accent" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "success", content: "Badge text", icon: true }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "body-m", mt: "m", mb: "2xl", children: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam at risus et magna interdum vestibulum in at ligula." }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Test", helpText: "This is some help text.", mb: "2xl", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoAInput,
                    {
                      name: "name1",
                      type: "text",
                      value: "",
                      trailingContent: "@gov.ab.ca",
                      width: "20ch"
                    }
                  ) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { children: "Button" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAContainer, { type: "important", accent: "filled", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-l", mb: "l", children: "Important filled" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "body-m", mb: "2xl", children: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam at risus et magna interdum vestibulum in at ligula." }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Test", helpText: "This is some help text.", mb: "2xl", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoAInput,
                    {
                      name: "name1",
                      type: "text",
                      value: "",
                      trailingContent: "@gov.ab.ca",
                      width: "20ch"
                    }
                  ) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { children: "Button" })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAGrid, { gap: "xl", minChildWidth: "400px", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  GoAContainer,
                  {
                    accent: "thick",
                    heading: "Non-interactive, compact with text",
                    type: "non-interactive",
                    padding: "compact",
                    actions: containeractions,
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "success", content: "Badge text", icon: true }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "body-m", mt: "m", mb: "2xl", children: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam at risus et magna interdum vestibulum in at ligula." }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Test", helpText: "This is some help text.", mb: "2xl", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                        GoAInput,
                        {
                          name: "name1",
                          type: "text",
                          value: "",
                          trailingContent: "@gov.ab.ca",
                          width: "20ch"
                        }
                      ) }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { children: "Button" })
                    ]
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAContainer, { accent: "thick", type: "non-interactive", padding: "compact", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-l", mb: "l", children: "Non-interactive, compact with accent" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "success", content: "Badge text", icon: true }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "body-m", mt: "m", mb: "2xl", children: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam at risus et magna interdum vestibulum in at ligula." }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Test", helpText: "This is some help text.", mb: "2xl", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoAInput,
                    {
                      name: "name1",
                      type: "text",
                      value: "",
                      trailingContent: "@gov.ab.ca",
                      width: "20ch"
                    }
                  ) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { children: "Button" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAContainer, { accent: "thin", type: "non-interactive", padding: "compact", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-l", mb: "l", children: "Non-interactive, compact with accent" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "success", content: "Badge text", icon: true }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "body-m", mt: "m", mb: "2xl", children: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam at risus et magna interdum vestibulum in at ligula." }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Test", helpText: "This is some help text.", mb: "2xl", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoAInput,
                    {
                      name: "name1",
                      type: "text",
                      value: "",
                      trailingContent: "@gov.ab.ca",
                      width: "20ch"
                    }
                  ) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { children: "Button" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAContainer, { type: "non-interactive", accent: "filled", padding: "compact", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-l", mb: "l", children: "Non-interactive, compact" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "body-m", mb: "2xl", children: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam at risus et magna interdum vestibulum in at ligula." }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Test", helpText: "This is some help text.", mb: "2xl", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoAInput,
                    {
                      name: "name1",
                      type: "text",
                      value: "",
                      trailingContent: "@gov.ab.ca",
                      width: "20ch"
                    }
                  ) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { children: "Button" })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-m", mt: "3xl", mb: "xl", children: "Date picker" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoABlock, { gap: "2xl", mb: "xl", direction: "column", children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Select a date", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoADatePicker,
                {
                  name: "item",
                  value: new Date(2024, 11, 4)
                }
              ) }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-m", mt: "3xl", mb: "xl", children: "Detail" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoABlock, { gap: "xl", mb: "xl", direction: "column", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoADetails, { heading: "Detail Heading that goes for a long time that is longer and maybe wraps as well because it is so long", children: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc vel lacinia metus, sed sodales lectus. Aliquam sed volutpat velit." }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoADetails, { heading: "Detail Heading", children: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc vel lacinia metus, sed sodales lectus. Aliquam sed volutpat velit." })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-m", mt: "3xl", mb: "xl", children: "Divider" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoADivider, {}),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-m", mt: "3xl", mb: "xl", children: "Dropdown" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoABlock, { gap: "2xl", mb: "xl", direction: "column", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Basic dropdown", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(GoADropdown, { placeholder: "—Select—", name: "item", value: "", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoADropdownItem, { value: "red", label: "Red" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoADropdownItem, { value: "green", label: "Green" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoADropdownItem, { value: "blue", label: "Blue" })
                ] }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Basic dropdown width 100%", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(GoADropdown, { placeholder: "—Select—", name: "item", value: "", width: "100%", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoADropdownItem, { value: "red", label: "Red" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoADropdownItem, { value: "green", label: "Green" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoADropdownItem, { value: "blue", label: "Blue" })
                ] }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Dropdown with longest option 100ch", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  GoADropdown,
                  {
                    name: "item",
                    value: "",
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoADropdownItem, { value: "red", label: "100ch: ipsum dolor sit amet, consectetur porttitor. Ipsum dolor sit amet, consectetur porttitor." }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoADropdownItem, { value: "green", label: "abc" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoADropdownItem, { value: "blue", label: "MMM" })
                    ]
                  }
                ) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Dropdown with longest option 3ch", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  GoADropdown,
                  {
                    name: "item",
                    value: "",
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoADropdownItem, { value: "red", label: "000" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoADropdownItem, { value: "green", label: "000" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoADropdownItem, { value: "blue", label: "000" })
                    ]
                  }
                ) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Dropdown with longest option 20ch and leading icon", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(GoADropdown, { name: "item", value: "", leadingIcon: "mail", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoADropdownItem, { value: "red", label: "20ch-000000000000000" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoADropdownItem, { value: "green", label: "acd" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoADropdownItem, { value: "blue", label: "cde" })
                ] }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Filterable dropdown", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(GoADropdown, { name: "item", value: "", filterable: true, children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoADropdownItem, { value: "red", label: "20ch-000000000000000" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoADropdownItem, { value: "green", label: "acd" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoADropdownItem, { value: "blue", label: "cde" })
                ] }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Filterable dropdown with search icon", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(GoADropdown, { name: "item", value: "", filterable: true, leadingIcon: "search", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoADropdownItem, { value: "red", label: "20ch-000000000000000" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoADropdownItem, { value: "green", label: "acd" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoADropdownItem, { value: "blue", label: "cde" })
                ] }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Dropdown with error", error: "Error message.", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(GoADropdown, { name: "item", value: "", error: true, children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoADropdownItem, { value: "red", label: "Red" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoADropdownItem, { value: "green", label: "Green" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoADropdownItem, { value: "blue", label: "Blue" })
                ] }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Disabled dropdown", helpText: "Helper text", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(GoADropdown, { name: "item", value: "", disabled: true, children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoADropdownItem, { value: "red", label: "Red" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoADropdownItem, { value: "green", label: "Green" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoADropdownItem, { value: "blue", label: "Blue" })
                ] }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Native dropdown", helpText: "Helper text", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(GoADropdown, { name: "item", value: "", native: true, onChange: onChangeDropdown, children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoADropdownItem, { value: "red", label: "Red" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoADropdownItem, { value: "green", label: "Green" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoADropdownItem, { value: "blue", label: "Blue" })
                ] }) })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-m", mt: "3xl", mb: "xl", children: "File upload" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoABlock, { gap: "xl", mb: "xl", direction: "column", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Upload a file ", children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFileUploadInput, { maxFileSize: "100MB", variant: "button", onSelectFile: () => {
                } }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Upload a file", children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFileUploadInput, { maxFileSize: "100MB", onSelectFile: () => {
                } }) })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-m", mt: "3xl", mb: "xl", children: "Form item" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoABlock, { gap: "xl", mb: "xl", direction: "column", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  GoAFormItem,
                  {
                    label: "Optional input with error and helper text",
                    helpText: "This is some help text",
                    error: "There is an error.",
                    requirement: "optional",
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAInput, { name: "name1", type: "text", value: "", width: "20ch", error: true })
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  GoAFormItem,
                  {
                    label: "Required input with helper text",
                    helpText: "This is some help text",
                    requirement: "required",
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAInput, { name: "name1", type: "text", value: "", width: "20ch" })
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Input with helper text", helpText: "This is some help text", children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAInput, { name: "name1", type: "text", value: "", width: "20ch" }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Radio with helper text", helpText: "This is some help text", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(GoARadioGroup, { name: "item", value: "1", onChange: onChangeTextArea, children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoARadioItem, { value: "1", label: "Option 1" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoARadioItem, { value: "2", label: "Option 2" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoARadioItem, { value: "3", label: "Option 3" })
                ] }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAFormItem, { label: "Basic checkbox list", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoACheckbox,
                    {
                      name: "item 1",
                      text: "Option 1",
                      value: ""
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoACheckbox,
                    {
                      name: "item 2",
                      text: "Option 2",
                      value: ""
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoACheckbox,
                    {
                      name: "item 3",
                      text: "Option 3",
                      value: ""
                    }
                  )
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Dropdown with helper text", helpText: "This is some help text", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(GoADropdown, { name: "item", value: "", onChange: onChangeDropdown, children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoADropdownItem, { value: "red", label: "Red" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoADropdownItem, { value: "green", label: "Green" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoADropdownItem, { value: "blue", label: "Blue" })
                ] }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  GoAFormItem,
                  {
                    label: "Input with large label",
                    labelSize: "large",
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAInput, { name: "name1", type: "text", value: "", width: "20ch" })
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  GoAFormItem,
                  {
                    label: "Optional input with a large label size",
                    helpText: "This is some help text",
                    labelSize: "large",
                    requirement: "optional",
                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs(GoARadioGroup, { name: "item", value: "1", onChange: onChangeTextArea, children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoARadioItem, { value: "1", label: "Option 1" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoARadioItem, { value: "2", label: "Option 2" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoARadioItem, { value: "3", label: "Option 3" })
                    ] })
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "File uploader", children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFileUploadInput, { maxFileSize: "100MB", variant: "button", onSelectFile: () => {
                } }) })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-m", mt: "3xl", mb: "xl", children: "Form stepper" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoABlock, { gap: "xl", mb: "xl", direction: "column", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAFormStepper, { testId: "foo", onChange: setStep, children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormStep, { text: "Personal details", status: "complete" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormStep, { text: "Employment history", status: "incomplete" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormStep, { text: "References" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormStep, { text: "Review" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAPages, { current: step, mb: "3xl", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: "Page 1 content" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: "Page 2 content" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: "Page 3 content" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: "Page 4 content" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAFormStepper, { testId: "foo", onChange: setStep2, children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormStep, { text: "Personal details", status: "complete" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormStep, { text: "Employment history", status: "incomplete" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormStep, { text: "References" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormStep, { text: "Another" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormStep, { text: "Review" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAPages, { current: step2, mb: "3xl", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: "Page 1 content" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: "Page 2 content" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: "Page 3 content" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: "Page 4 content" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: "Page 5 content" })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-m", mt: "3xl", mb: "xl", children: "Hero Banner" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoABlock, { gap: "xl", mb: "xl", direction: "column", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAHeroBanner, { heading: "This is a heading that wraps to a second line because it's long", children: [
                  "Resources are available to help Alberta entrepreneurs and small businesses start, grow and succeed.",
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAHeroBannerActions, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "start", children: "Call to action" }) })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAHeroBanner, { heading: "This is a short heading", children: [
                  "Resources are available to help Alberta entrepreneurs and small businesses start, grow and succeed.",
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAHeroBannerActions, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "start", children: "Call to action" }) })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  GoAHeroBanner,
                  {
                    heading: "This is a heading that wraps to a second line because it's long",
                    backgroundUrl: "#",
                    children: [
                      "Resources are available to help Alberta entrepreneurs and small businesses start, grow and succeed.",
                      /* @__PURE__ */ jsxRuntimeExports.jsx(GoAHeroBannerActions, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "start", children: "Call to action" }) })
                    ]
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAHeroBanner, { heading: "This is a short heading", backgroundUrl: "#", children: [
                  "Resources are available to help Alberta entrepreneurs and small businesses start, grow and succeed.",
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoAHeroBannerActions, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "start", children: "Call to action" }) })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-m", mt: "3xl", mb: "none", children: "Icon" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-s", mt: "xl", mb: "none", children: "Tshirt sizing" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoABlock, { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoATooltip, { content: "small", children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAIcon, { type: "triangle", size: "small", theme: "outline", opacity: 1 }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoATooltip, { content: "medium", children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAIcon, { type: "triangle", size: "medium", theme: "outline", opacity: 1 }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoATooltip, { content: "large", children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAIcon, { type: "triangle", size: "large", theme: "outline", opacity: 1 }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoATooltip, { content: "xlarge", children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAIcon, { type: "triangle", size: "xlarge", theme: "outline", opacity: 1 }) })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-m", mt: "4xl", mb: "xl", children: "Icon button" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoABlock, { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  GoAIconButton,
                  {
                    variant: "color",
                    size: "medium",
                    icon: "refresh",
                    ariaLabel: "Refresh icon"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  GoAIconButton,
                  {
                    variant: "color",
                    size: "large",
                    icon: "refresh",
                    ariaLabel: "Refresh icon"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  GoAIconButton,
                  {
                    variant: "color",
                    size: "xlarge",
                    icon: "refresh",
                    ariaLabel: "Refresh icon"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  GoAIconButton,
                  {
                    variant: "color",
                    size: "xlarge",
                    icon: "refresh",
                    ariaLabel: "Refresh icon",
                    disabled: true
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { style: { backgroundColor: "#2F2F2F", padding: "8px" }, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(GoABlock, { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  GoAIconButton,
                  {
                    variant: "light",
                    size: "medium",
                    icon: "refresh",
                    ariaLabel: "Refresh icon"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  GoAIconButton,
                  {
                    variant: "light",
                    size: "large",
                    icon: "refresh",
                    ariaLabel: "Refresh icon"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  GoAIconButton,
                  {
                    variant: "light",
                    size: "xlarge",
                    icon: "refresh",
                    ariaLabel: "Refresh icon"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  GoAIconButton,
                  {
                    variant: "light",
                    size: "xlarge",
                    icon: "refresh",
                    ariaLabel: "Refresh icon",
                    disabled: true
                  }
                )
              ] }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoABlock, { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  GoAIconButton,
                  {
                    variant: "dark",
                    size: "medium",
                    icon: "refresh",
                    ariaLabel: "Refresh icon"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  GoAIconButton,
                  {
                    variant: "dark",
                    size: "large",
                    icon: "refresh",
                    ariaLabel: "Refresh icon"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  GoAIconButton,
                  {
                    variant: "dark",
                    size: "xlarge",
                    icon: "refresh",
                    ariaLabel: "Refresh icon"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  GoAIconButton,
                  {
                    variant: "dark",
                    size: "xlarge",
                    icon: "refresh",
                    ariaLabel: "Refresh icon",
                    disabled: true
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoABlock, { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  GoAIconButton,
                  {
                    variant: "destructive",
                    size: "medium",
                    icon: "refresh",
                    ariaLabel: "Refresh icon"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  GoAIconButton,
                  {
                    variant: "destructive",
                    size: "large",
                    icon: "refresh",
                    ariaLabel: "Refresh icon"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  GoAIconButton,
                  {
                    variant: "destructive",
                    size: "xlarge",
                    icon: "refresh",
                    ariaLabel: "Refresh icon"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  GoAIconButton,
                  {
                    variant: "destructive",
                    size: "xlarge",
                    icon: "refresh",
                    ariaLabel: "Refresh icon",
                    disabled: true
                  }
                )
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-m", mt: "4xl", mb: "xl", children: "Input" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(GoABlock, { gap: "2xl", mb: "xl", direction: "column", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Basic text input", children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAInput, { name: "name1", type: "text", value: "", width: "20ch" }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Optional text input", requirement: "optional", children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAInput, { name: "name1", type: "text", value: "", width: "20ch" }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Text input that is 100% width", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAInput,
                {
                  name: "name3",
                  type: "text",
                  value: "",
                  width: "100%"
                }
              ) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Text input that is 50% width", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAInput,
                {
                  name: "name3",
                  type: "text",
                  value: "",
                  width: "50%"
                }
              ) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Text input that has no width defined", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAInput,
                {
                  name: "name3",
                  type: "text",
                  value: ""
                }
              ) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Width is 180ch", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAInput,
                {
                  name: "name1",
                  type: "text",
                  value: "",
                  width: "180ch"
                }
              ) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Text input with leading content", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAInput,
                {
                  name: "name1",
                  type: "text",
                  value: "",
                  leadingContent: "dasd",
                  width: "20ch"
                }
              ) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Text input with trailing content and 100% width", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAInput,
                {
                  name: "name2",
                  type: "text",
                  value: "",
                  width: "100%",
                  trailingContent: "@gov.ab.ca"
                }
              ) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Text input with 2ch width", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAInput,
                {
                  name: "name1",
                  type: "text",
                  value: "",
                  width: "2ch"
                }
              ) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Text input with 2ch width and leading icon", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAInput,
                {
                  name: "name1",
                  type: "text",
                  value: "",
                  width: "2ch",
                  leadingIcon: "bag"
                }
              ) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Text input with 2ch width and trailing icon", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAInput,
                {
                  name: "name1",
                  type: "text",
                  value: "",
                  width: "2ch",
                  trailingIcon: "bag"
                }
              ) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Text input with 2ch width and leading and trailing content", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAInput,
                {
                  name: "name1",
                  type: "text",
                  value: "",
                  width: "2ch",
                  leadingContent: "content",
                  trailingContent: "content"
                }
              ) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Text input with 80ch width and leading and trailing content", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAInput,
                {
                  name: "name1",
                  type: "text",
                  value: "",
                  width: "80ch",
                  leadingContent: "content",
                  trailingContent: "content"
                }
              ) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Text input with 100% width and leading and trailing content", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAInput,
                {
                  name: "name1",
                  type: "text",
                  value: "",
                  width: "100%",
                  leadingContent: "content",
                  trailingContent: "content"
                }
              ) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Text input with helper text", helpText: "This is some help text.", requirement: "optional", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAInput,
                {
                  name: "name1",
                  type: "text",
                  value: "",
                  width: "30ch"
                }
              ) }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoABlock, { gap: "xs", mb: "xl", direction: "row", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  GoAInput,
                  {
                    name: "name1",
                    type: "text",
                    value: "",
                    width: "30ch",
                    leadingIcon: "search"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { children: " Search " })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Text input with 60ch width", helpText: "This is some help text.", children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAInput, { name: "name1", type: "text", value: "", width: "60ch" }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAFormItem,
                {
                  label: "Text input with error",
                  helpText: "This is some help text.",
                  error: "There is an error",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAInput, { name: "name1", type: "text", value: "", width: "20ch", error: true })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Text input with leading and trailing content", error: "There is an error", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAInput,
                {
                  name: "name1",
                  type: "text",
                  value: "",
                  width: "20ch",
                  leadingContent: "dad",
                  trailingContent: "dasd",
                  error: true
                }
              ) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Text input with leading content", error: "There is an error", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAInput,
                {
                  name: "name1",
                  type: "text",
                  value: "",
                  width: "20ch",
                  leadingContent: "dasd",
                  error: true
                }
              ) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAFormItem,
                {
                  label: "Text input with trailing content",
                  helpText: "This is some help text.",
                  error: "There is an error",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoAInput,
                    {
                      name: "name1",
                      type: "text",
                      value: "",
                      width: "20ch",
                      trailingContent: "dasd",
                      error: true
                    }
                  )
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAFormItem,
                {
                  label: "Text input with leading icon",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoAInput,
                    {
                      leadingIcon: "mail",
                      name: "name1",
                      value: "",
                      width: "40ch"
                    }
                  )
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAFormItem,
                {
                  label: "Text input with trailing icon",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoAInput,
                    {
                      trailingIcon: "mail",
                      name: "name1",
                      value: "",
                      width: "40ch"
                    }
                  )
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAFormItem,
                {
                  label: "Text input that's disabled",
                  helpText: "Here is some helper text",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoAInput,
                    {
                      disabled: true,
                      name: "name1",
                      value: "",
                      width: "20ch"
                    }
                  )
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAFormItem,
                {
                  label: "Text input that's disabled with leading icon",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoAInput,
                    {
                      leadingIcon: "accessibility",
                      disabled: true,
                      name: "name1",
                      value: "",
                      width: "20ch"
                    }
                  )
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAFormItem,
                {
                  label: "Text field with placeholder text",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoAInput,
                    {
                      name: "name1",
                      placeholder: "Placeholder text",
                      value: "",
                      width: "20ch"
                    }
                  )
                }
              )
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-m", mt: "4xl", mb: "2xl", children: "Link" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(GoABlock, { gap: "2xl", mb: "xl", direction: "column", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoALink, { leadingIcon: "add", children: "Link with a leading icon" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoALink, { trailingIcon: "open", children: "Link with a trailing icon" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-m", mt: "4xl", mb: "xl", children: "Microsite header" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(GoABlock, { gap: "3xs", mb: "xl", direction: "column", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAMicrositeHeader, { type: "alpha", headerUrlTarget: "blank" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAMicrositeHeader, { type: "beta", headerUrlTarget: "blank" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAMicrositeHeader, { type: "live", headerUrlTarget: "blank" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-s", mt: "l", mb: "s", children: "Feedback link" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAMicrositeHeader,
                {
                  type: "alpha",
                  feedbackUrl: "www.google.com",
                  feedbackUrlTarget: "blank",
                  headerUrlTarget: "blank"
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAMicrositeHeader,
                {
                  type: "beta",
                  feedbackUrl: "www.google.com",
                  feedbackUrlTarget: "blank",
                  headerUrlTarget: "blank"
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAMicrositeHeader,
                {
                  type: "live",
                  feedbackUrl: "www.google.com",
                  feedbackUrlTarget: "blank",
                  headerUrlTarget: "blank"
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-s", mt: "l", mb: "s", children: "Version number" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAMicrositeHeader,
                {
                  type: "alpha",
                  headerUrlTarget: "blank",
                  version: "1.2.3"
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAMicrositeHeader,
                {
                  type: "beta",
                  headerUrlTarget: "blank",
                  version: "1.2.3"
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAMicrositeHeader,
                {
                  type: "live",
                  headerUrlTarget: "blank",
                  version: "1.2.3"
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-s", mt: "l", mb: "s", children: "Feedback link and Version number" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAMicrositeHeader,
                {
                  type: "alpha",
                  feedbackUrl: "www",
                  feedbackUrlTarget: "blank",
                  headerUrlTarget: "blank",
                  version: "1.2.3"
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAMicrositeHeader,
                {
                  type: "beta",
                  feedbackUrl: "www",
                  feedbackUrlTarget: "blank",
                  headerUrlTarget: "blank",
                  version: "1.2.3"
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAMicrositeHeader,
                {
                  type: "live",
                  feedbackUrl: "www",
                  feedbackUrlTarget: "blank",
                  headerUrlTarget: "blank",
                  version: "1.2.3"
                }
              )
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-m", mt: "3xl", mb: "xl", children: "Modal" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(GoABlock, { gap: "xl", mb: "xl", direction: "column", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAButton,
                {
                  type: "tertiary",
                  leadingIcon: "trash",
                  onClick: () => setDestructiveModalOpen(true),
                  children: "Delete my application"
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAModal,
                {
                  heading: "Are you sure you want to delete this application?",
                  open: destructiveModalOpen,
                  role: "alertdialog",
                  calloutVariant: "emergency",
                  actions: /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAButtonGroup, { alignment: "end", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", onClick: () => setDestructiveModalOpen(false), children: "Cancel" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      GoAButton,
                      {
                        type: "primary",
                        variant: "destructive",
                        onClick: () => {
                          setDestructiveModalOpen(false);
                        },
                        children: "Delete application"
                      }
                    )
                  ] }),
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: "This action cannot be undone. " })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", onClick: () => setBasicModalOpen(true), children: "Open basic modal with close" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAModal,
                {
                  heading: "This is a modal with a close button",
                  open: basicModalOpen,
                  role: "alertdialog",
                  onClose: () => setBasicModalOpen(false),
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: "This is meant to be dismissed, the user can click outside of the modal or click the close button in the top right corner." })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", onClick: () => setBasicModal2Open(true), children: "Open basic modal with actions" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAModal,
                {
                  heading: "This is a modal with actions",
                  open: basicModal2Open,
                  role: "alertdialog",
                  actions: /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAButtonGroup, { alignment: "end", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", onClick: () => setBasicModal2Open(false), children: "Cancel" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      GoAButton,
                      {
                        type: "primary",
                        onClick: () => {
                          setBasicModal2Open(false);
                        },
                        children: "Continue"
                      }
                    )
                  ] }),
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: "This is meant to make the user choose an option in order to continue." })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", onClick: () => setContentModalOpen(true), children: "Open modal with lots of content and actions" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAModal,
                {
                  heading: "This is a modal with lots of content",
                  open: contentModalOpen,
                  maxWidth: "1200px",
                  role: "alertdialog",
                  actions: /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAButtonGroup, { alignment: "end", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", onClick: () => setContentModalOpen(false), children: "Cancel" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      GoAButton,
                      {
                        type: "primary",
                        onClick: () => {
                          setContentModalOpen(false);
                        },
                        children: "Continue"
                      }
                    )
                  ] }),
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: "This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll." })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", onClick: () => setContentModal2Open(true), children: "Open modal with lots of content and close button" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAModal,
                {
                  heading: "This is a modal with lots of content",
                  open: contentModal2Open,
                  role: "alertdialog",
                  onClose: () => setContentModal2Open(false),
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: "This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll." })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", onClick: () => setBasicModal3Open(true), children: "Open basic modal with actions and close button" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAModal,
                {
                  heading: "This is a modal with actions and a close button",
                  open: basicModal3Open,
                  role: "alertdialog",
                  onClose: () => setBasicModal3Open(false),
                  actions: /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAButtonGroup, { alignment: "end", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", onClick: () => setBasicModal3Open(false), children: "Cancel" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      GoAButton,
                      {
                        type: "primary",
                        onClick: () => {
                          setBasicModal3Open(false);
                        },
                        children: "Continue"
                      }
                    )
                  ] }),
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: "The use can dismiss the modal by clicking outside of the modal, clicking the close button, or choose an option to continue. " })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", onClick: () => setNoHeaderModalOpen(true), children: "Open modal with no header" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAModal,
                {
                  heading: "",
                  open: NoHeaderModalOpen,
                  role: "alertdialog",
                  actions: /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAButtonGroup, { alignment: "end", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", onClick: () => setNoHeaderModalOpen(false), children: "Cancel" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      GoAButton,
                      {
                        type: "primary",
                        onClick: () => {
                          setNoHeaderModalOpen(false);
                        },
                        children: "Continue"
                      }
                    )
                  ] }),
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: "This is a modal with no header. Choose an option to continue. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse facilisis quam ac massa commodo fringilla. Sed gravida elit urna, vel rhoncus velit ullamcorper vitae. Phasellus ullamcorper enim et leo dignissim, sed dignissim mi varius." })
                }
              )
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-m", mt: "3xl", mb: "2xl", children: "Notification banner" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(GoABlock, { gap: "xl", mb: "4xl", direction: "column", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoANotification, { type: "information", children: "Notification banner message" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoANotification, { type: "information", children: "Notification banner message that is really long and eventually it wraps around the screen because it's so long that it needs to wrap around the screen" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoANotification, { type: "important", children: "Notification banner message" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoANotification, { type: "emergency", children: "Notification banner message" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoANotification, { type: "event", children: "Notification banner message" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-m", mt: "3xl", mb: "2xl", children: "Pagination" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoABlock, { gap: "xl", mb: "4xl", direction: "column" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-m", mt: "3xl", mb: "xl", children: "Popover" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoABlock, { gap: "xl", mb: "4xl", direction: "column", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAPopover, { target: popovertarget, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: "This is a popover" }),
              "It can be used for a number of different contexts."
            ] }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-m", mt: "4xl", mb: "xl", children: "Progress indicator" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(GoABlock, { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoACircularProgress,
                {
                  variant: "inline",
                  size: "small",
                  message: "Loading message...",
                  visible: true
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoACircularProgress,
                {
                  variant: "inline",
                  size: "large",
                  message: "Loading message...",
                  visible: true
                }
              )
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-m", mt: "3xl", mb: "2xl", children: "Radio" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(GoABlock, { gap: "xl", mb: "xl", direction: "column", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Basic radio", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(GoARadioGroup, { name: "item", value: "1", onChange: radio1, children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoARadioItem, { value: "1", label: "Label 1" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoARadioItem, { value: "2", label: "Label 2" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoARadioItem, { value: "3", label: "Label 3" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoARadioItem, { value: "4", label: "Label 4" })
              ] }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Radio with helper text", helpText: "Helper text here", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(GoARadioGroup, { name: "item", value: "1", onChange: radio2, children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoARadioItem, { value: "1", label: "Label 1" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  GoARadioItem,
                  {
                    value: "2",
                    label: "Label 2 that wraps to a long wide thing later Label 2 that wraps to a long wide thing later"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoARadioItem, { value: "3", label: "Label 3" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoARadioItem, { value: "4", label: "Label 4" })
              ] }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Radio with helper text", helpText: "Helper text here", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(GoARadioGroup, { disabled: true, name: "item", value: "1", onChange: radio2, children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoARadioItem, { value: "1", label: "Label 1" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoARadioItem, { value: "2", label: "Label 2" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoARadioItem, { value: "3", label: "Label 3" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoARadioItem, { value: "4", label: "Label 4" })
              ] }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Radio items with descriptions", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(GoARadioGroup, { name: "selectOne", value: "1", onChange: radio3, children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  GoARadioItem,
                  {
                    value: "1",
                    label: "Option one",
                    description: /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { children: [
                      "Help text with a ",
                      /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "link" }),
                      "."
                    ] })
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoARadioItem, { value: "2", label: "Option two", description: "description text" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  GoARadioItem,
                  {
                    value: "3",
                    label: "Option three",
                    description: "another description text"
                  }
                )
              ] }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAFormItem,
                {
                  label: "Radio with descriptions and helper text",
                  helpText: "Helper text here",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsxs(GoARadioGroup, { name: "selectOne", value: "1", onChange: radio3, children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      GoARadioItem,
                      {
                        value: "1",
                        label: "Option one",
                        description: /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { children: [
                          "Help text with a ",
                          /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "link" }),
                          "."
                        ] })
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(GoARadioItem, { value: "2", label: "Option two", description: "description text" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      GoARadioItem,
                      {
                        value: "3",
                        label: "Option three",
                        description: "another description text"
                      }
                    )
                  ] })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAFormItem,
                {
                  label: "Radio with error",
                  helpText: "Helper text here",
                  error: "Error message.",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsxs(GoARadioGroup, { error: true, name: "item", value: "1", onChange: radio2, children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(GoARadioItem, { value: "1", label: "Label 1" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(GoARadioItem, { value: "2", label: "Label 2" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(GoARadioItem, { value: "3", label: "Label 3" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(GoARadioItem, { value: "4", label: "Label 4" })
                  ] })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Horizontal inputs", helpText: "Helper text here", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(GoARadioGroup, { orientation: "horizontal", name: "item", value: "1", onChange: radio2, children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoARadioItem, { value: "1", label: "Label 1" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoARadioItem, { value: "2", label: "Label 2" })
              ] }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAFormItem,
                {
                  label: "Disabled radio with item descriptions",
                  helpText: "Helper text here",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsxs(GoARadioGroup, { disabled: true, name: "item", value: "1", onChange: radio2, children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      GoARadioItem,
                      {
                        value: "1",
                        label: "Label 1",
                        description: "description text"
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(GoARadioItem, { value: "2", label: "Label 2" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      GoARadioItem,
                      {
                        value: "3",
                        label: "Label 3",
                        description: "description text"
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(GoARadioItem, { value: "4", label: "Label 4" })
                  ] })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Disabled radio with error", helpText: "Helper text here", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                GoARadioGroup,
                {
                  disabled: true,
                  error: true,
                  name: "item",
                  value: "1",
                  onChange: radio2,
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      GoARadioItem,
                      {
                        value: "1",
                        label: "Label 1",
                        description: "description text"
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(GoARadioItem, { value: "2", label: "Label 2" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      GoARadioItem,
                      {
                        value: "3",
                        label: "Label 3",
                        description: "description text"
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(GoARadioItem, { value: "4", label: "Label 4" })
                  ]
                }
              ) })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-m", mt: "4xl", mb: "xl", children: "Scroll bar" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(GoABlock, { gap: "xl", mb: "3xl", direction: "column", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", onClick: () => setContentModalScrollOpen(true), children: "Open modal with lots of content to see scroll bar" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAModal,
                {
                  heading: "This is a modal with lots of content",
                  open: contentModalScrollOpen,
                  maxWidth: "400px",
                  role: "alertdialog",
                  actions: /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAButtonGroup, { alignment: "end", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", onClick: () => setContentModalScrollOpen(false), children: "Cancel" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      GoAButton,
                      {
                        type: "primary",
                        onClick: () => {
                          setContentModalScrollOpen(false);
                        },
                        children: "Continue"
                      }
                    )
                  ] }),
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: "This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll. This is a lot of content that make the modal scroll." })
                }
              )
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-m", mt: "3xl", mb: "xl", children: "Side menu" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(GoABlock, { gap: "3xl", mb: "xl", direction: "column", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { style: { maxWidth: "256px" }, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(GoASideMenu, { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Home" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Profile" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "About" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Contact" }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(GoASideMenuGroup, { heading: "Group heading", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Foo" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Bar ndjkasndnsa dsadsajd saj djsad jkas dka djk jks adjksa djkas dkjas djk askjd asjkd sajkd akjsd asd ksa djkas dja ds " })
                ] })
              ] }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoABlock, { gap: "xl", direction: "row", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { style: { maxWidth: "256px" }, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(GoASideMenu, { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoASideMenuHeading, { children: "This is a side menu heading" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "This is a side menu item" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "This is another side menu item" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("goa-spacer", { vspacing: "m" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoASideMenuHeading, { children: "This is another side menu heading" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Side menu item" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Side menu item" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("goa-spacer", { vspacing: "m" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoASideMenuHeading, { children: "Side menu heading" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs(GoASideMenuGroup, { heading: "This is a side menu group", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Foo" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Bar" })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs(GoASideMenuGroup, { heading: "This is a side menu group", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Foo" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Bar" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs(GoASideMenuGroup, { heading: "This is a side menu group", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Foo" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Bar" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs(GoASideMenuGroup, { heading: "This is a side menu group", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Foo" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Bar" })
                      ] })
                    ] })
                  ] })
                ] }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { style: { maxWidth: "256px" }, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(GoASideMenu, { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoASideMenuHeading, { icon: "home", children: "Nav section 1" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Home" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Profile" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("goa-spacer", { vspacing: "m" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoASideMenuHeading, { icon: "pencil", children: "Nav section 2" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "About" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Contact" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("goa-spacer", { vspacing: "m" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoASideMenuHeading, { children: "Nav with sub nav" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs(GoASideMenuGroup, { heading: "Group heading", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Foo" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", children: "Bar ndjkasndnsa dsadsajd saj djsad jkas dka djk jks adjksa djkas dkjas djk askjd asjkd sajkd akjsd asd ksa djkas dja ds" })
                  ] })
                ] }) })
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-m", mt: "3xl", mb: "xl", children: "Table" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(GoABlock, { gap: "2xl", mb: "xl", direction: "column", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoATable, { width: "100%", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("thead", { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("th", { children: "Status" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("th", { children: "Text" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "goa-table-number-header", children: "Number" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("th", { children: "Action" })
                ] }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("tbody", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "information", content: "Badge text", mt: "2xs" }) }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: "Lorem ipsum" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "goa-table-number-column", children: "1234567890" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", size: "compact", children: "Action" }) })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "information", content: "Badge text", mt: "2xs" }) }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: "Lorem ipsum" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "goa-table-number-column", children: "1234567890" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", size: "compact", children: "Action" }) })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "information", content: "Badge text", mt: "2xs" }) }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: "Lorem ipsum" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "goa-table-number-column", children: "1234567890" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", size: "compact", children: "Action" }) })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "information", content: "Badge text", mt: "2xs" }) }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: "Lorem ipsum" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "goa-table-number-column", children: "1234567890" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", size: "compact", children: "Action" }) })
                  ] })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoATable, { width: "100%", variant: "relaxed", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("thead", { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("th", { children: "Status" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("th", { children: "Text" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "goa-table-number-header", children: "Number" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("th", { children: "Action" })
                ] }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("tbody", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "information", content: "Badge text", mt: "2xs" }) }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: "Lorem ipsum" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "goa-table-number-column", children: "1234567890" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", size: "compact", children: "Action" }) })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "information", content: "Badge text", mt: "2xs" }) }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: "Lorem ipsum" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "goa-table-number-column", children: "1234567890" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", size: "compact", children: "Action" }) })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "information", content: "Badge text", mt: "2xs" }) }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: "Lorem ipsum" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "goa-table-number-column", children: "1234567890" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", size: "compact", children: "Action" }) })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "information", content: "Badge text", mt: "2xs" }) }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: "Lorem ipsum" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "goa-table-number-column", children: "1234567890" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", size: "compact", children: "Action" }) })
                  ] })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoATable, { onSort: sortData, children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("thead", { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("th", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoATableSortHeader, { name: "firstName", children: "First name" }) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("th", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoATableSortHeader, { name: "lastName", children: "Last name" }) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("th", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoATableSortHeader, { name: "age", direction: "asc", children: "Age" }) })
                ] }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("tbody", { children: users.map((user) => /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: user.firstName }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: user.lastName }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: user.age })
                ] }, user.firstName)) })
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-m", mt: "3xl", mb: "2xl", children: "Tabs" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(GoABlock, { gap: "xl", mb: "xl", direction: "column", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoATabs, { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoATab, { heading: "Tab 1", children: "Tab 1 content: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua." }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoATab, { heading: "Tab 2 that has a longer name that wraps all thw ay to asdksnadnasda sad sadkasnd asd asd", children: "Tab 2 content: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua." }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoATab, { heading: "Tab 3", children: "Tab 3 content: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua." })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(GoATabs, { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoATab, { heading: "Tab with a tooltip", children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoATooltip, { content: "Tooltip", children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAIcon, { type: "information-circle" }) }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(GoATab, { heading: "Tab", children: "No content" })
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-m", mt: "4xl", mb: "2xl", children: "Text area" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(GoABlock, { gap: "2xl", mb: "xl", direction: "column", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Basic text area", labelSize: "regular", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoATextarea,
                {
                  countBy: "character",
                  width: "60ch",
                  name: "item",
                  value,
                  onChange: onChangeTextArea
                }
              ) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Text area 100% width", labelSize: "regular", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoATextarea,
                {
                  placeholder: "placeholder content",
                  countBy: "character",
                  width: "100%",
                  name: "item",
                  value,
                  onChange: onChangeTextArea
                }
              ) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Text area with a character counter", labelSize: "regular", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoATextarea,
                {
                  countBy: "character",
                  maxCount: 30,
                  width: "60ch",
                  name: "item",
                  value,
                  onChange: onChangeTextArea
                }
              ) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Text area with a word counter", labelSize: "regular", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoATextarea,
                {
                  countBy: "word",
                  maxCount: 30,
                  width: "60ch",
                  name: "item",
                  value,
                  onChange: onChangeTextArea
                }
              ) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAFormItem,
                {
                  label: "Text area with an error",
                  requirement: "optional",
                  helpText: "Here is some helper text",
                  error: "Error message.",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoATextarea,
                    {
                      error: true,
                      rows: 3,
                      name: "item",
                      countBy: "word",
                      maxCount: 100,
                      value,
                      onChange: onChangeTextArea,
                      width: "80ch"
                    }
                  )
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAFormItem,
                {
                  label: "Text area that's disabled",
                  requirement: "optional",
                  helpText: "Here is some helper text",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoATextarea,
                    {
                      disabled: true,
                      rows: 3,
                      name: "item",
                      countBy: "character",
                      maxCount: 100,
                      value,
                      onChange: onChangeTextArea
                    }
                  )
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoAContainer, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAFormItem,
                {
                  label: "Text area in a container",
                  requirement: "optional",
                  helpText: "Here is some helper text",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    GoATextarea,
                    {
                      rows: 6,
                      name: "item",
                      value,
                      onChange: onChangeTextArea,
                      width: "80ch"
                    }
                  )
                }
              ) })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-m", mt: "4xl", mb: "xl", children: "Tooltip" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(GoABlock, { gap: "xl", mb: "3xl", direction: "column", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoATooltip, { content: "Tooltip", children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAIcon, { type: "information-circle" }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoATooltip, { content: "Tooltip that has more content that wraps to a new line", children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAIcon, { type: "information-circle" }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoATooltip, { content: "Tooltip with bottom position", position: "bottom", children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAIcon, { type: "arrow-down" }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoATooltip, { content: "Tooltip with right position", position: "left", children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAIcon, { type: "arrow-forward" }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoATooltip, { content: "Tooltip on an icon button", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoAIconButton,
                {
                  variant: "color",
                  size: "medium",
                  icon: "help-circle",
                  ariaLabel: "Tooltip"
                }
              ) })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASpacer, { vSpacing: "4xl" })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(GoATab, { heading: "Inputs", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(GoABlock, { gap: "2xl", direction: "column", mt: "none", mb: "4xl", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Text", helpText: "Give information that is a small amount of text or numbers.", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              GoAInput,
              {
                name: "name1",
                type: "text",
                value: "",
                width: "20ch"
              }
            ) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Text area", helpText: "Give information that is a large amount of text.", children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoATextarea, { name: "text area", rows: 5, width: "600px", countBy: "character", maxCount: 300 }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Upload", helpText: "Give one or more files.", children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFileUploadInput, { maxFileSize: "100MB", variant: "dragdrop", onSelectFile: (file) => console.log(file) }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Radio", helpText: "Choose one option from a small number of choices.", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(GoARadioGroup, { name: "school", ariaLabel: "are you currently in school?", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoARadioItem, { value: "yes", label: "Yes" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoARadioItem, { value: "no", label: "No" })
            ] }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Dropdown", helpText: "Choose one option from a longer list of choices.", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
              GoADropdown,
              {
                name: "item",
                value: "",
                placeholder: "—Select an option—",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoADropdownItem, { value: "red", label: "20ch 000000000000000" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoADropdownItem, { value: "green", label: "abc" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(GoADropdownItem, { value: "blue", label: "MMM" })
                ]
              }
            ) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Filterable dropdown", helpText: "Choose one option from a very long list of choices.", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(GoADropdown, { name: "item", value: "", filterable: true, leadingIcon: "search", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoADropdownItem, { value: "red", label: "bcdefghijklmnopqrstuvwxyz" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoADropdownItem, { value: "green", label: "abcd" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(GoADropdownItem, { value: "blue", label: "abcde" })
            ] }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAFormItem, { label: "Checkbox list", helpText: "Choose one or more options from a small number of choices.", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoACheckbox,
                {
                  name: "item 1",
                  text: "Option 1",
                  value: ""
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoACheckbox,
                {
                  name: "item 2",
                  text: "Option 2",
                  value: ""
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                GoACheckbox,
                {
                  name: "item 3",
                  text: "Option 3",
                  value: "",
                  mb: "none"
                }
              )
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Checkbox", helpText: "Give consent or agree to something.", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              GoACheckbox,
              {
                name: "item 1",
                text: "I agree to allow the corporation to use my likeness in perpetuity...",
                value: "",
                mb: "none"
              }
            ) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAFormItem, { label: "Date", helpText: "Choose a date from a calendar.", children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoADatePicker, { name: "item", value: new Date(2024, 8, 27) }) })
          ] }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(GoATab, { heading: "Tables", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(GoABlock, { gap: "xl", mb: "xl", direction: "column", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(GoATable, { width: "100%", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("thead", { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("th", { children: "Status" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("th", { children: "Text" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "goa-table-number-header", children: "Number" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("th", { children: "Action" })
              ] }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("tbody", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "information", content: "Badge", mt: "2xs" }) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: "Lorem ipsum" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "goa-table-number-column", children: "1234567890" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", size: "compact", children: "Action" }) })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "information", content: "Badge text", mt: "2xs" }) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: "Text that runs really really really really really really really really really really really really really really really really really really really really really really really really really really really really really really really really really really really really long	" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "goa-table-number-column", children: "1234567890" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", size: "compact", children: "Action" }) })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "information", content: "Badge text", mt: "2xs" }) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: "Lorem ipsum" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "goa-table-number-column", children: "1234567890" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", size: "compact", children: "Action" }) })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "information", content: "Badge text", mt: "2xs" }) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: "Lorem ipsum" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "goa-table-number-column", children: "1234567890" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", size: "compact", children: "Action" }) })
                ] })
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(GoATable, { width: "100%", variant: "relaxed", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("thead", { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("th", { children: "Status" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("th", { children: "Text" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "goa-table-number-header", children: "Number" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("th", { children: "Action" })
              ] }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("tbody", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "information", content: "Badge text", mt: "2xs" }) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: "Text that runs really really really really really really really really really really really really really really really really really really really really really really really really really really really really really really really really really really really really long" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "goa-table-number-column", children: "1234567890" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", size: "compact", children: "Action" }) })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "information", content: "Badge text", mt: "2xs" }) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: "Lorem ipsum" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "goa-table-number-column", children: "1234567890" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", size: "compact", children: "Action" }) })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "information", content: "Badge text", mt: "2xs" }) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: "Lorem ipsum" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "goa-table-number-column", children: "1234567890" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", size: "compact", children: "Action" }) })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoABadge, { type: "information", content: "Badge text", mt: "2xs" }) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: "Lorem ipsum" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "goa-table-number-column", children: "1234567890" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoAButton, { type: "tertiary", size: "compact", children: "Action" }) })
                ] })
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(GoATable, { onSort: sortData, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("thead", { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("th", { children: "First name" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("th", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoATableSortHeader, { name: "lastName", children: "Last name" }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("th", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoATableSortHeader, { name: "age", direction: "asc", children: "Age" }) })
              ] }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("tbody", { children: users.map((user) => /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: user.firstName }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: user.lastName }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("td", { children: user.age })
              ] }, user.firstName)) })
            ] })
          ] }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(GoATab, { heading: "Text", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", className: "back-link", children: "Back link" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { as: "h1", size: "heading-xl", mt: "2xl", mb: "none", children: "Heading extra large as page h1" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-l", mt: "2xl", mb: "none", children: "Heading large" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-m", mt: "2xl", mb: "none", children: "Heading medium" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-s", mt: "2xl", mb: "none", children: "Heading small" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-xs", mt: "2xl", mb: "none", children: "Heading extra small" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "body-l", mt: "xl", mb: "none", children: "Body large Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec rutrum dignissim erat quis iaculis." }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "body-m", mt: "l", mb: "xl", children: "Body medium text, lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec rutrum dignissim erat quis iaculis." }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "body-s", mt: "l", mb: "xl", children: "Body small text, lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec rutrum dignissim erat quis iaculis." }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "body-xs", mt: "l", mb: "xl", children: "Body extra small text, lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec rutrum dignissim erat quis iaculis." }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { as: "h3", size: "heading-l", mt: "3xl", mb: "4xl", children: "Text component with margin top and bottom" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { as: "h3", size: "heading-l", mt: "4xl", children: "Text component with margin top" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { as: "h3", size: "heading-l", mb: "4xl", children: "Text component with margin bottom" })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(GoATab, { heading: "Skeleton loading", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(GoABlock, { gap: "xl", mb: "xl", direction: "column", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-s", mt: "none", mb: "m", children: "Image" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASkeleton, { type: "image", size: 1 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASkeleton, { type: "image", size: 2 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASkeleton, { type: "image", size: 3 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASkeleton, { type: "image", size: 4 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-s", mt: "3xl", mb: "m", children: "Text" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASkeleton, { type: "text", size: 1 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASkeleton, { type: "text", size: 2 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASkeleton, { type: "text", size: 3 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASkeleton, { type: "text", size: 4 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-s", mt: "3xl", mb: "m", children: "Title" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASkeleton, { type: "title", size: 1 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASkeleton, { type: "title", size: 2 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASkeleton, { type: "title", size: 3 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASkeleton, { type: "title", size: 4 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-s", mt: "3xl", mb: "m", children: "Text-small" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASkeleton, { type: "text-small", size: 1 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASkeleton, { type: "text-small", size: 2 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASkeleton, { type: "text-small", size: 3 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASkeleton, { type: "text-small", size: 4 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-s", mt: "3xl", mb: "m", children: "Avatar" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASkeleton, { type: "avatar", size: 1 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASkeleton, { type: "avatar", size: 2 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASkeleton, { type: "avatar", size: 3 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASkeleton, { type: "avatar", size: 4 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-s", mt: "3xl", mb: "m", children: "Header" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASkeleton, { type: "header", size: 1 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASkeleton, { type: "header", size: 2 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASkeleton, { type: "header", size: 3 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASkeleton, { type: "header", size: 4 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-s", mt: "3xl", mb: "m", children: "Paragraph" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASkeleton, { type: "paragraph", size: 1 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASkeleton, { type: "paragraph", size: 2 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASkeleton, { type: "paragraph", size: 3 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASkeleton, { type: "paragraph", size: 4 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-s", mt: "3xl", mb: "m", children: "Thumbnail" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASkeleton, { type: "thumbnail", size: 1 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASkeleton, { type: "thumbnail", size: 2 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASkeleton, { type: "thumbnail", size: 3 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASkeleton, { type: "thumbnail", size: 4 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-s", mt: "3xl", mb: "m", children: "Card" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASkeleton, { type: "card", size: 1, maxWidth: "360px" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASkeleton, { type: "card", size: 2 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASkeleton, { type: "card", size: 3 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASkeleton, { type: "card", size: 4 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoAText, { size: "heading-s", mt: "3xl", mb: "m", children: "Profile" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASkeleton, { type: "profile", size: 1 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASkeleton, { type: "profile", size: 2 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASkeleton, { type: "profile", size: 3 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(GoASkeleton, { type: "profile", size: 4 })
          ] }) })
        ] })
      ] })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("section", { slot: "footer", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAAppFooter, { url: "http://localhost:4200", maxContentWidth: "100%", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAAppFooterNavSection, { maxColumnCount: 1, heading: "Heading", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "g.html", children: "Link 123we" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "h.html", children: "Link 2" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "i.html", children: "Link 3" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "j.html", children: "Other thing" })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAAppFooterNavSection, { maxColumnCount: 1, heading: "Heading", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "g.html", children: "Link 123we" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "h.html", children: "Link 2" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "i.html", children: "Link 3" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "j.html", children: "Other thing" })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAAppFooterMetaSection, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "privacy.html", children: "Meta link" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "disclaimer.html", children: "Meta link" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "accessibility.html", children: "Meta link" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "using-alberta.html", children: "Meta link" })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(GoAAppFooter, { maxContentWidth: "100%", children: " " }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(GoAAppFooter, { maxContentWidth: "100%", url: "http://localhost:4200", children: " " }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(GoAAppFooter, { maxContentWidth: "100%", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAAppFooterMetaSection, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "privacy.html", children: "Meta link" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "disclaimer.html", children: "Meta link" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "accessibility.html", children: "Meta link" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "using-alberta.html", children: "Meta link" })
      ] }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(GoAAppFooter, { maxContentWidth: "100%", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(GoAAppFooterNavSection, { maxColumnCount: 1, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "g.html", children: "Link 1" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "h.html", children: "Link 2" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "i.html", children: "Link 3" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "j.html", children: "Other thing" })
      ] }) })
    ] })
  ] });
}
const root = createRoot(
  document.getElementById("root")
);
root.render(
  /* @__PURE__ */ jsxRuntimeExports.jsx(reactExports.StrictMode, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(BrowserRouter, { basename: "/ui-components", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Routes, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "/", element: /* @__PURE__ */ jsxRuntimeExports.jsx(App, {}) }) }) }) })
);
